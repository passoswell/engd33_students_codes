
comm_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006870  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08006a10  08006a10  00016a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b80  08006b80  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006b80  08006b80  00016b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b88  08006b88  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b88  08006b88  00016b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b8c  08006b8c  00016b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006b90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b58  20000074  08006c04  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bcc  08006c04  00024bcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a50c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003558  00000000  00000000  0003a5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  0003db08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001358  00000000  00000000  0003ef88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003495  00000000  00000000  000402e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000166f4  00000000  00000000  00043775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000970fb  00000000  00000000  00059e69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0f64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000596c  00000000  00000000  000f0fb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080069f8 	.word	0x080069f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080069f8 	.word	0x080069f8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004e8:	4b04      	ldr	r3, [pc, #16]	; (80004fc <__NVIC_GetPriorityGrouping+0x18>)
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	0a1b      	lsrs	r3, r3, #8
 80004ee:	f003 0307 	and.w	r3, r3, #7
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	e000ed00 	.word	0xe000ed00

08000500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800050a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050e:	2b00      	cmp	r3, #0
 8000510:	db0b      	blt.n	800052a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	f003 021f 	and.w	r2, r3, #31
 8000518:	4907      	ldr	r1, [pc, #28]	; (8000538 <__NVIC_EnableIRQ+0x38>)
 800051a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800051e:	095b      	lsrs	r3, r3, #5
 8000520:	2001      	movs	r0, #1
 8000522:	fa00 f202 	lsl.w	r2, r0, r2
 8000526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	e000e100 	.word	0xe000e100

0800053c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	6039      	str	r1, [r7, #0]
 8000546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054c:	2b00      	cmp	r3, #0
 800054e:	db0a      	blt.n	8000566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	b2da      	uxtb	r2, r3
 8000554:	490c      	ldr	r1, [pc, #48]	; (8000588 <__NVIC_SetPriority+0x4c>)
 8000556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055a:	0112      	lsls	r2, r2, #4
 800055c:	b2d2      	uxtb	r2, r2
 800055e:	440b      	add	r3, r1
 8000560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000564:	e00a      	b.n	800057c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	b2da      	uxtb	r2, r3
 800056a:	4908      	ldr	r1, [pc, #32]	; (800058c <__NVIC_SetPriority+0x50>)
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	f003 030f 	and.w	r3, r3, #15
 8000572:	3b04      	subs	r3, #4
 8000574:	0112      	lsls	r2, r2, #4
 8000576:	b2d2      	uxtb	r2, r2
 8000578:	440b      	add	r3, r1
 800057a:	761a      	strb	r2, [r3, #24]
}
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	e000e100 	.word	0xe000e100
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000590:	b480      	push	{r7}
 8000592:	b089      	sub	sp, #36	; 0x24
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	f003 0307 	and.w	r3, r3, #7
 80005a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005a4:	69fb      	ldr	r3, [r7, #28]
 80005a6:	f1c3 0307 	rsb	r3, r3, #7
 80005aa:	2b04      	cmp	r3, #4
 80005ac:	bf28      	it	cs
 80005ae:	2304      	movcs	r3, #4
 80005b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b2:	69fb      	ldr	r3, [r7, #28]
 80005b4:	3304      	adds	r3, #4
 80005b6:	2b06      	cmp	r3, #6
 80005b8:	d902      	bls.n	80005c0 <NVIC_EncodePriority+0x30>
 80005ba:	69fb      	ldr	r3, [r7, #28]
 80005bc:	3b03      	subs	r3, #3
 80005be:	e000      	b.n	80005c2 <NVIC_EncodePriority+0x32>
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c4:	f04f 32ff 	mov.w	r2, #4294967295
 80005c8:	69bb      	ldr	r3, [r7, #24]
 80005ca:	fa02 f303 	lsl.w	r3, r2, r3
 80005ce:	43da      	mvns	r2, r3
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	401a      	ands	r2, r3
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005d8:	f04f 31ff 	mov.w	r1, #4294967295
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	fa01 f303 	lsl.w	r3, r1, r3
 80005e2:	43d9      	mvns	r1, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e8:	4313      	orrs	r3, r2
         );
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3724      	adds	r7, #36	; 0x24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
	...

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fc:	f000 fcc6 	bl	8000f8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000600:	f000 f826 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000604:	f000 f8c0 	bl	8000788 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000608:	f000 f882 	bl	8000710 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  start_rtos();
 800060c:	f000 f93c 	bl	8000888 <start_rtos>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000610:	f002 fffe 	bl	8003610 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 8000614:	4a09      	ldr	r2, [pc, #36]	; (800063c <main+0x44>)
 8000616:	2102      	movs	r1, #2
 8000618:	2010      	movs	r0, #16
 800061a:	f003 f8f0 	bl	80037fe <osMessageQueueNew>
 800061e:	4603      	mov	r3, r0
 8000620:	4a07      	ldr	r2, [pc, #28]	; (8000640 <main+0x48>)
 8000622:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000624:	4a07      	ldr	r2, [pc, #28]	; (8000644 <main+0x4c>)
 8000626:	2100      	movs	r1, #0
 8000628:	4807      	ldr	r0, [pc, #28]	; (8000648 <main+0x50>)
 800062a:	f003 f83b 	bl	80036a4 <osThreadNew>
 800062e:	4603      	mov	r3, r0
 8000630:	4a06      	ldr	r2, [pc, #24]	; (800064c <main+0x54>)
 8000632:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000634:	f003 f810 	bl	8003658 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000638:	e7fe      	b.n	8000638 <main+0x40>
 800063a:	bf00      	nop
 800063c:	08006af0 	.word	0x08006af0
 8000640:	200000d8 	.word	0x200000d8
 8000644:	08006acc 	.word	0x08006acc
 8000648:	08000849 	.word	0x08000849
 800064c:	200000d4 	.word	0x200000d4

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	; 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f006 f900 	bl	8006864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b23      	ldr	r3, [pc, #140]	; (8000708 <SystemClock_Config+0xb8>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a22      	ldr	r2, [pc, #136]	; (8000708 <SystemClock_Config+0xb8>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b20      	ldr	r3, [pc, #128]	; (8000708 <SystemClock_Config+0xb8>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b1d      	ldr	r3, [pc, #116]	; (800070c <SystemClock_Config+0xbc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800069c:	4a1b      	ldr	r2, [pc, #108]	; (800070c <SystemClock_Config+0xbc>)
 800069e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b19      	ldr	r3, [pc, #100]	; (800070c <SystemClock_Config+0xbc>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	2310      	movs	r3, #16
 80006ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006bc:	2300      	movs	r3, #0
 80006be:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 ffb5 	bl	8001634 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006d0:	f000 f8d4 	bl	800087c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d8:	2300      	movs	r3, #0
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 fa18 	bl	8001b24 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006fa:	f000 f8bf 	bl	800087c <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	; 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_USART1_UART_Init+0x6c>)
 8000716:	4a1a      	ldr	r2, [pc, #104]	; (8000780 <MX_USART1_UART_Init+0x70>)
 8000718:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 576000;
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_USART1_UART_Init+0x6c>)
 800071c:	4a19      	ldr	r2, [pc, #100]	; (8000784 <MX_USART1_UART_Init+0x74>)
 800071e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000720:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_USART1_UART_Init+0x6c>)
 8000722:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000726:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_USART1_UART_Init+0x6c>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_USART1_UART_Init+0x6c>)
 8000730:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000734:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_USART1_UART_Init+0x6c>)
 8000738:	220c      	movs	r2, #12
 800073a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_USART1_UART_Init+0x6c>)
 800073e:	2200      	movs	r2, #0
 8000740:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_USART1_UART_Init+0x6c>)
 8000744:	2200      	movs	r2, #0
 8000746:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000748:	480c      	ldr	r0, [pc, #48]	; (800077c <MX_USART1_UART_Init+0x6c>)
 800074a:	f001 fe7d 	bl	8002448 <HAL_UART_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8000754:	f000 f892 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000758:	f7ff fec4 	bl	80004e4 <__NVIC_GetPriorityGrouping>
 800075c:	4603      	mov	r3, r0
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff14 	bl	8000590 <NVIC_EncodePriority>
 8000768:	4603      	mov	r3, r0
 800076a:	4619      	mov	r1, r3
 800076c:	2025      	movs	r0, #37	; 0x25
 800076e:	f7ff fee5 	bl	800053c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8000772:	2025      	movs	r0, #37	; 0x25
 8000774:	f7ff fec4 	bl	8000500 <__NVIC_EnableIRQ>
  /* USER CODE END USART1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000090 	.word	0x20000090
 8000780:	40011000 	.word	0x40011000
 8000784:	0008ca00 	.word	0x0008ca00

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b26      	ldr	r3, [pc, #152]	; (800083c <MX_GPIO_Init+0xb4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a25      	ldr	r2, [pc, #148]	; (800083c <MX_GPIO_Init+0xb4>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b23      	ldr	r3, [pc, #140]	; (800083c <MX_GPIO_Init+0xb4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b1f      	ldr	r3, [pc, #124]	; (800083c <MX_GPIO_Init+0xb4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a1e      	ldr	r2, [pc, #120]	; (800083c <MX_GPIO_Init+0xb4>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b1c      	ldr	r3, [pc, #112]	; (800083c <MX_GPIO_Init+0xb4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <MX_GPIO_Init+0xb4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a17      	ldr	r2, [pc, #92]	; (800083c <MX_GPIO_Init+0xb4>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_GPIO_Init+0xb4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f8:	4811      	ldr	r0, [pc, #68]	; (8000840 <MX_GPIO_Init+0xb8>)
 80007fa:	f000 ff01 	bl	8001600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80007fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000802:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	4619      	mov	r1, r3
 8000816:	480a      	ldr	r0, [pc, #40]	; (8000840 <MX_GPIO_Init+0xb8>)
 8000818:	f000 fd6e 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800081c:	2301      	movs	r3, #1
 800081e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000824:	2301      	movs	r3, #1
 8000826:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	4619      	mov	r1, r3
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_GPIO_Init+0xbc>)
 8000830:	f000 fd62 	bl	80012f8 <HAL_GPIO_Init>

}
 8000834:	bf00      	nop
 8000836:	3720      	adds	r7, #32
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40023800 	.word	0x40023800
 8000840:	40020800 	.word	0x40020800
 8000844:	40020000 	.word	0x40020000

08000848 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000850:	2001      	movs	r0, #1
 8000852:	f002 ffb9 	bl	80037c8 <osDelay>
 8000856:	e7fb      	b.n	8000850 <StartDefaultTask+0x8>

08000858 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a04      	ldr	r2, [pc, #16]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d101      	bne.n	800086e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800086a:	f000 fbb1 	bl	8000fd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40000c00 	.word	0x40000c00

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
}
 8000882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000884:	e7fe      	b.n	8000884 <Error_Handler+0x8>
	...

08000888 <start_rtos>:
TaskHandle_t hLedTask;
QueueHandle_t queueHandler01;
QueueHandle_t queueHandler02;
SemaphoreHandle_t xUart_semaphore;

void start_rtos(void) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af02      	add	r7, sp, #8
	queueHandler01 = xQueueCreate(1, sizeof(uint8_t) * DATA_PACK);
 800088e:	2200      	movs	r2, #0
 8000890:	212d      	movs	r1, #45	; 0x2d
 8000892:	2001      	movs	r0, #1
 8000894:	f003 f9ee 	bl	8003c74 <xQueueGenericCreate>
 8000898:	4603      	mov	r3, r0
 800089a:	4a1d      	ldr	r2, [pc, #116]	; (8000910 <start_rtos+0x88>)
 800089c:	6013      	str	r3, [r2, #0]
	queueHandler02 = xQueueCreate(1, sizeof(uint8_t) * DATA_PACK2);
 800089e:	2200      	movs	r2, #0
 80008a0:	2115      	movs	r1, #21
 80008a2:	2001      	movs	r0, #1
 80008a4:	f003 f9e6 	bl	8003c74 <xQueueGenericCreate>
 80008a8:	4603      	mov	r3, r0
 80008aa:	4a1a      	ldr	r2, [pc, #104]	; (8000914 <start_rtos+0x8c>)
 80008ac:	6013      	str	r3, [r2, #0]

	xUart_semaphore = xSemaphoreCreateMutex();
 80008ae:	2001      	movs	r0, #1
 80008b0:	f003 fa57 	bl	8003d62 <xQueueCreateMutex>
 80008b4:	4603      	mov	r3, r0
 80008b6:	4a18      	ldr	r2, [pc, #96]	; (8000918 <start_rtos+0x90>)
 80008b8:	6013      	str	r3, [r2, #0]

	xTaskCreate(
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <start_rtos+0x94>)
 80008bc:	9301      	str	r3, [sp, #4]
 80008be:	2301      	movs	r3, #1
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	2300      	movs	r3, #0
 80008c4:	2280      	movs	r2, #128	; 0x80
 80008c6:	4916      	ldr	r1, [pc, #88]	; (8000920 <start_rtos+0x98>)
 80008c8:	4816      	ldr	r0, [pc, #88]	; (8000924 <start_rtos+0x9c>)
 80008ca:	f003 ffcc 	bl	8004866 <xTaskCreate>
		NULL,
		1,
		&hGenerateDataTask
	);

	xTaskCreate(
 80008ce:	4b16      	ldr	r3, [pc, #88]	; (8000928 <start_rtos+0xa0>)
 80008d0:	9301      	str	r3, [sp, #4]
 80008d2:	2301      	movs	r3, #1
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	2300      	movs	r3, #0
 80008d8:	2280      	movs	r2, #128	; 0x80
 80008da:	4914      	ldr	r1, [pc, #80]	; (800092c <start_rtos+0xa4>)
 80008dc:	4814      	ldr	r0, [pc, #80]	; (8000930 <start_rtos+0xa8>)
 80008de:	f003 ffc2 	bl	8004866 <xTaskCreate>
		NULL,
		1,
		&hTransmitDataTask
	);

	xTaskCreate(
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <start_rtos+0xac>)
 80008e4:	9301      	str	r3, [sp, #4]
 80008e6:	2301      	movs	r3, #1
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	2300      	movs	r3, #0
 80008ec:	2280      	movs	r2, #128	; 0x80
 80008ee:	4912      	ldr	r1, [pc, #72]	; (8000938 <start_rtos+0xb0>)
 80008f0:	4812      	ldr	r0, [pc, #72]	; (800093c <start_rtos+0xb4>)
 80008f2:	f003 ffb8 	bl	8004866 <xTaskCreate>
		NULL,
		1,
		&hRecieveDataTask
	);

	xTaskCreate(
 80008f6:	4b12      	ldr	r3, [pc, #72]	; (8000940 <start_rtos+0xb8>)
 80008f8:	9301      	str	r3, [sp, #4]
 80008fa:	2301      	movs	r3, #1
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	2300      	movs	r3, #0
 8000900:	2280      	movs	r2, #128	; 0x80
 8000902:	4910      	ldr	r1, [pc, #64]	; (8000944 <start_rtos+0xbc>)
 8000904:	4810      	ldr	r0, [pc, #64]	; (8000948 <start_rtos+0xc0>)
 8000906:	f003 ffae 	bl	8004866 <xTaskCreate>
		NULL,
		1,
		&hLedTask
	);

	vTaskStartScheduler();
 800090a:	f004 f9b9 	bl	8004c80 <vTaskStartScheduler>

	while(1);
 800090e:	e7fe      	b.n	800090e <start_rtos+0x86>
 8000910:	2000015c 	.word	0x2000015c
 8000914:	20000160 	.word	0x20000160
 8000918:	20000164 	.word	0x20000164
 800091c:	2000014c 	.word	0x2000014c
 8000920:	08006a28 	.word	0x08006a28
 8000924:	0800094d 	.word	0x0800094d
 8000928:	20000150 	.word	0x20000150
 800092c:	08006a3c 	.word	0x08006a3c
 8000930:	08000b69 	.word	0x08000b69
 8000934:	20000154 	.word	0x20000154
 8000938:	08006a50 	.word	0x08006a50
 800093c:	08000c1d 	.word	0x08000c1d
 8000940:	20000158 	.word	0x20000158
 8000944:	08006a60 	.word	0x08006a60
 8000948:	08000bd9 	.word	0x08000bd9

0800094c <generateDataTask>:
}

void generateDataTask(void *arg) {
 800094c:	b5b0      	push	{r4, r5, r7, lr}
 800094e:	b094      	sub	sp, #80	; 0x50
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	uint8_t sampleData[DATA_PACK] = {
 8000954:	4b82      	ldr	r3, [pc, #520]	; (8000b60 <generateDataTask+0x214>)
 8000956:	f107 040c 	add.w	r4, r7, #12
 800095a:	461d      	mov	r5, r3
 800095c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800095e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000964:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000968:	c407      	stmia	r4!, {r0, r1, r2}
 800096a:	7023      	strb	r3, [r4, #0]
		'N', '1', 'N', '2', 'N', '3',
		'\r', '\n'
	};

	BaseType_t queueStatus;
	TickType_t xLastWakeTime = xTaskGetTickCount();
 800096c:	f004 faa4 	bl	8004eb8 <xTaskGetTickCount>
 8000970:	4603      	mov	r3, r0
 8000972:	60bb      	str	r3, [r7, #8]
	const TickType_t xFrequency = pdMS_TO_TICKS(MS_TO_TRANSMIT);
 8000974:	2301      	movs	r3, #1
 8000976:	647b      	str	r3, [r7, #68]	; 0x44

	uint8_t packCounter = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t pack10Counter = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t parity = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	while(1) {

		if(packCounter >= 1) {
 800098a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800098e:	2b00      	cmp	r3, #0
 8000990:	d012      	beq.n	80009b8 <generateDataTask+0x6c>
			sampleData[31] += 1;
 8000992:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000996:	3301      	adds	r3, #1
 8000998:	b2db      	uxtb	r3, r3
 800099a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			sampleData[33] += 1;
 800099e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80009a2:	3301      	adds	r3, #1
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			sampleData[35] += 1;
 80009aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009ae:	3301      	adds	r3, #1
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80009b6:	e008      	b.n	80009ca <generateDataTask+0x7e>
		} else {
			sampleData[31] = 'D';
 80009b8:	2344      	movs	r3, #68	; 0x44
 80009ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			sampleData[33] = 'D';
 80009be:	2344      	movs	r3, #68	; 0x44
 80009c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			sampleData[35] = 'D';
 80009c4:	2344      	movs	r3, #68	; 0x44
 80009c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		sampleData[0]  = packCounter;
 80009ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80009ce:	733b      	strb	r3, [r7, #12]
		sampleData[0] |= 0b01000000;
 80009d0:	7b3b      	ldrb	r3, [r7, #12]
 80009d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	733b      	strb	r3, [r7, #12]

		if(packCounter >= 7) {
 80009da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80009de:	2b06      	cmp	r3, #6
 80009e0:	d929      	bls.n	8000a36 <generateDataTask+0xea>
			if(pack10Counter == 0) {
 80009e2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d133      	bne.n	8000a52 <generateDataTask+0x106>
				sampleData[0] |= 0b00010000;
 80009ea:	7b3b      	ldrb	r3, [r7, #12]
 80009ec:	f043 0310 	orr.w	r3, r3, #16
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	733b      	strb	r3, [r7, #12]
				if(packCounter >= 8) {
 80009f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80009f8:	2b07      	cmp	r3, #7
 80009fa:	d912      	bls.n	8000a22 <generateDataTask+0xd6>
					sampleData[37] += 1;
 80009fc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000a00:	3301      	adds	r3, #1
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
					sampleData[39] += 1;
 8000a08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					sampleData[41] += 1;
 8000a14:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000a18:	3301      	adds	r3, #1
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8000a20:	e017      	b.n	8000a52 <generateDataTask+0x106>
				} else {
					sampleData[37] = 'N';
 8000a22:	234e      	movs	r3, #78	; 0x4e
 8000a24:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
					sampleData[39] = 'N';
 8000a28:	234e      	movs	r3, #78	; 0x4e
 8000a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					sampleData[41] = 'N';
 8000a2e:	234e      	movs	r3, #78	; 0x4e
 8000a30:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8000a34:	e00d      	b.n	8000a52 <generateDataTask+0x106>
				}
			}

		} else {
			sampleData[0] &= ~0b00010000;
 8000a36:	7b3b      	ldrb	r3, [r7, #12]
 8000a38:	f023 0310 	bic.w	r3, r3, #16
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	733b      	strb	r3, [r7, #12]
			sampleData[37] = '*';
 8000a40:	232a      	movs	r3, #42	; 0x2a
 8000a42:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
			sampleData[39] = '*';
 8000a46:	232a      	movs	r3, #42	; 0x2a
 8000a48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			sampleData[41] = '*';
 8000a4c:	232a      	movs	r3, #42	; 0x2a
 8000a4e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		// Para incluir tstamp (comentado para fins de teste)
//		TickType_t now = xTaskGetTickCount();
//		sampleData[43] = (uint8_t)((now & 0x00F0) >> 8);
//		sampleData[44] = (uint8_t)((now & 0x000F) >> 0);

		uint8_t p = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		for(int i = 0; i < sizeof(sampleData); i++) p ^= sampleData[i];
 8000a58:	2300      	movs	r3, #0
 8000a5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a5c:	e00c      	b.n	8000a78 <generateDataTask+0x12c>
 8000a5e:	f107 020c 	add.w	r2, r7, #12
 8000a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a64:	4413      	add	r3, r2
 8000a66:	781a      	ldrb	r2, [r3, #0]
 8000a68:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000a6c:	4053      	eors	r3, r2
 8000a6e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8000a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a74:	3301      	adds	r3, #1
 8000a76:	64bb      	str	r3, [r7, #72]	; 0x48
 8000a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a7a:	2b2c      	cmp	r3, #44	; 0x2c
 8000a7c:	d9ef      	bls.n	8000a5e <generateDataTask+0x112>
		p = ((p>>7)^(p>>6)^(p>>5)^(p>>4)^(p>>3)^(p>>2)^(p>>1)^(p>>0)) & 1;
 8000a7e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000a82:	09db      	lsrs	r3, r3, #7
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000a8a:	099b      	lsrs	r3, r3, #6
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	4053      	eors	r3, r2
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000a96:	095b      	lsrs	r3, r3, #5
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	4053      	eors	r3, r2
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000aa2:	091b      	lsrs	r3, r3, #4
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	4053      	eors	r3, r2
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000aae:	08db      	lsrs	r3, r3, #3
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	4053      	eors	r3, r2
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000aba:	089b      	lsrs	r3, r3, #2
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	4053      	eors	r3, r2
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000ac6:	085b      	lsrs	r3, r3, #1
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	4053      	eors	r3, r2
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000ad2:	4053      	eors	r3, r2
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		parity = (p << 5);
 8000ade:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000ae2:	015b      	lsls	r3, r3, #5
 8000ae4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		sampleData[0] |= parity;
 8000ae8:	7b3a      	ldrb	r2, [r7, #12]
 8000aea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000aee:	4313      	orrs	r3, r2
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	733b      	strb	r3, [r7, #12]

		queueStatus = xQueueSend(queueHandler01, (void*)sampleData, xFrequency);
 8000af4:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <generateDataTask+0x218>)
 8000af6:	6818      	ldr	r0, [r3, #0]
 8000af8:	f107 010c 	add.w	r1, r7, #12
 8000afc:	2300      	movs	r3, #0
 8000afe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b00:	f003 f948 	bl	8003d94 <xQueueGenericSend>
 8000b04:	63f8      	str	r0, [r7, #60]	; 0x3c
		if(queueStatus != pdTRUE) xQueueSend(queueHandler01, (void*)sampleData, xFrequency);
 8000b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d007      	beq.n	8000b1c <generateDataTask+0x1d0>
 8000b0c:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <generateDataTask+0x218>)
 8000b0e:	6818      	ldr	r0, [r3, #0]
 8000b10:	f107 010c 	add.w	r1, r7, #12
 8000b14:	2300      	movs	r3, #0
 8000b16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b18:	f003 f93c 	bl	8003d94 <xQueueGenericSend>
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8000b1c:	f107 0308 	add.w	r3, r7, #8
 8000b20:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000b22:	4618      	mov	r0, r3
 8000b24:	f003 fffa 	bl	8004b1c <vTaskDelayUntil>

		packCounter++;
 8000b28:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if(packCounter >= 10) {
 8000b32:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000b36:	2b09      	cmp	r3, #9
 8000b38:	f67f af27 	bls.w	800098a <generateDataTask+0x3e>
			packCounter = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			pack10Counter++;
 8000b42:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000b46:	3301      	adds	r3, #1
 8000b48:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
			if(pack10Counter >= 10) pack10Counter = 0;
 8000b4c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000b50:	2b09      	cmp	r3, #9
 8000b52:	f67f af1a 	bls.w	800098a <generateDataTask+0x3e>
 8000b56:	2300      	movs	r3, #0
 8000b58:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	while(1) {
 8000b5c:	e715      	b.n	800098a <generateDataTask+0x3e>
 8000b5e:	bf00      	nop
 8000b60:	08006a68 	.word	0x08006a68
 8000b64:	2000015c 	.word	0x2000015c

08000b68 <transmitDataTask>:

	}
	vTaskDelete(hGenerateDataTask);
}

void transmitDataTask(void *arg) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b092      	sub	sp, #72	; 0x48
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	uint8_t generatedData [DATA_PACK];
	BaseType_t queueStatus;
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8000b70:	f004 f9a2 	bl	8004eb8 <xTaskGetTickCount>
 8000b74:	4603      	mov	r3, r0
 8000b76:	60fb      	str	r3, [r7, #12]
	const TickType_t xFrequency = pdMS_TO_TICKS(MS_TO_TRANSMIT);
 8000b78:	2301      	movs	r3, #1
 8000b7a:	647b      	str	r3, [r7, #68]	; 0x44

	while(1) {
		queueStatus = xQueueReceive(queueHandler01, (void*)generatedData, xFrequency);
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <transmitDataTask+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f107 0110 	add.w	r1, r7, #16
 8000b84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b86:	4618      	mov	r0, r3
 8000b88:	f003 fa9e 	bl	80040c8 <xQueueReceive>
 8000b8c:	6438      	str	r0, [r7, #64]	; 0x40
		if(queueStatus == pdPASS) {
 8000b8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d114      	bne.n	8000bbe <transmitDataTask+0x56>
			xSemaphoreTake(xUart_semaphore, portMAX_DELAY );
 8000b94:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <transmitDataTask+0x68>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f04f 31ff 	mov.w	r1, #4294967295
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f003 fb73 	bl	8004288 <xQueueSemaphoreTake>
			HAL_UART_Transmit(&huart1, generatedData, DATA_PACK, 1);
 8000ba2:	f107 0110 	add.w	r1, r7, #16
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	222d      	movs	r2, #45	; 0x2d
 8000baa:	480a      	ldr	r0, [pc, #40]	; (8000bd4 <transmitDataTask+0x6c>)
 8000bac:	f001 fc99 	bl	80024e2 <HAL_UART_Transmit>
			xSemaphoreGive(xUart_semaphore);
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <transmitDataTask+0x68>)
 8000bb2:	6818      	ldr	r0, [r3, #0]
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2100      	movs	r1, #0
 8000bba:	f003 f8eb 	bl	8003d94 <xQueueGenericSend>
		}
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f003 ffa9 	bl	8004b1c <vTaskDelayUntil>
		queueStatus = xQueueReceive(queueHandler01, (void*)generatedData, xFrequency);
 8000bca:	e7d7      	b.n	8000b7c <transmitDataTask+0x14>
 8000bcc:	2000015c 	.word	0x2000015c
 8000bd0:	20000164 	.word	0x20000164
 8000bd4:	20000090 	.word	0x20000090

08000bd8 <ledTask>:
	}

	vTaskDelete(hTransmitDataTask);
}

void ledTask(void *arg) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	uint8_t recievedData [DATA_PACK2];
	BaseType_t queueStatus;
	const TickType_t xFrequency = pdMS_TO_TICKS(MS_TO_RECIEVE);
 8000be0:	2301      	movs	r3, #1
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24

	while(1) {
		queueStatus = xQueueReceive(queueHandler02, (void*)recievedData, xFrequency);
 8000be4:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <ledTask+0x3c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f107 0108 	add.w	r1, r7, #8
 8000bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f003 fa6a 	bl	80040c8 <xQueueReceive>
 8000bf4:	6238      	str	r0, [r7, #32]
		uint8_t state = (queueStatus == pdPASS) ? 0 : 1;
 8000bf6:	6a3b      	ldr	r3, [r7, #32]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	bf14      	ite	ne
 8000bfc:	2301      	movne	r3, #1
 8000bfe:	2300      	moveq	r3, #0
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	77fb      	strb	r3, [r7, #31]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, state);
 8000c04:	7ffb      	ldrb	r3, [r7, #31]
 8000c06:	461a      	mov	r2, r3
 8000c08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c0c:	4802      	ldr	r0, [pc, #8]	; (8000c18 <ledTask+0x40>)
 8000c0e:	f000 fcf7 	bl	8001600 <HAL_GPIO_WritePin>
	while(1) {
 8000c12:	e7e7      	b.n	8000be4 <ledTask+0xc>
 8000c14:	20000160 	.word	0x20000160
 8000c18:	40020800 	.word	0x40020800

08000c1c <recieveDataTask>:
	}

	vTaskDelete(hLedTask);
}

void recieveDataTask(void *arg) {
 8000c1c:	b5b0      	push	{r4, r5, r7, lr}
 8000c1e:	b08c      	sub	sp, #48	; 0x30
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	HAL_UART_StateTypeDef UART_status;
	uint8_t Loopback_state = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	const TickType_t xFrequency = pdMS_TO_TICKS(MS_TO_RECIEVE);
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t UART_data_rx [3] = { '*', '*', '*', };
 8000c2e:	4a35      	ldr	r2, [pc, #212]	; (8000d04 <recieveDataTask+0xe8>)
 8000c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c34:	6812      	ldr	r2, [r2, #0]
 8000c36:	4611      	mov	r1, r2
 8000c38:	8019      	strh	r1, [r3, #0]
 8000c3a:	3302      	adds	r3, #2
 8000c3c:	0c12      	lsrs	r2, r2, #16
 8000c3e:	701a      	strb	r2, [r3, #0]
	uint8_t recievedData [DATA_PACK2] = {
 8000c40:	4b31      	ldr	r3, [pc, #196]	; (8000d08 <recieveDataTask+0xec>)
 8000c42:	f107 040c 	add.w	r4, r7, #12
 8000c46:	461d      	mov	r5, r3
 8000c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c4c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c50:	6020      	str	r0, [r4, #0]
 8000c52:	3404      	adds	r4, #4
 8000c54:	7021      	strb	r1, [r4, #0]
		'_', '_', '_', '*', '\r',
		'\n',
	};

	while(1) {
		xSemaphoreTake(xUart_semaphore, xFrequency);
 8000c56:	4b2d      	ldr	r3, [pc, #180]	; (8000d0c <recieveDataTask+0xf0>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f003 fb13 	bl	8004288 <xQueueSemaphoreTake>
		switch(Loopback_state) {
 8000c62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d002      	beq.n	8000c70 <recieveDataTask+0x54>
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d019      	beq.n	8000ca2 <recieveDataTask+0x86>
 8000c6e:	e041      	b.n	8000cf4 <recieveDataTask+0xd8>
			case 0:
				UART_status = HAL_UART_GetState(&huart1);
 8000c70:	4827      	ldr	r0, [pc, #156]	; (8000d10 <recieveDataTask+0xf4>)
 8000c72:	f001 ffb1 	bl	8002bd8 <HAL_UART_GetState>
 8000c76:	4603      	mov	r3, r0
 8000c78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if(UART_status == HAL_UART_STATE_READY || UART_status == HAL_UART_STATE_BUSY_TX) {
 8000c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c80:	2b20      	cmp	r3, #32
 8000c82:	d003      	beq.n	8000c8c <recieveDataTask+0x70>
 8000c84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c88:	2b21      	cmp	r3, #33	; 0x21
 8000c8a:	d130      	bne.n	8000cee <recieveDataTask+0xd2>
					HAL_UART_Receive_IT(&huart1, UART_data_rx, 3);
 8000c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c90:	2203      	movs	r2, #3
 8000c92:	4619      	mov	r1, r3
 8000c94:	481e      	ldr	r0, [pc, #120]	; (8000d10 <recieveDataTask+0xf4>)
 8000c96:	f001 fcb6 	bl	8002606 <HAL_UART_Receive_IT>
					Loopback_state = 1;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				}
			break;
 8000ca0:	e025      	b.n	8000cee <recieveDataTask+0xd2>
			case 1:
				UART_status = HAL_UART_GetState(&huart1);
 8000ca2:	481b      	ldr	r0, [pc, #108]	; (8000d10 <recieveDataTask+0xf4>)
 8000ca4:	f001 ff98 	bl	8002bd8 <HAL_UART_GetState>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if(UART_status == HAL_UART_STATE_READY) {
 8000cae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cb2:	2b20      	cmp	r3, #32
 8000cb4:	d11d      	bne.n	8000cf2 <recieveDataTask+0xd6>
					recievedData[16] = UART_data_rx[0];
 8000cb6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000cba:	773b      	strb	r3, [r7, #28]
					recievedData[17] = UART_data_rx[1];
 8000cbc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000cc0:	777b      	strb	r3, [r7, #29]
					recievedData[18] = UART_data_rx[2];
 8000cc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000cc6:	77bb      	strb	r3, [r7, #30]
					HAL_UART_Transmit(&huart1, recievedData, DATA_PACK2, 1);
 8000cc8:	f107 010c 	add.w	r1, r7, #12
 8000ccc:	2301      	movs	r3, #1
 8000cce:	2215      	movs	r2, #21
 8000cd0:	480f      	ldr	r0, [pc, #60]	; (8000d10 <recieveDataTask+0xf4>)
 8000cd2:	f001 fc06 	bl	80024e2 <HAL_UART_Transmit>
					xQueueSend(queueHandler02, (void*)recievedData, xFrequency);
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <recieveDataTask+0xf8>)
 8000cd8:	6818      	ldr	r0, [r3, #0]
 8000cda:	f107 010c 	add.w	r1, r7, #12
 8000cde:	2300      	movs	r3, #0
 8000ce0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ce2:	f003 f857 	bl	8003d94 <xQueueGenericSend>
					Loopback_state = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				}
			break;
 8000cec:	e001      	b.n	8000cf2 <recieveDataTask+0xd6>
			break;
 8000cee:	bf00      	nop
 8000cf0:	e000      	b.n	8000cf4 <recieveDataTask+0xd8>
			break;
 8000cf2:	bf00      	nop
		}
		xSemaphoreGive(xUart_semaphore);
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <recieveDataTask+0xf0>)
 8000cf6:	6818      	ldr	r0, [r3, #0]
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	f003 f849 	bl	8003d94 <xQueueGenericSend>
		xSemaphoreTake(xUart_semaphore, xFrequency);
 8000d02:	e7a8      	b.n	8000c56 <recieveDataTask+0x3a>
 8000d04:	08006a98 	.word	0x08006a98
 8000d08:	08006a9c 	.word	0x08006a9c
 8000d0c:	20000164 	.word	0x20000164
 8000d10:	20000090 	.word	0x20000090
 8000d14:	20000160 	.word	0x20000160

08000d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_MspInit+0x54>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	4a11      	ldr	r2, [pc, #68]	; (8000d6c <HAL_MspInit+0x54>)
 8000d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <HAL_MspInit+0x54>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	603b      	str	r3, [r7, #0]
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <HAL_MspInit+0x54>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <HAL_MspInit+0x54>)
 8000d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d48:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <HAL_MspInit+0x54>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	210f      	movs	r1, #15
 8000d5a:	f06f 0001 	mvn.w	r0, #1
 8000d5e:	f000 fa0f 	bl	8001180 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023800 	.word	0x40023800

08000d70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	; 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a1d      	ldr	r2, [pc, #116]	; (8000e04 <HAL_UART_MspInit+0x94>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d134      	bne.n	8000dfc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <HAL_UART_MspInit+0x98>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a1b      	ldr	r2, [pc, #108]	; (8000e08 <HAL_UART_MspInit+0x98>)
 8000d9c:	f043 0310 	orr.w	r3, r3, #16
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <HAL_UART_MspInit+0x98>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f003 0310 	and.w	r3, r3, #16
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <HAL_UART_MspInit+0x98>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a14      	ldr	r2, [pc, #80]	; (8000e08 <HAL_UART_MspInit+0x98>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_UART_MspInit+0x98>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ddc:	2307      	movs	r3, #7
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4619      	mov	r1, r3
 8000de6:	4809      	ldr	r0, [pc, #36]	; (8000e0c <HAL_UART_MspInit+0x9c>)
 8000de8:	f000 fa86 	bl	80012f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2105      	movs	r1, #5
 8000df0:	2025      	movs	r0, #37	; 0x25
 8000df2:	f000 f9c5 	bl	8001180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000df6:	2025      	movs	r0, #37	; 0x25
 8000df8:	f000 f9de 	bl	80011b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dfc:	bf00      	nop
 8000dfe:	3728      	adds	r7, #40	; 0x28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40011000 	.word	0x40011000
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020000 	.word	0x40020000

08000e10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08c      	sub	sp, #48	; 0x30
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	2032      	movs	r0, #50	; 0x32
 8000e26:	f000 f9ab 	bl	8001180 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000e2a:	2032      	movs	r0, #50	; 0x32
 8000e2c:	f000 f9c4 	bl	80011b8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <HAL_InitTick+0xa0>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	4a1d      	ldr	r2, [pc, #116]	; (8000eb0 <HAL_InitTick+0xa0>)
 8000e3a:	f043 0308 	orr.w	r3, r3, #8
 8000e3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e40:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <HAL_InitTick+0xa0>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e44:	f003 0308 	and.w	r3, r3, #8
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e4c:	f107 0210 	add.w	r2, r7, #16
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4611      	mov	r1, r2
 8000e56:	4618      	mov	r0, r3
 8000e58:	f001 f844 	bl	8001ee4 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e5c:	f001 f81a 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 8000e60:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e64:	4a13      	ldr	r2, [pc, #76]	; (8000eb4 <HAL_InitTick+0xa4>)
 8000e66:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6a:	0c9b      	lsrs	r3, r3, #18
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <HAL_InitTick+0xa8>)
 8000e72:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <HAL_InitTick+0xac>)
 8000e74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000e76:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <HAL_InitTick+0xa8>)
 8000e78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e7c:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000e7e:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <HAL_InitTick+0xa8>)
 8000e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e82:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <HAL_InitTick+0xa8>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <HAL_InitTick+0xa8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 8000e90:	4809      	ldr	r0, [pc, #36]	; (8000eb8 <HAL_InitTick+0xa8>)
 8000e92:	f001 f859 	bl	8001f48 <HAL_TIM_Base_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d104      	bne.n	8000ea6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 8000e9c:	4806      	ldr	r0, [pc, #24]	; (8000eb8 <HAL_InitTick+0xa8>)
 8000e9e:	f001 f8ad 	bl	8001ffc <HAL_TIM_Base_Start_IT>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e000      	b.n	8000ea8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3730      	adds	r7, #48	; 0x30
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	431bde83 	.word	0x431bde83
 8000eb8:	20000168 	.word	0x20000168
 8000ebc:	40000c00 	.word	0x40000c00

08000ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <NMI_Handler+0x4>

08000ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <HardFault_Handler+0x4>

08000ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <MemManage_Handler+0x4>

08000ed2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <BusFault_Handler+0x4>

08000ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <UsageFault_Handler+0x4>

08000ede <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <USART1_IRQHandler+0x10>)
 8000ef2:	f001 fbb9 	bl	8002668 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000090 	.word	0x20000090

08000f00 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <TIM5_IRQHandler+0x10>)
 8000f06:	f001 f8db 	bl	80020c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000168 	.word	0x20000168

08000f14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <SystemInit+0x20>)
 8000f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f1e:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <SystemInit+0x20>)
 8000f20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f3c:	480d      	ldr	r0, [pc, #52]	; (8000f74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f3e:	490e      	ldr	r1, [pc, #56]	; (8000f78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f40:	4a0e      	ldr	r2, [pc, #56]	; (8000f7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f44:	e002      	b.n	8000f4c <LoopCopyDataInit>

08000f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4a:	3304      	adds	r3, #4

08000f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f50:	d3f9      	bcc.n	8000f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f52:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f54:	4c0b      	ldr	r4, [pc, #44]	; (8000f84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f58:	e001      	b.n	8000f5e <LoopFillZerobss>

08000f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f5c:	3204      	adds	r2, #4

08000f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f60:	d3fb      	bcc.n	8000f5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f62:	f7ff ffd7 	bl	8000f14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f66:	f005 fc49 	bl	80067fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6a:	f7ff fb45 	bl	80005f8 <main>
  bx  lr    
 8000f6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f70:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f78:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000f7c:	08006b90 	.word	0x08006b90
  ldr r2, =_sbss
 8000f80:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000f84:	20004bcc 	.word	0x20004bcc

08000f88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC_IRQHandler>
	...

08000f8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f90:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0d      	ldr	r2, [pc, #52]	; (8000fcc <HAL_Init+0x40>)
 8000f96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <HAL_Init+0x40>)
 8000fa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <HAL_Init+0x40>)
 8000fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f000 f8d8 	bl	800116a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fba:	200f      	movs	r0, #15
 8000fbc:	f7ff ff28 	bl	8000e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc0:	f7ff feaa 	bl	8000d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023c00 	.word	0x40023c00

08000fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	200001b0 	.word	0x200001b0

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	200001b0 	.word	0x200001b0

08001010 <__NVIC_SetPriorityGrouping>:
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800102c:	4013      	ands	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800103c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001042:	4a04      	ldr	r2, [pc, #16]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	60d3      	str	r3, [r2, #12]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_GetPriorityGrouping>:
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <__NVIC_GetPriorityGrouping+0x18>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	f003 0307 	and.w	r3, r3, #7
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_EnableIRQ>:
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	2b00      	cmp	r3, #0
 8001084:	db0b      	blt.n	800109e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	f003 021f 	and.w	r2, r3, #31
 800108c:	4907      	ldr	r1, [pc, #28]	; (80010ac <__NVIC_EnableIRQ+0x38>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	095b      	lsrs	r3, r3, #5
 8001094:	2001      	movs	r0, #1
 8001096:	fa00 f202 	lsl.w	r2, r0, r2
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000e100 	.word	0xe000e100

080010b0 <__NVIC_SetPriority>:
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	6039      	str	r1, [r7, #0]
 80010ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	db0a      	blt.n	80010da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	490c      	ldr	r1, [pc, #48]	; (80010fc <__NVIC_SetPriority+0x4c>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	0112      	lsls	r2, r2, #4
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	440b      	add	r3, r1
 80010d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010d8:	e00a      	b.n	80010f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4908      	ldr	r1, [pc, #32]	; (8001100 <__NVIC_SetPriority+0x50>)
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	3b04      	subs	r3, #4
 80010e8:	0112      	lsls	r2, r2, #4
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	440b      	add	r3, r1
 80010ee:	761a      	strb	r2, [r3, #24]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000e100 	.word	0xe000e100
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <NVIC_EncodePriority>:
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	; 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f1c3 0307 	rsb	r3, r3, #7
 800111e:	2b04      	cmp	r3, #4
 8001120:	bf28      	it	cs
 8001122:	2304      	movcs	r3, #4
 8001124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3304      	adds	r3, #4
 800112a:	2b06      	cmp	r3, #6
 800112c:	d902      	bls.n	8001134 <NVIC_EncodePriority+0x30>
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3b03      	subs	r3, #3
 8001132:	e000      	b.n	8001136 <NVIC_EncodePriority+0x32>
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	f04f 32ff 	mov.w	r2, #4294967295
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43da      	mvns	r2, r3
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	401a      	ands	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800114c:	f04f 31ff 	mov.w	r1, #4294967295
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	fa01 f303 	lsl.w	r3, r1, r3
 8001156:	43d9      	mvns	r1, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115c:	4313      	orrs	r3, r2
}
 800115e:	4618      	mov	r0, r3
 8001160:	3724      	adds	r7, #36	; 0x24
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ff4c 	bl	8001010 <__NVIC_SetPriorityGrouping>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
 800118c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001192:	f7ff ff61 	bl	8001058 <__NVIC_GetPriorityGrouping>
 8001196:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	68b9      	ldr	r1, [r7, #8]
 800119c:	6978      	ldr	r0, [r7, #20]
 800119e:	f7ff ffb1 	bl	8001104 <NVIC_EncodePriority>
 80011a2:	4602      	mov	r2, r0
 80011a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a8:	4611      	mov	r1, r2
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff80 	bl	80010b0 <__NVIC_SetPriority>
}
 80011b0:	bf00      	nop
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff54 	bl	8001074 <__NVIC_EnableIRQ>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011e2:	f7ff ff09 	bl	8000ff8 <HAL_GetTick>
 80011e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d008      	beq.n	8001206 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2280      	movs	r2, #128	; 0x80
 80011f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e052      	b.n	80012ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 0216 	bic.w	r2, r2, #22
 8001214:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	695a      	ldr	r2, [r3, #20]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001224:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	2b00      	cmp	r3, #0
 800122c:	d103      	bne.n	8001236 <HAL_DMA_Abort+0x62>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001232:	2b00      	cmp	r3, #0
 8001234:	d007      	beq.n	8001246 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f022 0208 	bic.w	r2, r2, #8
 8001244:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f022 0201 	bic.w	r2, r2, #1
 8001254:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001256:	e013      	b.n	8001280 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001258:	f7ff fece 	bl	8000ff8 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b05      	cmp	r3, #5
 8001264:	d90c      	bls.n	8001280 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2220      	movs	r2, #32
 800126a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2203      	movs	r2, #3
 8001270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e015      	b.n	80012ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1e4      	bne.n	8001258 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001292:	223f      	movs	r2, #63	; 0x3f
 8001294:	409a      	lsls	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2201      	movs	r2, #1
 800129e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d004      	beq.n	80012d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2280      	movs	r2, #128	; 0x80
 80012cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e00c      	b.n	80012ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2205      	movs	r2, #5
 80012d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 0201 	bic.w	r2, r2, #1
 80012e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b089      	sub	sp, #36	; 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
 8001312:	e159      	b.n	80015c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001314:	2201      	movs	r2, #1
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	429a      	cmp	r2, r3
 800132e:	f040 8148 	bne.w	80015c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	2b01      	cmp	r3, #1
 800133c:	d005      	beq.n	800134a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001346:	2b02      	cmp	r3, #2
 8001348:	d130      	bne.n	80013ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	2203      	movs	r2, #3
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	68da      	ldr	r2, [r3, #12]
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4313      	orrs	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001380:	2201      	movs	r2, #1
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	091b      	lsrs	r3, r3, #4
 8001396:	f003 0201 	and.w	r2, r3, #1
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	2b03      	cmp	r3, #3
 80013b6:	d017      	beq.n	80013e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	2203      	movs	r2, #3
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d123      	bne.n	800143c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	08da      	lsrs	r2, r3, #3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3208      	adds	r2, #8
 80013fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001400:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	220f      	movs	r2, #15
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	691a      	ldr	r2, [r3, #16]
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	08da      	lsrs	r2, r3, #3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3208      	adds	r2, #8
 8001436:	69b9      	ldr	r1, [r7, #24]
 8001438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	2203      	movs	r2, #3
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0203 	and.w	r2, r3, #3
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001478:	2b00      	cmp	r3, #0
 800147a:	f000 80a2 	beq.w	80015c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b57      	ldr	r3, [pc, #348]	; (80015e0 <HAL_GPIO_Init+0x2e8>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	4a56      	ldr	r2, [pc, #344]	; (80015e0 <HAL_GPIO_Init+0x2e8>)
 8001488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148c:	6453      	str	r3, [r2, #68]	; 0x44
 800148e:	4b54      	ldr	r3, [pc, #336]	; (80015e0 <HAL_GPIO_Init+0x2e8>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800149a:	4a52      	ldr	r2, [pc, #328]	; (80015e4 <HAL_GPIO_Init+0x2ec>)
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	089b      	lsrs	r3, r3, #2
 80014a0:	3302      	adds	r3, #2
 80014a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	220f      	movs	r2, #15
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a49      	ldr	r2, [pc, #292]	; (80015e8 <HAL_GPIO_Init+0x2f0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d019      	beq.n	80014fa <HAL_GPIO_Init+0x202>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a48      	ldr	r2, [pc, #288]	; (80015ec <HAL_GPIO_Init+0x2f4>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d013      	beq.n	80014f6 <HAL_GPIO_Init+0x1fe>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a47      	ldr	r2, [pc, #284]	; (80015f0 <HAL_GPIO_Init+0x2f8>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d00d      	beq.n	80014f2 <HAL_GPIO_Init+0x1fa>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a46      	ldr	r2, [pc, #280]	; (80015f4 <HAL_GPIO_Init+0x2fc>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d007      	beq.n	80014ee <HAL_GPIO_Init+0x1f6>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a45      	ldr	r2, [pc, #276]	; (80015f8 <HAL_GPIO_Init+0x300>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d101      	bne.n	80014ea <HAL_GPIO_Init+0x1f2>
 80014e6:	2304      	movs	r3, #4
 80014e8:	e008      	b.n	80014fc <HAL_GPIO_Init+0x204>
 80014ea:	2307      	movs	r3, #7
 80014ec:	e006      	b.n	80014fc <HAL_GPIO_Init+0x204>
 80014ee:	2303      	movs	r3, #3
 80014f0:	e004      	b.n	80014fc <HAL_GPIO_Init+0x204>
 80014f2:	2302      	movs	r3, #2
 80014f4:	e002      	b.n	80014fc <HAL_GPIO_Init+0x204>
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <HAL_GPIO_Init+0x204>
 80014fa:	2300      	movs	r3, #0
 80014fc:	69fa      	ldr	r2, [r7, #28]
 80014fe:	f002 0203 	and.w	r2, r2, #3
 8001502:	0092      	lsls	r2, r2, #2
 8001504:	4093      	lsls	r3, r2
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800150c:	4935      	ldr	r1, [pc, #212]	; (80015e4 <HAL_GPIO_Init+0x2ec>)
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	089b      	lsrs	r3, r3, #2
 8001512:	3302      	adds	r3, #2
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800151a:	4b38      	ldr	r3, [pc, #224]	; (80015fc <HAL_GPIO_Init+0x304>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800153e:	4a2f      	ldr	r2, [pc, #188]	; (80015fc <HAL_GPIO_Init+0x304>)
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001544:	4b2d      	ldr	r3, [pc, #180]	; (80015fc <HAL_GPIO_Init+0x304>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001568:	4a24      	ldr	r2, [pc, #144]	; (80015fc <HAL_GPIO_Init+0x304>)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800156e:	4b23      	ldr	r3, [pc, #140]	; (80015fc <HAL_GPIO_Init+0x304>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	4313      	orrs	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001592:	4a1a      	ldr	r2, [pc, #104]	; (80015fc <HAL_GPIO_Init+0x304>)
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001598:	4b18      	ldr	r3, [pc, #96]	; (80015fc <HAL_GPIO_Init+0x304>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015bc:	4a0f      	ldr	r2, [pc, #60]	; (80015fc <HAL_GPIO_Init+0x304>)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3301      	adds	r3, #1
 80015c6:	61fb      	str	r3, [r7, #28]
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	2b0f      	cmp	r3, #15
 80015cc:	f67f aea2 	bls.w	8001314 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	3724      	adds	r7, #36	; 0x24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40013800 	.word	0x40013800
 80015e8:	40020000 	.word	0x40020000
 80015ec:	40020400 	.word	0x40020400
 80015f0:	40020800 	.word	0x40020800
 80015f4:	40020c00 	.word	0x40020c00
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40013c00 	.word	0x40013c00

08001600 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	807b      	strh	r3, [r7, #2]
 800160c:	4613      	mov	r3, r2
 800160e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001610:	787b      	ldrb	r3, [r7, #1]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001616:	887a      	ldrh	r2, [r7, #2]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800161c:	e003      	b.n	8001626 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800161e:	887b      	ldrh	r3, [r7, #2]
 8001620:	041a      	lsls	r2, r3, #16
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	619a      	str	r2, [r3, #24]
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e267      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d075      	beq.n	800173e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001652:	4b88      	ldr	r3, [pc, #544]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	2b04      	cmp	r3, #4
 800165c:	d00c      	beq.n	8001678 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800165e:	4b85      	ldr	r3, [pc, #532]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001666:	2b08      	cmp	r3, #8
 8001668:	d112      	bne.n	8001690 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800166a:	4b82      	ldr	r3, [pc, #520]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001672:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001676:	d10b      	bne.n	8001690 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001678:	4b7e      	ldr	r3, [pc, #504]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d05b      	beq.n	800173c <HAL_RCC_OscConfig+0x108>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d157      	bne.n	800173c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e242      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001698:	d106      	bne.n	80016a8 <HAL_RCC_OscConfig+0x74>
 800169a:	4b76      	ldr	r3, [pc, #472]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a75      	ldr	r2, [pc, #468]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 80016a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	e01d      	b.n	80016e4 <HAL_RCC_OscConfig+0xb0>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016b0:	d10c      	bne.n	80016cc <HAL_RCC_OscConfig+0x98>
 80016b2:	4b70      	ldr	r3, [pc, #448]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a6f      	ldr	r2, [pc, #444]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 80016b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	4b6d      	ldr	r3, [pc, #436]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a6c      	ldr	r2, [pc, #432]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 80016c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	e00b      	b.n	80016e4 <HAL_RCC_OscConfig+0xb0>
 80016cc:	4b69      	ldr	r3, [pc, #420]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a68      	ldr	r2, [pc, #416]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 80016d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	4b66      	ldr	r3, [pc, #408]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a65      	ldr	r2, [pc, #404]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 80016de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d013      	beq.n	8001714 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ec:	f7ff fc84 	bl	8000ff8 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016f4:	f7ff fc80 	bl	8000ff8 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b64      	cmp	r3, #100	; 0x64
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e207      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001706:	4b5b      	ldr	r3, [pc, #364]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCC_OscConfig+0xc0>
 8001712:	e014      	b.n	800173e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001714:	f7ff fc70 	bl	8000ff8 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800171c:	f7ff fc6c 	bl	8000ff8 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b64      	cmp	r3, #100	; 0x64
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e1f3      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172e:	4b51      	ldr	r3, [pc, #324]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0xe8>
 800173a:	e000      	b.n	800173e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d063      	beq.n	8001812 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800174a:	4b4a      	ldr	r3, [pc, #296]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00b      	beq.n	800176e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001756:	4b47      	ldr	r3, [pc, #284]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800175e:	2b08      	cmp	r3, #8
 8001760:	d11c      	bne.n	800179c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001762:	4b44      	ldr	r3, [pc, #272]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d116      	bne.n	800179c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176e:	4b41      	ldr	r3, [pc, #260]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d005      	beq.n	8001786 <HAL_RCC_OscConfig+0x152>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d001      	beq.n	8001786 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e1c7      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001786:	4b3b      	ldr	r3, [pc, #236]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	4937      	ldr	r1, [pc, #220]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 8001796:	4313      	orrs	r3, r2
 8001798:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179a:	e03a      	b.n	8001812 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d020      	beq.n	80017e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017a4:	4b34      	ldr	r3, [pc, #208]	; (8001878 <HAL_RCC_OscConfig+0x244>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017aa:	f7ff fc25 	bl	8000ff8 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017b2:	f7ff fc21 	bl	8000ff8 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e1a8      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c4:	4b2b      	ldr	r3, [pc, #172]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f0      	beq.n	80017b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d0:	4b28      	ldr	r3, [pc, #160]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	4925      	ldr	r1, [pc, #148]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	600b      	str	r3, [r1, #0]
 80017e4:	e015      	b.n	8001812 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017e6:	4b24      	ldr	r3, [pc, #144]	; (8001878 <HAL_RCC_OscConfig+0x244>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ec:	f7ff fc04 	bl	8000ff8 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f4:	f7ff fc00 	bl	8000ff8 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e187      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001806:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	2b00      	cmp	r3, #0
 800181c:	d036      	beq.n	800188c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d016      	beq.n	8001854 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <HAL_RCC_OscConfig+0x248>)
 8001828:	2201      	movs	r2, #1
 800182a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182c:	f7ff fbe4 	bl	8000ff8 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001834:	f7ff fbe0 	bl	8000ff8 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e167      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001846:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <HAL_RCC_OscConfig+0x240>)
 8001848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0x200>
 8001852:	e01b      	b.n	800188c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001854:	4b09      	ldr	r3, [pc, #36]	; (800187c <HAL_RCC_OscConfig+0x248>)
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185a:	f7ff fbcd 	bl	8000ff8 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001860:	e00e      	b.n	8001880 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001862:	f7ff fbc9 	bl	8000ff8 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d907      	bls.n	8001880 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e150      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
 8001874:	40023800 	.word	0x40023800
 8001878:	42470000 	.word	0x42470000
 800187c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001880:	4b88      	ldr	r3, [pc, #544]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 8001882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1ea      	bne.n	8001862 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 8097 	beq.w	80019c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800189a:	2300      	movs	r3, #0
 800189c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800189e:	4b81      	ldr	r3, [pc, #516]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10f      	bne.n	80018ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	4b7d      	ldr	r3, [pc, #500]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	4a7c      	ldr	r2, [pc, #496]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 80018b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ba:	4b7a      	ldr	r3, [pc, #488]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018c6:	2301      	movs	r3, #1
 80018c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ca:	4b77      	ldr	r3, [pc, #476]	; (8001aa8 <HAL_RCC_OscConfig+0x474>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d118      	bne.n	8001908 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018d6:	4b74      	ldr	r3, [pc, #464]	; (8001aa8 <HAL_RCC_OscConfig+0x474>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a73      	ldr	r2, [pc, #460]	; (8001aa8 <HAL_RCC_OscConfig+0x474>)
 80018dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018e2:	f7ff fb89 	bl	8000ff8 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ea:	f7ff fb85 	bl	8000ff8 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e10c      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fc:	4b6a      	ldr	r3, [pc, #424]	; (8001aa8 <HAL_RCC_OscConfig+0x474>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0f0      	beq.n	80018ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d106      	bne.n	800191e <HAL_RCC_OscConfig+0x2ea>
 8001910:	4b64      	ldr	r3, [pc, #400]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 8001912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001914:	4a63      	ldr	r2, [pc, #396]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6713      	str	r3, [r2, #112]	; 0x70
 800191c:	e01c      	b.n	8001958 <HAL_RCC_OscConfig+0x324>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b05      	cmp	r3, #5
 8001924:	d10c      	bne.n	8001940 <HAL_RCC_OscConfig+0x30c>
 8001926:	4b5f      	ldr	r3, [pc, #380]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 8001928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192a:	4a5e      	ldr	r2, [pc, #376]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 800192c:	f043 0304 	orr.w	r3, r3, #4
 8001930:	6713      	str	r3, [r2, #112]	; 0x70
 8001932:	4b5c      	ldr	r3, [pc, #368]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 8001934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001936:	4a5b      	ldr	r2, [pc, #364]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6713      	str	r3, [r2, #112]	; 0x70
 800193e:	e00b      	b.n	8001958 <HAL_RCC_OscConfig+0x324>
 8001940:	4b58      	ldr	r3, [pc, #352]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 8001942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001944:	4a57      	ldr	r2, [pc, #348]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 8001946:	f023 0301 	bic.w	r3, r3, #1
 800194a:	6713      	str	r3, [r2, #112]	; 0x70
 800194c:	4b55      	ldr	r3, [pc, #340]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 800194e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001950:	4a54      	ldr	r2, [pc, #336]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 8001952:	f023 0304 	bic.w	r3, r3, #4
 8001956:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d015      	beq.n	800198c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001960:	f7ff fb4a 	bl	8000ff8 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001966:	e00a      	b.n	800197e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001968:	f7ff fb46 	bl	8000ff8 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	f241 3288 	movw	r2, #5000	; 0x1388
 8001976:	4293      	cmp	r3, r2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e0cb      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800197e:	4b49      	ldr	r3, [pc, #292]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 8001980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0ee      	beq.n	8001968 <HAL_RCC_OscConfig+0x334>
 800198a:	e014      	b.n	80019b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198c:	f7ff fb34 	bl	8000ff8 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001992:	e00a      	b.n	80019aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001994:	f7ff fb30 	bl	8000ff8 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e0b5      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019aa:	4b3e      	ldr	r3, [pc, #248]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 80019ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1ee      	bne.n	8001994 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019b6:	7dfb      	ldrb	r3, [r7, #23]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d105      	bne.n	80019c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019bc:	4b39      	ldr	r3, [pc, #228]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	4a38      	ldr	r2, [pc, #224]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 80019c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 80a1 	beq.w	8001b14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019d2:	4b34      	ldr	r3, [pc, #208]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 030c 	and.w	r3, r3, #12
 80019da:	2b08      	cmp	r3, #8
 80019dc:	d05c      	beq.n	8001a98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d141      	bne.n	8001a6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e6:	4b31      	ldr	r3, [pc, #196]	; (8001aac <HAL_RCC_OscConfig+0x478>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ec:	f7ff fb04 	bl	8000ff8 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f4:	f7ff fb00 	bl	8000ff8 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e087      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a06:	4b27      	ldr	r3, [pc, #156]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69da      	ldr	r2, [r3, #28]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	019b      	lsls	r3, r3, #6
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a28:	085b      	lsrs	r3, r3, #1
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	041b      	lsls	r3, r3, #16
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a34:	061b      	lsls	r3, r3, #24
 8001a36:	491b      	ldr	r1, [pc, #108]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <HAL_RCC_OscConfig+0x478>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a42:	f7ff fad9 	bl	8000ff8 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a4a:	f7ff fad5 	bl	8000ff8 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e05c      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f0      	beq.n	8001a4a <HAL_RCC_OscConfig+0x416>
 8001a68:	e054      	b.n	8001b14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <HAL_RCC_OscConfig+0x478>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a70:	f7ff fac2 	bl	8000ff8 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a78:	f7ff fabe 	bl	8000ff8 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e045      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <HAL_RCC_OscConfig+0x470>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0x444>
 8001a96:	e03d      	b.n	8001b14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d107      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e038      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40007000 	.word	0x40007000
 8001aac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <HAL_RCC_OscConfig+0x4ec>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d028      	beq.n	8001b10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d121      	bne.n	8001b10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d11a      	bne.n	8001b10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ae6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d111      	bne.n	8001b10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af6:	085b      	lsrs	r3, r3, #1
 8001af8:	3b01      	subs	r3, #1
 8001afa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d107      	bne.n	8001b10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e000      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800

08001b24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0cc      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b38:	4b68      	ldr	r3, [pc, #416]	; (8001cdc <HAL_RCC_ClockConfig+0x1b8>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d90c      	bls.n	8001b60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b46:	4b65      	ldr	r3, [pc, #404]	; (8001cdc <HAL_RCC_ClockConfig+0x1b8>)
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4e:	4b63      	ldr	r3, [pc, #396]	; (8001cdc <HAL_RCC_ClockConfig+0x1b8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d001      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e0b8      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d020      	beq.n	8001bae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b78:	4b59      	ldr	r3, [pc, #356]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	4a58      	ldr	r2, [pc, #352]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0308 	and.w	r3, r3, #8
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b90:	4b53      	ldr	r3, [pc, #332]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	4a52      	ldr	r2, [pc, #328]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b9c:	4b50      	ldr	r3, [pc, #320]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	494d      	ldr	r1, [pc, #308]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d044      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d107      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc2:	4b47      	ldr	r3, [pc, #284]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d119      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e07f      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d003      	beq.n	8001be2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bde:	2b03      	cmp	r3, #3
 8001be0:	d107      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be2:	4b3f      	ldr	r3, [pc, #252]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d109      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e06f      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf2:	4b3b      	ldr	r3, [pc, #236]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e067      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c02:	4b37      	ldr	r3, [pc, #220]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f023 0203 	bic.w	r2, r3, #3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	4934      	ldr	r1, [pc, #208]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c14:	f7ff f9f0 	bl	8000ff8 <HAL_GetTick>
 8001c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1a:	e00a      	b.n	8001c32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c1c:	f7ff f9ec 	bl	8000ff8 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e04f      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c32:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 020c 	and.w	r2, r3, #12
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d1eb      	bne.n	8001c1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c44:	4b25      	ldr	r3, [pc, #148]	; (8001cdc <HAL_RCC_ClockConfig+0x1b8>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d20c      	bcs.n	8001c6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c52:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <HAL_RCC_ClockConfig+0x1b8>)
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5a:	4b20      	ldr	r3, [pc, #128]	; (8001cdc <HAL_RCC_ClockConfig+0x1b8>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d001      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e032      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d008      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c78:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	4916      	ldr	r1, [pc, #88]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d009      	beq.n	8001caa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c96:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	490e      	ldr	r1, [pc, #56]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001caa:	f000 f821 	bl	8001cf0 <HAL_RCC_GetSysClockFreq>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	091b      	lsrs	r3, r3, #4
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	490a      	ldr	r1, [pc, #40]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8001cbc:	5ccb      	ldrb	r3, [r1, r3]
 8001cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc2:	4a09      	ldr	r2, [pc, #36]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <HAL_RCC_ClockConfig+0x1c8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff f8a0 	bl	8000e10 <HAL_InitTick>

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40023c00 	.word	0x40023c00
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	08006b08 	.word	0x08006b08
 8001ce8:	20000000 	.word	0x20000000
 8001cec:	20000004 	.word	0x20000004

08001cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cf4:	b090      	sub	sp, #64	; 0x40
 8001cf6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	637b      	str	r3, [r7, #52]	; 0x34
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d00:	2300      	movs	r3, #0
 8001d02:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d08:	4b59      	ldr	r3, [pc, #356]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 030c 	and.w	r3, r3, #12
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d00d      	beq.n	8001d30 <HAL_RCC_GetSysClockFreq+0x40>
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	f200 80a1 	bhi.w	8001e5c <HAL_RCC_GetSysClockFreq+0x16c>
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d002      	beq.n	8001d24 <HAL_RCC_GetSysClockFreq+0x34>
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d003      	beq.n	8001d2a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d22:	e09b      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d24:	4b53      	ldr	r3, [pc, #332]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d26:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001d28:	e09b      	b.n	8001e62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d2a:	4b53      	ldr	r3, [pc, #332]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d2e:	e098      	b.n	8001e62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d30:	4b4f      	ldr	r3, [pc, #316]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d38:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d3a:	4b4d      	ldr	r3, [pc, #308]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d028      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d46:	4b4a      	ldr	r3, [pc, #296]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	099b      	lsrs	r3, r3, #6
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	623b      	str	r3, [r7, #32]
 8001d50:	627a      	str	r2, [r7, #36]	; 0x24
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4b47      	ldr	r3, [pc, #284]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d5c:	fb03 f201 	mul.w	r2, r3, r1
 8001d60:	2300      	movs	r3, #0
 8001d62:	fb00 f303 	mul.w	r3, r0, r3
 8001d66:	4413      	add	r3, r2
 8001d68:	4a43      	ldr	r2, [pc, #268]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d6a:	fba0 1202 	umull	r1, r2, r0, r2
 8001d6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d70:	460a      	mov	r2, r1
 8001d72:	62ba      	str	r2, [r7, #40]	; 0x28
 8001d74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d76:	4413      	add	r3, r2
 8001d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	61bb      	str	r3, [r7, #24]
 8001d80:	61fa      	str	r2, [r7, #28]
 8001d82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d8a:	f7fe fa29 	bl	80001e0 <__aeabi_uldivmod>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4613      	mov	r3, r2
 8001d94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d96:	e053      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d98:	4b35      	ldr	r3, [pc, #212]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	099b      	lsrs	r3, r3, #6
 8001d9e:	2200      	movs	r2, #0
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	617a      	str	r2, [r7, #20]
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001daa:	f04f 0b00 	mov.w	fp, #0
 8001dae:	4652      	mov	r2, sl
 8001db0:	465b      	mov	r3, fp
 8001db2:	f04f 0000 	mov.w	r0, #0
 8001db6:	f04f 0100 	mov.w	r1, #0
 8001dba:	0159      	lsls	r1, r3, #5
 8001dbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dc0:	0150      	lsls	r0, r2, #5
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	ebb2 080a 	subs.w	r8, r2, sl
 8001dca:	eb63 090b 	sbc.w	r9, r3, fp
 8001dce:	f04f 0200 	mov.w	r2, #0
 8001dd2:	f04f 0300 	mov.w	r3, #0
 8001dd6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001dda:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001dde:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001de2:	ebb2 0408 	subs.w	r4, r2, r8
 8001de6:	eb63 0509 	sbc.w	r5, r3, r9
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	00eb      	lsls	r3, r5, #3
 8001df4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001df8:	00e2      	lsls	r2, r4, #3
 8001dfa:	4614      	mov	r4, r2
 8001dfc:	461d      	mov	r5, r3
 8001dfe:	eb14 030a 	adds.w	r3, r4, sl
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	eb45 030b 	adc.w	r3, r5, fp
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	f04f 0300 	mov.w	r3, #0
 8001e12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e16:	4629      	mov	r1, r5
 8001e18:	028b      	lsls	r3, r1, #10
 8001e1a:	4621      	mov	r1, r4
 8001e1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e20:	4621      	mov	r1, r4
 8001e22:	028a      	lsls	r2, r1, #10
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	60fa      	str	r2, [r7, #12]
 8001e30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e34:	f7fe f9d4 	bl	80001e0 <__aeabi_uldivmod>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e40:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	0c1b      	lsrs	r3, r3, #16
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001e50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e5a:	e002      	b.n	8001e62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3740      	adds	r7, #64	; 0x40
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800
 8001e74:	00f42400 	.word	0x00f42400
 8001e78:	017d7840 	.word	0x017d7840

08001e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e80:	4b03      	ldr	r3, [pc, #12]	; (8001e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000000 	.word	0x20000000

08001e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e98:	f7ff fff0 	bl	8001e7c <HAL_RCC_GetHCLKFreq>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	0a9b      	lsrs	r3, r3, #10
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	4903      	ldr	r1, [pc, #12]	; (8001eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eaa:	5ccb      	ldrb	r3, [r1, r3]
 8001eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	08006b18 	.word	0x08006b18

08001ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ec0:	f7ff ffdc 	bl	8001e7c <HAL_RCC_GetHCLKFreq>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	4b05      	ldr	r3, [pc, #20]	; (8001edc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	0b5b      	lsrs	r3, r3, #13
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	4903      	ldr	r1, [pc, #12]	; (8001ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ed2:	5ccb      	ldrb	r3, [r1, r3]
 8001ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	08006b18 	.word	0x08006b18

08001ee4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	220f      	movs	r2, #15
 8001ef2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <HAL_RCC_GetClockConfig+0x5c>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 0203 	and.w	r2, r3, #3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f00:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <HAL_RCC_GetClockConfig+0x5c>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <HAL_RCC_GetClockConfig+0x5c>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f18:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <HAL_RCC_GetClockConfig+0x5c>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	08db      	lsrs	r3, r3, #3
 8001f1e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f26:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <HAL_RCC_GetClockConfig+0x60>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0207 	and.w	r2, r3, #7
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	601a      	str	r2, [r3, #0]
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40023c00 	.word	0x40023c00

08001f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e041      	b.n	8001fde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d106      	bne.n	8001f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f839 	bl	8001fe6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2202      	movs	r2, #2
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3304      	adds	r3, #4
 8001f84:	4619      	mov	r1, r3
 8001f86:	4610      	mov	r0, r2
 8001f88:	f000 f9ca 	bl	8002320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b01      	cmp	r3, #1
 800200e:	d001      	beq.n	8002014 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e044      	b.n	800209e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2202      	movs	r2, #2
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0201 	orr.w	r2, r2, #1
 800202a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a1e      	ldr	r2, [pc, #120]	; (80020ac <HAL_TIM_Base_Start_IT+0xb0>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d018      	beq.n	8002068 <HAL_TIM_Base_Start_IT+0x6c>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800203e:	d013      	beq.n	8002068 <HAL_TIM_Base_Start_IT+0x6c>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a1a      	ldr	r2, [pc, #104]	; (80020b0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00e      	beq.n	8002068 <HAL_TIM_Base_Start_IT+0x6c>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a19      	ldr	r2, [pc, #100]	; (80020b4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d009      	beq.n	8002068 <HAL_TIM_Base_Start_IT+0x6c>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a17      	ldr	r2, [pc, #92]	; (80020b8 <HAL_TIM_Base_Start_IT+0xbc>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d004      	beq.n	8002068 <HAL_TIM_Base_Start_IT+0x6c>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a16      	ldr	r2, [pc, #88]	; (80020bc <HAL_TIM_Base_Start_IT+0xc0>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d111      	bne.n	800208c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2b06      	cmp	r3, #6
 8002078:	d010      	beq.n	800209c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f042 0201 	orr.w	r2, r2, #1
 8002088:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800208a:	e007      	b.n	800209c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40010000 	.word	0x40010000
 80020b0:	40000400 	.word	0x40000400
 80020b4:	40000800 	.word	0x40000800
 80020b8:	40000c00 	.word	0x40000c00
 80020bc:	40014000 	.word	0x40014000

080020c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d122      	bne.n	800211c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d11b      	bne.n	800211c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f06f 0202 	mvn.w	r2, #2
 80020ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f8ee 	bl	80022e4 <HAL_TIM_IC_CaptureCallback>
 8002108:	e005      	b.n	8002116 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f8e0 	bl	80022d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 f8f1 	bl	80022f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	2b04      	cmp	r3, #4
 8002128:	d122      	bne.n	8002170 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b04      	cmp	r3, #4
 8002136:	d11b      	bne.n	8002170 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f06f 0204 	mvn.w	r2, #4
 8002140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2202      	movs	r2, #2
 8002146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f8c4 	bl	80022e4 <HAL_TIM_IC_CaptureCallback>
 800215c:	e005      	b.n	800216a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f8b6 	bl	80022d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f8c7 	bl	80022f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b08      	cmp	r3, #8
 800217c:	d122      	bne.n	80021c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	2b08      	cmp	r3, #8
 800218a:	d11b      	bne.n	80021c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f06f 0208 	mvn.w	r2, #8
 8002194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2204      	movs	r2, #4
 800219a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f89a 	bl	80022e4 <HAL_TIM_IC_CaptureCallback>
 80021b0:	e005      	b.n	80021be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f88c 	bl	80022d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f89d 	bl	80022f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	2b10      	cmp	r3, #16
 80021d0:	d122      	bne.n	8002218 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f003 0310 	and.w	r3, r3, #16
 80021dc:	2b10      	cmp	r3, #16
 80021de:	d11b      	bne.n	8002218 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f06f 0210 	mvn.w	r2, #16
 80021e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2208      	movs	r2, #8
 80021ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f870 	bl	80022e4 <HAL_TIM_IC_CaptureCallback>
 8002204:	e005      	b.n	8002212 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f862 	bl	80022d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f873 	bl	80022f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b01      	cmp	r3, #1
 8002224:	d10e      	bne.n	8002244 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b01      	cmp	r3, #1
 8002232:	d107      	bne.n	8002244 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f06f 0201 	mvn.w	r2, #1
 800223c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7fe fb0a 	bl	8000858 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800224e:	2b80      	cmp	r3, #128	; 0x80
 8002250:	d10e      	bne.n	8002270 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225c:	2b80      	cmp	r3, #128	; 0x80
 800225e:	d107      	bne.n	8002270 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f8e2 	bl	8002434 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227a:	2b40      	cmp	r3, #64	; 0x40
 800227c:	d10e      	bne.n	800229c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002288:	2b40      	cmp	r3, #64	; 0x40
 800228a:	d107      	bne.n	800229c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f838 	bl	800230c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	f003 0320 	and.w	r3, r3, #32
 80022a6:	2b20      	cmp	r3, #32
 80022a8:	d10e      	bne.n	80022c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f003 0320 	and.w	r3, r3, #32
 80022b4:	2b20      	cmp	r3, #32
 80022b6:	d107      	bne.n	80022c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f06f 0220 	mvn.w	r2, #32
 80022c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f8ac 	bl	8002420 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a34      	ldr	r2, [pc, #208]	; (8002404 <TIM_Base_SetConfig+0xe4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d00f      	beq.n	8002358 <TIM_Base_SetConfig+0x38>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800233e:	d00b      	beq.n	8002358 <TIM_Base_SetConfig+0x38>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a31      	ldr	r2, [pc, #196]	; (8002408 <TIM_Base_SetConfig+0xe8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d007      	beq.n	8002358 <TIM_Base_SetConfig+0x38>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a30      	ldr	r2, [pc, #192]	; (800240c <TIM_Base_SetConfig+0xec>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d003      	beq.n	8002358 <TIM_Base_SetConfig+0x38>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a2f      	ldr	r2, [pc, #188]	; (8002410 <TIM_Base_SetConfig+0xf0>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d108      	bne.n	800236a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800235e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	4313      	orrs	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a25      	ldr	r2, [pc, #148]	; (8002404 <TIM_Base_SetConfig+0xe4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d01b      	beq.n	80023aa <TIM_Base_SetConfig+0x8a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002378:	d017      	beq.n	80023aa <TIM_Base_SetConfig+0x8a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a22      	ldr	r2, [pc, #136]	; (8002408 <TIM_Base_SetConfig+0xe8>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d013      	beq.n	80023aa <TIM_Base_SetConfig+0x8a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a21      	ldr	r2, [pc, #132]	; (800240c <TIM_Base_SetConfig+0xec>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d00f      	beq.n	80023aa <TIM_Base_SetConfig+0x8a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a20      	ldr	r2, [pc, #128]	; (8002410 <TIM_Base_SetConfig+0xf0>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d00b      	beq.n	80023aa <TIM_Base_SetConfig+0x8a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a1f      	ldr	r2, [pc, #124]	; (8002414 <TIM_Base_SetConfig+0xf4>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d007      	beq.n	80023aa <TIM_Base_SetConfig+0x8a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a1e      	ldr	r2, [pc, #120]	; (8002418 <TIM_Base_SetConfig+0xf8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d003      	beq.n	80023aa <TIM_Base_SetConfig+0x8a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a1d      	ldr	r2, [pc, #116]	; (800241c <TIM_Base_SetConfig+0xfc>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d108      	bne.n	80023bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a08      	ldr	r2, [pc, #32]	; (8002404 <TIM_Base_SetConfig+0xe4>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d103      	bne.n	80023f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	691a      	ldr	r2, [r3, #16]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	615a      	str	r2, [r3, #20]
}
 80023f6:	bf00      	nop
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40010000 	.word	0x40010000
 8002408:	40000400 	.word	0x40000400
 800240c:	40000800 	.word	0x40000800
 8002410:	40000c00 	.word	0x40000c00
 8002414:	40014000 	.word	0x40014000
 8002418:	40014400 	.word	0x40014400
 800241c:	40014800 	.word	0x40014800

08002420 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e03f      	b.n	80024da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7fe fc7e 	bl	8000d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2224      	movs	r2, #36	; 0x24
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800248a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 fe07 	bl	80030a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695a      	ldr	r2, [r3, #20]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2220      	movs	r2, #32
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2220      	movs	r2, #32
 80024d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b08a      	sub	sp, #40	; 0x28
 80024e6:	af02      	add	r7, sp, #8
 80024e8:	60f8      	str	r0, [r7, #12]
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	603b      	str	r3, [r7, #0]
 80024ee:	4613      	mov	r3, r2
 80024f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b20      	cmp	r3, #32
 8002500:	d17c      	bne.n	80025fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d002      	beq.n	800250e <HAL_UART_Transmit+0x2c>
 8002508:	88fb      	ldrh	r3, [r7, #6]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e075      	b.n	80025fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <HAL_UART_Transmit+0x3e>
 800251c:	2302      	movs	r3, #2
 800251e:	e06e      	b.n	80025fe <HAL_UART_Transmit+0x11c>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2221      	movs	r2, #33	; 0x21
 8002532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002536:	f7fe fd5f 	bl	8000ff8 <HAL_GetTick>
 800253a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	88fa      	ldrh	r2, [r7, #6]
 8002540:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	88fa      	ldrh	r2, [r7, #6]
 8002546:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002550:	d108      	bne.n	8002564 <HAL_UART_Transmit+0x82>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d104      	bne.n	8002564 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	61bb      	str	r3, [r7, #24]
 8002562:	e003      	b.n	800256c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002568:	2300      	movs	r3, #0
 800256a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002574:	e02a      	b.n	80025cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	2200      	movs	r2, #0
 800257e:	2180      	movs	r1, #128	; 0x80
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 fb47 	bl	8002c14 <UART_WaitOnFlagUntilTimeout>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e036      	b.n	80025fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10b      	bne.n	80025ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	3302      	adds	r3, #2
 80025aa:	61bb      	str	r3, [r7, #24]
 80025ac:	e007      	b.n	80025be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	781a      	ldrb	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	3301      	adds	r3, #1
 80025bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	3b01      	subs	r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1cf      	bne.n	8002576 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2200      	movs	r2, #0
 80025de:	2140      	movs	r1, #64	; 0x40
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 fb17 	bl	8002c14 <UART_WaitOnFlagUntilTimeout>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e006      	b.n	80025fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2220      	movs	r2, #32
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	e000      	b.n	80025fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80025fc:	2302      	movs	r3, #2
  }
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3720      	adds	r7, #32
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b084      	sub	sp, #16
 800260a:	af00      	add	r7, sp, #0
 800260c:	60f8      	str	r0, [r7, #12]
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	4613      	mov	r3, r2
 8002612:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b20      	cmp	r3, #32
 800261e:	d11d      	bne.n	800265c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <HAL_UART_Receive_IT+0x26>
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e016      	b.n	800265e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002636:	2b01      	cmp	r3, #1
 8002638:	d101      	bne.n	800263e <HAL_UART_Receive_IT+0x38>
 800263a:	2302      	movs	r3, #2
 800263c:	e00f      	b.n	800265e <HAL_UART_Receive_IT+0x58>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800264c:	88fb      	ldrh	r3, [r7, #6]
 800264e:	461a      	mov	r2, r3
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 fb4c 	bl	8002cf0 <UART_Start_Receive_IT>
 8002658:	4603      	mov	r3, r0
 800265a:	e000      	b.n	800265e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800265c:	2302      	movs	r3, #2
  }
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b0ba      	sub	sp, #232	; 0xe8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800268e:	2300      	movs	r3, #0
 8002690:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002694:	2300      	movs	r3, #0
 8002696:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800269a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80026a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10f      	bne.n	80026ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026b2:	f003 0320 	and.w	r3, r3, #32
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d009      	beq.n	80026ce <HAL_UART_IRQHandler+0x66>
 80026ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026be:	f003 0320 	and.w	r3, r3, #32
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 fc2f 	bl	8002f2a <UART_Receive_IT>
      return;
 80026cc:	e256      	b.n	8002b7c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80026ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 80de 	beq.w	8002894 <HAL_UART_IRQHandler+0x22c>
 80026d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d106      	bne.n	80026f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026e8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 80d1 	beq.w	8002894 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00b      	beq.n	8002716 <HAL_UART_IRQHandler+0xae>
 80026fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f043 0201 	orr.w	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800271a:	f003 0304 	and.w	r3, r3, #4
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00b      	beq.n	800273a <HAL_UART_IRQHandler+0xd2>
 8002722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d005      	beq.n	800273a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f043 0202 	orr.w	r2, r3, #2
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800273a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00b      	beq.n	800275e <HAL_UART_IRQHandler+0xf6>
 8002746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d005      	beq.n	800275e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f043 0204 	orr.w	r2, r3, #4
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800275e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d011      	beq.n	800278e <HAL_UART_IRQHandler+0x126>
 800276a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800276e:	f003 0320 	and.w	r3, r3, #32
 8002772:	2b00      	cmp	r3, #0
 8002774:	d105      	bne.n	8002782 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d005      	beq.n	800278e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f043 0208 	orr.w	r2, r3, #8
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 81ed 	beq.w	8002b72 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800279c:	f003 0320 	and.w	r3, r3, #32
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <HAL_UART_IRQHandler+0x14e>
 80027a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027a8:	f003 0320 	and.w	r3, r3, #32
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 fbba 	bl	8002f2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c0:	2b40      	cmp	r3, #64	; 0x40
 80027c2:	bf0c      	ite	eq
 80027c4:	2301      	moveq	r3, #1
 80027c6:	2300      	movne	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d103      	bne.n	80027e2 <HAL_UART_IRQHandler+0x17a>
 80027da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d04f      	beq.n	8002882 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 fac2 	bl	8002d6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f2:	2b40      	cmp	r3, #64	; 0x40
 80027f4:	d141      	bne.n	800287a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	3314      	adds	r3, #20
 80027fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002800:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002804:	e853 3f00 	ldrex	r3, [r3]
 8002808:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800280c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002814:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	3314      	adds	r3, #20
 800281e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002822:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002826:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800282a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800282e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002832:	e841 2300 	strex	r3, r2, [r1]
 8002836:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800283a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1d9      	bne.n	80027f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002846:	2b00      	cmp	r3, #0
 8002848:	d013      	beq.n	8002872 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284e:	4a7d      	ldr	r2, [pc, #500]	; (8002a44 <HAL_UART_IRQHandler+0x3dc>)
 8002850:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe fd2c 	bl	80012b4 <HAL_DMA_Abort_IT>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d016      	beq.n	8002890 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800286c:	4610      	mov	r0, r2
 800286e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002870:	e00e      	b.n	8002890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f99a 	bl	8002bac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002878:	e00a      	b.n	8002890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f996 	bl	8002bac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002880:	e006      	b.n	8002890 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f992 	bl	8002bac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800288e:	e170      	b.n	8002b72 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002890:	bf00      	nop
    return;
 8002892:	e16e      	b.n	8002b72 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002898:	2b01      	cmp	r3, #1
 800289a:	f040 814a 	bne.w	8002b32 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800289e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 8143 	beq.w	8002b32 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80028ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028b0:	f003 0310 	and.w	r3, r3, #16
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 813c 	beq.w	8002b32 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028ba:	2300      	movs	r3, #0
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028da:	2b40      	cmp	r3, #64	; 0x40
 80028dc:	f040 80b4 	bne.w	8002a48 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80028ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 8140 	beq.w	8002b76 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80028fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80028fe:	429a      	cmp	r2, r3
 8002900:	f080 8139 	bcs.w	8002b76 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800290a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002916:	f000 8088 	beq.w	8002a2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	330c      	adds	r3, #12
 8002920:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002924:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002928:	e853 3f00 	ldrex	r3, [r3]
 800292c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002930:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002938:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	330c      	adds	r3, #12
 8002942:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002946:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800294a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002952:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002956:	e841 2300 	strex	r3, r2, [r1]
 800295a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800295e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1d9      	bne.n	800291a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	3314      	adds	r3, #20
 800296c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800296e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002970:	e853 3f00 	ldrex	r3, [r3]
 8002974:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002976:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002978:	f023 0301 	bic.w	r3, r3, #1
 800297c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	3314      	adds	r3, #20
 8002986:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800298a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800298e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002990:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002992:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002996:	e841 2300 	strex	r3, r2, [r1]
 800299a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800299c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1e1      	bne.n	8002966 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	3314      	adds	r3, #20
 80029a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029ac:	e853 3f00 	ldrex	r3, [r3]
 80029b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80029b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	3314      	adds	r3, #20
 80029c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80029c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80029c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80029cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029ce:	e841 2300 	strex	r3, r2, [r1]
 80029d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80029d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1e3      	bne.n	80029a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2220      	movs	r2, #32
 80029de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	330c      	adds	r3, #12
 80029ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029f2:	e853 3f00 	ldrex	r3, [r3]
 80029f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80029f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029fa:	f023 0310 	bic.w	r3, r3, #16
 80029fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	330c      	adds	r3, #12
 8002a08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002a0c:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a0e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a14:	e841 2300 	strex	r3, r2, [r1]
 8002a18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1e3      	bne.n	80029e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fe fbd5 	bl	80011d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	4619      	mov	r1, r3
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f8c0 	bl	8002bc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a40:	e099      	b.n	8002b76 <HAL_UART_IRQHandler+0x50e>
 8002a42:	bf00      	nop
 8002a44:	08002e33 	.word	0x08002e33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 808b 	beq.w	8002b7a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002a64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 8086 	beq.w	8002b7a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	330c      	adds	r3, #12
 8002a74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a78:	e853 3f00 	ldrex	r3, [r3]
 8002a7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	330c      	adds	r3, #12
 8002a8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002a92:	647a      	str	r2, [r7, #68]	; 0x44
 8002a94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a9a:	e841 2300 	strex	r3, r2, [r1]
 8002a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1e3      	bne.n	8002a6e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	3314      	adds	r3, #20
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	e853 3f00 	ldrex	r3, [r3]
 8002ab4:	623b      	str	r3, [r7, #32]
   return(result);
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	f023 0301 	bic.w	r3, r3, #1
 8002abc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	3314      	adds	r3, #20
 8002ac6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002aca:	633a      	str	r2, [r7, #48]	; 0x30
 8002acc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ace:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ad2:	e841 2300 	strex	r3, r2, [r1]
 8002ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1e3      	bne.n	8002aa6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	330c      	adds	r3, #12
 8002af2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	e853 3f00 	ldrex	r3, [r3]
 8002afa:	60fb      	str	r3, [r7, #12]
   return(result);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f023 0310 	bic.w	r3, r3, #16
 8002b02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	330c      	adds	r3, #12
 8002b0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002b10:	61fa      	str	r2, [r7, #28]
 8002b12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b14:	69b9      	ldr	r1, [r7, #24]
 8002b16:	69fa      	ldr	r2, [r7, #28]
 8002b18:	e841 2300 	strex	r3, r2, [r1]
 8002b1c:	617b      	str	r3, [r7, #20]
   return(result);
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1e3      	bne.n	8002aec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b28:	4619      	mov	r1, r3
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f848 	bl	8002bc0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b30:	e023      	b.n	8002b7a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d009      	beq.n	8002b52 <HAL_UART_IRQHandler+0x4ea>
 8002b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f985 	bl	8002e5a <UART_Transmit_IT>
    return;
 8002b50:	e014      	b.n	8002b7c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00e      	beq.n	8002b7c <HAL_UART_IRQHandler+0x514>
 8002b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d008      	beq.n	8002b7c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f9c5 	bl	8002efa <UART_EndTransmit_IT>
    return;
 8002b70:	e004      	b.n	8002b7c <HAL_UART_IRQHandler+0x514>
    return;
 8002b72:	bf00      	nop
 8002b74:	e002      	b.n	8002b7c <HAL_UART_IRQHandler+0x514>
      return;
 8002b76:	bf00      	nop
 8002b78:	e000      	b.n	8002b7c <HAL_UART_IRQHandler+0x514>
      return;
 8002b7a:	bf00      	nop
  }
}
 8002b7c:	37e8      	adds	r7, #232	; 0xe8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop

08002b84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	2300      	movs	r3, #0
 8002be6:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	4313      	orrs	r3, r2
 8002c06:	b2db      	uxtb	r3, r3
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b090      	sub	sp, #64	; 0x40
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	4613      	mov	r3, r2
 8002c22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c24:	e050      	b.n	8002cc8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2c:	d04c      	beq.n	8002cc8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d007      	beq.n	8002c44 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c34:	f7fe f9e0 	bl	8000ff8 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d241      	bcs.n	8002cc8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	330c      	adds	r3, #12
 8002c4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4e:	e853 3f00 	ldrex	r3, [r3]
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	330c      	adds	r3, #12
 8002c62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c64:	637a      	str	r2, [r7, #52]	; 0x34
 8002c66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c6c:	e841 2300 	strex	r3, r2, [r1]
 8002c70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1e5      	bne.n	8002c44 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	3314      	adds	r3, #20
 8002c7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	e853 3f00 	ldrex	r3, [r3]
 8002c86:	613b      	str	r3, [r7, #16]
   return(result);
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f023 0301 	bic.w	r3, r3, #1
 8002c8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	3314      	adds	r3, #20
 8002c96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c98:	623a      	str	r2, [r7, #32]
 8002c9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9c:	69f9      	ldr	r1, [r7, #28]
 8002c9e:	6a3a      	ldr	r2, [r7, #32]
 8002ca0:	e841 2300 	strex	r3, r2, [r1]
 8002ca4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1e5      	bne.n	8002c78 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e00f      	b.n	8002ce8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	bf0c      	ite	eq
 8002cd8:	2301      	moveq	r3, #1
 8002cda:	2300      	movne	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d09f      	beq.n	8002c26 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3740      	adds	r7, #64	; 0x40
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	88fa      	ldrh	r2, [r7, #6]
 8002d08:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	88fa      	ldrh	r2, [r7, #6]
 8002d0e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2222      	movs	r2, #34	; 0x22
 8002d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d007      	beq.n	8002d3e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68da      	ldr	r2, [r3, #12]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d3c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695a      	ldr	r2, [r3, #20]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f042 0201 	orr.w	r2, r2, #1
 8002d4c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f042 0220 	orr.w	r2, r2, #32
 8002d5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b095      	sub	sp, #84	; 0x54
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	330c      	adds	r3, #12
 8002d7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7e:	e853 3f00 	ldrex	r3, [r3]
 8002d82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	330c      	adds	r3, #12
 8002d92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d94:	643a      	str	r2, [r7, #64]	; 0x40
 8002d96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d9c:	e841 2300 	strex	r3, r2, [r1]
 8002da0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1e5      	bne.n	8002d74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	3314      	adds	r3, #20
 8002dae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	e853 3f00 	ldrex	r3, [r3]
 8002db6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f023 0301 	bic.w	r3, r3, #1
 8002dbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	3314      	adds	r3, #20
 8002dc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002dc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dd0:	e841 2300 	strex	r3, r2, [r1]
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1e5      	bne.n	8002da8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d119      	bne.n	8002e18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	330c      	adds	r3, #12
 8002dea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	e853 3f00 	ldrex	r3, [r3]
 8002df2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f023 0310 	bic.w	r3, r3, #16
 8002dfa:	647b      	str	r3, [r7, #68]	; 0x44
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	330c      	adds	r3, #12
 8002e02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e04:	61ba      	str	r2, [r7, #24]
 8002e06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e08:	6979      	ldr	r1, [r7, #20]
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	e841 2300 	strex	r3, r2, [r1]
 8002e10:	613b      	str	r3, [r7, #16]
   return(result);
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1e5      	bne.n	8002de4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e26:	bf00      	nop
 8002e28:	3754      	adds	r7, #84	; 0x54
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b084      	sub	sp, #16
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f7ff fead 	bl	8002bac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e52:	bf00      	nop
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b085      	sub	sp, #20
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b21      	cmp	r3, #33	; 0x21
 8002e6c:	d13e      	bne.n	8002eec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e76:	d114      	bne.n	8002ea2 <UART_Transmit_IT+0x48>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d110      	bne.n	8002ea2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	1c9a      	adds	r2, r3, #2
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	621a      	str	r2, [r3, #32]
 8002ea0:	e008      	b.n	8002eb4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	1c59      	adds	r1, r3, #1
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6211      	str	r1, [r2, #32]
 8002eac:	781a      	ldrb	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10f      	bne.n	8002ee8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ed6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ee6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	e000      	b.n	8002eee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002eec:	2302      	movs	r3, #2
  }
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff fe32 	bl	8002b84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b08c      	sub	sp, #48	; 0x30
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b22      	cmp	r3, #34	; 0x22
 8002f3c:	f040 80ab 	bne.w	8003096 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f48:	d117      	bne.n	8002f7a <UART_Receive_IT+0x50>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d113      	bne.n	8002f7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f72:	1c9a      	adds	r2, r3, #2
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	629a      	str	r2, [r3, #40]	; 0x28
 8002f78:	e026      	b.n	8002fc8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f8c:	d007      	beq.n	8002f9e <UART_Receive_IT+0x74>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10a      	bne.n	8002fac <UART_Receive_IT+0x82>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d106      	bne.n	8002fac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa8:	701a      	strb	r2, [r3, #0]
 8002faa:	e008      	b.n	8002fbe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d15a      	bne.n	8003092 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0220 	bic.w	r2, r2, #32
 8002fea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ffa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695a      	ldr	r2, [r3, #20]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0201 	bic.w	r2, r2, #1
 800300a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003018:	2b01      	cmp	r3, #1
 800301a:	d135      	bne.n	8003088 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	330c      	adds	r3, #12
 8003028:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	e853 3f00 	ldrex	r3, [r3]
 8003030:	613b      	str	r3, [r7, #16]
   return(result);
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	f023 0310 	bic.w	r3, r3, #16
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	330c      	adds	r3, #12
 8003040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003042:	623a      	str	r2, [r7, #32]
 8003044:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003046:	69f9      	ldr	r1, [r7, #28]
 8003048:	6a3a      	ldr	r2, [r7, #32]
 800304a:	e841 2300 	strex	r3, r2, [r1]
 800304e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1e5      	bne.n	8003022 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0310 	and.w	r3, r3, #16
 8003060:	2b10      	cmp	r3, #16
 8003062:	d10a      	bne.n	800307a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003064:	2300      	movs	r3, #0
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800307e:	4619      	mov	r1, r3
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff fd9d 	bl	8002bc0 <HAL_UARTEx_RxEventCallback>
 8003086:	e002      	b.n	800308e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7ff fd85 	bl	8002b98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	e002      	b.n	8003098 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	e000      	b.n	8003098 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003096:	2302      	movs	r3, #2
  }
}
 8003098:	4618      	mov	r0, r3
 800309a:	3730      	adds	r7, #48	; 0x30
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030a4:	b0c0      	sub	sp, #256	; 0x100
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80030b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030bc:	68d9      	ldr	r1, [r3, #12]
 80030be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	ea40 0301 	orr.w	r3, r0, r1
 80030c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	431a      	orrs	r2, r3
 80030d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	431a      	orrs	r2, r3
 80030e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80030ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80030f8:	f021 010c 	bic.w	r1, r1, #12
 80030fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003106:	430b      	orrs	r3, r1
 8003108:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800310a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800311a:	6999      	ldr	r1, [r3, #24]
 800311c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	ea40 0301 	orr.w	r3, r0, r1
 8003126:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	4b8f      	ldr	r3, [pc, #572]	; (800336c <UART_SetConfig+0x2cc>)
 8003130:	429a      	cmp	r2, r3
 8003132:	d005      	beq.n	8003140 <UART_SetConfig+0xa0>
 8003134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	4b8d      	ldr	r3, [pc, #564]	; (8003370 <UART_SetConfig+0x2d0>)
 800313c:	429a      	cmp	r2, r3
 800313e:	d104      	bne.n	800314a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003140:	f7fe febc 	bl	8001ebc <HAL_RCC_GetPCLK2Freq>
 8003144:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003148:	e003      	b.n	8003152 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800314a:	f7fe fea3 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 800314e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800315c:	f040 810c 	bne.w	8003378 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003164:	2200      	movs	r2, #0
 8003166:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800316a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800316e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003172:	4622      	mov	r2, r4
 8003174:	462b      	mov	r3, r5
 8003176:	1891      	adds	r1, r2, r2
 8003178:	65b9      	str	r1, [r7, #88]	; 0x58
 800317a:	415b      	adcs	r3, r3
 800317c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800317e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003182:	4621      	mov	r1, r4
 8003184:	eb12 0801 	adds.w	r8, r2, r1
 8003188:	4629      	mov	r1, r5
 800318a:	eb43 0901 	adc.w	r9, r3, r1
 800318e:	f04f 0200 	mov.w	r2, #0
 8003192:	f04f 0300 	mov.w	r3, #0
 8003196:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800319a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800319e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031a2:	4690      	mov	r8, r2
 80031a4:	4699      	mov	r9, r3
 80031a6:	4623      	mov	r3, r4
 80031a8:	eb18 0303 	adds.w	r3, r8, r3
 80031ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80031b0:	462b      	mov	r3, r5
 80031b2:	eb49 0303 	adc.w	r3, r9, r3
 80031b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80031ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80031ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80031ce:	460b      	mov	r3, r1
 80031d0:	18db      	adds	r3, r3, r3
 80031d2:	653b      	str	r3, [r7, #80]	; 0x50
 80031d4:	4613      	mov	r3, r2
 80031d6:	eb42 0303 	adc.w	r3, r2, r3
 80031da:	657b      	str	r3, [r7, #84]	; 0x54
 80031dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80031e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80031e4:	f7fc fffc 	bl	80001e0 <__aeabi_uldivmod>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4b61      	ldr	r3, [pc, #388]	; (8003374 <UART_SetConfig+0x2d4>)
 80031ee:	fba3 2302 	umull	r2, r3, r3, r2
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	011c      	lsls	r4, r3, #4
 80031f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031fa:	2200      	movs	r2, #0
 80031fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003200:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003204:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003208:	4642      	mov	r2, r8
 800320a:	464b      	mov	r3, r9
 800320c:	1891      	adds	r1, r2, r2
 800320e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003210:	415b      	adcs	r3, r3
 8003212:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003214:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003218:	4641      	mov	r1, r8
 800321a:	eb12 0a01 	adds.w	sl, r2, r1
 800321e:	4649      	mov	r1, r9
 8003220:	eb43 0b01 	adc.w	fp, r3, r1
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003230:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003234:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003238:	4692      	mov	sl, r2
 800323a:	469b      	mov	fp, r3
 800323c:	4643      	mov	r3, r8
 800323e:	eb1a 0303 	adds.w	r3, sl, r3
 8003242:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003246:	464b      	mov	r3, r9
 8003248:	eb4b 0303 	adc.w	r3, fp, r3
 800324c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800325c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003260:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003264:	460b      	mov	r3, r1
 8003266:	18db      	adds	r3, r3, r3
 8003268:	643b      	str	r3, [r7, #64]	; 0x40
 800326a:	4613      	mov	r3, r2
 800326c:	eb42 0303 	adc.w	r3, r2, r3
 8003270:	647b      	str	r3, [r7, #68]	; 0x44
 8003272:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003276:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800327a:	f7fc ffb1 	bl	80001e0 <__aeabi_uldivmod>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	4611      	mov	r1, r2
 8003284:	4b3b      	ldr	r3, [pc, #236]	; (8003374 <UART_SetConfig+0x2d4>)
 8003286:	fba3 2301 	umull	r2, r3, r3, r1
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	2264      	movs	r2, #100	; 0x64
 800328e:	fb02 f303 	mul.w	r3, r2, r3
 8003292:	1acb      	subs	r3, r1, r3
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800329a:	4b36      	ldr	r3, [pc, #216]	; (8003374 <UART_SetConfig+0x2d4>)
 800329c:	fba3 2302 	umull	r2, r3, r3, r2
 80032a0:	095b      	lsrs	r3, r3, #5
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032a8:	441c      	add	r4, r3
 80032aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032ae:	2200      	movs	r2, #0
 80032b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80032b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80032bc:	4642      	mov	r2, r8
 80032be:	464b      	mov	r3, r9
 80032c0:	1891      	adds	r1, r2, r2
 80032c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80032c4:	415b      	adcs	r3, r3
 80032c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80032cc:	4641      	mov	r1, r8
 80032ce:	1851      	adds	r1, r2, r1
 80032d0:	6339      	str	r1, [r7, #48]	; 0x30
 80032d2:	4649      	mov	r1, r9
 80032d4:	414b      	adcs	r3, r1
 80032d6:	637b      	str	r3, [r7, #52]	; 0x34
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	f04f 0300 	mov.w	r3, #0
 80032e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80032e4:	4659      	mov	r1, fp
 80032e6:	00cb      	lsls	r3, r1, #3
 80032e8:	4651      	mov	r1, sl
 80032ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032ee:	4651      	mov	r1, sl
 80032f0:	00ca      	lsls	r2, r1, #3
 80032f2:	4610      	mov	r0, r2
 80032f4:	4619      	mov	r1, r3
 80032f6:	4603      	mov	r3, r0
 80032f8:	4642      	mov	r2, r8
 80032fa:	189b      	adds	r3, r3, r2
 80032fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003300:	464b      	mov	r3, r9
 8003302:	460a      	mov	r2, r1
 8003304:	eb42 0303 	adc.w	r3, r2, r3
 8003308:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800330c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003318:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800331c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003320:	460b      	mov	r3, r1
 8003322:	18db      	adds	r3, r3, r3
 8003324:	62bb      	str	r3, [r7, #40]	; 0x28
 8003326:	4613      	mov	r3, r2
 8003328:	eb42 0303 	adc.w	r3, r2, r3
 800332c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800332e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003332:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003336:	f7fc ff53 	bl	80001e0 <__aeabi_uldivmod>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4b0d      	ldr	r3, [pc, #52]	; (8003374 <UART_SetConfig+0x2d4>)
 8003340:	fba3 1302 	umull	r1, r3, r3, r2
 8003344:	095b      	lsrs	r3, r3, #5
 8003346:	2164      	movs	r1, #100	; 0x64
 8003348:	fb01 f303 	mul.w	r3, r1, r3
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	3332      	adds	r3, #50	; 0x32
 8003352:	4a08      	ldr	r2, [pc, #32]	; (8003374 <UART_SetConfig+0x2d4>)
 8003354:	fba2 2303 	umull	r2, r3, r2, r3
 8003358:	095b      	lsrs	r3, r3, #5
 800335a:	f003 0207 	and.w	r2, r3, #7
 800335e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4422      	add	r2, r4
 8003366:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003368:	e105      	b.n	8003576 <UART_SetConfig+0x4d6>
 800336a:	bf00      	nop
 800336c:	40011000 	.word	0x40011000
 8003370:	40011400 	.word	0x40011400
 8003374:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800337c:	2200      	movs	r2, #0
 800337e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003382:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003386:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800338a:	4642      	mov	r2, r8
 800338c:	464b      	mov	r3, r9
 800338e:	1891      	adds	r1, r2, r2
 8003390:	6239      	str	r1, [r7, #32]
 8003392:	415b      	adcs	r3, r3
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
 8003396:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800339a:	4641      	mov	r1, r8
 800339c:	1854      	adds	r4, r2, r1
 800339e:	4649      	mov	r1, r9
 80033a0:	eb43 0501 	adc.w	r5, r3, r1
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	f04f 0300 	mov.w	r3, #0
 80033ac:	00eb      	lsls	r3, r5, #3
 80033ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033b2:	00e2      	lsls	r2, r4, #3
 80033b4:	4614      	mov	r4, r2
 80033b6:	461d      	mov	r5, r3
 80033b8:	4643      	mov	r3, r8
 80033ba:	18e3      	adds	r3, r4, r3
 80033bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033c0:	464b      	mov	r3, r9
 80033c2:	eb45 0303 	adc.w	r3, r5, r3
 80033c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80033ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80033d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	f04f 0300 	mov.w	r3, #0
 80033e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80033e6:	4629      	mov	r1, r5
 80033e8:	008b      	lsls	r3, r1, #2
 80033ea:	4621      	mov	r1, r4
 80033ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033f0:	4621      	mov	r1, r4
 80033f2:	008a      	lsls	r2, r1, #2
 80033f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80033f8:	f7fc fef2 	bl	80001e0 <__aeabi_uldivmod>
 80033fc:	4602      	mov	r2, r0
 80033fe:	460b      	mov	r3, r1
 8003400:	4b60      	ldr	r3, [pc, #384]	; (8003584 <UART_SetConfig+0x4e4>)
 8003402:	fba3 2302 	umull	r2, r3, r3, r2
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	011c      	lsls	r4, r3, #4
 800340a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800340e:	2200      	movs	r2, #0
 8003410:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003414:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003418:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800341c:	4642      	mov	r2, r8
 800341e:	464b      	mov	r3, r9
 8003420:	1891      	adds	r1, r2, r2
 8003422:	61b9      	str	r1, [r7, #24]
 8003424:	415b      	adcs	r3, r3
 8003426:	61fb      	str	r3, [r7, #28]
 8003428:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800342c:	4641      	mov	r1, r8
 800342e:	1851      	adds	r1, r2, r1
 8003430:	6139      	str	r1, [r7, #16]
 8003432:	4649      	mov	r1, r9
 8003434:	414b      	adcs	r3, r1
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003444:	4659      	mov	r1, fp
 8003446:	00cb      	lsls	r3, r1, #3
 8003448:	4651      	mov	r1, sl
 800344a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800344e:	4651      	mov	r1, sl
 8003450:	00ca      	lsls	r2, r1, #3
 8003452:	4610      	mov	r0, r2
 8003454:	4619      	mov	r1, r3
 8003456:	4603      	mov	r3, r0
 8003458:	4642      	mov	r2, r8
 800345a:	189b      	adds	r3, r3, r2
 800345c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003460:	464b      	mov	r3, r9
 8003462:	460a      	mov	r2, r1
 8003464:	eb42 0303 	adc.w	r3, r2, r3
 8003468:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800346c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	67bb      	str	r3, [r7, #120]	; 0x78
 8003476:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003484:	4649      	mov	r1, r9
 8003486:	008b      	lsls	r3, r1, #2
 8003488:	4641      	mov	r1, r8
 800348a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800348e:	4641      	mov	r1, r8
 8003490:	008a      	lsls	r2, r1, #2
 8003492:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003496:	f7fc fea3 	bl	80001e0 <__aeabi_uldivmod>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	4b39      	ldr	r3, [pc, #228]	; (8003584 <UART_SetConfig+0x4e4>)
 80034a0:	fba3 1302 	umull	r1, r3, r3, r2
 80034a4:	095b      	lsrs	r3, r3, #5
 80034a6:	2164      	movs	r1, #100	; 0x64
 80034a8:	fb01 f303 	mul.w	r3, r1, r3
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	3332      	adds	r3, #50	; 0x32
 80034b2:	4a34      	ldr	r2, [pc, #208]	; (8003584 <UART_SetConfig+0x4e4>)
 80034b4:	fba2 2303 	umull	r2, r3, r2, r3
 80034b8:	095b      	lsrs	r3, r3, #5
 80034ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034be:	441c      	add	r4, r3
 80034c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034c4:	2200      	movs	r2, #0
 80034c6:	673b      	str	r3, [r7, #112]	; 0x70
 80034c8:	677a      	str	r2, [r7, #116]	; 0x74
 80034ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80034ce:	4642      	mov	r2, r8
 80034d0:	464b      	mov	r3, r9
 80034d2:	1891      	adds	r1, r2, r2
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	415b      	adcs	r3, r3
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034de:	4641      	mov	r1, r8
 80034e0:	1851      	adds	r1, r2, r1
 80034e2:	6039      	str	r1, [r7, #0]
 80034e4:	4649      	mov	r1, r9
 80034e6:	414b      	adcs	r3, r1
 80034e8:	607b      	str	r3, [r7, #4]
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	f04f 0300 	mov.w	r3, #0
 80034f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80034f6:	4659      	mov	r1, fp
 80034f8:	00cb      	lsls	r3, r1, #3
 80034fa:	4651      	mov	r1, sl
 80034fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003500:	4651      	mov	r1, sl
 8003502:	00ca      	lsls	r2, r1, #3
 8003504:	4610      	mov	r0, r2
 8003506:	4619      	mov	r1, r3
 8003508:	4603      	mov	r3, r0
 800350a:	4642      	mov	r2, r8
 800350c:	189b      	adds	r3, r3, r2
 800350e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003510:	464b      	mov	r3, r9
 8003512:	460a      	mov	r2, r1
 8003514:	eb42 0303 	adc.w	r3, r2, r3
 8003518:	66fb      	str	r3, [r7, #108]	; 0x6c
 800351a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	663b      	str	r3, [r7, #96]	; 0x60
 8003524:	667a      	str	r2, [r7, #100]	; 0x64
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003532:	4649      	mov	r1, r9
 8003534:	008b      	lsls	r3, r1, #2
 8003536:	4641      	mov	r1, r8
 8003538:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800353c:	4641      	mov	r1, r8
 800353e:	008a      	lsls	r2, r1, #2
 8003540:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003544:	f7fc fe4c 	bl	80001e0 <__aeabi_uldivmod>
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	4b0d      	ldr	r3, [pc, #52]	; (8003584 <UART_SetConfig+0x4e4>)
 800354e:	fba3 1302 	umull	r1, r3, r3, r2
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	2164      	movs	r1, #100	; 0x64
 8003556:	fb01 f303 	mul.w	r3, r1, r3
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	3332      	adds	r3, #50	; 0x32
 8003560:	4a08      	ldr	r2, [pc, #32]	; (8003584 <UART_SetConfig+0x4e4>)
 8003562:	fba2 2303 	umull	r2, r3, r2, r3
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	f003 020f 	and.w	r2, r3, #15
 800356c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4422      	add	r2, r4
 8003574:	609a      	str	r2, [r3, #8]
}
 8003576:	bf00      	nop
 8003578:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800357c:	46bd      	mov	sp, r7
 800357e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003582:	bf00      	nop
 8003584:	51eb851f 	.word	0x51eb851f

08003588 <__NVIC_SetPriority>:
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	6039      	str	r1, [r7, #0]
 8003592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003598:	2b00      	cmp	r3, #0
 800359a:	db0a      	blt.n	80035b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	490c      	ldr	r1, [pc, #48]	; (80035d4 <__NVIC_SetPriority+0x4c>)
 80035a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a6:	0112      	lsls	r2, r2, #4
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	440b      	add	r3, r1
 80035ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80035b0:	e00a      	b.n	80035c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	4908      	ldr	r1, [pc, #32]	; (80035d8 <__NVIC_SetPriority+0x50>)
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	3b04      	subs	r3, #4
 80035c0:	0112      	lsls	r2, r2, #4
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	440b      	add	r3, r1
 80035c6:	761a      	strb	r2, [r3, #24]
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	e000e100 	.word	0xe000e100
 80035d8:	e000ed00 	.word	0xe000ed00

080035dc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80035e0:	4b05      	ldr	r3, [pc, #20]	; (80035f8 <SysTick_Handler+0x1c>)
 80035e2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80035e4:	f001 ffa8 	bl	8005538 <xTaskGetSchedulerState>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d001      	beq.n	80035f2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80035ee:	f002 fe8b 	bl	8006308 <xPortSysTickHandler>
  }
}
 80035f2:	bf00      	nop
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	e000e010 	.word	0xe000e010

080035fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003600:	2100      	movs	r1, #0
 8003602:	f06f 0004 	mvn.w	r0, #4
 8003606:	f7ff ffbf 	bl	8003588 <__NVIC_SetPriority>
#endif
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003616:	f3ef 8305 	mrs	r3, IPSR
 800361a:	603b      	str	r3, [r7, #0]
  return(result);
 800361c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003622:	f06f 0305 	mvn.w	r3, #5
 8003626:	607b      	str	r3, [r7, #4]
 8003628:	e00c      	b.n	8003644 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800362a:	4b0a      	ldr	r3, [pc, #40]	; (8003654 <osKernelInitialize+0x44>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d105      	bne.n	800363e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003632:	4b08      	ldr	r3, [pc, #32]	; (8003654 <osKernelInitialize+0x44>)
 8003634:	2201      	movs	r2, #1
 8003636:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003638:	2300      	movs	r3, #0
 800363a:	607b      	str	r3, [r7, #4]
 800363c:	e002      	b.n	8003644 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800363e:	f04f 33ff 	mov.w	r3, #4294967295
 8003642:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003644:	687b      	ldr	r3, [r7, #4]
}
 8003646:	4618      	mov	r0, r3
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	200001b4 	.word	0x200001b4

08003658 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800365e:	f3ef 8305 	mrs	r3, IPSR
 8003662:	603b      	str	r3, [r7, #0]
  return(result);
 8003664:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <osKernelStart+0x1a>
    stat = osErrorISR;
 800366a:	f06f 0305 	mvn.w	r3, #5
 800366e:	607b      	str	r3, [r7, #4]
 8003670:	e010      	b.n	8003694 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003672:	4b0b      	ldr	r3, [pc, #44]	; (80036a0 <osKernelStart+0x48>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d109      	bne.n	800368e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800367a:	f7ff ffbf 	bl	80035fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800367e:	4b08      	ldr	r3, [pc, #32]	; (80036a0 <osKernelStart+0x48>)
 8003680:	2202      	movs	r2, #2
 8003682:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003684:	f001 fafc 	bl	8004c80 <vTaskStartScheduler>
      stat = osOK;
 8003688:	2300      	movs	r3, #0
 800368a:	607b      	str	r3, [r7, #4]
 800368c:	e002      	b.n	8003694 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800368e:	f04f 33ff 	mov.w	r3, #4294967295
 8003692:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003694:	687b      	ldr	r3, [r7, #4]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	200001b4 	.word	0x200001b4

080036a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08e      	sub	sp, #56	; 0x38
 80036a8:	af04      	add	r7, sp, #16
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80036b0:	2300      	movs	r3, #0
 80036b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036b4:	f3ef 8305 	mrs	r3, IPSR
 80036b8:	617b      	str	r3, [r7, #20]
  return(result);
 80036ba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d17e      	bne.n	80037be <osThreadNew+0x11a>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d07b      	beq.n	80037be <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80036c6:	2380      	movs	r3, #128	; 0x80
 80036c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80036ca:	2318      	movs	r3, #24
 80036cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80036d2:	f04f 33ff 	mov.w	r3, #4294967295
 80036d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d045      	beq.n	800376a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <osThreadNew+0x48>
        name = attr->name;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d008      	beq.n	8003712 <osThreadNew+0x6e>
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	2b38      	cmp	r3, #56	; 0x38
 8003704:	d805      	bhi.n	8003712 <osThreadNew+0x6e>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <osThreadNew+0x72>
        return (NULL);
 8003712:	2300      	movs	r3, #0
 8003714:	e054      	b.n	80037c0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	089b      	lsrs	r3, r3, #2
 8003724:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00e      	beq.n	800374c <osThreadNew+0xa8>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	2bbb      	cmp	r3, #187	; 0xbb
 8003734:	d90a      	bls.n	800374c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800373a:	2b00      	cmp	r3, #0
 800373c:	d006      	beq.n	800374c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <osThreadNew+0xa8>
        mem = 1;
 8003746:	2301      	movs	r3, #1
 8003748:	61bb      	str	r3, [r7, #24]
 800374a:	e010      	b.n	800376e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10c      	bne.n	800376e <osThreadNew+0xca>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d108      	bne.n	800376e <osThreadNew+0xca>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d104      	bne.n	800376e <osThreadNew+0xca>
          mem = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	61bb      	str	r3, [r7, #24]
 8003768:	e001      	b.n	800376e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d110      	bne.n	8003796 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800377c:	9202      	str	r2, [sp, #8]
 800377e:	9301      	str	r3, [sp, #4]
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	6a3a      	ldr	r2, [r7, #32]
 8003788:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f001 f80e 	bl	80047ac <xTaskCreateStatic>
 8003790:	4603      	mov	r3, r0
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	e013      	b.n	80037be <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d110      	bne.n	80037be <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	b29a      	uxth	r2, r3
 80037a0:	f107 0310 	add.w	r3, r7, #16
 80037a4:	9301      	str	r3, [sp, #4]
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f001 f859 	bl	8004866 <xTaskCreate>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d001      	beq.n	80037be <osThreadNew+0x11a>
            hTask = NULL;
 80037ba:	2300      	movs	r3, #0
 80037bc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80037be:	693b      	ldr	r3, [r7, #16]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3728      	adds	r7, #40	; 0x28
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037d0:	f3ef 8305 	mrs	r3, IPSR
 80037d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80037d6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d003      	beq.n	80037e4 <osDelay+0x1c>
    stat = osErrorISR;
 80037dc:	f06f 0305 	mvn.w	r3, #5
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	e007      	b.n	80037f4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f001 fa12 	bl	8004c18 <vTaskDelay>
    }
  }

  return (stat);
 80037f4:	68fb      	ldr	r3, [r7, #12]
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80037fe:	b580      	push	{r7, lr}
 8003800:	b08a      	sub	sp, #40	; 0x28
 8003802:	af02      	add	r7, sp, #8
 8003804:	60f8      	str	r0, [r7, #12]
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800380a:	2300      	movs	r3, #0
 800380c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800380e:	f3ef 8305 	mrs	r3, IPSR
 8003812:	613b      	str	r3, [r7, #16]
  return(result);
 8003814:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003816:	2b00      	cmp	r3, #0
 8003818:	d15f      	bne.n	80038da <osMessageQueueNew+0xdc>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d05c      	beq.n	80038da <osMessageQueueNew+0xdc>
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d059      	beq.n	80038da <osMessageQueueNew+0xdc>
    mem = -1;
 8003826:	f04f 33ff 	mov.w	r3, #4294967295
 800382a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d029      	beq.n	8003886 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d012      	beq.n	8003860 <osMessageQueueNew+0x62>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	2b4f      	cmp	r3, #79	; 0x4f
 8003840:	d90e      	bls.n	8003860 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00a      	beq.n	8003860 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695a      	ldr	r2, [r3, #20]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	68b9      	ldr	r1, [r7, #8]
 8003852:	fb01 f303 	mul.w	r3, r1, r3
 8003856:	429a      	cmp	r2, r3
 8003858:	d302      	bcc.n	8003860 <osMessageQueueNew+0x62>
        mem = 1;
 800385a:	2301      	movs	r3, #1
 800385c:	61bb      	str	r3, [r7, #24]
 800385e:	e014      	b.n	800388a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d110      	bne.n	800388a <osMessageQueueNew+0x8c>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10c      	bne.n	800388a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003874:	2b00      	cmp	r3, #0
 8003876:	d108      	bne.n	800388a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d104      	bne.n	800388a <osMessageQueueNew+0x8c>
          mem = 0;
 8003880:	2300      	movs	r3, #0
 8003882:	61bb      	str	r3, [r7, #24]
 8003884:	e001      	b.n	800388a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003886:	2300      	movs	r3, #0
 8003888:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d10b      	bne.n	80038a8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691a      	ldr	r2, [r3, #16]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2100      	movs	r1, #0
 800389a:	9100      	str	r1, [sp, #0]
 800389c:	68b9      	ldr	r1, [r7, #8]
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 f970 	bl	8003b84 <xQueueGenericCreateStatic>
 80038a4:	61f8      	str	r0, [r7, #28]
 80038a6:	e008      	b.n	80038ba <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d105      	bne.n	80038ba <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80038ae:	2200      	movs	r2, #0
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f9de 	bl	8003c74 <xQueueGenericCreate>
 80038b8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00c      	beq.n	80038da <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <osMessageQueueNew+0xd0>
        name = attr->name;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	e001      	b.n	80038d2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80038d2:	6979      	ldr	r1, [r7, #20]
 80038d4:	69f8      	ldr	r0, [r7, #28]
 80038d6:	f000 ff0b 	bl	80046f0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80038da:	69fb      	ldr	r3, [r7, #28]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3720      	adds	r7, #32
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4a07      	ldr	r2, [pc, #28]	; (8003910 <vApplicationGetIdleTaskMemory+0x2c>)
 80038f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	4a06      	ldr	r2, [pc, #24]	; (8003914 <vApplicationGetIdleTaskMemory+0x30>)
 80038fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2280      	movs	r2, #128	; 0x80
 8003900:	601a      	str	r2, [r3, #0]
}
 8003902:	bf00      	nop
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	200001b8 	.word	0x200001b8
 8003914:	20000274 	.word	0x20000274

08003918 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4a07      	ldr	r2, [pc, #28]	; (8003944 <vApplicationGetTimerTaskMemory+0x2c>)
 8003928:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	4a06      	ldr	r2, [pc, #24]	; (8003948 <vApplicationGetTimerTaskMemory+0x30>)
 800392e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003936:	601a      	str	r2, [r3, #0]
}
 8003938:	bf00      	nop
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	20000474 	.word	0x20000474
 8003948:	20000530 	.word	0x20000530

0800394c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f103 0208 	add.w	r2, r3, #8
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f04f 32ff 	mov.w	r2, #4294967295
 8003964:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f103 0208 	add.w	r2, r3, #8
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f103 0208 	add.w	r2, r3, #8
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039a6:	b480      	push	{r7}
 80039a8:	b085      	sub	sp, #20
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	601a      	str	r2, [r3, #0]
}
 80039e2:	bf00      	nop
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039ee:	b480      	push	{r7}
 80039f0:	b085      	sub	sp, #20
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a04:	d103      	bne.n	8003a0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	e00c      	b.n	8003a28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	3308      	adds	r3, #8
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	e002      	b.n	8003a1c <vListInsert+0x2e>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d2f6      	bcs.n	8003a16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	601a      	str	r2, [r3, #0]
}
 8003a54:	bf00      	nop
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6892      	ldr	r2, [r2, #8]
 8003a76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6852      	ldr	r2, [r2, #4]
 8003a80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d103      	bne.n	8003a94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	1e5a      	subs	r2, r3, #1
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3714      	adds	r7, #20
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10a      	bne.n	8003ade <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003acc:	f383 8811 	msr	BASEPRI, r3
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ada:	bf00      	nop
 8003adc:	e7fe      	b.n	8003adc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003ade:	f002 fb81 	bl	80061e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aea:	68f9      	ldr	r1, [r7, #12]
 8003aec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003aee:	fb01 f303 	mul.w	r3, r1, r3
 8003af2:	441a      	add	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	68f9      	ldr	r1, [r7, #12]
 8003b12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003b14:	fb01 f303 	mul.w	r3, r1, r3
 8003b18:	441a      	add	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	22ff      	movs	r2, #255	; 0xff
 8003b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	22ff      	movs	r2, #255	; 0xff
 8003b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d114      	bne.n	8003b5e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d01a      	beq.n	8003b72 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	3310      	adds	r3, #16
 8003b40:	4618      	mov	r0, r3
 8003b42:	f001 fb37 	bl	80051b4 <xTaskRemoveFromEventList>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d012      	beq.n	8003b72 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003b4c:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <xQueueGenericReset+0xcc>)
 8003b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	f3bf 8f6f 	isb	sy
 8003b5c:	e009      	b.n	8003b72 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	3310      	adds	r3, #16
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff fef2 	bl	800394c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	3324      	adds	r3, #36	; 0x24
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff feed 	bl	800394c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003b72:	f002 fb67 	bl	8006244 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003b76:	2301      	movs	r3, #1
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	e000ed04 	.word	0xe000ed04

08003b84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08e      	sub	sp, #56	; 0x38
 8003b88:	af02      	add	r7, sp, #8
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10a      	bne.n	8003bae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9c:	f383 8811 	msr	BASEPRI, r3
 8003ba0:	f3bf 8f6f 	isb	sy
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003baa:	bf00      	nop
 8003bac:	e7fe      	b.n	8003bac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10a      	bne.n	8003bca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb8:	f383 8811 	msr	BASEPRI, r3
 8003bbc:	f3bf 8f6f 	isb	sy
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003bc6:	bf00      	nop
 8003bc8:	e7fe      	b.n	8003bc8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d002      	beq.n	8003bd6 <xQueueGenericCreateStatic+0x52>
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <xQueueGenericCreateStatic+0x56>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e000      	b.n	8003bdc <xQueueGenericCreateStatic+0x58>
 8003bda:	2300      	movs	r3, #0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10a      	bne.n	8003bf6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be4:	f383 8811 	msr	BASEPRI, r3
 8003be8:	f3bf 8f6f 	isb	sy
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	623b      	str	r3, [r7, #32]
}
 8003bf2:	bf00      	nop
 8003bf4:	e7fe      	b.n	8003bf4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d102      	bne.n	8003c02 <xQueueGenericCreateStatic+0x7e>
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <xQueueGenericCreateStatic+0x82>
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <xQueueGenericCreateStatic+0x84>
 8003c06:	2300      	movs	r3, #0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10a      	bne.n	8003c22 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c10:	f383 8811 	msr	BASEPRI, r3
 8003c14:	f3bf 8f6f 	isb	sy
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	61fb      	str	r3, [r7, #28]
}
 8003c1e:	bf00      	nop
 8003c20:	e7fe      	b.n	8003c20 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003c22:	2350      	movs	r3, #80	; 0x50
 8003c24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b50      	cmp	r3, #80	; 0x50
 8003c2a:	d00a      	beq.n	8003c42 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c30:	f383 8811 	msr	BASEPRI, r3
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	61bb      	str	r3, [r7, #24]
}
 8003c3e:	bf00      	nop
 8003c40:	e7fe      	b.n	8003c40 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003c42:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00d      	beq.n	8003c6a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c56:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	68b9      	ldr	r1, [r7, #8]
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 f83f 	bl	8003ce8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3730      	adds	r7, #48	; 0x30
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08a      	sub	sp, #40	; 0x28
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10a      	bne.n	8003c9e <xQueueGenericCreate+0x2a>
	__asm volatile
 8003c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8c:	f383 8811 	msr	BASEPRI, r3
 8003c90:	f3bf 8f6f 	isb	sy
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	613b      	str	r3, [r7, #16]
}
 8003c9a:	bf00      	nop
 8003c9c:	e7fe      	b.n	8003c9c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	fb02 f303 	mul.w	r3, r2, r3
 8003ca6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	3350      	adds	r3, #80	; 0x50
 8003cac:	4618      	mov	r0, r3
 8003cae:	f002 fbbb 	bl	8006428 <pvPortMalloc>
 8003cb2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d011      	beq.n	8003cde <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	3350      	adds	r3, #80	; 0x50
 8003cc2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ccc:	79fa      	ldrb	r2, [r7, #7]
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	68b9      	ldr	r1, [r7, #8]
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 f805 	bl	8003ce8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003cde:	69bb      	ldr	r3, [r7, #24]
	}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3720      	adds	r7, #32
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
 8003cf4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d103      	bne.n	8003d04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	e002      	b.n	8003d0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d16:	2101      	movs	r1, #1
 8003d18:	69b8      	ldr	r0, [r7, #24]
 8003d1a:	f7ff fecb 	bl	8003ab4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	78fa      	ldrb	r2, [r7, #3]
 8003d22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003d26:	bf00      	nop
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b082      	sub	sp, #8
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00e      	beq.n	8003d5a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003d4e:	2300      	movs	r3, #0
 8003d50:	2200      	movs	r2, #0
 8003d52:	2100      	movs	r1, #0
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f81d 	bl	8003d94 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003d5a:	bf00      	nop
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b086      	sub	sp, #24
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	4603      	mov	r3, r0
 8003d6a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	2300      	movs	r3, #0
 8003d72:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003d74:	79fb      	ldrb	r3, [r7, #7]
 8003d76:	461a      	mov	r2, r3
 8003d78:	6939      	ldr	r1, [r7, #16]
 8003d7a:	6978      	ldr	r0, [r7, #20]
 8003d7c:	f7ff ff7a 	bl	8003c74 <xQueueGenericCreate>
 8003d80:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f7ff ffd3 	bl	8003d2e <prvInitialiseMutex>

		return xNewQueue;
 8003d88:	68fb      	ldr	r3, [r7, #12]
	}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b08e      	sub	sp, #56	; 0x38
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
 8003da0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003da2:	2300      	movs	r3, #0
 8003da4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10a      	bne.n	8003dc6 <xQueueGenericSend+0x32>
	__asm volatile
 8003db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db4:	f383 8811 	msr	BASEPRI, r3
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003dc2:	bf00      	nop
 8003dc4:	e7fe      	b.n	8003dc4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d103      	bne.n	8003dd4 <xQueueGenericSend+0x40>
 8003dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <xQueueGenericSend+0x44>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e000      	b.n	8003dda <xQueueGenericSend+0x46>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10a      	bne.n	8003df4 <xQueueGenericSend+0x60>
	__asm volatile
 8003dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de2:	f383 8811 	msr	BASEPRI, r3
 8003de6:	f3bf 8f6f 	isb	sy
 8003dea:	f3bf 8f4f 	dsb	sy
 8003dee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003df0:	bf00      	nop
 8003df2:	e7fe      	b.n	8003df2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d103      	bne.n	8003e02 <xQueueGenericSend+0x6e>
 8003dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d101      	bne.n	8003e06 <xQueueGenericSend+0x72>
 8003e02:	2301      	movs	r3, #1
 8003e04:	e000      	b.n	8003e08 <xQueueGenericSend+0x74>
 8003e06:	2300      	movs	r3, #0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10a      	bne.n	8003e22 <xQueueGenericSend+0x8e>
	__asm volatile
 8003e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e10:	f383 8811 	msr	BASEPRI, r3
 8003e14:	f3bf 8f6f 	isb	sy
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	623b      	str	r3, [r7, #32]
}
 8003e1e:	bf00      	nop
 8003e20:	e7fe      	b.n	8003e20 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e22:	f001 fb89 	bl	8005538 <xTaskGetSchedulerState>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d102      	bne.n	8003e32 <xQueueGenericSend+0x9e>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <xQueueGenericSend+0xa2>
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <xQueueGenericSend+0xa4>
 8003e36:	2300      	movs	r3, #0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10a      	bne.n	8003e52 <xQueueGenericSend+0xbe>
	__asm volatile
 8003e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e40:	f383 8811 	msr	BASEPRI, r3
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	61fb      	str	r3, [r7, #28]
}
 8003e4e:	bf00      	nop
 8003e50:	e7fe      	b.n	8003e50 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e52:	f002 f9c7 	bl	80061e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d302      	bcc.n	8003e68 <xQueueGenericSend+0xd4>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d129      	bne.n	8003ebc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	68b9      	ldr	r1, [r7, #8]
 8003e6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e6e:	f000 fb2f 	bl	80044d0 <prvCopyDataToQueue>
 8003e72:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d010      	beq.n	8003e9e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7e:	3324      	adds	r3, #36	; 0x24
 8003e80:	4618      	mov	r0, r3
 8003e82:	f001 f997 	bl	80051b4 <xTaskRemoveFromEventList>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d013      	beq.n	8003eb4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003e8c:	4b3f      	ldr	r3, [pc, #252]	; (8003f8c <xQueueGenericSend+0x1f8>)
 8003e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	f3bf 8f4f 	dsb	sy
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	e00a      	b.n	8003eb4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d007      	beq.n	8003eb4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ea4:	4b39      	ldr	r3, [pc, #228]	; (8003f8c <xQueueGenericSend+0x1f8>)
 8003ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003eb4:	f002 f9c6 	bl	8006244 <vPortExitCritical>
				return pdPASS;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e063      	b.n	8003f84 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d103      	bne.n	8003eca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ec2:	f002 f9bf 	bl	8006244 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	e05c      	b.n	8003f84 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d106      	bne.n	8003ede <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ed0:	f107 0314 	add.w	r3, r7, #20
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f001 f9d1 	bl	800527c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003eda:	2301      	movs	r3, #1
 8003edc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ede:	f002 f9b1 	bl	8006244 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ee2:	f000 ff3d 	bl	8004d60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ee6:	f002 f97d 	bl	80061e4 <vPortEnterCritical>
 8003eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ef0:	b25b      	sxtb	r3, r3
 8003ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef6:	d103      	bne.n	8003f00 <xQueueGenericSend+0x16c>
 8003ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f06:	b25b      	sxtb	r3, r3
 8003f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0c:	d103      	bne.n	8003f16 <xQueueGenericSend+0x182>
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f16:	f002 f995 	bl	8006244 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f1a:	1d3a      	adds	r2, r7, #4
 8003f1c:	f107 0314 	add.w	r3, r7, #20
 8003f20:	4611      	mov	r1, r2
 8003f22:	4618      	mov	r0, r3
 8003f24:	f001 f9c0 	bl	80052a8 <xTaskCheckForTimeOut>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d124      	bne.n	8003f78 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f30:	f000 fbc6 	bl	80046c0 <prvIsQueueFull>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d018      	beq.n	8003f6c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3c:	3310      	adds	r3, #16
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	4611      	mov	r1, r2
 8003f42:	4618      	mov	r0, r3
 8003f44:	f001 f8e6 	bl	8005114 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003f48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f4a:	f000 fb51 	bl	80045f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f4e:	f000 ff15 	bl	8004d7c <xTaskResumeAll>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f47f af7c 	bne.w	8003e52 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003f5a:	4b0c      	ldr	r3, [pc, #48]	; (8003f8c <xQueueGenericSend+0x1f8>)
 8003f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	f3bf 8f4f 	dsb	sy
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	e772      	b.n	8003e52 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003f6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f6e:	f000 fb3f 	bl	80045f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f72:	f000 ff03 	bl	8004d7c <xTaskResumeAll>
 8003f76:	e76c      	b.n	8003e52 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f7a:	f000 fb39 	bl	80045f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f7e:	f000 fefd 	bl	8004d7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3738      	adds	r7, #56	; 0x38
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	e000ed04 	.word	0xe000ed04

08003f90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b090      	sub	sp, #64	; 0x40
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10a      	bne.n	8003fbe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fac:	f383 8811 	msr	BASEPRI, r3
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003fba:	bf00      	nop
 8003fbc:	e7fe      	b.n	8003fbc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d103      	bne.n	8003fcc <xQueueGenericSendFromISR+0x3c>
 8003fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <xQueueGenericSendFromISR+0x40>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e000      	b.n	8003fd2 <xQueueGenericSendFromISR+0x42>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10a      	bne.n	8003fec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fda:	f383 8811 	msr	BASEPRI, r3
 8003fde:	f3bf 8f6f 	isb	sy
 8003fe2:	f3bf 8f4f 	dsb	sy
 8003fe6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003fe8:	bf00      	nop
 8003fea:	e7fe      	b.n	8003fea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d103      	bne.n	8003ffa <xQueueGenericSendFromISR+0x6a>
 8003ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d101      	bne.n	8003ffe <xQueueGenericSendFromISR+0x6e>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e000      	b.n	8004000 <xQueueGenericSendFromISR+0x70>
 8003ffe:	2300      	movs	r3, #0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10a      	bne.n	800401a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004008:	f383 8811 	msr	BASEPRI, r3
 800400c:	f3bf 8f6f 	isb	sy
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	623b      	str	r3, [r7, #32]
}
 8004016:	bf00      	nop
 8004018:	e7fe      	b.n	8004018 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800401a:	f002 f9c5 	bl	80063a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800401e:	f3ef 8211 	mrs	r2, BASEPRI
 8004022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004026:	f383 8811 	msr	BASEPRI, r3
 800402a:	f3bf 8f6f 	isb	sy
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	61fa      	str	r2, [r7, #28]
 8004034:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004036:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004038:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800403a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800403e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004042:	429a      	cmp	r2, r3
 8004044:	d302      	bcc.n	800404c <xQueueGenericSendFromISR+0xbc>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b02      	cmp	r3, #2
 800404a:	d12f      	bne.n	80040ac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800404c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	68b9      	ldr	r1, [r7, #8]
 8004060:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004062:	f000 fa35 	bl	80044d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004066:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800406a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406e:	d112      	bne.n	8004096 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	2b00      	cmp	r3, #0
 8004076:	d016      	beq.n	80040a6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407a:	3324      	adds	r3, #36	; 0x24
 800407c:	4618      	mov	r0, r3
 800407e:	f001 f899 	bl	80051b4 <xTaskRemoveFromEventList>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00e      	beq.n	80040a6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00b      	beq.n	80040a6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	e007      	b.n	80040a6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004096:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800409a:	3301      	adds	r3, #1
 800409c:	b2db      	uxtb	r3, r3
 800409e:	b25a      	sxtb	r2, r3
 80040a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80040a6:	2301      	movs	r3, #1
 80040a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80040aa:	e001      	b.n	80040b0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80040ac:	2300      	movs	r3, #0
 80040ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80040ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80040bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3740      	adds	r7, #64	; 0x40
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
	...

080040c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b08c      	sub	sp, #48	; 0x30
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80040d4:	2300      	movs	r3, #0
 80040d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80040dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10a      	bne.n	80040f8 <xQueueReceive+0x30>
	__asm volatile
 80040e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e6:	f383 8811 	msr	BASEPRI, r3
 80040ea:	f3bf 8f6f 	isb	sy
 80040ee:	f3bf 8f4f 	dsb	sy
 80040f2:	623b      	str	r3, [r7, #32]
}
 80040f4:	bf00      	nop
 80040f6:	e7fe      	b.n	80040f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d103      	bne.n	8004106 <xQueueReceive+0x3e>
 80040fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <xQueueReceive+0x42>
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <xQueueReceive+0x44>
 800410a:	2300      	movs	r3, #0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10a      	bne.n	8004126 <xQueueReceive+0x5e>
	__asm volatile
 8004110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	61fb      	str	r3, [r7, #28]
}
 8004122:	bf00      	nop
 8004124:	e7fe      	b.n	8004124 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004126:	f001 fa07 	bl	8005538 <xTaskGetSchedulerState>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d102      	bne.n	8004136 <xQueueReceive+0x6e>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <xQueueReceive+0x72>
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <xQueueReceive+0x74>
 800413a:	2300      	movs	r3, #0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10a      	bne.n	8004156 <xQueueReceive+0x8e>
	__asm volatile
 8004140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004144:	f383 8811 	msr	BASEPRI, r3
 8004148:	f3bf 8f6f 	isb	sy
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	61bb      	str	r3, [r7, #24]
}
 8004152:	bf00      	nop
 8004154:	e7fe      	b.n	8004154 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004156:	f002 f845 	bl	80061e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800415a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004162:	2b00      	cmp	r3, #0
 8004164:	d01f      	beq.n	80041a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004166:	68b9      	ldr	r1, [r7, #8]
 8004168:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800416a:	f000 fa1b 	bl	80045a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	1e5a      	subs	r2, r3, #1
 8004172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004174:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00f      	beq.n	800419e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800417e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004180:	3310      	adds	r3, #16
 8004182:	4618      	mov	r0, r3
 8004184:	f001 f816 	bl	80051b4 <xTaskRemoveFromEventList>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d007      	beq.n	800419e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800418e:	4b3d      	ldr	r3, [pc, #244]	; (8004284 <xQueueReceive+0x1bc>)
 8004190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	f3bf 8f4f 	dsb	sy
 800419a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800419e:	f002 f851 	bl	8006244 <vPortExitCritical>
				return pdPASS;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e069      	b.n	800427a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d103      	bne.n	80041b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041ac:	f002 f84a 	bl	8006244 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80041b0:	2300      	movs	r3, #0
 80041b2:	e062      	b.n	800427a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041ba:	f107 0310 	add.w	r3, r7, #16
 80041be:	4618      	mov	r0, r3
 80041c0:	f001 f85c 	bl	800527c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041c4:	2301      	movs	r3, #1
 80041c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041c8:	f002 f83c 	bl	8006244 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041cc:	f000 fdc8 	bl	8004d60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041d0:	f002 f808 	bl	80061e4 <vPortEnterCritical>
 80041d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041da:	b25b      	sxtb	r3, r3
 80041dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e0:	d103      	bne.n	80041ea <xQueueReceive+0x122>
 80041e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041f0:	b25b      	sxtb	r3, r3
 80041f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f6:	d103      	bne.n	8004200 <xQueueReceive+0x138>
 80041f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004200:	f002 f820 	bl	8006244 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004204:	1d3a      	adds	r2, r7, #4
 8004206:	f107 0310 	add.w	r3, r7, #16
 800420a:	4611      	mov	r1, r2
 800420c:	4618      	mov	r0, r3
 800420e:	f001 f84b 	bl	80052a8 <xTaskCheckForTimeOut>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d123      	bne.n	8004260 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800421a:	f000 fa3b 	bl	8004694 <prvIsQueueEmpty>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d017      	beq.n	8004254 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004226:	3324      	adds	r3, #36	; 0x24
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	4611      	mov	r1, r2
 800422c:	4618      	mov	r0, r3
 800422e:	f000 ff71 	bl	8005114 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004234:	f000 f9dc 	bl	80045f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004238:	f000 fda0 	bl	8004d7c <xTaskResumeAll>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d189      	bne.n	8004156 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004242:	4b10      	ldr	r3, [pc, #64]	; (8004284 <xQueueReceive+0x1bc>)
 8004244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	e780      	b.n	8004156 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004256:	f000 f9cb 	bl	80045f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800425a:	f000 fd8f 	bl	8004d7c <xTaskResumeAll>
 800425e:	e77a      	b.n	8004156 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004262:	f000 f9c5 	bl	80045f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004266:	f000 fd89 	bl	8004d7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800426a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800426c:	f000 fa12 	bl	8004694 <prvIsQueueEmpty>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	f43f af6f 	beq.w	8004156 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004278:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800427a:	4618      	mov	r0, r3
 800427c:	3730      	adds	r7, #48	; 0x30
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	e000ed04 	.word	0xe000ed04

08004288 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08e      	sub	sp, #56	; 0x38
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004292:	2300      	movs	r3, #0
 8004294:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800429a:	2300      	movs	r3, #0
 800429c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800429e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10a      	bne.n	80042ba <xQueueSemaphoreTake+0x32>
	__asm volatile
 80042a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a8:	f383 8811 	msr	BASEPRI, r3
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	623b      	str	r3, [r7, #32]
}
 80042b6:	bf00      	nop
 80042b8:	e7fe      	b.n	80042b8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80042ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00a      	beq.n	80042d8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	61fb      	str	r3, [r7, #28]
}
 80042d4:	bf00      	nop
 80042d6:	e7fe      	b.n	80042d6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042d8:	f001 f92e 	bl	8005538 <xTaskGetSchedulerState>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d102      	bne.n	80042e8 <xQueueSemaphoreTake+0x60>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <xQueueSemaphoreTake+0x64>
 80042e8:	2301      	movs	r3, #1
 80042ea:	e000      	b.n	80042ee <xQueueSemaphoreTake+0x66>
 80042ec:	2300      	movs	r3, #0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10a      	bne.n	8004308 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80042f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f6:	f383 8811 	msr	BASEPRI, r3
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	61bb      	str	r3, [r7, #24]
}
 8004304:	bf00      	nop
 8004306:	e7fe      	b.n	8004306 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004308:	f001 ff6c 	bl	80061e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800430c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004310:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004314:	2b00      	cmp	r3, #0
 8004316:	d024      	beq.n	8004362 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431a:	1e5a      	subs	r2, r3, #1
 800431c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d104      	bne.n	8004332 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004328:	f001 fa7c 	bl	8005824 <pvTaskIncrementMutexHeldCount>
 800432c:	4602      	mov	r2, r0
 800432e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004330:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00f      	beq.n	800435a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800433a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433c:	3310      	adds	r3, #16
 800433e:	4618      	mov	r0, r3
 8004340:	f000 ff38 	bl	80051b4 <xTaskRemoveFromEventList>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d007      	beq.n	800435a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800434a:	4b54      	ldr	r3, [pc, #336]	; (800449c <xQueueSemaphoreTake+0x214>)
 800434c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	f3bf 8f4f 	dsb	sy
 8004356:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800435a:	f001 ff73 	bl	8006244 <vPortExitCritical>
				return pdPASS;
 800435e:	2301      	movs	r3, #1
 8004360:	e097      	b.n	8004492 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d111      	bne.n	800438c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800436e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004372:	f383 8811 	msr	BASEPRI, r3
 8004376:	f3bf 8f6f 	isb	sy
 800437a:	f3bf 8f4f 	dsb	sy
 800437e:	617b      	str	r3, [r7, #20]
}
 8004380:	bf00      	nop
 8004382:	e7fe      	b.n	8004382 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004384:	f001 ff5e 	bl	8006244 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004388:	2300      	movs	r3, #0
 800438a:	e082      	b.n	8004492 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800438c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800438e:	2b00      	cmp	r3, #0
 8004390:	d106      	bne.n	80043a0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004392:	f107 030c 	add.w	r3, r7, #12
 8004396:	4618      	mov	r0, r3
 8004398:	f000 ff70 	bl	800527c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800439c:	2301      	movs	r3, #1
 800439e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043a0:	f001 ff50 	bl	8006244 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043a4:	f000 fcdc 	bl	8004d60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043a8:	f001 ff1c 	bl	80061e4 <vPortEnterCritical>
 80043ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043b2:	b25b      	sxtb	r3, r3
 80043b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b8:	d103      	bne.n	80043c2 <xQueueSemaphoreTake+0x13a>
 80043ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043c8:	b25b      	sxtb	r3, r3
 80043ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ce:	d103      	bne.n	80043d8 <xQueueSemaphoreTake+0x150>
 80043d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043d8:	f001 ff34 	bl	8006244 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043dc:	463a      	mov	r2, r7
 80043de:	f107 030c 	add.w	r3, r7, #12
 80043e2:	4611      	mov	r1, r2
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 ff5f 	bl	80052a8 <xTaskCheckForTimeOut>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d132      	bne.n	8004456 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043f2:	f000 f94f 	bl	8004694 <prvIsQueueEmpty>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d026      	beq.n	800444a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80043fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d109      	bne.n	8004418 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004404:	f001 feee 	bl	80061e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	4618      	mov	r0, r3
 800440e:	f001 f8b1 	bl	8005574 <xTaskPriorityInherit>
 8004412:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004414:	f001 ff16 	bl	8006244 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441a:	3324      	adds	r3, #36	; 0x24
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	4611      	mov	r1, r2
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fe77 	bl	8005114 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004426:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004428:	f000 f8e2 	bl	80045f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800442c:	f000 fca6 	bl	8004d7c <xTaskResumeAll>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	f47f af68 	bne.w	8004308 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004438:	4b18      	ldr	r3, [pc, #96]	; (800449c <xQueueSemaphoreTake+0x214>)
 800443a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	e75e      	b.n	8004308 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800444a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800444c:	f000 f8d0 	bl	80045f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004450:	f000 fc94 	bl	8004d7c <xTaskResumeAll>
 8004454:	e758      	b.n	8004308 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004456:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004458:	f000 f8ca 	bl	80045f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800445c:	f000 fc8e 	bl	8004d7c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004460:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004462:	f000 f917 	bl	8004694 <prvIsQueueEmpty>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	f43f af4d 	beq.w	8004308 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00d      	beq.n	8004490 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004474:	f001 feb6 	bl	80061e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004478:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800447a:	f000 f811 	bl	80044a0 <prvGetDisinheritPriorityAfterTimeout>
 800447e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004486:	4618      	mov	r0, r3
 8004488:	f001 f94a 	bl	8005720 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800448c:	f001 feda 	bl	8006244 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004490:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004492:	4618      	mov	r0, r3
 8004494:	3738      	adds	r7, #56	; 0x38
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	e000ed04 	.word	0xe000ed04

080044a0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d006      	beq.n	80044be <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	e001      	b.n	80044c2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80044be:	2300      	movs	r3, #0
 80044c0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80044c2:	68fb      	ldr	r3, [r7, #12]
	}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10d      	bne.n	800450a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d14d      	bne.n	8004592 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f001 f8a2 	bl	8005644 <xTaskPriorityDisinherit>
 8004500:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	609a      	str	r2, [r3, #8]
 8004508:	e043      	b.n	8004592 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d119      	bne.n	8004544 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6858      	ldr	r0, [r3, #4]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004518:	461a      	mov	r2, r3
 800451a:	68b9      	ldr	r1, [r7, #8]
 800451c:	f002 f994 	bl	8006848 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	441a      	add	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	429a      	cmp	r2, r3
 8004538:	d32b      	bcc.n	8004592 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	605a      	str	r2, [r3, #4]
 8004542:	e026      	b.n	8004592 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	68d8      	ldr	r0, [r3, #12]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454c:	461a      	mov	r2, r3
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	f002 f97a 	bl	8006848 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	68da      	ldr	r2, [r3, #12]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455c:	425b      	negs	r3, r3
 800455e:	441a      	add	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	429a      	cmp	r2, r3
 800456e:	d207      	bcs.n	8004580 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	425b      	negs	r3, r3
 800457a:	441a      	add	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b02      	cmp	r3, #2
 8004584:	d105      	bne.n	8004592 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	3b01      	subs	r3, #1
 8004590:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800459a:	697b      	ldr	r3, [r7, #20]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d018      	beq.n	80045e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	441a      	add	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68da      	ldr	r2, [r3, #12]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d303      	bcc.n	80045d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68d9      	ldr	r1, [r3, #12]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	461a      	mov	r2, r3
 80045e2:	6838      	ldr	r0, [r7, #0]
 80045e4:	f002 f930 	bl	8006848 <memcpy>
	}
}
 80045e8:	bf00      	nop
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80045f8:	f001 fdf4 	bl	80061e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004602:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004604:	e011      	b.n	800462a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	2b00      	cmp	r3, #0
 800460c:	d012      	beq.n	8004634 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3324      	adds	r3, #36	; 0x24
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fdce 	bl	80051b4 <xTaskRemoveFromEventList>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800461e:	f000 fea5 	bl	800536c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004622:	7bfb      	ldrb	r3, [r7, #15]
 8004624:	3b01      	subs	r3, #1
 8004626:	b2db      	uxtb	r3, r3
 8004628:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800462a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800462e:	2b00      	cmp	r3, #0
 8004630:	dce9      	bgt.n	8004606 <prvUnlockQueue+0x16>
 8004632:	e000      	b.n	8004636 <prvUnlockQueue+0x46>
					break;
 8004634:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	22ff      	movs	r2, #255	; 0xff
 800463a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800463e:	f001 fe01 	bl	8006244 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004642:	f001 fdcf 	bl	80061e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800464c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800464e:	e011      	b.n	8004674 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d012      	beq.n	800467e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3310      	adds	r3, #16
 800465c:	4618      	mov	r0, r3
 800465e:	f000 fda9 	bl	80051b4 <xTaskRemoveFromEventList>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004668:	f000 fe80 	bl	800536c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800466c:	7bbb      	ldrb	r3, [r7, #14]
 800466e:	3b01      	subs	r3, #1
 8004670:	b2db      	uxtb	r3, r3
 8004672:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004674:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004678:	2b00      	cmp	r3, #0
 800467a:	dce9      	bgt.n	8004650 <prvUnlockQueue+0x60>
 800467c:	e000      	b.n	8004680 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800467e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	22ff      	movs	r2, #255	; 0xff
 8004684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004688:	f001 fddc 	bl	8006244 <vPortExitCritical>
}
 800468c:	bf00      	nop
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800469c:	f001 fda2 	bl	80061e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d102      	bne.n	80046ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80046a8:	2301      	movs	r3, #1
 80046aa:	60fb      	str	r3, [r7, #12]
 80046ac:	e001      	b.n	80046b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80046ae:	2300      	movs	r3, #0
 80046b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046b2:	f001 fdc7 	bl	8006244 <vPortExitCritical>

	return xReturn;
 80046b6:	68fb      	ldr	r3, [r7, #12]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046c8:	f001 fd8c 	bl	80061e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d102      	bne.n	80046de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80046d8:	2301      	movs	r3, #1
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	e001      	b.n	80046e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80046de:	2300      	movs	r3, #0
 80046e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046e2:	f001 fdaf 	bl	8006244 <vPortExitCritical>

	return xReturn;
 80046e6:	68fb      	ldr	r3, [r7, #12]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046fa:	2300      	movs	r3, #0
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	e014      	b.n	800472a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004700:	4a0f      	ldr	r2, [pc, #60]	; (8004740 <vQueueAddToRegistry+0x50>)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10b      	bne.n	8004724 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800470c:	490c      	ldr	r1, [pc, #48]	; (8004740 <vQueueAddToRegistry+0x50>)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004716:	4a0a      	ldr	r2, [pc, #40]	; (8004740 <vQueueAddToRegistry+0x50>)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	4413      	add	r3, r2
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004722:	e006      	b.n	8004732 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	3301      	adds	r3, #1
 8004728:	60fb      	str	r3, [r7, #12]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b07      	cmp	r3, #7
 800472e:	d9e7      	bls.n	8004700 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004730:	bf00      	nop
 8004732:	bf00      	nop
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	20000930 	.word	0x20000930

08004744 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004754:	f001 fd46 	bl	80061e4 <vPortEnterCritical>
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800475e:	b25b      	sxtb	r3, r3
 8004760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004764:	d103      	bne.n	800476e <vQueueWaitForMessageRestricted+0x2a>
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004774:	b25b      	sxtb	r3, r3
 8004776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477a:	d103      	bne.n	8004784 <vQueueWaitForMessageRestricted+0x40>
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004784:	f001 fd5e 	bl	8006244 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478c:	2b00      	cmp	r3, #0
 800478e:	d106      	bne.n	800479e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	3324      	adds	r3, #36	; 0x24
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	68b9      	ldr	r1, [r7, #8]
 8004798:	4618      	mov	r0, r3
 800479a:	f000 fcdf 	bl	800515c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800479e:	6978      	ldr	r0, [r7, #20]
 80047a0:	f7ff ff26 	bl	80045f0 <prvUnlockQueue>
	}
 80047a4:	bf00      	nop
 80047a6:	3718      	adds	r7, #24
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b08e      	sub	sp, #56	; 0x38
 80047b0:	af04      	add	r7, sp, #16
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
 80047b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80047ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10a      	bne.n	80047d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80047c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c4:	f383 8811 	msr	BASEPRI, r3
 80047c8:	f3bf 8f6f 	isb	sy
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	623b      	str	r3, [r7, #32]
}
 80047d2:	bf00      	nop
 80047d4:	e7fe      	b.n	80047d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80047d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10a      	bne.n	80047f2 <xTaskCreateStatic+0x46>
	__asm volatile
 80047dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e0:	f383 8811 	msr	BASEPRI, r3
 80047e4:	f3bf 8f6f 	isb	sy
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	61fb      	str	r3, [r7, #28]
}
 80047ee:	bf00      	nop
 80047f0:	e7fe      	b.n	80047f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80047f2:	23bc      	movs	r3, #188	; 0xbc
 80047f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	2bbc      	cmp	r3, #188	; 0xbc
 80047fa:	d00a      	beq.n	8004812 <xTaskCreateStatic+0x66>
	__asm volatile
 80047fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004800:	f383 8811 	msr	BASEPRI, r3
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	61bb      	str	r3, [r7, #24]
}
 800480e:	bf00      	nop
 8004810:	e7fe      	b.n	8004810 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004812:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004816:	2b00      	cmp	r3, #0
 8004818:	d01e      	beq.n	8004858 <xTaskCreateStatic+0xac>
 800481a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800481c:	2b00      	cmp	r3, #0
 800481e:	d01b      	beq.n	8004858 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004822:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004828:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	2202      	movs	r2, #2
 800482e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004832:	2300      	movs	r3, #0
 8004834:	9303      	str	r3, [sp, #12]
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	9302      	str	r3, [sp, #8]
 800483a:	f107 0314 	add.w	r3, r7, #20
 800483e:	9301      	str	r3, [sp, #4]
 8004840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	68b9      	ldr	r1, [r7, #8]
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 f850 	bl	80048f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004850:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004852:	f000 f8f3 	bl	8004a3c <prvAddNewTaskToReadyList>
 8004856:	e001      	b.n	800485c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004858:	2300      	movs	r3, #0
 800485a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800485c:	697b      	ldr	r3, [r7, #20]
	}
 800485e:	4618      	mov	r0, r3
 8004860:	3728      	adds	r7, #40	; 0x28
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004866:	b580      	push	{r7, lr}
 8004868:	b08c      	sub	sp, #48	; 0x30
 800486a:	af04      	add	r7, sp, #16
 800486c:	60f8      	str	r0, [r7, #12]
 800486e:	60b9      	str	r1, [r7, #8]
 8004870:	603b      	str	r3, [r7, #0]
 8004872:	4613      	mov	r3, r2
 8004874:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004876:	88fb      	ldrh	r3, [r7, #6]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4618      	mov	r0, r3
 800487c:	f001 fdd4 	bl	8006428 <pvPortMalloc>
 8004880:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00e      	beq.n	80048a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004888:	20bc      	movs	r0, #188	; 0xbc
 800488a:	f001 fdcd 	bl	8006428 <pvPortMalloc>
 800488e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	631a      	str	r2, [r3, #48]	; 0x30
 800489c:	e005      	b.n	80048aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800489e:	6978      	ldr	r0, [r7, #20]
 80048a0:	f001 fe8e 	bl	80065c0 <vPortFree>
 80048a4:	e001      	b.n	80048aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80048a6:	2300      	movs	r3, #0
 80048a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d017      	beq.n	80048e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80048b8:	88fa      	ldrh	r2, [r7, #6]
 80048ba:	2300      	movs	r3, #0
 80048bc:	9303      	str	r3, [sp, #12]
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	9302      	str	r3, [sp, #8]
 80048c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c4:	9301      	str	r3, [sp, #4]
 80048c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	68b9      	ldr	r1, [r7, #8]
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f000 f80e 	bl	80048f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048d4:	69f8      	ldr	r0, [r7, #28]
 80048d6:	f000 f8b1 	bl	8004a3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80048da:	2301      	movs	r3, #1
 80048dc:	61bb      	str	r3, [r7, #24]
 80048de:	e002      	b.n	80048e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80048e0:	f04f 33ff 	mov.w	r3, #4294967295
 80048e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80048e6:	69bb      	ldr	r3, [r7, #24]
	}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3720      	adds	r7, #32
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b088      	sub	sp, #32
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	461a      	mov	r2, r3
 8004908:	21a5      	movs	r1, #165	; 0xa5
 800490a:	f001 ffab 	bl	8006864 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800490e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004910:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004918:	3b01      	subs	r3, #1
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4413      	add	r3, r2
 800491e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	f023 0307 	bic.w	r3, r3, #7
 8004926:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004936:	f383 8811 	msr	BASEPRI, r3
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	617b      	str	r3, [r7, #20]
}
 8004944:	bf00      	nop
 8004946:	e7fe      	b.n	8004946 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d01f      	beq.n	800498e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800494e:	2300      	movs	r3, #0
 8004950:	61fb      	str	r3, [r7, #28]
 8004952:	e012      	b.n	800497a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	4413      	add	r3, r2
 800495a:	7819      	ldrb	r1, [r3, #0]
 800495c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	4413      	add	r3, r2
 8004962:	3334      	adds	r3, #52	; 0x34
 8004964:	460a      	mov	r2, r1
 8004966:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	4413      	add	r3, r2
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d006      	beq.n	8004982 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	3301      	adds	r3, #1
 8004978:	61fb      	str	r3, [r7, #28]
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	2b0f      	cmp	r3, #15
 800497e:	d9e9      	bls.n	8004954 <prvInitialiseNewTask+0x64>
 8004980:	e000      	b.n	8004984 <prvInitialiseNewTask+0x94>
			{
				break;
 8004982:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800498c:	e003      	b.n	8004996 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800498e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004998:	2b37      	cmp	r3, #55	; 0x37
 800499a:	d901      	bls.n	80049a0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800499c:	2337      	movs	r3, #55	; 0x37
 800499e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80049a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80049a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80049ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ae:	2200      	movs	r2, #0
 80049b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80049b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b4:	3304      	adds	r3, #4
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fe ffe8 	bl	800398c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049be:	3318      	adds	r3, #24
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7fe ffe3 	bl	800398c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80049d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80049dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049de:	2200      	movs	r2, #0
 80049e0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80049e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80049ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ee:	3354      	adds	r3, #84	; 0x54
 80049f0:	2260      	movs	r2, #96	; 0x60
 80049f2:	2100      	movs	r1, #0
 80049f4:	4618      	mov	r0, r3
 80049f6:	f001 ff35 	bl	8006864 <memset>
 80049fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fc:	4a0c      	ldr	r2, [pc, #48]	; (8004a30 <prvInitialiseNewTask+0x140>)
 80049fe:	659a      	str	r2, [r3, #88]	; 0x58
 8004a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a02:	4a0c      	ldr	r2, [pc, #48]	; (8004a34 <prvInitialiseNewTask+0x144>)
 8004a04:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a08:	4a0b      	ldr	r2, [pc, #44]	; (8004a38 <prvInitialiseNewTask+0x148>)
 8004a0a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	68f9      	ldr	r1, [r7, #12]
 8004a10:	69b8      	ldr	r0, [r7, #24]
 8004a12:	f001 fabd 	bl	8005f90 <pxPortInitialiseStack>
 8004a16:	4602      	mov	r2, r0
 8004a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a26:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a28:	bf00      	nop
 8004a2a:	3720      	adds	r7, #32
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	08006b40 	.word	0x08006b40
 8004a34:	08006b60 	.word	0x08006b60
 8004a38:	08006b20 	.word	0x08006b20

08004a3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a44:	f001 fbce 	bl	80061e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a48:	4b2d      	ldr	r3, [pc, #180]	; (8004b00 <prvAddNewTaskToReadyList+0xc4>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	4a2c      	ldr	r2, [pc, #176]	; (8004b00 <prvAddNewTaskToReadyList+0xc4>)
 8004a50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a52:	4b2c      	ldr	r3, [pc, #176]	; (8004b04 <prvAddNewTaskToReadyList+0xc8>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d109      	bne.n	8004a6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a5a:	4a2a      	ldr	r2, [pc, #168]	; (8004b04 <prvAddNewTaskToReadyList+0xc8>)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a60:	4b27      	ldr	r3, [pc, #156]	; (8004b00 <prvAddNewTaskToReadyList+0xc4>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d110      	bne.n	8004a8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a68:	f000 fca4 	bl	80053b4 <prvInitialiseTaskLists>
 8004a6c:	e00d      	b.n	8004a8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a6e:	4b26      	ldr	r3, [pc, #152]	; (8004b08 <prvAddNewTaskToReadyList+0xcc>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d109      	bne.n	8004a8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a76:	4b23      	ldr	r3, [pc, #140]	; (8004b04 <prvAddNewTaskToReadyList+0xc8>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d802      	bhi.n	8004a8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a84:	4a1f      	ldr	r2, [pc, #124]	; (8004b04 <prvAddNewTaskToReadyList+0xc8>)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a8a:	4b20      	ldr	r3, [pc, #128]	; (8004b0c <prvAddNewTaskToReadyList+0xd0>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	4a1e      	ldr	r2, [pc, #120]	; (8004b0c <prvAddNewTaskToReadyList+0xd0>)
 8004a92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004a94:	4b1d      	ldr	r3, [pc, #116]	; (8004b0c <prvAddNewTaskToReadyList+0xd0>)
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa0:	4b1b      	ldr	r3, [pc, #108]	; (8004b10 <prvAddNewTaskToReadyList+0xd4>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d903      	bls.n	8004ab0 <prvAddNewTaskToReadyList+0x74>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aac:	4a18      	ldr	r2, [pc, #96]	; (8004b10 <prvAddNewTaskToReadyList+0xd4>)
 8004aae:	6013      	str	r3, [r2, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4a15      	ldr	r2, [pc, #84]	; (8004b14 <prvAddNewTaskToReadyList+0xd8>)
 8004abe:	441a      	add	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4610      	mov	r0, r2
 8004ac8:	f7fe ff6d 	bl	80039a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004acc:	f001 fbba 	bl	8006244 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ad0:	4b0d      	ldr	r3, [pc, #52]	; (8004b08 <prvAddNewTaskToReadyList+0xcc>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00e      	beq.n	8004af6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ad8:	4b0a      	ldr	r3, [pc, #40]	; (8004b04 <prvAddNewTaskToReadyList+0xc8>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d207      	bcs.n	8004af6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ae6:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <prvAddNewTaskToReadyList+0xdc>)
 8004ae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004af6:	bf00      	nop
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	20000e44 	.word	0x20000e44
 8004b04:	20000970 	.word	0x20000970
 8004b08:	20000e50 	.word	0x20000e50
 8004b0c:	20000e60 	.word	0x20000e60
 8004b10:	20000e4c 	.word	0x20000e4c
 8004b14:	20000974 	.word	0x20000974
 8004b18:	e000ed04 	.word	0xe000ed04

08004b1c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08a      	sub	sp, #40	; 0x28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004b26:	2300      	movs	r3, #0
 8004b28:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10a      	bne.n	8004b46 <vTaskDelayUntil+0x2a>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	617b      	str	r3, [r7, #20]
}
 8004b42:	bf00      	nop
 8004b44:	e7fe      	b.n	8004b44 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10a      	bne.n	8004b62 <vTaskDelayUntil+0x46>
	__asm volatile
 8004b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	613b      	str	r3, [r7, #16]
}
 8004b5e:	bf00      	nop
 8004b60:	e7fe      	b.n	8004b60 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8004b62:	4b2a      	ldr	r3, [pc, #168]	; (8004c0c <vTaskDelayUntil+0xf0>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00a      	beq.n	8004b80 <vTaskDelayUntil+0x64>
	__asm volatile
 8004b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	60fb      	str	r3, [r7, #12]
}
 8004b7c:	bf00      	nop
 8004b7e:	e7fe      	b.n	8004b7e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8004b80:	f000 f8ee 	bl	8004d60 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004b84:	4b22      	ldr	r3, [pc, #136]	; (8004c10 <vTaskDelayUntil+0xf4>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	4413      	add	r3, r2
 8004b92:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6a3a      	ldr	r2, [r7, #32]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d20b      	bcs.n	8004bb6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69fa      	ldr	r2, [r7, #28]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d211      	bcs.n	8004bcc <vTaskDelayUntil+0xb0>
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d90d      	bls.n	8004bcc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb4:	e00a      	b.n	8004bcc <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69fa      	ldr	r2, [r7, #28]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d303      	bcc.n	8004bc8 <vTaskDelayUntil+0xac>
 8004bc0:	69fa      	ldr	r2, [r7, #28]
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d901      	bls.n	8004bcc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	69fa      	ldr	r2, [r7, #28]
 8004bd0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d006      	beq.n	8004be6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004bd8:	69fa      	ldr	r2, [r7, #28]
 8004bda:	6a3b      	ldr	r3, [r7, #32]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2100      	movs	r1, #0
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 fe33 	bl	800584c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004be6:	f000 f8c9 	bl	8004d7c <xTaskResumeAll>
 8004bea:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d107      	bne.n	8004c02 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8004bf2:	4b08      	ldr	r3, [pc, #32]	; (8004c14 <vTaskDelayUntil+0xf8>)
 8004bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c02:	bf00      	nop
 8004c04:	3728      	adds	r7, #40	; 0x28
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	20000e6c 	.word	0x20000e6c
 8004c10:	20000e48 	.word	0x20000e48
 8004c14:	e000ed04 	.word	0xe000ed04

08004c18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c20:	2300      	movs	r3, #0
 8004c22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d017      	beq.n	8004c5a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c2a:	4b13      	ldr	r3, [pc, #76]	; (8004c78 <vTaskDelay+0x60>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <vTaskDelay+0x30>
	__asm volatile
 8004c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c36:	f383 8811 	msr	BASEPRI, r3
 8004c3a:	f3bf 8f6f 	isb	sy
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	60bb      	str	r3, [r7, #8]
}
 8004c44:	bf00      	nop
 8004c46:	e7fe      	b.n	8004c46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004c48:	f000 f88a 	bl	8004d60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 fdfc 	bl	800584c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c54:	f000 f892 	bl	8004d7c <xTaskResumeAll>
 8004c58:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d107      	bne.n	8004c70 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004c60:	4b06      	ldr	r3, [pc, #24]	; (8004c7c <vTaskDelay+0x64>)
 8004c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c66:	601a      	str	r2, [r3, #0]
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c70:	bf00      	nop
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	20000e6c 	.word	0x20000e6c
 8004c7c:	e000ed04 	.word	0xe000ed04

08004c80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b08a      	sub	sp, #40	; 0x28
 8004c84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c86:	2300      	movs	r3, #0
 8004c88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c8e:	463a      	mov	r2, r7
 8004c90:	1d39      	adds	r1, r7, #4
 8004c92:	f107 0308 	add.w	r3, r7, #8
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fe fe24 	bl	80038e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c9c:	6839      	ldr	r1, [r7, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	9202      	str	r2, [sp, #8]
 8004ca4:	9301      	str	r3, [sp, #4]
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	2300      	movs	r3, #0
 8004cac:	460a      	mov	r2, r1
 8004cae:	4924      	ldr	r1, [pc, #144]	; (8004d40 <vTaskStartScheduler+0xc0>)
 8004cb0:	4824      	ldr	r0, [pc, #144]	; (8004d44 <vTaskStartScheduler+0xc4>)
 8004cb2:	f7ff fd7b 	bl	80047ac <xTaskCreateStatic>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	4a23      	ldr	r2, [pc, #140]	; (8004d48 <vTaskStartScheduler+0xc8>)
 8004cba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004cbc:	4b22      	ldr	r3, [pc, #136]	; (8004d48 <vTaskStartScheduler+0xc8>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	617b      	str	r3, [r7, #20]
 8004cc8:	e001      	b.n	8004cce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d102      	bne.n	8004cda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004cd4:	f000 fe0e 	bl	80058f4 <xTimerCreateTimerTask>
 8004cd8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d11b      	bne.n	8004d18 <vTaskStartScheduler+0x98>
	__asm volatile
 8004ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	613b      	str	r3, [r7, #16]
}
 8004cf2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004cf4:	4b15      	ldr	r3, [pc, #84]	; (8004d4c <vTaskStartScheduler+0xcc>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3354      	adds	r3, #84	; 0x54
 8004cfa:	4a15      	ldr	r2, [pc, #84]	; (8004d50 <vTaskStartScheduler+0xd0>)
 8004cfc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004cfe:	4b15      	ldr	r3, [pc, #84]	; (8004d54 <vTaskStartScheduler+0xd4>)
 8004d00:	f04f 32ff 	mov.w	r2, #4294967295
 8004d04:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d06:	4b14      	ldr	r3, [pc, #80]	; (8004d58 <vTaskStartScheduler+0xd8>)
 8004d08:	2201      	movs	r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d0c:	4b13      	ldr	r3, [pc, #76]	; (8004d5c <vTaskStartScheduler+0xdc>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d12:	f001 f9c5 	bl	80060a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004d16:	e00e      	b.n	8004d36 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1e:	d10a      	bne.n	8004d36 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d24:	f383 8811 	msr	BASEPRI, r3
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	60fb      	str	r3, [r7, #12]
}
 8004d32:	bf00      	nop
 8004d34:	e7fe      	b.n	8004d34 <vTaskStartScheduler+0xb4>
}
 8004d36:	bf00      	nop
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	08006ab4 	.word	0x08006ab4
 8004d44:	08005385 	.word	0x08005385
 8004d48:	20000e68 	.word	0x20000e68
 8004d4c:	20000970 	.word	0x20000970
 8004d50:	20000010 	.word	0x20000010
 8004d54:	20000e64 	.word	0x20000e64
 8004d58:	20000e50 	.word	0x20000e50
 8004d5c:	20000e48 	.word	0x20000e48

08004d60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004d64:	4b04      	ldr	r3, [pc, #16]	; (8004d78 <vTaskSuspendAll+0x18>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	4a03      	ldr	r2, [pc, #12]	; (8004d78 <vTaskSuspendAll+0x18>)
 8004d6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004d6e:	bf00      	nop
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	20000e6c 	.word	0x20000e6c

08004d7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d82:	2300      	movs	r3, #0
 8004d84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d86:	2300      	movs	r3, #0
 8004d88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d8a:	4b42      	ldr	r3, [pc, #264]	; (8004e94 <xTaskResumeAll+0x118>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10a      	bne.n	8004da8 <xTaskResumeAll+0x2c>
	__asm volatile
 8004d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d96:	f383 8811 	msr	BASEPRI, r3
 8004d9a:	f3bf 8f6f 	isb	sy
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	603b      	str	r3, [r7, #0]
}
 8004da4:	bf00      	nop
 8004da6:	e7fe      	b.n	8004da6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004da8:	f001 fa1c 	bl	80061e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004dac:	4b39      	ldr	r3, [pc, #228]	; (8004e94 <xTaskResumeAll+0x118>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	3b01      	subs	r3, #1
 8004db2:	4a38      	ldr	r2, [pc, #224]	; (8004e94 <xTaskResumeAll+0x118>)
 8004db4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004db6:	4b37      	ldr	r3, [pc, #220]	; (8004e94 <xTaskResumeAll+0x118>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d162      	bne.n	8004e84 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004dbe:	4b36      	ldr	r3, [pc, #216]	; (8004e98 <xTaskResumeAll+0x11c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d05e      	beq.n	8004e84 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004dc6:	e02f      	b.n	8004e28 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dc8:	4b34      	ldr	r3, [pc, #208]	; (8004e9c <xTaskResumeAll+0x120>)
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	3318      	adds	r3, #24
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7fe fe43 	bl	8003a60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	3304      	adds	r3, #4
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fe fe3e 	bl	8003a60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de8:	4b2d      	ldr	r3, [pc, #180]	; (8004ea0 <xTaskResumeAll+0x124>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d903      	bls.n	8004df8 <xTaskResumeAll+0x7c>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df4:	4a2a      	ldr	r2, [pc, #168]	; (8004ea0 <xTaskResumeAll+0x124>)
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4a27      	ldr	r2, [pc, #156]	; (8004ea4 <xTaskResumeAll+0x128>)
 8004e06:	441a      	add	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4610      	mov	r0, r2
 8004e10:	f7fe fdc9 	bl	80039a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e18:	4b23      	ldr	r3, [pc, #140]	; (8004ea8 <xTaskResumeAll+0x12c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d302      	bcc.n	8004e28 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004e22:	4b22      	ldr	r3, [pc, #136]	; (8004eac <xTaskResumeAll+0x130>)
 8004e24:	2201      	movs	r2, #1
 8004e26:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e28:	4b1c      	ldr	r3, [pc, #112]	; (8004e9c <xTaskResumeAll+0x120>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1cb      	bne.n	8004dc8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e36:	f000 fb5f 	bl	80054f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004e3a:	4b1d      	ldr	r3, [pc, #116]	; (8004eb0 <xTaskResumeAll+0x134>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d010      	beq.n	8004e68 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e46:	f000 f847 	bl	8004ed8 <xTaskIncrementTick>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d002      	beq.n	8004e56 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004e50:	4b16      	ldr	r3, [pc, #88]	; (8004eac <xTaskResumeAll+0x130>)
 8004e52:	2201      	movs	r2, #1
 8004e54:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1f1      	bne.n	8004e46 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004e62:	4b13      	ldr	r3, [pc, #76]	; (8004eb0 <xTaskResumeAll+0x134>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e68:	4b10      	ldr	r3, [pc, #64]	; (8004eac <xTaskResumeAll+0x130>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d009      	beq.n	8004e84 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e70:	2301      	movs	r3, #1
 8004e72:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e74:	4b0f      	ldr	r3, [pc, #60]	; (8004eb4 <xTaskResumeAll+0x138>)
 8004e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e84:	f001 f9de 	bl	8006244 <vPortExitCritical>

	return xAlreadyYielded;
 8004e88:	68bb      	ldr	r3, [r7, #8]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	20000e6c 	.word	0x20000e6c
 8004e98:	20000e44 	.word	0x20000e44
 8004e9c:	20000e04 	.word	0x20000e04
 8004ea0:	20000e4c 	.word	0x20000e4c
 8004ea4:	20000974 	.word	0x20000974
 8004ea8:	20000970 	.word	0x20000970
 8004eac:	20000e58 	.word	0x20000e58
 8004eb0:	20000e54 	.word	0x20000e54
 8004eb4:	e000ed04 	.word	0xe000ed04

08004eb8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004ebe:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <xTaskGetTickCount+0x1c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004ec4:	687b      	ldr	r3, [r7, #4]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	20000e48 	.word	0x20000e48

08004ed8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ee2:	4b4f      	ldr	r3, [pc, #316]	; (8005020 <xTaskIncrementTick+0x148>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f040 808f 	bne.w	800500a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004eec:	4b4d      	ldr	r3, [pc, #308]	; (8005024 <xTaskIncrementTick+0x14c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ef4:	4a4b      	ldr	r2, [pc, #300]	; (8005024 <xTaskIncrementTick+0x14c>)
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d120      	bne.n	8004f42 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f00:	4b49      	ldr	r3, [pc, #292]	; (8005028 <xTaskIncrementTick+0x150>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00a      	beq.n	8004f20 <xTaskIncrementTick+0x48>
	__asm volatile
 8004f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	603b      	str	r3, [r7, #0]
}
 8004f1c:	bf00      	nop
 8004f1e:	e7fe      	b.n	8004f1e <xTaskIncrementTick+0x46>
 8004f20:	4b41      	ldr	r3, [pc, #260]	; (8005028 <xTaskIncrementTick+0x150>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	60fb      	str	r3, [r7, #12]
 8004f26:	4b41      	ldr	r3, [pc, #260]	; (800502c <xTaskIncrementTick+0x154>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a3f      	ldr	r2, [pc, #252]	; (8005028 <xTaskIncrementTick+0x150>)
 8004f2c:	6013      	str	r3, [r2, #0]
 8004f2e:	4a3f      	ldr	r2, [pc, #252]	; (800502c <xTaskIncrementTick+0x154>)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6013      	str	r3, [r2, #0]
 8004f34:	4b3e      	ldr	r3, [pc, #248]	; (8005030 <xTaskIncrementTick+0x158>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	4a3d      	ldr	r2, [pc, #244]	; (8005030 <xTaskIncrementTick+0x158>)
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	f000 fadb 	bl	80054f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f42:	4b3c      	ldr	r3, [pc, #240]	; (8005034 <xTaskIncrementTick+0x15c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d349      	bcc.n	8004fe0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f4c:	4b36      	ldr	r3, [pc, #216]	; (8005028 <xTaskIncrementTick+0x150>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d104      	bne.n	8004f60 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f56:	4b37      	ldr	r3, [pc, #220]	; (8005034 <xTaskIncrementTick+0x15c>)
 8004f58:	f04f 32ff 	mov.w	r2, #4294967295
 8004f5c:	601a      	str	r2, [r3, #0]
					break;
 8004f5e:	e03f      	b.n	8004fe0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f60:	4b31      	ldr	r3, [pc, #196]	; (8005028 <xTaskIncrementTick+0x150>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d203      	bcs.n	8004f80 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f78:	4a2e      	ldr	r2, [pc, #184]	; (8005034 <xTaskIncrementTick+0x15c>)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f7e:	e02f      	b.n	8004fe0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	3304      	adds	r3, #4
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7fe fd6b 	bl	8003a60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d004      	beq.n	8004f9c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	3318      	adds	r3, #24
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fe fd62 	bl	8003a60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa0:	4b25      	ldr	r3, [pc, #148]	; (8005038 <xTaskIncrementTick+0x160>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d903      	bls.n	8004fb0 <xTaskIncrementTick+0xd8>
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fac:	4a22      	ldr	r2, [pc, #136]	; (8005038 <xTaskIncrementTick+0x160>)
 8004fae:	6013      	str	r3, [r2, #0]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4413      	add	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4a1f      	ldr	r2, [pc, #124]	; (800503c <xTaskIncrementTick+0x164>)
 8004fbe:	441a      	add	r2, r3
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	3304      	adds	r3, #4
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	4610      	mov	r0, r2
 8004fc8:	f7fe fced 	bl	80039a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd0:	4b1b      	ldr	r3, [pc, #108]	; (8005040 <xTaskIncrementTick+0x168>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d3b8      	bcc.n	8004f4c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fde:	e7b5      	b.n	8004f4c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004fe0:	4b17      	ldr	r3, [pc, #92]	; (8005040 <xTaskIncrementTick+0x168>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe6:	4915      	ldr	r1, [pc, #84]	; (800503c <xTaskIncrementTick+0x164>)
 8004fe8:	4613      	mov	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	440b      	add	r3, r1
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d901      	bls.n	8004ffc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004ffc:	4b11      	ldr	r3, [pc, #68]	; (8005044 <xTaskIncrementTick+0x16c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d007      	beq.n	8005014 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005004:	2301      	movs	r3, #1
 8005006:	617b      	str	r3, [r7, #20]
 8005008:	e004      	b.n	8005014 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800500a:	4b0f      	ldr	r3, [pc, #60]	; (8005048 <xTaskIncrementTick+0x170>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	3301      	adds	r3, #1
 8005010:	4a0d      	ldr	r2, [pc, #52]	; (8005048 <xTaskIncrementTick+0x170>)
 8005012:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005014:	697b      	ldr	r3, [r7, #20]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3718      	adds	r7, #24
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	20000e6c 	.word	0x20000e6c
 8005024:	20000e48 	.word	0x20000e48
 8005028:	20000dfc 	.word	0x20000dfc
 800502c:	20000e00 	.word	0x20000e00
 8005030:	20000e5c 	.word	0x20000e5c
 8005034:	20000e64 	.word	0x20000e64
 8005038:	20000e4c 	.word	0x20000e4c
 800503c:	20000974 	.word	0x20000974
 8005040:	20000970 	.word	0x20000970
 8005044:	20000e58 	.word	0x20000e58
 8005048:	20000e54 	.word	0x20000e54

0800504c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005052:	4b2a      	ldr	r3, [pc, #168]	; (80050fc <vTaskSwitchContext+0xb0>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800505a:	4b29      	ldr	r3, [pc, #164]	; (8005100 <vTaskSwitchContext+0xb4>)
 800505c:	2201      	movs	r2, #1
 800505e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005060:	e046      	b.n	80050f0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005062:	4b27      	ldr	r3, [pc, #156]	; (8005100 <vTaskSwitchContext+0xb4>)
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005068:	4b26      	ldr	r3, [pc, #152]	; (8005104 <vTaskSwitchContext+0xb8>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	e010      	b.n	8005092 <vTaskSwitchContext+0x46>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10a      	bne.n	800508c <vTaskSwitchContext+0x40>
	__asm volatile
 8005076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507a:	f383 8811 	msr	BASEPRI, r3
 800507e:	f3bf 8f6f 	isb	sy
 8005082:	f3bf 8f4f 	dsb	sy
 8005086:	607b      	str	r3, [r7, #4]
}
 8005088:	bf00      	nop
 800508a:	e7fe      	b.n	800508a <vTaskSwitchContext+0x3e>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	3b01      	subs	r3, #1
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	491d      	ldr	r1, [pc, #116]	; (8005108 <vTaskSwitchContext+0xbc>)
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4613      	mov	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	440b      	add	r3, r1
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0e4      	beq.n	8005070 <vTaskSwitchContext+0x24>
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	4613      	mov	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4a15      	ldr	r2, [pc, #84]	; (8005108 <vTaskSwitchContext+0xbc>)
 80050b2:	4413      	add	r3, r2
 80050b4:	60bb      	str	r3, [r7, #8]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	605a      	str	r2, [r3, #4]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	685a      	ldr	r2, [r3, #4]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	3308      	adds	r3, #8
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d104      	bne.n	80050d6 <vTaskSwitchContext+0x8a>
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	605a      	str	r2, [r3, #4]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	4a0b      	ldr	r2, [pc, #44]	; (800510c <vTaskSwitchContext+0xc0>)
 80050de:	6013      	str	r3, [r2, #0]
 80050e0:	4a08      	ldr	r2, [pc, #32]	; (8005104 <vTaskSwitchContext+0xb8>)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80050e6:	4b09      	ldr	r3, [pc, #36]	; (800510c <vTaskSwitchContext+0xc0>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3354      	adds	r3, #84	; 0x54
 80050ec:	4a08      	ldr	r2, [pc, #32]	; (8005110 <vTaskSwitchContext+0xc4>)
 80050ee:	6013      	str	r3, [r2, #0]
}
 80050f0:	bf00      	nop
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	20000e6c 	.word	0x20000e6c
 8005100:	20000e58 	.word	0x20000e58
 8005104:	20000e4c 	.word	0x20000e4c
 8005108:	20000974 	.word	0x20000974
 800510c:	20000970 	.word	0x20000970
 8005110:	20000010 	.word	0x20000010

08005114 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10a      	bne.n	800513a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	60fb      	str	r3, [r7, #12]
}
 8005136:	bf00      	nop
 8005138:	e7fe      	b.n	8005138 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800513a:	4b07      	ldr	r3, [pc, #28]	; (8005158 <vTaskPlaceOnEventList+0x44>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	3318      	adds	r3, #24
 8005140:	4619      	mov	r1, r3
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7fe fc53 	bl	80039ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005148:	2101      	movs	r1, #1
 800514a:	6838      	ldr	r0, [r7, #0]
 800514c:	f000 fb7e 	bl	800584c <prvAddCurrentTaskToDelayedList>
}
 8005150:	bf00      	nop
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	20000970 	.word	0x20000970

0800515c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10a      	bne.n	8005184 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	617b      	str	r3, [r7, #20]
}
 8005180:	bf00      	nop
 8005182:	e7fe      	b.n	8005182 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005184:	4b0a      	ldr	r3, [pc, #40]	; (80051b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	3318      	adds	r3, #24
 800518a:	4619      	mov	r1, r3
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f7fe fc0a 	bl	80039a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005198:	f04f 33ff 	mov.w	r3, #4294967295
 800519c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800519e:	6879      	ldr	r1, [r7, #4]
 80051a0:	68b8      	ldr	r0, [r7, #8]
 80051a2:	f000 fb53 	bl	800584c <prvAddCurrentTaskToDelayedList>
	}
 80051a6:	bf00      	nop
 80051a8:	3718      	adds	r7, #24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	20000970 	.word	0x20000970

080051b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10a      	bne.n	80051e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80051ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ce:	f383 8811 	msr	BASEPRI, r3
 80051d2:	f3bf 8f6f 	isb	sy
 80051d6:	f3bf 8f4f 	dsb	sy
 80051da:	60fb      	str	r3, [r7, #12]
}
 80051dc:	bf00      	nop
 80051de:	e7fe      	b.n	80051de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	3318      	adds	r3, #24
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7fe fc3b 	bl	8003a60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051ea:	4b1e      	ldr	r3, [pc, #120]	; (8005264 <xTaskRemoveFromEventList+0xb0>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d11d      	bne.n	800522e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	3304      	adds	r3, #4
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fe fc32 	bl	8003a60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005200:	4b19      	ldr	r3, [pc, #100]	; (8005268 <xTaskRemoveFromEventList+0xb4>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	429a      	cmp	r2, r3
 8005206:	d903      	bls.n	8005210 <xTaskRemoveFromEventList+0x5c>
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520c:	4a16      	ldr	r2, [pc, #88]	; (8005268 <xTaskRemoveFromEventList+0xb4>)
 800520e:	6013      	str	r3, [r2, #0]
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005214:	4613      	mov	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4a13      	ldr	r2, [pc, #76]	; (800526c <xTaskRemoveFromEventList+0xb8>)
 800521e:	441a      	add	r2, r3
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	3304      	adds	r3, #4
 8005224:	4619      	mov	r1, r3
 8005226:	4610      	mov	r0, r2
 8005228:	f7fe fbbd 	bl	80039a6 <vListInsertEnd>
 800522c:	e005      	b.n	800523a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	3318      	adds	r3, #24
 8005232:	4619      	mov	r1, r3
 8005234:	480e      	ldr	r0, [pc, #56]	; (8005270 <xTaskRemoveFromEventList+0xbc>)
 8005236:	f7fe fbb6 	bl	80039a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800523e:	4b0d      	ldr	r3, [pc, #52]	; (8005274 <xTaskRemoveFromEventList+0xc0>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005244:	429a      	cmp	r2, r3
 8005246:	d905      	bls.n	8005254 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005248:	2301      	movs	r3, #1
 800524a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800524c:	4b0a      	ldr	r3, [pc, #40]	; (8005278 <xTaskRemoveFromEventList+0xc4>)
 800524e:	2201      	movs	r2, #1
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	e001      	b.n	8005258 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005254:	2300      	movs	r3, #0
 8005256:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005258:	697b      	ldr	r3, [r7, #20]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	20000e6c 	.word	0x20000e6c
 8005268:	20000e4c 	.word	0x20000e4c
 800526c:	20000974 	.word	0x20000974
 8005270:	20000e04 	.word	0x20000e04
 8005274:	20000970 	.word	0x20000970
 8005278:	20000e58 	.word	0x20000e58

0800527c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005284:	4b06      	ldr	r3, [pc, #24]	; (80052a0 <vTaskInternalSetTimeOutState+0x24>)
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800528c:	4b05      	ldr	r3, [pc, #20]	; (80052a4 <vTaskInternalSetTimeOutState+0x28>)
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	605a      	str	r2, [r3, #4]
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	20000e5c 	.word	0x20000e5c
 80052a4:	20000e48 	.word	0x20000e48

080052a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b088      	sub	sp, #32
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10a      	bne.n	80052ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80052b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	613b      	str	r3, [r7, #16]
}
 80052ca:	bf00      	nop
 80052cc:	e7fe      	b.n	80052cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10a      	bne.n	80052ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80052d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d8:	f383 8811 	msr	BASEPRI, r3
 80052dc:	f3bf 8f6f 	isb	sy
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	60fb      	str	r3, [r7, #12]
}
 80052e6:	bf00      	nop
 80052e8:	e7fe      	b.n	80052e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80052ea:	f000 ff7b 	bl	80061e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80052ee:	4b1d      	ldr	r3, [pc, #116]	; (8005364 <xTaskCheckForTimeOut+0xbc>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005306:	d102      	bne.n	800530e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005308:	2300      	movs	r3, #0
 800530a:	61fb      	str	r3, [r7, #28]
 800530c:	e023      	b.n	8005356 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	4b15      	ldr	r3, [pc, #84]	; (8005368 <xTaskCheckForTimeOut+0xc0>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	429a      	cmp	r2, r3
 8005318:	d007      	beq.n	800532a <xTaskCheckForTimeOut+0x82>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	429a      	cmp	r2, r3
 8005322:	d302      	bcc.n	800532a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005324:	2301      	movs	r3, #1
 8005326:	61fb      	str	r3, [r7, #28]
 8005328:	e015      	b.n	8005356 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	429a      	cmp	r2, r3
 8005332:	d20b      	bcs.n	800534c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	1ad2      	subs	r2, r2, r3
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f7ff ff9b 	bl	800527c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005346:	2300      	movs	r3, #0
 8005348:	61fb      	str	r3, [r7, #28]
 800534a:	e004      	b.n	8005356 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	2200      	movs	r2, #0
 8005350:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005352:	2301      	movs	r3, #1
 8005354:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005356:	f000 ff75 	bl	8006244 <vPortExitCritical>

	return xReturn;
 800535a:	69fb      	ldr	r3, [r7, #28]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3720      	adds	r7, #32
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	20000e48 	.word	0x20000e48
 8005368:	20000e5c 	.word	0x20000e5c

0800536c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800536c:	b480      	push	{r7}
 800536e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005370:	4b03      	ldr	r3, [pc, #12]	; (8005380 <vTaskMissedYield+0x14>)
 8005372:	2201      	movs	r2, #1
 8005374:	601a      	str	r2, [r3, #0]
}
 8005376:	bf00      	nop
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	20000e58 	.word	0x20000e58

08005384 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800538c:	f000 f852 	bl	8005434 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005390:	4b06      	ldr	r3, [pc, #24]	; (80053ac <prvIdleTask+0x28>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d9f9      	bls.n	800538c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005398:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <prvIdleTask+0x2c>)
 800539a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80053a8:	e7f0      	b.n	800538c <prvIdleTask+0x8>
 80053aa:	bf00      	nop
 80053ac:	20000974 	.word	0x20000974
 80053b0:	e000ed04 	.word	0xe000ed04

080053b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053ba:	2300      	movs	r3, #0
 80053bc:	607b      	str	r3, [r7, #4]
 80053be:	e00c      	b.n	80053da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	4613      	mov	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4a12      	ldr	r2, [pc, #72]	; (8005414 <prvInitialiseTaskLists+0x60>)
 80053cc:	4413      	add	r3, r2
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fe fabc 	bl	800394c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	3301      	adds	r3, #1
 80053d8:	607b      	str	r3, [r7, #4]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b37      	cmp	r3, #55	; 0x37
 80053de:	d9ef      	bls.n	80053c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80053e0:	480d      	ldr	r0, [pc, #52]	; (8005418 <prvInitialiseTaskLists+0x64>)
 80053e2:	f7fe fab3 	bl	800394c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80053e6:	480d      	ldr	r0, [pc, #52]	; (800541c <prvInitialiseTaskLists+0x68>)
 80053e8:	f7fe fab0 	bl	800394c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80053ec:	480c      	ldr	r0, [pc, #48]	; (8005420 <prvInitialiseTaskLists+0x6c>)
 80053ee:	f7fe faad 	bl	800394c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80053f2:	480c      	ldr	r0, [pc, #48]	; (8005424 <prvInitialiseTaskLists+0x70>)
 80053f4:	f7fe faaa 	bl	800394c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80053f8:	480b      	ldr	r0, [pc, #44]	; (8005428 <prvInitialiseTaskLists+0x74>)
 80053fa:	f7fe faa7 	bl	800394c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80053fe:	4b0b      	ldr	r3, [pc, #44]	; (800542c <prvInitialiseTaskLists+0x78>)
 8005400:	4a05      	ldr	r2, [pc, #20]	; (8005418 <prvInitialiseTaskLists+0x64>)
 8005402:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005404:	4b0a      	ldr	r3, [pc, #40]	; (8005430 <prvInitialiseTaskLists+0x7c>)
 8005406:	4a05      	ldr	r2, [pc, #20]	; (800541c <prvInitialiseTaskLists+0x68>)
 8005408:	601a      	str	r2, [r3, #0]
}
 800540a:	bf00      	nop
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	20000974 	.word	0x20000974
 8005418:	20000dd4 	.word	0x20000dd4
 800541c:	20000de8 	.word	0x20000de8
 8005420:	20000e04 	.word	0x20000e04
 8005424:	20000e18 	.word	0x20000e18
 8005428:	20000e30 	.word	0x20000e30
 800542c:	20000dfc 	.word	0x20000dfc
 8005430:	20000e00 	.word	0x20000e00

08005434 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800543a:	e019      	b.n	8005470 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800543c:	f000 fed2 	bl	80061e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005440:	4b10      	ldr	r3, [pc, #64]	; (8005484 <prvCheckTasksWaitingTermination+0x50>)
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3304      	adds	r3, #4
 800544c:	4618      	mov	r0, r3
 800544e:	f7fe fb07 	bl	8003a60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005452:	4b0d      	ldr	r3, [pc, #52]	; (8005488 <prvCheckTasksWaitingTermination+0x54>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	3b01      	subs	r3, #1
 8005458:	4a0b      	ldr	r2, [pc, #44]	; (8005488 <prvCheckTasksWaitingTermination+0x54>)
 800545a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800545c:	4b0b      	ldr	r3, [pc, #44]	; (800548c <prvCheckTasksWaitingTermination+0x58>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3b01      	subs	r3, #1
 8005462:	4a0a      	ldr	r2, [pc, #40]	; (800548c <prvCheckTasksWaitingTermination+0x58>)
 8005464:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005466:	f000 feed 	bl	8006244 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f810 	bl	8005490 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005470:	4b06      	ldr	r3, [pc, #24]	; (800548c <prvCheckTasksWaitingTermination+0x58>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1e1      	bne.n	800543c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005478:	bf00      	nop
 800547a:	bf00      	nop
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	20000e18 	.word	0x20000e18
 8005488:	20000e44 	.word	0x20000e44
 800548c:	20000e2c 	.word	0x20000e2c

08005490 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3354      	adds	r3, #84	; 0x54
 800549c:	4618      	mov	r0, r3
 800549e:	f001 f9f7 	bl	8006890 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d108      	bne.n	80054be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b0:	4618      	mov	r0, r3
 80054b2:	f001 f885 	bl	80065c0 <vPortFree>
				vPortFree( pxTCB );
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f001 f882 	bl	80065c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80054bc:	e018      	b.n	80054f0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d103      	bne.n	80054d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f001 f879 	bl	80065c0 <vPortFree>
	}
 80054ce:	e00f      	b.n	80054f0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d00a      	beq.n	80054f0 <prvDeleteTCB+0x60>
	__asm volatile
 80054da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	60fb      	str	r3, [r7, #12]
}
 80054ec:	bf00      	nop
 80054ee:	e7fe      	b.n	80054ee <prvDeleteTCB+0x5e>
	}
 80054f0:	bf00      	nop
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054fe:	4b0c      	ldr	r3, [pc, #48]	; (8005530 <prvResetNextTaskUnblockTime+0x38>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d104      	bne.n	8005512 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005508:	4b0a      	ldr	r3, [pc, #40]	; (8005534 <prvResetNextTaskUnblockTime+0x3c>)
 800550a:	f04f 32ff 	mov.w	r2, #4294967295
 800550e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005510:	e008      	b.n	8005524 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005512:	4b07      	ldr	r3, [pc, #28]	; (8005530 <prvResetNextTaskUnblockTime+0x38>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	4a04      	ldr	r2, [pc, #16]	; (8005534 <prvResetNextTaskUnblockTime+0x3c>)
 8005522:	6013      	str	r3, [r2, #0]
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr
 8005530:	20000dfc 	.word	0x20000dfc
 8005534:	20000e64 	.word	0x20000e64

08005538 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800553e:	4b0b      	ldr	r3, [pc, #44]	; (800556c <xTaskGetSchedulerState+0x34>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d102      	bne.n	800554c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005546:	2301      	movs	r3, #1
 8005548:	607b      	str	r3, [r7, #4]
 800554a:	e008      	b.n	800555e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800554c:	4b08      	ldr	r3, [pc, #32]	; (8005570 <xTaskGetSchedulerState+0x38>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d102      	bne.n	800555a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005554:	2302      	movs	r3, #2
 8005556:	607b      	str	r3, [r7, #4]
 8005558:	e001      	b.n	800555e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800555a:	2300      	movs	r3, #0
 800555c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800555e:	687b      	ldr	r3, [r7, #4]
	}
 8005560:	4618      	mov	r0, r3
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr
 800556c:	20000e50 	.word	0x20000e50
 8005570:	20000e6c 	.word	0x20000e6c

08005574 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005580:	2300      	movs	r3, #0
 8005582:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d051      	beq.n	800562e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800558e:	4b2a      	ldr	r3, [pc, #168]	; (8005638 <xTaskPriorityInherit+0xc4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005594:	429a      	cmp	r2, r3
 8005596:	d241      	bcs.n	800561c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	2b00      	cmp	r3, #0
 800559e:	db06      	blt.n	80055ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055a0:	4b25      	ldr	r3, [pc, #148]	; (8005638 <xTaskPriorityInherit+0xc4>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	6959      	ldr	r1, [r3, #20]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b6:	4613      	mov	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4a1f      	ldr	r2, [pc, #124]	; (800563c <xTaskPriorityInherit+0xc8>)
 80055c0:	4413      	add	r3, r2
 80055c2:	4299      	cmp	r1, r3
 80055c4:	d122      	bne.n	800560c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	3304      	adds	r3, #4
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fe fa48 	bl	8003a60 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80055d0:	4b19      	ldr	r3, [pc, #100]	; (8005638 <xTaskPriorityInherit+0xc4>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055de:	4b18      	ldr	r3, [pc, #96]	; (8005640 <xTaskPriorityInherit+0xcc>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d903      	bls.n	80055ee <xTaskPriorityInherit+0x7a>
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ea:	4a15      	ldr	r2, [pc, #84]	; (8005640 <xTaskPriorityInherit+0xcc>)
 80055ec:	6013      	str	r3, [r2, #0]
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f2:	4613      	mov	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4a10      	ldr	r2, [pc, #64]	; (800563c <xTaskPriorityInherit+0xc8>)
 80055fc:	441a      	add	r2, r3
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	3304      	adds	r3, #4
 8005602:	4619      	mov	r1, r3
 8005604:	4610      	mov	r0, r2
 8005606:	f7fe f9ce 	bl	80039a6 <vListInsertEnd>
 800560a:	e004      	b.n	8005616 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800560c:	4b0a      	ldr	r3, [pc, #40]	; (8005638 <xTaskPriorityInherit+0xc4>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005616:	2301      	movs	r3, #1
 8005618:	60fb      	str	r3, [r7, #12]
 800561a:	e008      	b.n	800562e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005620:	4b05      	ldr	r3, [pc, #20]	; (8005638 <xTaskPriorityInherit+0xc4>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005626:	429a      	cmp	r2, r3
 8005628:	d201      	bcs.n	800562e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800562a:	2301      	movs	r3, #1
 800562c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800562e:	68fb      	ldr	r3, [r7, #12]
	}
 8005630:	4618      	mov	r0, r3
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	20000970 	.word	0x20000970
 800563c:	20000974 	.word	0x20000974
 8005640:	20000e4c 	.word	0x20000e4c

08005644 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005650:	2300      	movs	r3, #0
 8005652:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d056      	beq.n	8005708 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800565a:	4b2e      	ldr	r3, [pc, #184]	; (8005714 <xTaskPriorityDisinherit+0xd0>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	429a      	cmp	r2, r3
 8005662:	d00a      	beq.n	800567a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	60fb      	str	r3, [r7, #12]
}
 8005676:	bf00      	nop
 8005678:	e7fe      	b.n	8005678 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10a      	bne.n	8005698 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	60bb      	str	r3, [r7, #8]
}
 8005694:	bf00      	nop
 8005696:	e7fe      	b.n	8005696 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800569c:	1e5a      	subs	r2, r3, #1
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d02c      	beq.n	8005708 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d128      	bne.n	8005708 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	3304      	adds	r3, #4
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fe f9d0 	bl	8003a60 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d8:	4b0f      	ldr	r3, [pc, #60]	; (8005718 <xTaskPriorityDisinherit+0xd4>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d903      	bls.n	80056e8 <xTaskPriorityDisinherit+0xa4>
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e4:	4a0c      	ldr	r2, [pc, #48]	; (8005718 <xTaskPriorityDisinherit+0xd4>)
 80056e6:	6013      	str	r3, [r2, #0]
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ec:	4613      	mov	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4a09      	ldr	r2, [pc, #36]	; (800571c <xTaskPriorityDisinherit+0xd8>)
 80056f6:	441a      	add	r2, r3
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	3304      	adds	r3, #4
 80056fc:	4619      	mov	r1, r3
 80056fe:	4610      	mov	r0, r2
 8005700:	f7fe f951 	bl	80039a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005704:	2301      	movs	r3, #1
 8005706:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005708:	697b      	ldr	r3, [r7, #20]
	}
 800570a:	4618      	mov	r0, r3
 800570c:	3718      	adds	r7, #24
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	20000970 	.word	0x20000970
 8005718:	20000e4c 	.word	0x20000e4c
 800571c:	20000974 	.word	0x20000974

08005720 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005720:	b580      	push	{r7, lr}
 8005722:	b088      	sub	sp, #32
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800572e:	2301      	movs	r3, #1
 8005730:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d06a      	beq.n	800580e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10a      	bne.n	8005756 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	60fb      	str	r3, [r7, #12]
}
 8005752:	bf00      	nop
 8005754:	e7fe      	b.n	8005754 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	429a      	cmp	r2, r3
 800575e:	d902      	bls.n	8005766 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	61fb      	str	r3, [r7, #28]
 8005764:	e002      	b.n	800576c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800576a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005770:	69fa      	ldr	r2, [r7, #28]
 8005772:	429a      	cmp	r2, r3
 8005774:	d04b      	beq.n	800580e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	429a      	cmp	r2, r3
 800577e:	d146      	bne.n	800580e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005780:	4b25      	ldr	r3, [pc, #148]	; (8005818 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	429a      	cmp	r2, r3
 8005788:	d10a      	bne.n	80057a0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800578a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	60bb      	str	r3, [r7, #8]
}
 800579c:	bf00      	nop
 800579e:	e7fe      	b.n	800579e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	69fa      	ldr	r2, [r7, #28]
 80057aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	db04      	blt.n	80057be <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	6959      	ldr	r1, [r3, #20]
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4613      	mov	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4413      	add	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4a13      	ldr	r2, [pc, #76]	; (800581c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80057ce:	4413      	add	r3, r2
 80057d0:	4299      	cmp	r1, r3
 80057d2:	d11c      	bne.n	800580e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	3304      	adds	r3, #4
 80057d8:	4618      	mov	r0, r3
 80057da:	f7fe f941 	bl	8003a60 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e2:	4b0f      	ldr	r3, [pc, #60]	; (8005820 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d903      	bls.n	80057f2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ee:	4a0c      	ldr	r2, [pc, #48]	; (8005820 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f6:	4613      	mov	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	4413      	add	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4a07      	ldr	r2, [pc, #28]	; (800581c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005800:	441a      	add	r2, r3
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	3304      	adds	r3, #4
 8005806:	4619      	mov	r1, r3
 8005808:	4610      	mov	r0, r2
 800580a:	f7fe f8cc 	bl	80039a6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800580e:	bf00      	nop
 8005810:	3720      	adds	r7, #32
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	20000970 	.word	0x20000970
 800581c:	20000974 	.word	0x20000974
 8005820:	20000e4c 	.word	0x20000e4c

08005824 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005828:	4b07      	ldr	r3, [pc, #28]	; (8005848 <pvTaskIncrementMutexHeldCount+0x24>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d004      	beq.n	800583a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005830:	4b05      	ldr	r3, [pc, #20]	; (8005848 <pvTaskIncrementMutexHeldCount+0x24>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005836:	3201      	adds	r2, #1
 8005838:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800583a:	4b03      	ldr	r3, [pc, #12]	; (8005848 <pvTaskIncrementMutexHeldCount+0x24>)
 800583c:	681b      	ldr	r3, [r3, #0]
	}
 800583e:	4618      	mov	r0, r3
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr
 8005848:	20000970 	.word	0x20000970

0800584c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005856:	4b21      	ldr	r3, [pc, #132]	; (80058dc <prvAddCurrentTaskToDelayedList+0x90>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800585c:	4b20      	ldr	r3, [pc, #128]	; (80058e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3304      	adds	r3, #4
 8005862:	4618      	mov	r0, r3
 8005864:	f7fe f8fc 	bl	8003a60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586e:	d10a      	bne.n	8005886 <prvAddCurrentTaskToDelayedList+0x3a>
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d007      	beq.n	8005886 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005876:	4b1a      	ldr	r3, [pc, #104]	; (80058e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	3304      	adds	r3, #4
 800587c:	4619      	mov	r1, r3
 800587e:	4819      	ldr	r0, [pc, #100]	; (80058e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005880:	f7fe f891 	bl	80039a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005884:	e026      	b.n	80058d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4413      	add	r3, r2
 800588c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800588e:	4b14      	ldr	r3, [pc, #80]	; (80058e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	429a      	cmp	r2, r3
 800589c:	d209      	bcs.n	80058b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800589e:	4b12      	ldr	r3, [pc, #72]	; (80058e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	4b0f      	ldr	r3, [pc, #60]	; (80058e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	3304      	adds	r3, #4
 80058a8:	4619      	mov	r1, r3
 80058aa:	4610      	mov	r0, r2
 80058ac:	f7fe f89f 	bl	80039ee <vListInsert>
}
 80058b0:	e010      	b.n	80058d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058b2:	4b0e      	ldr	r3, [pc, #56]	; (80058ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	4b0a      	ldr	r3, [pc, #40]	; (80058e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3304      	adds	r3, #4
 80058bc:	4619      	mov	r1, r3
 80058be:	4610      	mov	r0, r2
 80058c0:	f7fe f895 	bl	80039ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80058c4:	4b0a      	ldr	r3, [pc, #40]	; (80058f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d202      	bcs.n	80058d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80058ce:	4a08      	ldr	r2, [pc, #32]	; (80058f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	6013      	str	r3, [r2, #0]
}
 80058d4:	bf00      	nop
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	20000e48 	.word	0x20000e48
 80058e0:	20000970 	.word	0x20000970
 80058e4:	20000e30 	.word	0x20000e30
 80058e8:	20000e00 	.word	0x20000e00
 80058ec:	20000dfc 	.word	0x20000dfc
 80058f0:	20000e64 	.word	0x20000e64

080058f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b08a      	sub	sp, #40	; 0x28
 80058f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80058fa:	2300      	movs	r3, #0
 80058fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80058fe:	f000 fb07 	bl	8005f10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005902:	4b1c      	ldr	r3, [pc, #112]	; (8005974 <xTimerCreateTimerTask+0x80>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d021      	beq.n	800594e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800590a:	2300      	movs	r3, #0
 800590c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800590e:	2300      	movs	r3, #0
 8005910:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005912:	1d3a      	adds	r2, r7, #4
 8005914:	f107 0108 	add.w	r1, r7, #8
 8005918:	f107 030c 	add.w	r3, r7, #12
 800591c:	4618      	mov	r0, r3
 800591e:	f7fd fffb 	bl	8003918 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	9202      	str	r2, [sp, #8]
 800592a:	9301      	str	r3, [sp, #4]
 800592c:	2302      	movs	r3, #2
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	2300      	movs	r3, #0
 8005932:	460a      	mov	r2, r1
 8005934:	4910      	ldr	r1, [pc, #64]	; (8005978 <xTimerCreateTimerTask+0x84>)
 8005936:	4811      	ldr	r0, [pc, #68]	; (800597c <xTimerCreateTimerTask+0x88>)
 8005938:	f7fe ff38 	bl	80047ac <xTaskCreateStatic>
 800593c:	4603      	mov	r3, r0
 800593e:	4a10      	ldr	r2, [pc, #64]	; (8005980 <xTimerCreateTimerTask+0x8c>)
 8005940:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005942:	4b0f      	ldr	r3, [pc, #60]	; (8005980 <xTimerCreateTimerTask+0x8c>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800594a:	2301      	movs	r3, #1
 800594c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10a      	bne.n	800596a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	613b      	str	r3, [r7, #16]
}
 8005966:	bf00      	nop
 8005968:	e7fe      	b.n	8005968 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800596a:	697b      	ldr	r3, [r7, #20]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3718      	adds	r7, #24
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	20000ea0 	.word	0x20000ea0
 8005978:	08006abc 	.word	0x08006abc
 800597c:	08005ab9 	.word	0x08005ab9
 8005980:	20000ea4 	.word	0x20000ea4

08005984 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b08a      	sub	sp, #40	; 0x28
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
 8005990:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005992:	2300      	movs	r3, #0
 8005994:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10a      	bne.n	80059b2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800599c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	623b      	str	r3, [r7, #32]
}
 80059ae:	bf00      	nop
 80059b0:	e7fe      	b.n	80059b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80059b2:	4b1a      	ldr	r3, [pc, #104]	; (8005a1c <xTimerGenericCommand+0x98>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d02a      	beq.n	8005a10 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2b05      	cmp	r3, #5
 80059ca:	dc18      	bgt.n	80059fe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80059cc:	f7ff fdb4 	bl	8005538 <xTaskGetSchedulerState>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d109      	bne.n	80059ea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80059d6:	4b11      	ldr	r3, [pc, #68]	; (8005a1c <xTimerGenericCommand+0x98>)
 80059d8:	6818      	ldr	r0, [r3, #0]
 80059da:	f107 0110 	add.w	r1, r7, #16
 80059de:	2300      	movs	r3, #0
 80059e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059e2:	f7fe f9d7 	bl	8003d94 <xQueueGenericSend>
 80059e6:	6278      	str	r0, [r7, #36]	; 0x24
 80059e8:	e012      	b.n	8005a10 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80059ea:	4b0c      	ldr	r3, [pc, #48]	; (8005a1c <xTimerGenericCommand+0x98>)
 80059ec:	6818      	ldr	r0, [r3, #0]
 80059ee:	f107 0110 	add.w	r1, r7, #16
 80059f2:	2300      	movs	r3, #0
 80059f4:	2200      	movs	r2, #0
 80059f6:	f7fe f9cd 	bl	8003d94 <xQueueGenericSend>
 80059fa:	6278      	str	r0, [r7, #36]	; 0x24
 80059fc:	e008      	b.n	8005a10 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80059fe:	4b07      	ldr	r3, [pc, #28]	; (8005a1c <xTimerGenericCommand+0x98>)
 8005a00:	6818      	ldr	r0, [r3, #0]
 8005a02:	f107 0110 	add.w	r1, r7, #16
 8005a06:	2300      	movs	r3, #0
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	f7fe fac1 	bl	8003f90 <xQueueGenericSendFromISR>
 8005a0e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3728      	adds	r7, #40	; 0x28
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	20000ea0 	.word	0x20000ea0

08005a20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b088      	sub	sp, #32
 8005a24:	af02      	add	r7, sp, #8
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a2a:	4b22      	ldr	r3, [pc, #136]	; (8005ab4 <prvProcessExpiredTimer+0x94>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	3304      	adds	r3, #4
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7fe f811 	bl	8003a60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a44:	f003 0304 	and.w	r3, r3, #4
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d022      	beq.n	8005a92 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	699a      	ldr	r2, [r3, #24]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	18d1      	adds	r1, r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	6978      	ldr	r0, [r7, #20]
 8005a5a:	f000 f8d1 	bl	8005c00 <prvInsertTimerInActiveList>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d01f      	beq.n	8005aa4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a64:	2300      	movs	r3, #0
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	2300      	movs	r3, #0
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	6978      	ldr	r0, [r7, #20]
 8005a70:	f7ff ff88 	bl	8005984 <xTimerGenericCommand>
 8005a74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d113      	bne.n	8005aa4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	60fb      	str	r3, [r7, #12]
}
 8005a8e:	bf00      	nop
 8005a90:	e7fe      	b.n	8005a90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a98:	f023 0301 	bic.w	r3, r3, #1
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	6978      	ldr	r0, [r7, #20]
 8005aaa:	4798      	blx	r3
}
 8005aac:	bf00      	nop
 8005aae:	3718      	adds	r7, #24
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	20000e98 	.word	0x20000e98

08005ab8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ac0:	f107 0308 	add.w	r3, r7, #8
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f000 f857 	bl	8005b78 <prvGetNextExpireTime>
 8005aca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	4619      	mov	r1, r3
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 f803 	bl	8005adc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005ad6:	f000 f8d5 	bl	8005c84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ada:	e7f1      	b.n	8005ac0 <prvTimerTask+0x8>

08005adc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005ae6:	f7ff f93b 	bl	8004d60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005aea:	f107 0308 	add.w	r3, r7, #8
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 f866 	bl	8005bc0 <prvSampleTimeNow>
 8005af4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d130      	bne.n	8005b5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10a      	bne.n	8005b18 <prvProcessTimerOrBlockTask+0x3c>
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d806      	bhi.n	8005b18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005b0a:	f7ff f937 	bl	8004d7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005b0e:	68f9      	ldr	r1, [r7, #12]
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f7ff ff85 	bl	8005a20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005b16:	e024      	b.n	8005b62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d008      	beq.n	8005b30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005b1e:	4b13      	ldr	r3, [pc, #76]	; (8005b6c <prvProcessTimerOrBlockTask+0x90>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <prvProcessTimerOrBlockTask+0x50>
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e000      	b.n	8005b2e <prvProcessTimerOrBlockTask+0x52>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005b30:	4b0f      	ldr	r3, [pc, #60]	; (8005b70 <prvProcessTimerOrBlockTask+0x94>)
 8005b32:	6818      	ldr	r0, [r3, #0]
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	f7fe fe01 	bl	8004744 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005b42:	f7ff f91b 	bl	8004d7c <xTaskResumeAll>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10a      	bne.n	8005b62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005b4c:	4b09      	ldr	r3, [pc, #36]	; (8005b74 <prvProcessTimerOrBlockTask+0x98>)
 8005b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	f3bf 8f4f 	dsb	sy
 8005b58:	f3bf 8f6f 	isb	sy
}
 8005b5c:	e001      	b.n	8005b62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005b5e:	f7ff f90d 	bl	8004d7c <xTaskResumeAll>
}
 8005b62:	bf00      	nop
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	20000e9c 	.word	0x20000e9c
 8005b70:	20000ea0 	.word	0x20000ea0
 8005b74:	e000ed04 	.word	0xe000ed04

08005b78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005b80:	4b0e      	ldr	r3, [pc, #56]	; (8005bbc <prvGetNextExpireTime+0x44>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <prvGetNextExpireTime+0x16>
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	e000      	b.n	8005b90 <prvGetNextExpireTime+0x18>
 8005b8e:	2200      	movs	r2, #0
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d105      	bne.n	8005ba8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b9c:	4b07      	ldr	r3, [pc, #28]	; (8005bbc <prvGetNextExpireTime+0x44>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	60fb      	str	r3, [r7, #12]
 8005ba6:	e001      	b.n	8005bac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005bac:	68fb      	ldr	r3, [r7, #12]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	20000e98 	.word	0x20000e98

08005bc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005bc8:	f7ff f976 	bl	8004eb8 <xTaskGetTickCount>
 8005bcc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005bce:	4b0b      	ldr	r3, [pc, #44]	; (8005bfc <prvSampleTimeNow+0x3c>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d205      	bcs.n	8005be4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005bd8:	f000 f936 	bl	8005e48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	e002      	b.n	8005bea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005bea:	4a04      	ldr	r2, [pc, #16]	; (8005bfc <prvSampleTimeNow+0x3c>)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	20000ea8 	.word	0x20000ea8

08005c00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
 8005c0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d812      	bhi.n	8005c4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	1ad2      	subs	r2, r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d302      	bcc.n	8005c3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005c34:	2301      	movs	r3, #1
 8005c36:	617b      	str	r3, [r7, #20]
 8005c38:	e01b      	b.n	8005c72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005c3a:	4b10      	ldr	r3, [pc, #64]	; (8005c7c <prvInsertTimerInActiveList+0x7c>)
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	3304      	adds	r3, #4
 8005c42:	4619      	mov	r1, r3
 8005c44:	4610      	mov	r0, r2
 8005c46:	f7fd fed2 	bl	80039ee <vListInsert>
 8005c4a:	e012      	b.n	8005c72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d206      	bcs.n	8005c62 <prvInsertTimerInActiveList+0x62>
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d302      	bcc.n	8005c62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	617b      	str	r3, [r7, #20]
 8005c60:	e007      	b.n	8005c72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c62:	4b07      	ldr	r3, [pc, #28]	; (8005c80 <prvInsertTimerInActiveList+0x80>)
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	3304      	adds	r3, #4
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	f7fd febe 	bl	80039ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005c72:	697b      	ldr	r3, [r7, #20]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	20000e9c 	.word	0x20000e9c
 8005c80:	20000e98 	.word	0x20000e98

08005c84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b08e      	sub	sp, #56	; 0x38
 8005c88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c8a:	e0ca      	b.n	8005e22 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	da18      	bge.n	8005cc4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005c92:	1d3b      	adds	r3, r7, #4
 8005c94:	3304      	adds	r3, #4
 8005c96:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10a      	bne.n	8005cb4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	61fb      	str	r3, [r7, #28]
}
 8005cb0:	bf00      	nop
 8005cb2:	e7fe      	b.n	8005cb2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cba:	6850      	ldr	r0, [r2, #4]
 8005cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cbe:	6892      	ldr	r2, [r2, #8]
 8005cc0:	4611      	mov	r1, r2
 8005cc2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f2c0 80aa 	blt.w	8005e20 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d004      	beq.n	8005ce2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cda:	3304      	adds	r3, #4
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7fd febf 	bl	8003a60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ce2:	463b      	mov	r3, r7
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7ff ff6b 	bl	8005bc0 <prvSampleTimeNow>
 8005cea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b09      	cmp	r3, #9
 8005cf0:	f200 8097 	bhi.w	8005e22 <prvProcessReceivedCommands+0x19e>
 8005cf4:	a201      	add	r2, pc, #4	; (adr r2, 8005cfc <prvProcessReceivedCommands+0x78>)
 8005cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfa:	bf00      	nop
 8005cfc:	08005d25 	.word	0x08005d25
 8005d00:	08005d25 	.word	0x08005d25
 8005d04:	08005d25 	.word	0x08005d25
 8005d08:	08005d99 	.word	0x08005d99
 8005d0c:	08005dad 	.word	0x08005dad
 8005d10:	08005df7 	.word	0x08005df7
 8005d14:	08005d25 	.word	0x08005d25
 8005d18:	08005d25 	.word	0x08005d25
 8005d1c:	08005d99 	.word	0x08005d99
 8005d20:	08005dad 	.word	0x08005dad
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d2a:	f043 0301 	orr.w	r3, r3, #1
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	18d1      	adds	r1, r2, r3
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d44:	f7ff ff5c 	bl	8005c00 <prvInsertTimerInActiveList>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d069      	beq.n	8005e22 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d54:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d5c:	f003 0304 	and.w	r3, r3, #4
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d05e      	beq.n	8005e22 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	441a      	add	r2, r3
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	2300      	movs	r3, #0
 8005d72:	2100      	movs	r1, #0
 8005d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d76:	f7ff fe05 	bl	8005984 <xTimerGenericCommand>
 8005d7a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d14f      	bne.n	8005e22 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	61bb      	str	r3, [r7, #24]
}
 8005d94:	bf00      	nop
 8005d96:	e7fe      	b.n	8005d96 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d9e:	f023 0301 	bic.w	r3, r3, #1
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005daa:	e03a      	b.n	8005e22 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005db2:	f043 0301 	orr.w	r3, r3, #1
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10a      	bne.n	8005de2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd0:	f383 8811 	msr	BASEPRI, r3
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	617b      	str	r3, [r7, #20]
}
 8005dde:	bf00      	nop
 8005de0:	e7fe      	b.n	8005de0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de4:	699a      	ldr	r2, [r3, #24]
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	18d1      	adds	r1, r2, r3
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005df0:	f7ff ff06 	bl	8005c00 <prvInsertTimerInActiveList>
					break;
 8005df4:	e015      	b.n	8005e22 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dfc:	f003 0302 	and.w	r3, r3, #2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d103      	bne.n	8005e0c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005e04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e06:	f000 fbdb 	bl	80065c0 <vPortFree>
 8005e0a:	e00a      	b.n	8005e22 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e12:	f023 0301 	bic.w	r3, r3, #1
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005e1e:	e000      	b.n	8005e22 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005e20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e22:	4b08      	ldr	r3, [pc, #32]	; (8005e44 <prvProcessReceivedCommands+0x1c0>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	1d39      	adds	r1, r7, #4
 8005e28:	2200      	movs	r2, #0
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fe f94c 	bl	80040c8 <xQueueReceive>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f47f af2a 	bne.w	8005c8c <prvProcessReceivedCommands+0x8>
	}
}
 8005e38:	bf00      	nop
 8005e3a:	bf00      	nop
 8005e3c:	3730      	adds	r7, #48	; 0x30
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	20000ea0 	.word	0x20000ea0

08005e48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b088      	sub	sp, #32
 8005e4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e4e:	e048      	b.n	8005ee2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e50:	4b2d      	ldr	r3, [pc, #180]	; (8005f08 <prvSwitchTimerLists+0xc0>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e5a:	4b2b      	ldr	r3, [pc, #172]	; (8005f08 <prvSwitchTimerLists+0xc0>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	3304      	adds	r3, #4
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7fd fdf9 	bl	8003a60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d02e      	beq.n	8005ee2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d90e      	bls.n	8005eb4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ea2:	4b19      	ldr	r3, [pc, #100]	; (8005f08 <prvSwitchTimerLists+0xc0>)
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	3304      	adds	r3, #4
 8005eaa:	4619      	mov	r1, r3
 8005eac:	4610      	mov	r0, r2
 8005eae:	f7fd fd9e 	bl	80039ee <vListInsert>
 8005eb2:	e016      	b.n	8005ee2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	2300      	movs	r3, #0
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f7ff fd60 	bl	8005984 <xTimerGenericCommand>
 8005ec4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10a      	bne.n	8005ee2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	603b      	str	r3, [r7, #0]
}
 8005ede:	bf00      	nop
 8005ee0:	e7fe      	b.n	8005ee0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ee2:	4b09      	ldr	r3, [pc, #36]	; (8005f08 <prvSwitchTimerLists+0xc0>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1b1      	bne.n	8005e50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005eec:	4b06      	ldr	r3, [pc, #24]	; (8005f08 <prvSwitchTimerLists+0xc0>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005ef2:	4b06      	ldr	r3, [pc, #24]	; (8005f0c <prvSwitchTimerLists+0xc4>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a04      	ldr	r2, [pc, #16]	; (8005f08 <prvSwitchTimerLists+0xc0>)
 8005ef8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005efa:	4a04      	ldr	r2, [pc, #16]	; (8005f0c <prvSwitchTimerLists+0xc4>)
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	6013      	str	r3, [r2, #0]
}
 8005f00:	bf00      	nop
 8005f02:	3718      	adds	r7, #24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	20000e98 	.word	0x20000e98
 8005f0c:	20000e9c 	.word	0x20000e9c

08005f10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005f16:	f000 f965 	bl	80061e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005f1a:	4b15      	ldr	r3, [pc, #84]	; (8005f70 <prvCheckForValidListAndQueue+0x60>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d120      	bne.n	8005f64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005f22:	4814      	ldr	r0, [pc, #80]	; (8005f74 <prvCheckForValidListAndQueue+0x64>)
 8005f24:	f7fd fd12 	bl	800394c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005f28:	4813      	ldr	r0, [pc, #76]	; (8005f78 <prvCheckForValidListAndQueue+0x68>)
 8005f2a:	f7fd fd0f 	bl	800394c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005f2e:	4b13      	ldr	r3, [pc, #76]	; (8005f7c <prvCheckForValidListAndQueue+0x6c>)
 8005f30:	4a10      	ldr	r2, [pc, #64]	; (8005f74 <prvCheckForValidListAndQueue+0x64>)
 8005f32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005f34:	4b12      	ldr	r3, [pc, #72]	; (8005f80 <prvCheckForValidListAndQueue+0x70>)
 8005f36:	4a10      	ldr	r2, [pc, #64]	; (8005f78 <prvCheckForValidListAndQueue+0x68>)
 8005f38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	4b11      	ldr	r3, [pc, #68]	; (8005f84 <prvCheckForValidListAndQueue+0x74>)
 8005f40:	4a11      	ldr	r2, [pc, #68]	; (8005f88 <prvCheckForValidListAndQueue+0x78>)
 8005f42:	2110      	movs	r1, #16
 8005f44:	200a      	movs	r0, #10
 8005f46:	f7fd fe1d 	bl	8003b84 <xQueueGenericCreateStatic>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	4a08      	ldr	r2, [pc, #32]	; (8005f70 <prvCheckForValidListAndQueue+0x60>)
 8005f4e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005f50:	4b07      	ldr	r3, [pc, #28]	; (8005f70 <prvCheckForValidListAndQueue+0x60>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d005      	beq.n	8005f64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005f58:	4b05      	ldr	r3, [pc, #20]	; (8005f70 <prvCheckForValidListAndQueue+0x60>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	490b      	ldr	r1, [pc, #44]	; (8005f8c <prvCheckForValidListAndQueue+0x7c>)
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7fe fbc6 	bl	80046f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f64:	f000 f96e 	bl	8006244 <vPortExitCritical>
}
 8005f68:	bf00      	nop
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	20000ea0 	.word	0x20000ea0
 8005f74:	20000e70 	.word	0x20000e70
 8005f78:	20000e84 	.word	0x20000e84
 8005f7c:	20000e98 	.word	0x20000e98
 8005f80:	20000e9c 	.word	0x20000e9c
 8005f84:	20000f4c 	.word	0x20000f4c
 8005f88:	20000eac 	.word	0x20000eac
 8005f8c:	08006ac4 	.word	0x08006ac4

08005f90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	3b04      	subs	r3, #4
 8005fa0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	3b04      	subs	r3, #4
 8005fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f023 0201 	bic.w	r2, r3, #1
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	3b04      	subs	r3, #4
 8005fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005fc0:	4a0c      	ldr	r2, [pc, #48]	; (8005ff4 <pxPortInitialiseStack+0x64>)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	3b14      	subs	r3, #20
 8005fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	3b04      	subs	r3, #4
 8005fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f06f 0202 	mvn.w	r2, #2
 8005fde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	3b20      	subs	r3, #32
 8005fe4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	08005ff9 	.word	0x08005ff9

08005ff8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005ffe:	2300      	movs	r3, #0
 8006000:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006002:	4b12      	ldr	r3, [pc, #72]	; (800604c <prvTaskExitError+0x54>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600a:	d00a      	beq.n	8006022 <prvTaskExitError+0x2a>
	__asm volatile
 800600c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006010:	f383 8811 	msr	BASEPRI, r3
 8006014:	f3bf 8f6f 	isb	sy
 8006018:	f3bf 8f4f 	dsb	sy
 800601c:	60fb      	str	r3, [r7, #12]
}
 800601e:	bf00      	nop
 8006020:	e7fe      	b.n	8006020 <prvTaskExitError+0x28>
	__asm volatile
 8006022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006026:	f383 8811 	msr	BASEPRI, r3
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	60bb      	str	r3, [r7, #8]
}
 8006034:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006036:	bf00      	nop
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d0fc      	beq.n	8006038 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800603e:	bf00      	nop
 8006040:	bf00      	nop
 8006042:	3714      	adds	r7, #20
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	2000000c 	.word	0x2000000c

08006050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006050:	4b07      	ldr	r3, [pc, #28]	; (8006070 <pxCurrentTCBConst2>)
 8006052:	6819      	ldr	r1, [r3, #0]
 8006054:	6808      	ldr	r0, [r1, #0]
 8006056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605a:	f380 8809 	msr	PSP, r0
 800605e:	f3bf 8f6f 	isb	sy
 8006062:	f04f 0000 	mov.w	r0, #0
 8006066:	f380 8811 	msr	BASEPRI, r0
 800606a:	4770      	bx	lr
 800606c:	f3af 8000 	nop.w

08006070 <pxCurrentTCBConst2>:
 8006070:	20000970 	.word	0x20000970
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006074:	bf00      	nop
 8006076:	bf00      	nop

08006078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006078:	4808      	ldr	r0, [pc, #32]	; (800609c <prvPortStartFirstTask+0x24>)
 800607a:	6800      	ldr	r0, [r0, #0]
 800607c:	6800      	ldr	r0, [r0, #0]
 800607e:	f380 8808 	msr	MSP, r0
 8006082:	f04f 0000 	mov.w	r0, #0
 8006086:	f380 8814 	msr	CONTROL, r0
 800608a:	b662      	cpsie	i
 800608c:	b661      	cpsie	f
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	df00      	svc	0
 8006098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800609a:	bf00      	nop
 800609c:	e000ed08 	.word	0xe000ed08

080060a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060a6:	4b46      	ldr	r3, [pc, #280]	; (80061c0 <xPortStartScheduler+0x120>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a46      	ldr	r2, [pc, #280]	; (80061c4 <xPortStartScheduler+0x124>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d10a      	bne.n	80060c6 <xPortStartScheduler+0x26>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	613b      	str	r3, [r7, #16]
}
 80060c2:	bf00      	nop
 80060c4:	e7fe      	b.n	80060c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060c6:	4b3e      	ldr	r3, [pc, #248]	; (80061c0 <xPortStartScheduler+0x120>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a3f      	ldr	r2, [pc, #252]	; (80061c8 <xPortStartScheduler+0x128>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d10a      	bne.n	80060e6 <xPortStartScheduler+0x46>
	__asm volatile
 80060d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d4:	f383 8811 	msr	BASEPRI, r3
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	60fb      	str	r3, [r7, #12]
}
 80060e2:	bf00      	nop
 80060e4:	e7fe      	b.n	80060e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060e6:	4b39      	ldr	r3, [pc, #228]	; (80061cc <xPortStartScheduler+0x12c>)
 80060e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	22ff      	movs	r2, #255	; 0xff
 80060f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006100:	78fb      	ldrb	r3, [r7, #3]
 8006102:	b2db      	uxtb	r3, r3
 8006104:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006108:	b2da      	uxtb	r2, r3
 800610a:	4b31      	ldr	r3, [pc, #196]	; (80061d0 <xPortStartScheduler+0x130>)
 800610c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800610e:	4b31      	ldr	r3, [pc, #196]	; (80061d4 <xPortStartScheduler+0x134>)
 8006110:	2207      	movs	r2, #7
 8006112:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006114:	e009      	b.n	800612a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006116:	4b2f      	ldr	r3, [pc, #188]	; (80061d4 <xPortStartScheduler+0x134>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	3b01      	subs	r3, #1
 800611c:	4a2d      	ldr	r2, [pc, #180]	; (80061d4 <xPortStartScheduler+0x134>)
 800611e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006120:	78fb      	ldrb	r3, [r7, #3]
 8006122:	b2db      	uxtb	r3, r3
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	b2db      	uxtb	r3, r3
 8006128:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800612a:	78fb      	ldrb	r3, [r7, #3]
 800612c:	b2db      	uxtb	r3, r3
 800612e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006132:	2b80      	cmp	r3, #128	; 0x80
 8006134:	d0ef      	beq.n	8006116 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006136:	4b27      	ldr	r3, [pc, #156]	; (80061d4 <xPortStartScheduler+0x134>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f1c3 0307 	rsb	r3, r3, #7
 800613e:	2b04      	cmp	r3, #4
 8006140:	d00a      	beq.n	8006158 <xPortStartScheduler+0xb8>
	__asm volatile
 8006142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006146:	f383 8811 	msr	BASEPRI, r3
 800614a:	f3bf 8f6f 	isb	sy
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	60bb      	str	r3, [r7, #8]
}
 8006154:	bf00      	nop
 8006156:	e7fe      	b.n	8006156 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006158:	4b1e      	ldr	r3, [pc, #120]	; (80061d4 <xPortStartScheduler+0x134>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	021b      	lsls	r3, r3, #8
 800615e:	4a1d      	ldr	r2, [pc, #116]	; (80061d4 <xPortStartScheduler+0x134>)
 8006160:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006162:	4b1c      	ldr	r3, [pc, #112]	; (80061d4 <xPortStartScheduler+0x134>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800616a:	4a1a      	ldr	r2, [pc, #104]	; (80061d4 <xPortStartScheduler+0x134>)
 800616c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	b2da      	uxtb	r2, r3
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006176:	4b18      	ldr	r3, [pc, #96]	; (80061d8 <xPortStartScheduler+0x138>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a17      	ldr	r2, [pc, #92]	; (80061d8 <xPortStartScheduler+0x138>)
 800617c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006180:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006182:	4b15      	ldr	r3, [pc, #84]	; (80061d8 <xPortStartScheduler+0x138>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a14      	ldr	r2, [pc, #80]	; (80061d8 <xPortStartScheduler+0x138>)
 8006188:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800618c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800618e:	f000 f8dd 	bl	800634c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006192:	4b12      	ldr	r3, [pc, #72]	; (80061dc <xPortStartScheduler+0x13c>)
 8006194:	2200      	movs	r2, #0
 8006196:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006198:	f000 f8fc 	bl	8006394 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800619c:	4b10      	ldr	r3, [pc, #64]	; (80061e0 <xPortStartScheduler+0x140>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a0f      	ldr	r2, [pc, #60]	; (80061e0 <xPortStartScheduler+0x140>)
 80061a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80061a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80061a8:	f7ff ff66 	bl	8006078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80061ac:	f7fe ff4e 	bl	800504c <vTaskSwitchContext>
	prvTaskExitError();
 80061b0:	f7ff ff22 	bl	8005ff8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3718      	adds	r7, #24
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	e000ed00 	.word	0xe000ed00
 80061c4:	410fc271 	.word	0x410fc271
 80061c8:	410fc270 	.word	0x410fc270
 80061cc:	e000e400 	.word	0xe000e400
 80061d0:	20000f9c 	.word	0x20000f9c
 80061d4:	20000fa0 	.word	0x20000fa0
 80061d8:	e000ed20 	.word	0xe000ed20
 80061dc:	2000000c 	.word	0x2000000c
 80061e0:	e000ef34 	.word	0xe000ef34

080061e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
	__asm volatile
 80061ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ee:	f383 8811 	msr	BASEPRI, r3
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	607b      	str	r3, [r7, #4]
}
 80061fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80061fe:	4b0f      	ldr	r3, [pc, #60]	; (800623c <vPortEnterCritical+0x58>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	3301      	adds	r3, #1
 8006204:	4a0d      	ldr	r2, [pc, #52]	; (800623c <vPortEnterCritical+0x58>)
 8006206:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006208:	4b0c      	ldr	r3, [pc, #48]	; (800623c <vPortEnterCritical+0x58>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d10f      	bne.n	8006230 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006210:	4b0b      	ldr	r3, [pc, #44]	; (8006240 <vPortEnterCritical+0x5c>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00a      	beq.n	8006230 <vPortEnterCritical+0x4c>
	__asm volatile
 800621a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	603b      	str	r3, [r7, #0]
}
 800622c:	bf00      	nop
 800622e:	e7fe      	b.n	800622e <vPortEnterCritical+0x4a>
	}
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	2000000c 	.word	0x2000000c
 8006240:	e000ed04 	.word	0xe000ed04

08006244 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800624a:	4b12      	ldr	r3, [pc, #72]	; (8006294 <vPortExitCritical+0x50>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10a      	bne.n	8006268 <vPortExitCritical+0x24>
	__asm volatile
 8006252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	607b      	str	r3, [r7, #4]
}
 8006264:	bf00      	nop
 8006266:	e7fe      	b.n	8006266 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006268:	4b0a      	ldr	r3, [pc, #40]	; (8006294 <vPortExitCritical+0x50>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3b01      	subs	r3, #1
 800626e:	4a09      	ldr	r2, [pc, #36]	; (8006294 <vPortExitCritical+0x50>)
 8006270:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006272:	4b08      	ldr	r3, [pc, #32]	; (8006294 <vPortExitCritical+0x50>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d105      	bne.n	8006286 <vPortExitCritical+0x42>
 800627a:	2300      	movs	r3, #0
 800627c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	f383 8811 	msr	BASEPRI, r3
}
 8006284:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006286:	bf00      	nop
 8006288:	370c      	adds	r7, #12
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	2000000c 	.word	0x2000000c
	...

080062a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062a0:	f3ef 8009 	mrs	r0, PSP
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	4b15      	ldr	r3, [pc, #84]	; (8006300 <pxCurrentTCBConst>)
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	f01e 0f10 	tst.w	lr, #16
 80062b0:	bf08      	it	eq
 80062b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ba:	6010      	str	r0, [r2, #0]
 80062bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062c4:	f380 8811 	msr	BASEPRI, r0
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	f7fe febc 	bl	800504c <vTaskSwitchContext>
 80062d4:	f04f 0000 	mov.w	r0, #0
 80062d8:	f380 8811 	msr	BASEPRI, r0
 80062dc:	bc09      	pop	{r0, r3}
 80062de:	6819      	ldr	r1, [r3, #0]
 80062e0:	6808      	ldr	r0, [r1, #0]
 80062e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e6:	f01e 0f10 	tst.w	lr, #16
 80062ea:	bf08      	it	eq
 80062ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80062f0:	f380 8809 	msr	PSP, r0
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	f3af 8000 	nop.w

08006300 <pxCurrentTCBConst>:
 8006300:	20000970 	.word	0x20000970
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006304:	bf00      	nop
 8006306:	bf00      	nop

08006308 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	607b      	str	r3, [r7, #4]
}
 8006320:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006322:	f7fe fdd9 	bl	8004ed8 <xTaskIncrementTick>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d003      	beq.n	8006334 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800632c:	4b06      	ldr	r3, [pc, #24]	; (8006348 <xPortSysTickHandler+0x40>)
 800632e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	2300      	movs	r3, #0
 8006336:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	f383 8811 	msr	BASEPRI, r3
}
 800633e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006340:	bf00      	nop
 8006342:	3708      	adds	r7, #8
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	e000ed04 	.word	0xe000ed04

0800634c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800634c:	b480      	push	{r7}
 800634e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006350:	4b0b      	ldr	r3, [pc, #44]	; (8006380 <vPortSetupTimerInterrupt+0x34>)
 8006352:	2200      	movs	r2, #0
 8006354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006356:	4b0b      	ldr	r3, [pc, #44]	; (8006384 <vPortSetupTimerInterrupt+0x38>)
 8006358:	2200      	movs	r2, #0
 800635a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800635c:	4b0a      	ldr	r3, [pc, #40]	; (8006388 <vPortSetupTimerInterrupt+0x3c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a0a      	ldr	r2, [pc, #40]	; (800638c <vPortSetupTimerInterrupt+0x40>)
 8006362:	fba2 2303 	umull	r2, r3, r2, r3
 8006366:	099b      	lsrs	r3, r3, #6
 8006368:	4a09      	ldr	r2, [pc, #36]	; (8006390 <vPortSetupTimerInterrupt+0x44>)
 800636a:	3b01      	subs	r3, #1
 800636c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800636e:	4b04      	ldr	r3, [pc, #16]	; (8006380 <vPortSetupTimerInterrupt+0x34>)
 8006370:	2207      	movs	r2, #7
 8006372:	601a      	str	r2, [r3, #0]
}
 8006374:	bf00      	nop
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	e000e010 	.word	0xe000e010
 8006384:	e000e018 	.word	0xe000e018
 8006388:	20000000 	.word	0x20000000
 800638c:	10624dd3 	.word	0x10624dd3
 8006390:	e000e014 	.word	0xe000e014

08006394 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006394:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80063a4 <vPortEnableVFP+0x10>
 8006398:	6801      	ldr	r1, [r0, #0]
 800639a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800639e:	6001      	str	r1, [r0, #0]
 80063a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80063a2:	bf00      	nop
 80063a4:	e000ed88 	.word	0xe000ed88

080063a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80063ae:	f3ef 8305 	mrs	r3, IPSR
 80063b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2b0f      	cmp	r3, #15
 80063b8:	d914      	bls.n	80063e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80063ba:	4a17      	ldr	r2, [pc, #92]	; (8006418 <vPortValidateInterruptPriority+0x70>)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	4413      	add	r3, r2
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80063c4:	4b15      	ldr	r3, [pc, #84]	; (800641c <vPortValidateInterruptPriority+0x74>)
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	7afa      	ldrb	r2, [r7, #11]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d20a      	bcs.n	80063e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	607b      	str	r3, [r7, #4]
}
 80063e0:	bf00      	nop
 80063e2:	e7fe      	b.n	80063e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80063e4:	4b0e      	ldr	r3, [pc, #56]	; (8006420 <vPortValidateInterruptPriority+0x78>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80063ec:	4b0d      	ldr	r3, [pc, #52]	; (8006424 <vPortValidateInterruptPriority+0x7c>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d90a      	bls.n	800640a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80063f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f8:	f383 8811 	msr	BASEPRI, r3
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	603b      	str	r3, [r7, #0]
}
 8006406:	bf00      	nop
 8006408:	e7fe      	b.n	8006408 <vPortValidateInterruptPriority+0x60>
	}
 800640a:	bf00      	nop
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	e000e3f0 	.word	0xe000e3f0
 800641c:	20000f9c 	.word	0x20000f9c
 8006420:	e000ed0c 	.word	0xe000ed0c
 8006424:	20000fa0 	.word	0x20000fa0

08006428 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b08a      	sub	sp, #40	; 0x28
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006430:	2300      	movs	r3, #0
 8006432:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006434:	f7fe fc94 	bl	8004d60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006438:	4b5b      	ldr	r3, [pc, #364]	; (80065a8 <pvPortMalloc+0x180>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006440:	f000 f920 	bl	8006684 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006444:	4b59      	ldr	r3, [pc, #356]	; (80065ac <pvPortMalloc+0x184>)
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4013      	ands	r3, r2
 800644c:	2b00      	cmp	r3, #0
 800644e:	f040 8093 	bne.w	8006578 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d01d      	beq.n	8006494 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006458:	2208      	movs	r2, #8
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4413      	add	r3, r2
 800645e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f003 0307 	and.w	r3, r3, #7
 8006466:	2b00      	cmp	r3, #0
 8006468:	d014      	beq.n	8006494 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f023 0307 	bic.w	r3, r3, #7
 8006470:	3308      	adds	r3, #8
 8006472:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f003 0307 	and.w	r3, r3, #7
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00a      	beq.n	8006494 <pvPortMalloc+0x6c>
	__asm volatile
 800647e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006482:	f383 8811 	msr	BASEPRI, r3
 8006486:	f3bf 8f6f 	isb	sy
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	617b      	str	r3, [r7, #20]
}
 8006490:	bf00      	nop
 8006492:	e7fe      	b.n	8006492 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d06e      	beq.n	8006578 <pvPortMalloc+0x150>
 800649a:	4b45      	ldr	r3, [pc, #276]	; (80065b0 <pvPortMalloc+0x188>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d869      	bhi.n	8006578 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80064a4:	4b43      	ldr	r3, [pc, #268]	; (80065b4 <pvPortMalloc+0x18c>)
 80064a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064a8:	4b42      	ldr	r3, [pc, #264]	; (80065b4 <pvPortMalloc+0x18c>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064ae:	e004      	b.n	80064ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d903      	bls.n	80064cc <pvPortMalloc+0xa4>
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1f1      	bne.n	80064b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80064cc:	4b36      	ldr	r3, [pc, #216]	; (80065a8 <pvPortMalloc+0x180>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d050      	beq.n	8006578 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2208      	movs	r2, #8
 80064dc:	4413      	add	r3, r2
 80064de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	685a      	ldr	r2, [r3, #4]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	1ad2      	subs	r2, r2, r3
 80064f0:	2308      	movs	r3, #8
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d91f      	bls.n	8006538 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80064f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4413      	add	r3, r2
 80064fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	f003 0307 	and.w	r3, r3, #7
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00a      	beq.n	8006520 <pvPortMalloc+0xf8>
	__asm volatile
 800650a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650e:	f383 8811 	msr	BASEPRI, r3
 8006512:	f3bf 8f6f 	isb	sy
 8006516:	f3bf 8f4f 	dsb	sy
 800651a:	613b      	str	r3, [r7, #16]
}
 800651c:	bf00      	nop
 800651e:	e7fe      	b.n	800651e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	1ad2      	subs	r2, r2, r3
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006532:	69b8      	ldr	r0, [r7, #24]
 8006534:	f000 f908 	bl	8006748 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006538:	4b1d      	ldr	r3, [pc, #116]	; (80065b0 <pvPortMalloc+0x188>)
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	4a1b      	ldr	r2, [pc, #108]	; (80065b0 <pvPortMalloc+0x188>)
 8006544:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006546:	4b1a      	ldr	r3, [pc, #104]	; (80065b0 <pvPortMalloc+0x188>)
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	4b1b      	ldr	r3, [pc, #108]	; (80065b8 <pvPortMalloc+0x190>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	429a      	cmp	r2, r3
 8006550:	d203      	bcs.n	800655a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006552:	4b17      	ldr	r3, [pc, #92]	; (80065b0 <pvPortMalloc+0x188>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a18      	ldr	r2, [pc, #96]	; (80065b8 <pvPortMalloc+0x190>)
 8006558:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	4b13      	ldr	r3, [pc, #76]	; (80065ac <pvPortMalloc+0x184>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	431a      	orrs	r2, r3
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	2200      	movs	r2, #0
 800656c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800656e:	4b13      	ldr	r3, [pc, #76]	; (80065bc <pvPortMalloc+0x194>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3301      	adds	r3, #1
 8006574:	4a11      	ldr	r2, [pc, #68]	; (80065bc <pvPortMalloc+0x194>)
 8006576:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006578:	f7fe fc00 	bl	8004d7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	f003 0307 	and.w	r3, r3, #7
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00a      	beq.n	800659c <pvPortMalloc+0x174>
	__asm volatile
 8006586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	60fb      	str	r3, [r7, #12]
}
 8006598:	bf00      	nop
 800659a:	e7fe      	b.n	800659a <pvPortMalloc+0x172>
	return pvReturn;
 800659c:	69fb      	ldr	r3, [r7, #28]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3728      	adds	r7, #40	; 0x28
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	20004bac 	.word	0x20004bac
 80065ac:	20004bc0 	.word	0x20004bc0
 80065b0:	20004bb0 	.word	0x20004bb0
 80065b4:	20004ba4 	.word	0x20004ba4
 80065b8:	20004bb4 	.word	0x20004bb4
 80065bc:	20004bb8 	.word	0x20004bb8

080065c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d04d      	beq.n	800666e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80065d2:	2308      	movs	r3, #8
 80065d4:	425b      	negs	r3, r3
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	4413      	add	r3, r2
 80065da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	4b24      	ldr	r3, [pc, #144]	; (8006678 <vPortFree+0xb8>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4013      	ands	r3, r2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10a      	bne.n	8006604 <vPortFree+0x44>
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	60fb      	str	r3, [r7, #12]
}
 8006600:	bf00      	nop
 8006602:	e7fe      	b.n	8006602 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00a      	beq.n	8006622 <vPortFree+0x62>
	__asm volatile
 800660c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006610:	f383 8811 	msr	BASEPRI, r3
 8006614:	f3bf 8f6f 	isb	sy
 8006618:	f3bf 8f4f 	dsb	sy
 800661c:	60bb      	str	r3, [r7, #8]
}
 800661e:	bf00      	nop
 8006620:	e7fe      	b.n	8006620 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	4b14      	ldr	r3, [pc, #80]	; (8006678 <vPortFree+0xb8>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4013      	ands	r3, r2
 800662c:	2b00      	cmp	r3, #0
 800662e:	d01e      	beq.n	800666e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d11a      	bne.n	800666e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	4b0e      	ldr	r3, [pc, #56]	; (8006678 <vPortFree+0xb8>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	43db      	mvns	r3, r3
 8006642:	401a      	ands	r2, r3
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006648:	f7fe fb8a 	bl	8004d60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	4b0a      	ldr	r3, [pc, #40]	; (800667c <vPortFree+0xbc>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4413      	add	r3, r2
 8006656:	4a09      	ldr	r2, [pc, #36]	; (800667c <vPortFree+0xbc>)
 8006658:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800665a:	6938      	ldr	r0, [r7, #16]
 800665c:	f000 f874 	bl	8006748 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006660:	4b07      	ldr	r3, [pc, #28]	; (8006680 <vPortFree+0xc0>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	3301      	adds	r3, #1
 8006666:	4a06      	ldr	r2, [pc, #24]	; (8006680 <vPortFree+0xc0>)
 8006668:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800666a:	f7fe fb87 	bl	8004d7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800666e:	bf00      	nop
 8006670:	3718      	adds	r7, #24
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	20004bc0 	.word	0x20004bc0
 800667c:	20004bb0 	.word	0x20004bb0
 8006680:	20004bbc 	.word	0x20004bbc

08006684 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800668a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800668e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006690:	4b27      	ldr	r3, [pc, #156]	; (8006730 <prvHeapInit+0xac>)
 8006692:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f003 0307 	and.w	r3, r3, #7
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00c      	beq.n	80066b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	3307      	adds	r3, #7
 80066a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f023 0307 	bic.w	r3, r3, #7
 80066aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	4a1f      	ldr	r2, [pc, #124]	; (8006730 <prvHeapInit+0xac>)
 80066b4:	4413      	add	r3, r2
 80066b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80066bc:	4a1d      	ldr	r2, [pc, #116]	; (8006734 <prvHeapInit+0xb0>)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066c2:	4b1c      	ldr	r3, [pc, #112]	; (8006734 <prvHeapInit+0xb0>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	4413      	add	r3, r2
 80066ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066d0:	2208      	movs	r2, #8
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	1a9b      	subs	r3, r3, r2
 80066d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f023 0307 	bic.w	r3, r3, #7
 80066de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	4a15      	ldr	r2, [pc, #84]	; (8006738 <prvHeapInit+0xb4>)
 80066e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80066e6:	4b14      	ldr	r3, [pc, #80]	; (8006738 <prvHeapInit+0xb4>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2200      	movs	r2, #0
 80066ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80066ee:	4b12      	ldr	r3, [pc, #72]	; (8006738 <prvHeapInit+0xb4>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2200      	movs	r2, #0
 80066f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	1ad2      	subs	r2, r2, r3
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006704:	4b0c      	ldr	r3, [pc, #48]	; (8006738 <prvHeapInit+0xb4>)
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	4a0a      	ldr	r2, [pc, #40]	; (800673c <prvHeapInit+0xb8>)
 8006712:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	4a09      	ldr	r2, [pc, #36]	; (8006740 <prvHeapInit+0xbc>)
 800671a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800671c:	4b09      	ldr	r3, [pc, #36]	; (8006744 <prvHeapInit+0xc0>)
 800671e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006722:	601a      	str	r2, [r3, #0]
}
 8006724:	bf00      	nop
 8006726:	3714      	adds	r7, #20
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	20000fa4 	.word	0x20000fa4
 8006734:	20004ba4 	.word	0x20004ba4
 8006738:	20004bac 	.word	0x20004bac
 800673c:	20004bb4 	.word	0x20004bb4
 8006740:	20004bb0 	.word	0x20004bb0
 8006744:	20004bc0 	.word	0x20004bc0

08006748 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006750:	4b28      	ldr	r3, [pc, #160]	; (80067f4 <prvInsertBlockIntoFreeList+0xac>)
 8006752:	60fb      	str	r3, [r7, #12]
 8006754:	e002      	b.n	800675c <prvInsertBlockIntoFreeList+0x14>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	60fb      	str	r3, [r7, #12]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	429a      	cmp	r2, r3
 8006764:	d8f7      	bhi.n	8006756 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	4413      	add	r3, r2
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	429a      	cmp	r2, r3
 8006776:	d108      	bne.n	800678a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	441a      	add	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	441a      	add	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	429a      	cmp	r2, r3
 800679c:	d118      	bne.n	80067d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	4b15      	ldr	r3, [pc, #84]	; (80067f8 <prvInsertBlockIntoFreeList+0xb0>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d00d      	beq.n	80067c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685a      	ldr	r2, [r3, #4]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	441a      	add	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	e008      	b.n	80067d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067c6:	4b0c      	ldr	r3, [pc, #48]	; (80067f8 <prvInsertBlockIntoFreeList+0xb0>)
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	601a      	str	r2, [r3, #0]
 80067ce:	e003      	b.n	80067d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d002      	beq.n	80067e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067e6:	bf00      	nop
 80067e8:	3714      	adds	r7, #20
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	20004ba4 	.word	0x20004ba4
 80067f8:	20004bac 	.word	0x20004bac

080067fc <__libc_init_array>:
 80067fc:	b570      	push	{r4, r5, r6, lr}
 80067fe:	4d0d      	ldr	r5, [pc, #52]	; (8006834 <__libc_init_array+0x38>)
 8006800:	4c0d      	ldr	r4, [pc, #52]	; (8006838 <__libc_init_array+0x3c>)
 8006802:	1b64      	subs	r4, r4, r5
 8006804:	10a4      	asrs	r4, r4, #2
 8006806:	2600      	movs	r6, #0
 8006808:	42a6      	cmp	r6, r4
 800680a:	d109      	bne.n	8006820 <__libc_init_array+0x24>
 800680c:	4d0b      	ldr	r5, [pc, #44]	; (800683c <__libc_init_array+0x40>)
 800680e:	4c0c      	ldr	r4, [pc, #48]	; (8006840 <__libc_init_array+0x44>)
 8006810:	f000 f8f2 	bl	80069f8 <_init>
 8006814:	1b64      	subs	r4, r4, r5
 8006816:	10a4      	asrs	r4, r4, #2
 8006818:	2600      	movs	r6, #0
 800681a:	42a6      	cmp	r6, r4
 800681c:	d105      	bne.n	800682a <__libc_init_array+0x2e>
 800681e:	bd70      	pop	{r4, r5, r6, pc}
 8006820:	f855 3b04 	ldr.w	r3, [r5], #4
 8006824:	4798      	blx	r3
 8006826:	3601      	adds	r6, #1
 8006828:	e7ee      	b.n	8006808 <__libc_init_array+0xc>
 800682a:	f855 3b04 	ldr.w	r3, [r5], #4
 800682e:	4798      	blx	r3
 8006830:	3601      	adds	r6, #1
 8006832:	e7f2      	b.n	800681a <__libc_init_array+0x1e>
 8006834:	08006b88 	.word	0x08006b88
 8006838:	08006b88 	.word	0x08006b88
 800683c:	08006b88 	.word	0x08006b88
 8006840:	08006b8c 	.word	0x08006b8c

08006844 <__retarget_lock_acquire_recursive>:
 8006844:	4770      	bx	lr

08006846 <__retarget_lock_release_recursive>:
 8006846:	4770      	bx	lr

08006848 <memcpy>:
 8006848:	440a      	add	r2, r1
 800684a:	4291      	cmp	r1, r2
 800684c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006850:	d100      	bne.n	8006854 <memcpy+0xc>
 8006852:	4770      	bx	lr
 8006854:	b510      	push	{r4, lr}
 8006856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800685a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800685e:	4291      	cmp	r1, r2
 8006860:	d1f9      	bne.n	8006856 <memcpy+0xe>
 8006862:	bd10      	pop	{r4, pc}

08006864 <memset>:
 8006864:	4402      	add	r2, r0
 8006866:	4603      	mov	r3, r0
 8006868:	4293      	cmp	r3, r2
 800686a:	d100      	bne.n	800686e <memset+0xa>
 800686c:	4770      	bx	lr
 800686e:	f803 1b01 	strb.w	r1, [r3], #1
 8006872:	e7f9      	b.n	8006868 <memset+0x4>

08006874 <cleanup_glue>:
 8006874:	b538      	push	{r3, r4, r5, lr}
 8006876:	460c      	mov	r4, r1
 8006878:	6809      	ldr	r1, [r1, #0]
 800687a:	4605      	mov	r5, r0
 800687c:	b109      	cbz	r1, 8006882 <cleanup_glue+0xe>
 800687e:	f7ff fff9 	bl	8006874 <cleanup_glue>
 8006882:	4621      	mov	r1, r4
 8006884:	4628      	mov	r0, r5
 8006886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800688a:	f000 b869 	b.w	8006960 <_free_r>
	...

08006890 <_reclaim_reent>:
 8006890:	4b2c      	ldr	r3, [pc, #176]	; (8006944 <_reclaim_reent+0xb4>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4283      	cmp	r3, r0
 8006896:	b570      	push	{r4, r5, r6, lr}
 8006898:	4604      	mov	r4, r0
 800689a:	d051      	beq.n	8006940 <_reclaim_reent+0xb0>
 800689c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800689e:	b143      	cbz	r3, 80068b2 <_reclaim_reent+0x22>
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d14a      	bne.n	800693c <_reclaim_reent+0xac>
 80068a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068a8:	6819      	ldr	r1, [r3, #0]
 80068aa:	b111      	cbz	r1, 80068b2 <_reclaim_reent+0x22>
 80068ac:	4620      	mov	r0, r4
 80068ae:	f000 f857 	bl	8006960 <_free_r>
 80068b2:	6961      	ldr	r1, [r4, #20]
 80068b4:	b111      	cbz	r1, 80068bc <_reclaim_reent+0x2c>
 80068b6:	4620      	mov	r0, r4
 80068b8:	f000 f852 	bl	8006960 <_free_r>
 80068bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80068be:	b111      	cbz	r1, 80068c6 <_reclaim_reent+0x36>
 80068c0:	4620      	mov	r0, r4
 80068c2:	f000 f84d 	bl	8006960 <_free_r>
 80068c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80068c8:	b111      	cbz	r1, 80068d0 <_reclaim_reent+0x40>
 80068ca:	4620      	mov	r0, r4
 80068cc:	f000 f848 	bl	8006960 <_free_r>
 80068d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80068d2:	b111      	cbz	r1, 80068da <_reclaim_reent+0x4a>
 80068d4:	4620      	mov	r0, r4
 80068d6:	f000 f843 	bl	8006960 <_free_r>
 80068da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80068dc:	b111      	cbz	r1, 80068e4 <_reclaim_reent+0x54>
 80068de:	4620      	mov	r0, r4
 80068e0:	f000 f83e 	bl	8006960 <_free_r>
 80068e4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80068e6:	b111      	cbz	r1, 80068ee <_reclaim_reent+0x5e>
 80068e8:	4620      	mov	r0, r4
 80068ea:	f000 f839 	bl	8006960 <_free_r>
 80068ee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80068f0:	b111      	cbz	r1, 80068f8 <_reclaim_reent+0x68>
 80068f2:	4620      	mov	r0, r4
 80068f4:	f000 f834 	bl	8006960 <_free_r>
 80068f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068fa:	b111      	cbz	r1, 8006902 <_reclaim_reent+0x72>
 80068fc:	4620      	mov	r0, r4
 80068fe:	f000 f82f 	bl	8006960 <_free_r>
 8006902:	69a3      	ldr	r3, [r4, #24]
 8006904:	b1e3      	cbz	r3, 8006940 <_reclaim_reent+0xb0>
 8006906:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006908:	4620      	mov	r0, r4
 800690a:	4798      	blx	r3
 800690c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800690e:	b1b9      	cbz	r1, 8006940 <_reclaim_reent+0xb0>
 8006910:	4620      	mov	r0, r4
 8006912:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006916:	f7ff bfad 	b.w	8006874 <cleanup_glue>
 800691a:	5949      	ldr	r1, [r1, r5]
 800691c:	b941      	cbnz	r1, 8006930 <_reclaim_reent+0xa0>
 800691e:	3504      	adds	r5, #4
 8006920:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006922:	2d80      	cmp	r5, #128	; 0x80
 8006924:	68d9      	ldr	r1, [r3, #12]
 8006926:	d1f8      	bne.n	800691a <_reclaim_reent+0x8a>
 8006928:	4620      	mov	r0, r4
 800692a:	f000 f819 	bl	8006960 <_free_r>
 800692e:	e7ba      	b.n	80068a6 <_reclaim_reent+0x16>
 8006930:	680e      	ldr	r6, [r1, #0]
 8006932:	4620      	mov	r0, r4
 8006934:	f000 f814 	bl	8006960 <_free_r>
 8006938:	4631      	mov	r1, r6
 800693a:	e7ef      	b.n	800691c <_reclaim_reent+0x8c>
 800693c:	2500      	movs	r5, #0
 800693e:	e7ef      	b.n	8006920 <_reclaim_reent+0x90>
 8006940:	bd70      	pop	{r4, r5, r6, pc}
 8006942:	bf00      	nop
 8006944:	20000010 	.word	0x20000010

08006948 <__malloc_lock>:
 8006948:	4801      	ldr	r0, [pc, #4]	; (8006950 <__malloc_lock+0x8>)
 800694a:	f7ff bf7b 	b.w	8006844 <__retarget_lock_acquire_recursive>
 800694e:	bf00      	nop
 8006950:	20004bc4 	.word	0x20004bc4

08006954 <__malloc_unlock>:
 8006954:	4801      	ldr	r0, [pc, #4]	; (800695c <__malloc_unlock+0x8>)
 8006956:	f7ff bf76 	b.w	8006846 <__retarget_lock_release_recursive>
 800695a:	bf00      	nop
 800695c:	20004bc4 	.word	0x20004bc4

08006960 <_free_r>:
 8006960:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006962:	2900      	cmp	r1, #0
 8006964:	d044      	beq.n	80069f0 <_free_r+0x90>
 8006966:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800696a:	9001      	str	r0, [sp, #4]
 800696c:	2b00      	cmp	r3, #0
 800696e:	f1a1 0404 	sub.w	r4, r1, #4
 8006972:	bfb8      	it	lt
 8006974:	18e4      	addlt	r4, r4, r3
 8006976:	f7ff ffe7 	bl	8006948 <__malloc_lock>
 800697a:	4a1e      	ldr	r2, [pc, #120]	; (80069f4 <_free_r+0x94>)
 800697c:	9801      	ldr	r0, [sp, #4]
 800697e:	6813      	ldr	r3, [r2, #0]
 8006980:	b933      	cbnz	r3, 8006990 <_free_r+0x30>
 8006982:	6063      	str	r3, [r4, #4]
 8006984:	6014      	str	r4, [r2, #0]
 8006986:	b003      	add	sp, #12
 8006988:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800698c:	f7ff bfe2 	b.w	8006954 <__malloc_unlock>
 8006990:	42a3      	cmp	r3, r4
 8006992:	d908      	bls.n	80069a6 <_free_r+0x46>
 8006994:	6825      	ldr	r5, [r4, #0]
 8006996:	1961      	adds	r1, r4, r5
 8006998:	428b      	cmp	r3, r1
 800699a:	bf01      	itttt	eq
 800699c:	6819      	ldreq	r1, [r3, #0]
 800699e:	685b      	ldreq	r3, [r3, #4]
 80069a0:	1949      	addeq	r1, r1, r5
 80069a2:	6021      	streq	r1, [r4, #0]
 80069a4:	e7ed      	b.n	8006982 <_free_r+0x22>
 80069a6:	461a      	mov	r2, r3
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	b10b      	cbz	r3, 80069b0 <_free_r+0x50>
 80069ac:	42a3      	cmp	r3, r4
 80069ae:	d9fa      	bls.n	80069a6 <_free_r+0x46>
 80069b0:	6811      	ldr	r1, [r2, #0]
 80069b2:	1855      	adds	r5, r2, r1
 80069b4:	42a5      	cmp	r5, r4
 80069b6:	d10b      	bne.n	80069d0 <_free_r+0x70>
 80069b8:	6824      	ldr	r4, [r4, #0]
 80069ba:	4421      	add	r1, r4
 80069bc:	1854      	adds	r4, r2, r1
 80069be:	42a3      	cmp	r3, r4
 80069c0:	6011      	str	r1, [r2, #0]
 80069c2:	d1e0      	bne.n	8006986 <_free_r+0x26>
 80069c4:	681c      	ldr	r4, [r3, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	6053      	str	r3, [r2, #4]
 80069ca:	4421      	add	r1, r4
 80069cc:	6011      	str	r1, [r2, #0]
 80069ce:	e7da      	b.n	8006986 <_free_r+0x26>
 80069d0:	d902      	bls.n	80069d8 <_free_r+0x78>
 80069d2:	230c      	movs	r3, #12
 80069d4:	6003      	str	r3, [r0, #0]
 80069d6:	e7d6      	b.n	8006986 <_free_r+0x26>
 80069d8:	6825      	ldr	r5, [r4, #0]
 80069da:	1961      	adds	r1, r4, r5
 80069dc:	428b      	cmp	r3, r1
 80069de:	bf04      	itt	eq
 80069e0:	6819      	ldreq	r1, [r3, #0]
 80069e2:	685b      	ldreq	r3, [r3, #4]
 80069e4:	6063      	str	r3, [r4, #4]
 80069e6:	bf04      	itt	eq
 80069e8:	1949      	addeq	r1, r1, r5
 80069ea:	6021      	streq	r1, [r4, #0]
 80069ec:	6054      	str	r4, [r2, #4]
 80069ee:	e7ca      	b.n	8006986 <_free_r+0x26>
 80069f0:	b003      	add	sp, #12
 80069f2:	bd30      	pop	{r4, r5, pc}
 80069f4:	20004bc8 	.word	0x20004bc8

080069f8 <_init>:
 80069f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069fa:	bf00      	nop
 80069fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069fe:	bc08      	pop	{r3}
 8006a00:	469e      	mov	lr, r3
 8006a02:	4770      	bx	lr

08006a04 <_fini>:
 8006a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a06:	bf00      	nop
 8006a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a0a:	bc08      	pop	{r3}
 8006a0c:	469e      	mov	lr, r3
 8006a0e:	4770      	bx	lr
