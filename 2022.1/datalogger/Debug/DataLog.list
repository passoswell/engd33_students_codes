
DataLog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011eb0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000093c  08012050  08012050  00022050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801298c  0801298c  0003017c  2**0
                  CONTENTS
  4 .ARM          00000008  0801298c  0801298c  0002298c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012994  08012994  0003017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012994  08012994  00022994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012998  08012998  00022998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0801299c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bbe0  2000017c  08012b18  0003017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000bd5c  08012b18  0003bd5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027398  00000000  00000000  000301ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e0a  00000000  00000000  00057544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002000  00000000  00000000  0005d350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d60  00000000  00000000  0005f350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f2d8  00000000  00000000  000610b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029593  00000000  00000000  00080388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e9a5  00000000  00000000  000a991b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001482c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f34  00000000  00000000  00148310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000017c 	.word	0x2000017c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012038 	.word	0x08012038

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000180 	.word	0x20000180
 80001dc:	08012038 	.word	0x08012038

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <SDcard_get_queue_handle>:

TaskHandle_t SDCard_get_task_handle(void){
	return SDcard_task_handle;
}

QueueHandle_t SDcard_get_queue_handle(void){
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
	return SDcard_queue_handle;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <SDcard_get_queue_handle+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20002204 	.word	0x20002204

080005ac <path_select>:

static bool path_select(char* path, size_t buff_size, data_type_t data_type){
 80005ac:	b5b0      	push	{r4, r5, r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	4613      	mov	r3, r2
 80005b8:	71fb      	strb	r3, [r7, #7]
	if(buff_size < 50*sizeof(char)){
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	2b31      	cmp	r3, #49	; 0x31
 80005be:	d815      	bhi.n	80005ec <path_select+0x40>
		USB_PRINT("path buffer size too small\n");
 80005c0:	4b91      	ldr	r3, [pc, #580]	; (8000808 <path_select+0x25c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2101      	movs	r1, #1
 80005c6:	4618      	mov	r0, r3
 80005c8:	f00d fa1c 	bl	800da04 <xQueueSemaphoreTake>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d003      	beq.n	80005da <path_select+0x2e>
 80005d2:	211b      	movs	r1, #27
 80005d4:	488d      	ldr	r0, [pc, #564]	; (800080c <path_select+0x260>)
 80005d6:	f00f fdff 	bl	80101d8 <CDC_Transmit_FS>
 80005da:	4b8b      	ldr	r3, [pc, #556]	; (8000808 <path_select+0x25c>)
 80005dc:	6818      	ldr	r0, [r3, #0]
 80005de:	2300      	movs	r3, #0
 80005e0:	2200      	movs	r2, #0
 80005e2:	2100      	movs	r1, #0
 80005e4:	f00c ff94 	bl	800d510 <xQueueGenericSend>
		return false;
 80005e8:	2300      	movs	r3, #0
 80005ea:	e108      	b.n	80007fe <path_select+0x252>
	}
	*path = '\0';
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]
	switch(data_type){
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	2b10      	cmp	r3, #16
 80005f6:	f200 80eb 	bhi.w	80007d0 <path_select+0x224>
 80005fa:	a201      	add	r2, pc, #4	; (adr r2, 8000600 <path_select+0x54>)
 80005fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000600:	08000645 	.word	0x08000645
 8000604:	0800065b 	.word	0x0800065b
 8000608:	08000673 	.word	0x08000673
 800060c:	08000689 	.word	0x08000689
 8000610:	080006a1 	.word	0x080006a1
 8000614:	080006b7 	.word	0x080006b7
 8000618:	080006cf 	.word	0x080006cf
 800061c:	080006e7 	.word	0x080006e7
 8000620:	08000703 	.word	0x08000703
 8000624:	0800071d 	.word	0x0800071d
 8000628:	08000731 	.word	0x08000731
 800062c:	0800074b 	.word	0x0800074b
 8000630:	08000763 	.word	0x08000763
 8000634:	0800077b 	.word	0x0800077b
 8000638:	0800078b 	.word	0x0800078b
 800063c:	0800079f 	.word	0x0800079f
 8000640:	080007b3 	.word	0x080007b3
				case CORRENTE:
					strcpy(path, "CORRENTE.csv");
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	4a72      	ldr	r2, [pc, #456]	; (8000810 <path_select+0x264>)
 8000648:	461c      	mov	r4, r3
 800064a:	4613      	mov	r3, r2
 800064c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800064e:	6020      	str	r0, [r4, #0]
 8000650:	6061      	str	r1, [r4, #4]
 8000652:	60a2      	str	r2, [r4, #8]
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	7323      	strb	r3, [r4, #12]
					break;
 8000658:	e0d0      	b.n	80007fc <path_select+0x250>
				case VEL_ANG_MOTOR:
					strcpy(path, "VEL_ANG_MOTOR.csv");
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	4a6d      	ldr	r2, [pc, #436]	; (8000814 <path_select+0x268>)
 800065e:	461d      	mov	r5, r3
 8000660:	4614      	mov	r4, r2
 8000662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000664:	6028      	str	r0, [r5, #0]
 8000666:	6069      	str	r1, [r5, #4]
 8000668:	60aa      	str	r2, [r5, #8]
 800066a:	60eb      	str	r3, [r5, #12]
 800066c:	8823      	ldrh	r3, [r4, #0]
 800066e:	822b      	strh	r3, [r5, #16]
					break;
 8000670:	e0c4      	b.n	80007fc <path_select+0x250>
				case ACEL_LIN:
					strcpy(path, "ACEL_LIN.csv");
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	4a68      	ldr	r2, [pc, #416]	; (8000818 <path_select+0x26c>)
 8000676:	461c      	mov	r4, r3
 8000678:	4613      	mov	r3, r2
 800067a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800067c:	6020      	str	r0, [r4, #0]
 800067e:	6061      	str	r1, [r4, #4]
 8000680:	60a2      	str	r2, [r4, #8]
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	7323      	strb	r3, [r4, #12]
					break;
 8000686:	e0b9      	b.n	80007fc <path_select+0x250>
				case VEL_ANG_GIRO:
					strcpy(path, "VEL_ANG_GIRO.csv");
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	4a64      	ldr	r2, [pc, #400]	; (800081c <path_select+0x270>)
 800068c:	461d      	mov	r5, r3
 800068e:	4614      	mov	r4, r2
 8000690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000692:	6028      	str	r0, [r5, #0]
 8000694:	6069      	str	r1, [r5, #4]
 8000696:	60aa      	str	r2, [r5, #8]
 8000698:	60eb      	str	r3, [r5, #12]
 800069a:	7823      	ldrb	r3, [r4, #0]
 800069c:	742b      	strb	r3, [r5, #16]
					break;
 800069e:	e0ad      	b.n	80007fc <path_select+0x250>
				case CAMPO_MAG:
					strcpy(path, "CAMPO_MAG.csv");
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	4a5f      	ldr	r2, [pc, #380]	; (8000820 <path_select+0x274>)
 80006a4:	461c      	mov	r4, r3
 80006a6:	4613      	mov	r3, r2
 80006a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80006aa:	6020      	str	r0, [r4, #0]
 80006ac:	6061      	str	r1, [r4, #4]
 80006ae:	60a2      	str	r2, [r4, #8]
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	81a3      	strh	r3, [r4, #12]
					break;
 80006b4:	e0a2      	b.n	80007fc <path_select+0x250>
				case A_CTRL_TRACAO:
					strcpy(path, "A_CTRL_TRACAO.csv");
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	4a5a      	ldr	r2, [pc, #360]	; (8000824 <path_select+0x278>)
 80006ba:	461d      	mov	r5, r3
 80006bc:	4614      	mov	r4, r2
 80006be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006c0:	6028      	str	r0, [r5, #0]
 80006c2:	6069      	str	r1, [r5, #4]
 80006c4:	60aa      	str	r2, [r5, #8]
 80006c6:	60eb      	str	r3, [r5, #12]
 80006c8:	8823      	ldrh	r3, [r4, #0]
 80006ca:	822b      	strh	r3, [r5, #16]
					break;
 80006cc:	e096      	b.n	80007fc <path_select+0x250>
				case G_CTRL_TRACAO:
					strcpy(path, "G_CTRL_TRACAO.csv");
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	4a55      	ldr	r2, [pc, #340]	; (8000828 <path_select+0x27c>)
 80006d2:	461d      	mov	r5, r3
 80006d4:	4614      	mov	r4, r2
 80006d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006d8:	6028      	str	r0, [r5, #0]
 80006da:	6069      	str	r1, [r5, #4]
 80006dc:	60aa      	str	r2, [r5, #8]
 80006de:	60eb      	str	r3, [r5, #12]
 80006e0:	8823      	ldrh	r3, [r4, #0]
 80006e2:	822b      	strh	r3, [r5, #16]
					break;
 80006e4:	e08a      	b.n	80007fc <path_select+0x250>
				case G_CTRL_TRACAO_RX:
					strcpy(path, "G_CTRL_TRACAO_RX.csv");
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	4a50      	ldr	r2, [pc, #320]	; (800082c <path_select+0x280>)
 80006ea:	461d      	mov	r5, r3
 80006ec:	4614      	mov	r4, r2
 80006ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006f0:	6028      	str	r0, [r5, #0]
 80006f2:	6069      	str	r1, [r5, #4]
 80006f4:	60aa      	str	r2, [r5, #8]
 80006f6:	60eb      	str	r3, [r5, #12]
 80006f8:	6820      	ldr	r0, [r4, #0]
 80006fa:	6128      	str	r0, [r5, #16]
 80006fc:	7923      	ldrb	r3, [r4, #4]
 80006fe:	752b      	strb	r3, [r5, #20]
					break;
 8000700:	e07c      	b.n	80007fc <path_select+0x250>
				case A_CTRL_VEL:
					strcpy(path, "A_CTRL_VEL.csv");
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	4a4a      	ldr	r2, [pc, #296]	; (8000830 <path_select+0x284>)
 8000706:	461c      	mov	r4, r3
 8000708:	4613      	mov	r3, r2
 800070a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800070c:	6020      	str	r0, [r4, #0]
 800070e:	6061      	str	r1, [r4, #4]
 8000710:	60a2      	str	r2, [r4, #8]
 8000712:	881a      	ldrh	r2, [r3, #0]
 8000714:	789b      	ldrb	r3, [r3, #2]
 8000716:	81a2      	strh	r2, [r4, #12]
 8000718:	73a3      	strb	r3, [r4, #14]
					break;
 800071a:	e06f      	b.n	80007fc <path_select+0x250>
				case S_POINT_VEL:
					strcpy(path, "S_POINT_VEL.csv");
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	4a45      	ldr	r2, [pc, #276]	; (8000834 <path_select+0x288>)
 8000720:	461c      	mov	r4, r3
 8000722:	4615      	mov	r5, r2
 8000724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000726:	6020      	str	r0, [r4, #0]
 8000728:	6061      	str	r1, [r4, #4]
 800072a:	60a2      	str	r2, [r4, #8]
 800072c:	60e3      	str	r3, [r4, #12]
					break;
 800072e:	e065      	b.n	80007fc <path_select+0x250>
				case G_CTRL_VEL:
					strcpy(path, "G_CTRL_VEL.csv");
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	4a41      	ldr	r2, [pc, #260]	; (8000838 <path_select+0x28c>)
 8000734:	461c      	mov	r4, r3
 8000736:	4613      	mov	r3, r2
 8000738:	cb07      	ldmia	r3!, {r0, r1, r2}
 800073a:	6020      	str	r0, [r4, #0]
 800073c:	6061      	str	r1, [r4, #4]
 800073e:	60a2      	str	r2, [r4, #8]
 8000740:	881a      	ldrh	r2, [r3, #0]
 8000742:	789b      	ldrb	r3, [r3, #2]
 8000744:	81a2      	strh	r2, [r4, #12]
 8000746:	73a3      	strb	r3, [r4, #14]
					break;
 8000748:	e058      	b.n	80007fc <path_select+0x250>
				case G_CTRL_VEL_RX:
					strcpy(path, "G_CTRL_VEL_RX.csv");
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	4a3b      	ldr	r2, [pc, #236]	; (800083c <path_select+0x290>)
 800074e:	461d      	mov	r5, r3
 8000750:	4614      	mov	r4, r2
 8000752:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000754:	6028      	str	r0, [r5, #0]
 8000756:	6069      	str	r1, [r5, #4]
 8000758:	60aa      	str	r2, [r5, #8]
 800075a:	60eb      	str	r3, [r5, #12]
 800075c:	8823      	ldrh	r3, [r4, #0]
 800075e:	822b      	strh	r3, [r5, #16]
					break;
 8000760:	e04c      	b.n	80007fc <path_select+0x250>
				case ANG_ROT_BASE:
					strcpy(path, "ANG_ROT_BASE.csv");
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	4a36      	ldr	r2, [pc, #216]	; (8000840 <path_select+0x294>)
 8000766:	461d      	mov	r5, r3
 8000768:	4614      	mov	r4, r2
 800076a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800076c:	6028      	str	r0, [r5, #0]
 800076e:	6069      	str	r1, [r5, #4]
 8000770:	60aa      	str	r2, [r5, #8]
 8000772:	60eb      	str	r3, [r5, #12]
 8000774:	7823      	ldrb	r3, [r4, #0]
 8000776:	742b      	strb	r3, [r5, #16]
					break;
 8000778:	e040      	b.n	80007fc <path_select+0x250>
				case GPS:
					strcpy(path, "GPS.csv");
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	4931      	ldr	r1, [pc, #196]	; (8000844 <path_select+0x298>)
 800077e:	461a      	mov	r2, r3
 8000780:	460b      	mov	r3, r1
 8000782:	cb03      	ldmia	r3!, {r0, r1}
 8000784:	6010      	str	r0, [r2, #0]
 8000786:	6051      	str	r1, [r2, #4]
					break;
 8000788:	e038      	b.n	80007fc <path_select+0x250>
				case A_CTRL_POSI:
					strcpy(path, "A_CTRL_POSI.csv");
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	4a2e      	ldr	r2, [pc, #184]	; (8000848 <path_select+0x29c>)
 800078e:	461c      	mov	r4, r3
 8000790:	4615      	mov	r5, r2
 8000792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000794:	6020      	str	r0, [r4, #0]
 8000796:	6061      	str	r1, [r4, #4]
 8000798:	60a2      	str	r2, [r4, #8]
 800079a:	60e3      	str	r3, [r4, #12]
					break;
 800079c:	e02e      	b.n	80007fc <path_select+0x250>
				case G_CTRL_POSI:
					strcpy(path, "G_CTRL_POSI.csv");
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	4a2a      	ldr	r2, [pc, #168]	; (800084c <path_select+0x2a0>)
 80007a2:	461c      	mov	r4, r3
 80007a4:	4615      	mov	r5, r2
 80007a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a8:	6020      	str	r0, [r4, #0]
 80007aa:	6061      	str	r1, [r4, #4]
 80007ac:	60a2      	str	r2, [r4, #8]
 80007ae:	60e3      	str	r3, [r4, #12]
					break;
 80007b0:	e024      	b.n	80007fc <path_select+0x250>
				case G_CTRL_POSI_RX:
					strcpy(path, "G_CTRL_POSI_RX.csv");
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	4a26      	ldr	r2, [pc, #152]	; (8000850 <path_select+0x2a4>)
 80007b6:	461d      	mov	r5, r3
 80007b8:	4614      	mov	r4, r2
 80007ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007bc:	6028      	str	r0, [r5, #0]
 80007be:	6069      	str	r1, [r5, #4]
 80007c0:	60aa      	str	r2, [r5, #8]
 80007c2:	60eb      	str	r3, [r5, #12]
 80007c4:	8823      	ldrh	r3, [r4, #0]
 80007c6:	78a2      	ldrb	r2, [r4, #2]
 80007c8:	822b      	strh	r3, [r5, #16]
 80007ca:	4613      	mov	r3, r2
 80007cc:	74ab      	strb	r3, [r5, #18]
					break;
 80007ce:	e015      	b.n	80007fc <path_select+0x250>
				default:
					USB_PRINT("type not supported\n");
 80007d0:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <path_select+0x25c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2101      	movs	r1, #1
 80007d6:	4618      	mov	r0, r3
 80007d8:	f00d f914 	bl	800da04 <xQueueSemaphoreTake>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d003      	beq.n	80007ea <path_select+0x23e>
 80007e2:	2113      	movs	r1, #19
 80007e4:	481b      	ldr	r0, [pc, #108]	; (8000854 <path_select+0x2a8>)
 80007e6:	f00f fcf7 	bl	80101d8 <CDC_Transmit_FS>
 80007ea:	4b07      	ldr	r3, [pc, #28]	; (8000808 <path_select+0x25c>)
 80007ec:	6818      	ldr	r0, [r3, #0]
 80007ee:	2300      	movs	r3, #0
 80007f0:	2200      	movs	r2, #0
 80007f2:	2100      	movs	r1, #0
 80007f4:	f00c fe8c 	bl	800d510 <xQueueGenericSend>
					return false;
 80007f8:	2300      	movs	r3, #0
 80007fa:	e000      	b.n	80007fe <path_select+0x252>
			}
	return true;
 80007fc:	2301      	movs	r3, #1
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bdb0      	pop	{r4, r5, r7, pc}
 8000806:	bf00      	nop
 8000808:	20002200 	.word	0x20002200
 800080c:	08012050 	.word	0x08012050
 8000810:	0801206c 	.word	0x0801206c
 8000814:	0801207c 	.word	0x0801207c
 8000818:	08012090 	.word	0x08012090
 800081c:	080120a0 	.word	0x080120a0
 8000820:	080120b4 	.word	0x080120b4
 8000824:	080120c4 	.word	0x080120c4
 8000828:	080120d8 	.word	0x080120d8
 800082c:	080120ec 	.word	0x080120ec
 8000830:	08012104 	.word	0x08012104
 8000834:	08012114 	.word	0x08012114
 8000838:	08012124 	.word	0x08012124
 800083c:	08012134 	.word	0x08012134
 8000840:	08012148 	.word	0x08012148
 8000844:	0801215c 	.word	0x0801215c
 8000848:	08012164 	.word	0x08012164
 800084c:	08012174 	.word	0x08012174
 8000850:	08012184 	.word	0x08012184
 8000854:	08012198 	.word	0x08012198

08000858 <reset_files>:

static bool reset_files(void){
 8000858:	b580      	push	{r7, lr}
 800085a:	b0a8      	sub	sp, #160	; 0xa0
 800085c:	af00      	add	r7, sp, #0
	int er = 1;
 800085e:	2301      	movs	r3, #1
 8000860:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	char path[50];
	char buffer[100];

	for(int i = 0; i < NumberOfTypes; i++){
 8000864:	2300      	movs	r3, #0
 8000866:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800086a:	e090      	b.n	800098e <reset_files+0x136>
		er = path_select(path, sizeof(path), i);
 800086c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000870:	b2da      	uxtb	r2, r3
 8000872:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000876:	2132      	movs	r1, #50	; 0x32
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fe97 	bl	80005ac <path_select>
 800087e:	4603      	mov	r3, r0
 8000880:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if(!er){
 8000884:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000888:	2b00      	cmp	r3, #0
 800088a:	d115      	bne.n	80008b8 <reset_files+0x60>
			USB_PRINT("error selecting path\n");
 800088c:	4b45      	ldr	r3, [pc, #276]	; (80009a4 <reset_files+0x14c>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2101      	movs	r1, #1
 8000892:	4618      	mov	r0, r3
 8000894:	f00d f8b6 	bl	800da04 <xQueueSemaphoreTake>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d003      	beq.n	80008a6 <reset_files+0x4e>
 800089e:	2115      	movs	r1, #21
 80008a0:	4841      	ldr	r0, [pc, #260]	; (80009a8 <reset_files+0x150>)
 80008a2:	f00f fc99 	bl	80101d8 <CDC_Transmit_FS>
 80008a6:	4b3f      	ldr	r3, [pc, #252]	; (80009a4 <reset_files+0x14c>)
 80008a8:	6818      	ldr	r0, [r3, #0]
 80008aa:	2300      	movs	r3, #0
 80008ac:	2200      	movs	r2, #0
 80008ae:	2100      	movs	r1, #0
 80008b0:	f00c fe2e 	bl	800d510 <xQueueGenericSend>
			return false;
 80008b4:	2300      	movs	r3, #0
 80008b6:	e070      	b.n	800099a <reset_files+0x142>
		}

		er = f_stat(path, NULL);
 80008b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f00b fde3 	bl	800c48a <f_stat>
 80008c4:	4603      	mov	r3, r0
 80008c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if(er != FR_OK){
 80008ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d027      	beq.n	8000922 <reset_files+0xca>
			if(er == FR_NO_FILE) continue;
 80008d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80008d6:	2b04      	cmp	r3, #4
 80008d8:	d053      	beq.n	8000982 <reset_files+0x12a>
			sprintf(buffer, "error: %d\n", er);
 80008da:	463b      	mov	r3, r7
 80008dc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80008e0:	4932      	ldr	r1, [pc, #200]	; (80009ac <reset_files+0x154>)
 80008e2:	4618      	mov	r0, r3
 80008e4:	f010 fb7e 	bl	8010fe4 <siprintf>
			USB_PRINT(buffer);
 80008e8:	4b2e      	ldr	r3, [pc, #184]	; (80009a4 <reset_files+0x14c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2101      	movs	r1, #1
 80008ee:	4618      	mov	r0, r3
 80008f0:	f00d f888 	bl	800da04 <xQueueSemaphoreTake>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d00a      	beq.n	8000910 <reset_files+0xb8>
 80008fa:	463b      	mov	r3, r7
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fc6f 	bl	80001e0 <strlen>
 8000902:	4603      	mov	r3, r0
 8000904:	b29a      	uxth	r2, r3
 8000906:	463b      	mov	r3, r7
 8000908:	4611      	mov	r1, r2
 800090a:	4618      	mov	r0, r3
 800090c:	f00f fc64 	bl	80101d8 <CDC_Transmit_FS>
 8000910:	4b24      	ldr	r3, [pc, #144]	; (80009a4 <reset_files+0x14c>)
 8000912:	6818      	ldr	r0, [r3, #0]
 8000914:	2300      	movs	r3, #0
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	f00c fdf9 	bl	800d510 <xQueueGenericSend>
			return false;
 800091e:	2300      	movs	r3, #0
 8000920:	e03b      	b.n	800099a <reset_files+0x142>
		}

		er = f_unlink(path);
 8000922:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000926:	4618      	mov	r0, r3
 8000928:	f00b fde8 	bl	800c4fc <f_unlink>
 800092c:	4603      	mov	r3, r0
 800092e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if(er != FR_OK){
 8000932:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000936:	2b00      	cmp	r3, #0
 8000938:	d024      	beq.n	8000984 <reset_files+0x12c>
			sprintf(buffer, "error: %d\n", er);
 800093a:	463b      	mov	r3, r7
 800093c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000940:	491a      	ldr	r1, [pc, #104]	; (80009ac <reset_files+0x154>)
 8000942:	4618      	mov	r0, r3
 8000944:	f010 fb4e 	bl	8010fe4 <siprintf>
			USB_PRINT(buffer);
 8000948:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <reset_files+0x14c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2101      	movs	r1, #1
 800094e:	4618      	mov	r0, r3
 8000950:	f00d f858 	bl	800da04 <xQueueSemaphoreTake>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d00a      	beq.n	8000970 <reset_files+0x118>
 800095a:	463b      	mov	r3, r7
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fc3f 	bl	80001e0 <strlen>
 8000962:	4603      	mov	r3, r0
 8000964:	b29a      	uxth	r2, r3
 8000966:	463b      	mov	r3, r7
 8000968:	4611      	mov	r1, r2
 800096a:	4618      	mov	r0, r3
 800096c:	f00f fc34 	bl	80101d8 <CDC_Transmit_FS>
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <reset_files+0x14c>)
 8000972:	6818      	ldr	r0, [r3, #0]
 8000974:	2300      	movs	r3, #0
 8000976:	2200      	movs	r2, #0
 8000978:	2100      	movs	r1, #0
 800097a:	f00c fdc9 	bl	800d510 <xQueueGenericSend>
			return false;
 800097e:	2300      	movs	r3, #0
 8000980:	e00b      	b.n	800099a <reset_files+0x142>
			if(er == FR_NO_FILE) continue;
 8000982:	bf00      	nop
	for(int i = 0; i < NumberOfTypes; i++){
 8000984:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000988:	3301      	adds	r3, #1
 800098a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800098e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000992:	2b10      	cmp	r3, #16
 8000994:	f77f af6a 	ble.w	800086c <reset_files+0x14>
		}
	}
	return true;
 8000998:	2301      	movs	r3, #1
}
 800099a:	4618      	mov	r0, r3
 800099c:	37a0      	adds	r7, #160	; 0xa0
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20002200 	.word	0x20002200
 80009a8:	080121ac 	.word	0x080121ac
 80009ac:	080121c4 	.word	0x080121c4

080009b0 <SDcard_task>:

static void SDcard_task(void* arg){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b0b2      	sub	sp, #200	; 0xc8
 80009b4:	af02      	add	r7, sp, #8
 80009b6:	6078      	str	r0, [r7, #4]
	SD_data_t data = {0};
 80009b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
 80009c8:	615a      	str	r2, [r3, #20]
	char buffer[100];
	char path[50];
	int er = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	for(;;){
		if(xQueueReceive(SDcard_queue_handle, &data, portMAX_DELAY) != pdTRUE){
 80009d0:	4b9f      	ldr	r3, [pc, #636]	; (8000c50 <SDcard_task+0x2a0>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80009d8:	f04f 32ff 	mov.w	r2, #4294967295
 80009dc:	4618      	mov	r0, r3
 80009de:	f00c ff31 	bl	800d844 <xQueueReceive>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d014      	beq.n	8000a12 <SDcard_task+0x62>
			USB_PRINT("error receive from queue\n");
 80009e8:	4b9a      	ldr	r3, [pc, #616]	; (8000c54 <SDcard_task+0x2a4>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2101      	movs	r1, #1
 80009ee:	4618      	mov	r0, r3
 80009f0:	f00d f808 	bl	800da04 <xQueueSemaphoreTake>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d003      	beq.n	8000a02 <SDcard_task+0x52>
 80009fa:	2119      	movs	r1, #25
 80009fc:	4896      	ldr	r0, [pc, #600]	; (8000c58 <SDcard_task+0x2a8>)
 80009fe:	f00f fbeb 	bl	80101d8 <CDC_Transmit_FS>
 8000a02:	4b94      	ldr	r3, [pc, #592]	; (8000c54 <SDcard_task+0x2a4>)
 8000a04:	6818      	ldr	r0, [r3, #0]
 8000a06:	2300      	movs	r3, #0
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	f00c fd80 	bl	800d510 <xQueueGenericSend>
			continue;
 8000a10:	e11d      	b.n	8000c4e <SDcard_task+0x29e>
		}

		er = path_select(path, sizeof(path), data.data_type);
 8000a12:	f897 20b0 	ldrb.w	r2, [r7, #176]	; 0xb0
 8000a16:	f107 030c 	add.w	r3, r7, #12
 8000a1a:	2132      	movs	r1, #50	; 0x32
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fdc5 	bl	80005ac <path_select>
 8000a22:	4603      	mov	r3, r0
 8000a24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		if(!er){
 8000a28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d114      	bne.n	8000a5a <SDcard_task+0xaa>
			USB_PRINT("error selecting path\n");
 8000a30:	4b88      	ldr	r3, [pc, #544]	; (8000c54 <SDcard_task+0x2a4>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2101      	movs	r1, #1
 8000a36:	4618      	mov	r0, r3
 8000a38:	f00c ffe4 	bl	800da04 <xQueueSemaphoreTake>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d003      	beq.n	8000a4a <SDcard_task+0x9a>
 8000a42:	2115      	movs	r1, #21
 8000a44:	4885      	ldr	r0, [pc, #532]	; (8000c5c <SDcard_task+0x2ac>)
 8000a46:	f00f fbc7 	bl	80101d8 <CDC_Transmit_FS>
 8000a4a:	4b82      	ldr	r3, [pc, #520]	; (8000c54 <SDcard_task+0x2a4>)
 8000a4c:	6818      	ldr	r0, [r3, #0]
 8000a4e:	2300      	movs	r3, #0
 8000a50:	2200      	movs	r2, #0
 8000a52:	2100      	movs	r1, #0
 8000a54:	f00c fd5c 	bl	800d510 <xQueueGenericSend>
			continue;
 8000a58:	e0f9      	b.n	8000c4e <SDcard_task+0x29e>
		}

		er = f_stat(path, NULL);
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f00b fd12 	bl	800c48a <f_stat>
 8000a66:	4603      	mov	r3, r0
 8000a68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		if(er == FR_NO_FILE){
 8000a6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000a70:	2b04      	cmp	r3, #4
 8000a72:	d137      	bne.n	8000ae4 <SDcard_task+0x134>
			f_open(&fil, path, FA_CREATE_ALWAYS | FA_WRITE);
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	220a      	movs	r2, #10
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4878      	ldr	r0, [pc, #480]	; (8000c60 <SDcard_task+0x2b0>)
 8000a7e:	f00a fd79 	bl	800b574 <f_open>
			f_printf(&fil, "%s\n", path);
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	461a      	mov	r2, r3
 8000a88:	4976      	ldr	r1, [pc, #472]	; (8000c64 <SDcard_task+0x2b4>)
 8000a8a:	4875      	ldr	r0, [pc, #468]	; (8000c60 <SDcard_task+0x2b0>)
 8000a8c:	f00b feba 	bl	800c804 <f_printf>
			if(data.array_size == 1){
 8000a90:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d104      	bne.n	8000aa2 <SDcard_task+0xf2>
				f_puts("timestamp,value\n", &fil);
 8000a98:	4971      	ldr	r1, [pc, #452]	; (8000c60 <SDcard_task+0x2b0>)
 8000a9a:	4873      	ldr	r0, [pc, #460]	; (8000c68 <SDcard_task+0x2b8>)
 8000a9c:	f00b fe8d 	bl	800c7ba <f_puts>
 8000aa0:	e01d      	b.n	8000ade <SDcard_task+0x12e>
			}
			else if(data.array_size == 3){
 8000aa2:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8000aa6:	2b03      	cmp	r3, #3
 8000aa8:	d104      	bne.n	8000ab4 <SDcard_task+0x104>
				f_puts("timestamp,value1,value2,value3\n", &fil);
 8000aaa:	496d      	ldr	r1, [pc, #436]	; (8000c60 <SDcard_task+0x2b0>)
 8000aac:	486f      	ldr	r0, [pc, #444]	; (8000c6c <SDcard_task+0x2bc>)
 8000aae:	f00b fe84 	bl	800c7ba <f_puts>
 8000ab2:	e014      	b.n	8000ade <SDcard_task+0x12e>
			}
			else{
				USB_PRINT("incompatible array size\n");
 8000ab4:	4b67      	ldr	r3, [pc, #412]	; (8000c54 <SDcard_task+0x2a4>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2101      	movs	r1, #1
 8000aba:	4618      	mov	r0, r3
 8000abc:	f00c ffa2 	bl	800da04 <xQueueSemaphoreTake>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d003      	beq.n	8000ace <SDcard_task+0x11e>
 8000ac6:	2118      	movs	r1, #24
 8000ac8:	4869      	ldr	r0, [pc, #420]	; (8000c70 <SDcard_task+0x2c0>)
 8000aca:	f00f fb85 	bl	80101d8 <CDC_Transmit_FS>
 8000ace:	4b61      	ldr	r3, [pc, #388]	; (8000c54 <SDcard_task+0x2a4>)
 8000ad0:	6818      	ldr	r0, [r3, #0]
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	f00c fd1a 	bl	800d510 <xQueueGenericSend>
				continue;
 8000adc:	e0b7      	b.n	8000c4e <SDcard_task+0x29e>
			}
			f_close(&fil);
 8000ade:	4860      	ldr	r0, [pc, #384]	; (8000c60 <SDcard_task+0x2b0>)
 8000ae0:	f00b fa85 	bl	800bfee <f_close>
		}

		er = f_open(&fil, path, FA_OPEN_APPEND | FA_WRITE | FA_READ);
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	2233      	movs	r2, #51	; 0x33
 8000aea:	4619      	mov	r1, r3
 8000aec:	485c      	ldr	r0, [pc, #368]	; (8000c60 <SDcard_task+0x2b0>)
 8000aee:	f00a fd41 	bl	800b574 <f_open>
 8000af2:	4603      	mov	r3, r0
 8000af4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		if(er != FR_OK){
 8000af8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d025      	beq.n	8000b4c <SDcard_task+0x19c>
			sprintf(buffer, "error: %d\n", er);
 8000b00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b04:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000b08:	495a      	ldr	r1, [pc, #360]	; (8000c74 <SDcard_task+0x2c4>)
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f010 fa6a 	bl	8010fe4 <siprintf>
			USB_PRINT(buffer);
 8000b10:	4b50      	ldr	r3, [pc, #320]	; (8000c54 <SDcard_task+0x2a4>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2101      	movs	r1, #1
 8000b16:	4618      	mov	r0, r3
 8000b18:	f00c ff74 	bl	800da04 <xQueueSemaphoreTake>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d00c      	beq.n	8000b3c <SDcard_task+0x18c>
 8000b22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fb5a 	bl	80001e0 <strlen>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b34:	4611      	mov	r1, r2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f00f fb4e 	bl	80101d8 <CDC_Transmit_FS>
 8000b3c:	4b45      	ldr	r3, [pc, #276]	; (8000c54 <SDcard_task+0x2a4>)
 8000b3e:	6818      	ldr	r0, [r3, #0]
 8000b40:	2300      	movs	r3, #0
 8000b42:	2200      	movs	r2, #0
 8000b44:	2100      	movs	r1, #0
 8000b46:	f00c fce3 	bl	800d510 <xQueueGenericSend>
			continue;
 8000b4a:	e080      	b.n	8000c4e <SDcard_task+0x29e>
		}

		if(data.array_size == 1){
 8000b4c:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d108      	bne.n	8000b66 <SDcard_task+0x1b6>
			f_printf(&fil, "%u,%d\n", data.timestamp, data.value[0]);
 8000b54:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000b58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000b5c:	4946      	ldr	r1, [pc, #280]	; (8000c78 <SDcard_task+0x2c8>)
 8000b5e:	4840      	ldr	r0, [pc, #256]	; (8000c60 <SDcard_task+0x2b0>)
 8000b60:	f00b fe50 	bl	800c804 <f_printf>
 8000b64:	e029      	b.n	8000bba <SDcard_task+0x20a>
		}
		else if(data.array_size == 3){
 8000b66:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 8000b6a:	2b03      	cmp	r3, #3
 8000b6c:	d110      	bne.n	8000b90 <SDcard_task+0x1e0>
			f_printf(&fil, "%u,%d,%d,%d\n", data.timestamp, data.value[0], data.value[1], data.value[2]);
 8000b6e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8000b72:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000b76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000b7a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000b7e:	9201      	str	r2, [sp, #4]
 8000b80:	9300      	str	r3, [sp, #0]
 8000b82:	4603      	mov	r3, r0
 8000b84:	460a      	mov	r2, r1
 8000b86:	493d      	ldr	r1, [pc, #244]	; (8000c7c <SDcard_task+0x2cc>)
 8000b88:	4835      	ldr	r0, [pc, #212]	; (8000c60 <SDcard_task+0x2b0>)
 8000b8a:	f00b fe3b 	bl	800c804 <f_printf>
 8000b8e:	e014      	b.n	8000bba <SDcard_task+0x20a>
		}
		else {
			USB_PRINT("incompatible array size\n");
 8000b90:	4b30      	ldr	r3, [pc, #192]	; (8000c54 <SDcard_task+0x2a4>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2101      	movs	r1, #1
 8000b96:	4618      	mov	r0, r3
 8000b98:	f00c ff34 	bl	800da04 <xQueueSemaphoreTake>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d003      	beq.n	8000baa <SDcard_task+0x1fa>
 8000ba2:	2118      	movs	r1, #24
 8000ba4:	4832      	ldr	r0, [pc, #200]	; (8000c70 <SDcard_task+0x2c0>)
 8000ba6:	f00f fb17 	bl	80101d8 <CDC_Transmit_FS>
 8000baa:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <SDcard_task+0x2a4>)
 8000bac:	6818      	ldr	r0, [r3, #0]
 8000bae:	2300      	movs	r3, #0
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	f00c fcac 	bl	800d510 <xQueueGenericSend>
			continue;
 8000bb8:	e049      	b.n	8000c4e <SDcard_task+0x29e>
		}


		f_lseek(&fil, 0);
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4828      	ldr	r0, [pc, #160]	; (8000c60 <SDcard_task+0x2b0>)
 8000bbe:	f00b fa40 	bl	800c042 <f_lseek>
		while(f_gets(buffer, sizeof(buffer), &fil))
 8000bc2:	e023      	b.n	8000c0c <SDcard_task+0x25c>
		{
			USB_PRINT(buffer);
 8000bc4:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <SDcard_task+0x2a4>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2101      	movs	r1, #1
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f00c ff1a 	bl	800da04 <xQueueSemaphoreTake>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d00c      	beq.n	8000bf0 <SDcard_task+0x240>
 8000bd6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fb00 	bl	80001e0 <strlen>
 8000be0:	4603      	mov	r3, r0
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000be8:	4611      	mov	r1, r2
 8000bea:	4618      	mov	r0, r3
 8000bec:	f00f faf4 	bl	80101d8 <CDC_Transmit_FS>
 8000bf0:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <SDcard_task+0x2a4>)
 8000bf2:	6818      	ldr	r0, [r3, #0]
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	f00c fc89 	bl	800d510 <xQueueGenericSend>
			memset(buffer,0,sizeof(buffer));
 8000bfe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c02:	2264      	movs	r2, #100	; 0x64
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f010 f869 	bl	8010cde <memset>
		while(f_gets(buffer, sizeof(buffer), &fil))
 8000c0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c10:	4a13      	ldr	r2, [pc, #76]	; (8000c60 <SDcard_task+0x2b0>)
 8000c12:	2164      	movs	r1, #100	; 0x64
 8000c14:	4618      	mov	r0, r3
 8000c16:	f00b fd1c 	bl	800c652 <f_gets>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d1d1      	bne.n	8000bc4 <SDcard_task+0x214>
		}
		USB_PRINT("\n");
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <SDcard_task+0x2a4>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2101      	movs	r1, #1
 8000c26:	4618      	mov	r0, r3
 8000c28:	f00c feec 	bl	800da04 <xQueueSemaphoreTake>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d003      	beq.n	8000c3a <SDcard_task+0x28a>
 8000c32:	2101      	movs	r1, #1
 8000c34:	4812      	ldr	r0, [pc, #72]	; (8000c80 <SDcard_task+0x2d0>)
 8000c36:	f00f facf 	bl	80101d8 <CDC_Transmit_FS>
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <SDcard_task+0x2a4>)
 8000c3c:	6818      	ldr	r0, [r3, #0]
 8000c3e:	2300      	movs	r3, #0
 8000c40:	2200      	movs	r2, #0
 8000c42:	2100      	movs	r1, #0
 8000c44:	f00c fc64 	bl	800d510 <xQueueGenericSend>
		f_close(&fil);
 8000c48:	4805      	ldr	r0, [pc, #20]	; (8000c60 <SDcard_task+0x2b0>)
 8000c4a:	f00b f9d0 	bl	800bfee <f_close>
		if(xQueueReceive(SDcard_queue_handle, &data, portMAX_DELAY) != pdTRUE){
 8000c4e:	e6bf      	b.n	80009d0 <SDcard_task+0x20>
 8000c50:	20002204 	.word	0x20002204
 8000c54:	20002200 	.word	0x20002200
 8000c58:	080121d0 	.word	0x080121d0
 8000c5c:	080121ac 	.word	0x080121ac
 8000c60:	200011d0 	.word	0x200011d0
 8000c64:	080121ec 	.word	0x080121ec
 8000c68:	080121f0 	.word	0x080121f0
 8000c6c:	08012204 	.word	0x08012204
 8000c70:	08012224 	.word	0x08012224
 8000c74:	080121c4 	.word	0x080121c4
 8000c78:	08012240 	.word	0x08012240
 8000c7c:	08012248 	.word	0x08012248
 8000c80:	08012258 	.word	0x08012258

08000c84 <SDcard_start>:

	}
}

int SDcard_start(void){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af02      	add	r7, sp, #8
	print_smpr_handle = xSemaphoreCreateBinary();
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f00c fbe0 	bl	800d454 <xQueueGenericCreate>
 8000c94:	4603      	mov	r3, r0
 8000c96:	4a2d      	ldr	r2, [pc, #180]	; (8000d4c <SDcard_start+0xc8>)
 8000c98:	6013      	str	r3, [r2, #0]
	SDcard_queue_handle = xQueueCreate(20, sizeof(SD_data_t));
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2118      	movs	r1, #24
 8000c9e:	2014      	movs	r0, #20
 8000ca0:	f00c fbd8 	bl	800d454 <xQueueGenericCreate>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	4a2a      	ldr	r2, [pc, #168]	; (8000d50 <SDcard_start+0xcc>)
 8000ca8:	6013      	str	r3, [r2, #0]
	if(f_mount(&fs, "", 0) != FR_OK){
 8000caa:	2200      	movs	r2, #0
 8000cac:	4929      	ldr	r1, [pc, #164]	; (8000d54 <SDcard_start+0xd0>)
 8000cae:	482a      	ldr	r0, [pc, #168]	; (8000d58 <SDcard_start+0xd4>)
 8000cb0:	f00a fc1a 	bl	800b4e8 <f_mount>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d015      	beq.n	8000ce6 <SDcard_start+0x62>
		USB_PRINT("fail mount sd card\n");
 8000cba:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <SDcard_start+0xc8>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f00c fe9f 	bl	800da04 <xQueueSemaphoreTake>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d003      	beq.n	8000cd4 <SDcard_start+0x50>
 8000ccc:	2113      	movs	r1, #19
 8000cce:	4823      	ldr	r0, [pc, #140]	; (8000d5c <SDcard_start+0xd8>)
 8000cd0:	f00f fa82 	bl	80101d8 <CDC_Transmit_FS>
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <SDcard_start+0xc8>)
 8000cd6:	6818      	ldr	r0, [r3, #0]
 8000cd8:	2300      	movs	r3, #0
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	f00c fc17 	bl	800d510 <xQueueGenericSend>
		return false;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e02e      	b.n	8000d44 <SDcard_start+0xc0>
	}
	if(reset_files() != true){
 8000ce6:	f7ff fdb7 	bl	8000858 <reset_files>
 8000cea:	4603      	mov	r3, r0
 8000cec:	f083 0301 	eor.w	r3, r3, #1
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d015      	beq.n	8000d22 <SDcard_start+0x9e>
		USB_PRINT("fail reseting files\n");
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <SDcard_start+0xc8>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f00c fe81 	bl	800da04 <xQueueSemaphoreTake>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d003      	beq.n	8000d10 <SDcard_start+0x8c>
 8000d08:	2114      	movs	r1, #20
 8000d0a:	4815      	ldr	r0, [pc, #84]	; (8000d60 <SDcard_start+0xdc>)
 8000d0c:	f00f fa64 	bl	80101d8 <CDC_Transmit_FS>
 8000d10:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <SDcard_start+0xc8>)
 8000d12:	6818      	ldr	r0, [r3, #0]
 8000d14:	2300      	movs	r3, #0
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	f00c fbf9 	bl	800d510 <xQueueGenericSend>
		return false;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	e010      	b.n	8000d44 <SDcard_start+0xc0>
	}
	if(xTaskCreate(SDcard_task, "SDcard_task", 128*5, NULL, 26, NULL) != pdPASS) return false;
 8000d22:	2300      	movs	r3, #0
 8000d24:	9301      	str	r3, [sp, #4]
 8000d26:	231a      	movs	r3, #26
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000d30:	490c      	ldr	r1, [pc, #48]	; (8000d64 <SDcard_start+0xe0>)
 8000d32:	480d      	ldr	r0, [pc, #52]	; (8000d68 <SDcard_start+0xe4>)
 8000d34:	f00d f955 	bl	800dfe2 <xTaskCreate>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d001      	beq.n	8000d42 <SDcard_start+0xbe>
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e000      	b.n	8000d44 <SDcard_start+0xc0>
	return true;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20002200 	.word	0x20002200
 8000d50:	20002204 	.word	0x20002204
 8000d54:	0801225c 	.word	0x0801225c
 8000d58:	20000198 	.word	0x20000198
 8000d5c:	08012260 	.word	0x08012260
 8000d60:	08012274 	.word	0x08012274
 8000d64:	0801228c 	.word	0x0801228c
 8000d68:	080009b1 	.word	0x080009b1

08000d6c <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2110      	movs	r1, #16
 8000d74:	4803      	ldr	r0, [pc, #12]	; (8000d84 <SELECT+0x18>)
 8000d76:	f001 fd63 	bl	8002840 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	f001 fad6 	bl	800232c <HAL_Delay>
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40020000 	.word	0x40020000

08000d88 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2110      	movs	r1, #16
 8000d90:	4803      	ldr	r0, [pc, #12]	; (8000da0 <DESELECT+0x18>)
 8000d92:	f001 fd55 	bl	8002840 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d96:	2001      	movs	r0, #1
 8000d98:	f001 fac8 	bl	800232c <HAL_Delay>
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40020000 	.word	0x40020000

08000da4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000dae:	bf00      	nop
 8000db0:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <SPI_TxByte+0x30>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d1f8      	bne.n	8000db0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000dbe:	1df9      	adds	r1, r7, #7
 8000dc0:	2364      	movs	r3, #100	; 0x64
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <SPI_TxByte+0x30>)
 8000dc6:	f003 fcd0 	bl	800476a <HAL_SPI_Transmit>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20002214 	.word	0x20002214

08000dd8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000de4:	bf00      	nop
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <SPI_TxBuffer+0x30>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	f003 0302 	and.w	r3, r3, #2
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d1f8      	bne.n	8000de6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000df4:	887a      	ldrh	r2, [r7, #2]
 8000df6:	2364      	movs	r3, #100	; 0x64
 8000df8:	6879      	ldr	r1, [r7, #4]
 8000dfa:	4803      	ldr	r0, [pc, #12]	; (8000e08 <SPI_TxBuffer+0x30>)
 8000dfc:	f003 fcb5 	bl	800476a <HAL_SPI_Transmit>
}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20002214 	.word	0x20002214

08000e0c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000e12:	23ff      	movs	r3, #255	; 0xff
 8000e14:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000e16:	bf00      	nop
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <SPI_RxByte+0x34>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d1f8      	bne.n	8000e18 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000e26:	1dba      	adds	r2, r7, #6
 8000e28:	1df9      	adds	r1, r7, #7
 8000e2a:	2364      	movs	r3, #100	; 0x64
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	2301      	movs	r3, #1
 8000e30:	4803      	ldr	r0, [pc, #12]	; (8000e40 <SPI_RxByte+0x34>)
 8000e32:	f003 fdd6 	bl	80049e2 <HAL_SPI_TransmitReceive>

	return data;
 8000e36:	79bb      	ldrb	r3, [r7, #6]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20002214 	.word	0x20002214

08000e44 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000e4c:	f7ff ffde 	bl	8000e0c <SPI_RxByte>
 8000e50:	4603      	mov	r3, r0
 8000e52:	461a      	mov	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	701a      	strb	r2, [r3, #0]
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000e66:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <SD_ReadyWait+0x30>)
 8000e68:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e6c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000e6e:	f7ff ffcd 	bl	8000e0c <SPI_RxByte>
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	2bff      	cmp	r3, #255	; 0xff
 8000e7a:	d003      	beq.n	8000e84 <SD_ReadyWait+0x24>
 8000e7c:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <SD_ReadyWait+0x30>)
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1f4      	bne.n	8000e6e <SD_ReadyWait+0xe>

	return res;
 8000e84:	79fb      	ldrb	r3, [r7, #7]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	2000220a 	.word	0x2000220a

08000e94 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000e9a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000e9e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000ea0:	f7ff ff72 	bl	8000d88 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	e005      	b.n	8000eb6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000eaa:	20ff      	movs	r0, #255	; 0xff
 8000eac:	f7ff ff7a 	bl	8000da4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	2b09      	cmp	r3, #9
 8000eba:	ddf6      	ble.n	8000eaa <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000ebc:	f7ff ff56 	bl	8000d6c <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000ec0:	2340      	movs	r3, #64	; 0x40
 8000ec2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000ed4:	2395      	movs	r3, #149	; 0x95
 8000ed6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000ed8:	463b      	mov	r3, r7
 8000eda:	2106      	movs	r1, #6
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff7b 	bl	8000dd8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000ee2:	e002      	b.n	8000eea <SD_PowerOn+0x56>
	{
		cnt--;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000eea:	f7ff ff8f 	bl	8000e0c <SPI_RxByte>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d002      	beq.n	8000efa <SD_PowerOn+0x66>
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1f4      	bne.n	8000ee4 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000efa:	f7ff ff45 	bl	8000d88 <DESELECT>
	SPI_TxByte(0XFF);
 8000efe:	20ff      	movs	r0, #255	; 0xff
 8000f00:	f7ff ff50 	bl	8000da4 <SPI_TxByte>

	PowerFlag = 1;
 8000f04:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <SD_PowerOn+0x80>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	701a      	strb	r2, [r3, #0]
}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	2000220d 	.word	0x2000220d

08000f18 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <SD_PowerOff+0x14>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	2000220d 	.word	0x2000220d

08000f30 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <SD_CheckPower+0x14>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	2000220d 	.word	0x2000220d

08000f48 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000f52:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <SD_RxDataBlock+0x58>)
 8000f54:	22c8      	movs	r2, #200	; 0xc8
 8000f56:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000f58:	f7ff ff58 	bl	8000e0c <SPI_RxByte>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	2bff      	cmp	r3, #255	; 0xff
 8000f64:	d103      	bne.n	8000f6e <SD_RxDataBlock+0x26>
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <SD_RxDataBlock+0x58>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1f4      	bne.n	8000f58 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	2bfe      	cmp	r3, #254	; 0xfe
 8000f72:	d001      	beq.n	8000f78 <SD_RxDataBlock+0x30>
 8000f74:	2300      	movs	r3, #0
 8000f76:	e00f      	b.n	8000f98 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	1c5a      	adds	r2, r3, #1
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ff60 	bl	8000e44 <SPI_RxBytePtr>
	} while(len--);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	1e5a      	subs	r2, r3, #1
 8000f88:	603a      	str	r2, [r7, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f4      	bne.n	8000f78 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000f8e:	f7ff ff3d 	bl	8000e0c <SPI_RxByte>
	SPI_RxByte();
 8000f92:	f7ff ff3b 	bl	8000e0c <SPI_RxByte>

	return TRUE;
 8000f96:	2301      	movs	r3, #1
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20002208 	.word	0x20002208

08000fa4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000fb4:	f7ff ff54 	bl	8000e60 <SD_ReadyWait>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2bff      	cmp	r3, #255	; 0xff
 8000fbc:	d001      	beq.n	8000fc2 <SD_TxDataBlock+0x1e>
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	e02f      	b.n	8001022 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000fc2:	78fb      	ldrb	r3, [r7, #3]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff feed 	bl	8000da4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000fca:	78fb      	ldrb	r3, [r7, #3]
 8000fcc:	2bfd      	cmp	r3, #253	; 0xfd
 8000fce:	d020      	beq.n	8001012 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000fd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff feff 	bl	8000dd8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000fda:	f7ff ff17 	bl	8000e0c <SPI_RxByte>
		SPI_RxByte();
 8000fde:	f7ff ff15 	bl	8000e0c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000fe2:	e00b      	b.n	8000ffc <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000fe4:	f7ff ff12 	bl	8000e0c <SPI_RxByte>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	f003 031f 	and.w	r3, r3, #31
 8000ff2:	2b05      	cmp	r3, #5
 8000ff4:	d006      	beq.n	8001004 <SD_TxDataBlock+0x60>
			i++;
 8000ff6:	7bbb      	ldrb	r3, [r7, #14]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000ffc:	7bbb      	ldrb	r3, [r7, #14]
 8000ffe:	2b40      	cmp	r3, #64	; 0x40
 8001000:	d9f0      	bls.n	8000fe4 <SD_TxDataBlock+0x40>
 8001002:	e000      	b.n	8001006 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001004:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001006:	bf00      	nop
 8001008:	f7ff ff00 	bl	8000e0c <SPI_RxByte>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0fa      	beq.n	8001008 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	f003 031f 	and.w	r3, r3, #31
 8001018:	2b05      	cmp	r3, #5
 800101a:	d101      	bne.n	8001020 <SD_TxDataBlock+0x7c>
 800101c:	2301      	movs	r3, #1
 800101e:	e000      	b.n	8001022 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b084      	sub	sp, #16
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	6039      	str	r1, [r7, #0]
 8001034:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001036:	f7ff ff13 	bl	8000e60 <SD_ReadyWait>
 800103a:	4603      	mov	r3, r0
 800103c:	2bff      	cmp	r3, #255	; 0xff
 800103e:	d001      	beq.n	8001044 <SD_SendCmd+0x1a>
 8001040:	23ff      	movs	r3, #255	; 0xff
 8001042:	e042      	b.n	80010ca <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff feac 	bl	8000da4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	0e1b      	lsrs	r3, r3, #24
 8001050:	b2db      	uxtb	r3, r3
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fea6 	bl	8000da4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	0c1b      	lsrs	r3, r3, #16
 800105c:	b2db      	uxtb	r3, r3
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fea0 	bl	8000da4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	0a1b      	lsrs	r3, r3, #8
 8001068:	b2db      	uxtb	r3, r3
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fe9a 	bl	8000da4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fe95 	bl	8000da4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	2b40      	cmp	r3, #64	; 0x40
 800107e:	d102      	bne.n	8001086 <SD_SendCmd+0x5c>
 8001080:	2395      	movs	r3, #149	; 0x95
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	e007      	b.n	8001096 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	2b48      	cmp	r3, #72	; 0x48
 800108a:	d102      	bne.n	8001092 <SD_SendCmd+0x68>
 800108c:	2387      	movs	r3, #135	; 0x87
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	e001      	b.n	8001096 <SD_SendCmd+0x6c>
	else crc = 1;
 8001092:	2301      	movs	r3, #1
 8001094:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fe83 	bl	8000da4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	2b4c      	cmp	r3, #76	; 0x4c
 80010a2:	d101      	bne.n	80010a8 <SD_SendCmd+0x7e>
 80010a4:	f7ff feb2 	bl	8000e0c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80010a8:	230a      	movs	r3, #10
 80010aa:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80010ac:	f7ff feae 	bl	8000e0c <SPI_RxByte>
 80010b0:	4603      	mov	r3, r0
 80010b2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80010b4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	da05      	bge.n	80010c8 <SD_SendCmd+0x9e>
 80010bc:	7bbb      	ldrb	r3, [r7, #14]
 80010be:	3b01      	subs	r3, #1
 80010c0:	73bb      	strb	r3, [r7, #14]
 80010c2:	7bbb      	ldrb	r3, [r7, #14]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1f1      	bne.n	80010ac <SD_SendCmd+0x82>

	return res;
 80010c8:	7b7b      	ldrb	r3, [r7, #13]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <SD_disk_initialize+0x14>
 80010e4:	2301      	movs	r3, #1
 80010e6:	e0d1      	b.n	800128c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80010e8:	4b6a      	ldr	r3, [pc, #424]	; (8001294 <SD_disk_initialize+0x1c0>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <SD_disk_initialize+0x2a>
 80010f6:	4b67      	ldr	r3, [pc, #412]	; (8001294 <SD_disk_initialize+0x1c0>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	e0c6      	b.n	800128c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80010fe:	f7ff fec9 	bl	8000e94 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001102:	f7ff fe33 	bl	8000d6c <SELECT>

	/* check disk type */
	type = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800110a:	2100      	movs	r1, #0
 800110c:	2040      	movs	r0, #64	; 0x40
 800110e:	f7ff ff8c 	bl	800102a <SD_SendCmd>
 8001112:	4603      	mov	r3, r0
 8001114:	2b01      	cmp	r3, #1
 8001116:	f040 80a1 	bne.w	800125c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800111a:	4b5f      	ldr	r3, [pc, #380]	; (8001298 <SD_disk_initialize+0x1c4>)
 800111c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001120:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001122:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001126:	2048      	movs	r0, #72	; 0x48
 8001128:	f7ff ff7f 	bl	800102a <SD_SendCmd>
 800112c:	4603      	mov	r3, r0
 800112e:	2b01      	cmp	r3, #1
 8001130:	d155      	bne.n	80011de <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001132:	2300      	movs	r3, #0
 8001134:	73fb      	strb	r3, [r7, #15]
 8001136:	e00c      	b.n	8001152 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001138:	7bfc      	ldrb	r4, [r7, #15]
 800113a:	f7ff fe67 	bl	8000e0c <SPI_RxByte>
 800113e:	4603      	mov	r3, r0
 8001140:	461a      	mov	r2, r3
 8001142:	f104 0310 	add.w	r3, r4, #16
 8001146:	443b      	add	r3, r7
 8001148:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	3301      	adds	r3, #1
 8001150:	73fb      	strb	r3, [r7, #15]
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	2b03      	cmp	r3, #3
 8001156:	d9ef      	bls.n	8001138 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001158:	7abb      	ldrb	r3, [r7, #10]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d17e      	bne.n	800125c <SD_disk_initialize+0x188>
 800115e:	7afb      	ldrb	r3, [r7, #11]
 8001160:	2baa      	cmp	r3, #170	; 0xaa
 8001162:	d17b      	bne.n	800125c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001164:	2100      	movs	r1, #0
 8001166:	2077      	movs	r0, #119	; 0x77
 8001168:	f7ff ff5f 	bl	800102a <SD_SendCmd>
 800116c:	4603      	mov	r3, r0
 800116e:	2b01      	cmp	r3, #1
 8001170:	d807      	bhi.n	8001182 <SD_disk_initialize+0xae>
 8001172:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001176:	2069      	movs	r0, #105	; 0x69
 8001178:	f7ff ff57 	bl	800102a <SD_SendCmd>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d004      	beq.n	800118c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8001182:	4b45      	ldr	r3, [pc, #276]	; (8001298 <SD_disk_initialize+0x1c4>)
 8001184:	881b      	ldrh	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1ec      	bne.n	8001164 <SD_disk_initialize+0x90>
 800118a:	e000      	b.n	800118e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800118c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800118e:	4b42      	ldr	r3, [pc, #264]	; (8001298 <SD_disk_initialize+0x1c4>)
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d062      	beq.n	800125c <SD_disk_initialize+0x188>
 8001196:	2100      	movs	r1, #0
 8001198:	207a      	movs	r0, #122	; 0x7a
 800119a:	f7ff ff46 	bl	800102a <SD_SendCmd>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d15b      	bne.n	800125c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80011a4:	2300      	movs	r3, #0
 80011a6:	73fb      	strb	r3, [r7, #15]
 80011a8:	e00c      	b.n	80011c4 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80011aa:	7bfc      	ldrb	r4, [r7, #15]
 80011ac:	f7ff fe2e 	bl	8000e0c <SPI_RxByte>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	f104 0310 	add.w	r3, r4, #16
 80011b8:	443b      	add	r3, r7
 80011ba:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	3301      	adds	r3, #1
 80011c2:	73fb      	strb	r3, [r7, #15]
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	2b03      	cmp	r3, #3
 80011c8:	d9ef      	bls.n	80011aa <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80011ca:	7a3b      	ldrb	r3, [r7, #8]
 80011cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <SD_disk_initialize+0x104>
 80011d4:	230c      	movs	r3, #12
 80011d6:	e000      	b.n	80011da <SD_disk_initialize+0x106>
 80011d8:	2304      	movs	r3, #4
 80011da:	73bb      	strb	r3, [r7, #14]
 80011dc:	e03e      	b.n	800125c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80011de:	2100      	movs	r1, #0
 80011e0:	2077      	movs	r0, #119	; 0x77
 80011e2:	f7ff ff22 	bl	800102a <SD_SendCmd>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d808      	bhi.n	80011fe <SD_disk_initialize+0x12a>
 80011ec:	2100      	movs	r1, #0
 80011ee:	2069      	movs	r0, #105	; 0x69
 80011f0:	f7ff ff1b 	bl	800102a <SD_SendCmd>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d801      	bhi.n	80011fe <SD_disk_initialize+0x12a>
 80011fa:	2302      	movs	r3, #2
 80011fc:	e000      	b.n	8001200 <SD_disk_initialize+0x12c>
 80011fe:	2301      	movs	r3, #1
 8001200:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001202:	7bbb      	ldrb	r3, [r7, #14]
 8001204:	2b02      	cmp	r3, #2
 8001206:	d10e      	bne.n	8001226 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001208:	2100      	movs	r1, #0
 800120a:	2077      	movs	r0, #119	; 0x77
 800120c:	f7ff ff0d 	bl	800102a <SD_SendCmd>
 8001210:	4603      	mov	r3, r0
 8001212:	2b01      	cmp	r3, #1
 8001214:	d80e      	bhi.n	8001234 <SD_disk_initialize+0x160>
 8001216:	2100      	movs	r1, #0
 8001218:	2069      	movs	r0, #105	; 0x69
 800121a:	f7ff ff06 	bl	800102a <SD_SendCmd>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d107      	bne.n	8001234 <SD_disk_initialize+0x160>
 8001224:	e00c      	b.n	8001240 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001226:	2100      	movs	r1, #0
 8001228:	2041      	movs	r0, #65	; 0x41
 800122a:	f7ff fefe 	bl	800102a <SD_SendCmd>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d004      	beq.n	800123e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001234:	4b18      	ldr	r3, [pc, #96]	; (8001298 <SD_disk_initialize+0x1c4>)
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1e2      	bne.n	8001202 <SD_disk_initialize+0x12e>
 800123c:	e000      	b.n	8001240 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800123e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <SD_disk_initialize+0x1c4>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d007      	beq.n	8001258 <SD_disk_initialize+0x184>
 8001248:	f44f 7100 	mov.w	r1, #512	; 0x200
 800124c:	2050      	movs	r0, #80	; 0x50
 800124e:	f7ff feec 	bl	800102a <SD_SendCmd>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <SD_disk_initialize+0x188>
 8001258:	2300      	movs	r3, #0
 800125a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800125c:	4a0f      	ldr	r2, [pc, #60]	; (800129c <SD_disk_initialize+0x1c8>)
 800125e:	7bbb      	ldrb	r3, [r7, #14]
 8001260:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001262:	f7ff fd91 	bl	8000d88 <DESELECT>
	SPI_RxByte();
 8001266:	f7ff fdd1 	bl	8000e0c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800126a:	7bbb      	ldrb	r3, [r7, #14]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d008      	beq.n	8001282 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <SD_disk_initialize+0x1c0>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	b2db      	uxtb	r3, r3
 8001276:	f023 0301 	bic.w	r3, r3, #1
 800127a:	b2da      	uxtb	r2, r3
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <SD_disk_initialize+0x1c0>)
 800127e:	701a      	strb	r2, [r3, #0]
 8001280:	e001      	b.n	8001286 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001282:	f7ff fe49 	bl	8000f18 <SD_PowerOff>
	}

	return Stat;
 8001286:	4b03      	ldr	r3, [pc, #12]	; (8001294 <SD_disk_initialize+0x1c0>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	b2db      	uxtb	r3, r3
}
 800128c:	4618      	mov	r0, r3
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	bd90      	pop	{r4, r7, pc}
 8001294:	20000000 	.word	0x20000000
 8001298:	20002208 	.word	0x20002208
 800129c:	2000220c 	.word	0x2000220c

080012a0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <SD_disk_status+0x14>
 80012b0:	2301      	movs	r3, #1
 80012b2:	e002      	b.n	80012ba <SD_disk_status+0x1a>
	return Stat;
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <SD_disk_status+0x28>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b2db      	uxtb	r3, r3
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000000 	.word	0x20000000

080012cc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	4603      	mov	r3, r0
 80012da:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d102      	bne.n	80012e8 <SD_disk_read+0x1c>
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d101      	bne.n	80012ec <SD_disk_read+0x20>
 80012e8:	2304      	movs	r3, #4
 80012ea:	e051      	b.n	8001390 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80012ec:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <SD_disk_read+0xcc>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <SD_disk_read+0x32>
 80012fa:	2303      	movs	r3, #3
 80012fc:	e048      	b.n	8001390 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80012fe:	4b27      	ldr	r3, [pc, #156]	; (800139c <SD_disk_read+0xd0>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	2b00      	cmp	r3, #0
 8001308:	d102      	bne.n	8001310 <SD_disk_read+0x44>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	025b      	lsls	r3, r3, #9
 800130e:	607b      	str	r3, [r7, #4]

	SELECT();
 8001310:	f7ff fd2c 	bl	8000d6c <SELECT>

	if (count == 1)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d111      	bne.n	800133e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	2051      	movs	r0, #81	; 0x51
 800131e:	f7ff fe84 	bl	800102a <SD_SendCmd>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d129      	bne.n	800137c <SD_disk_read+0xb0>
 8001328:	f44f 7100 	mov.w	r1, #512	; 0x200
 800132c:	68b8      	ldr	r0, [r7, #8]
 800132e:	f7ff fe0b 	bl	8000f48 <SD_RxDataBlock>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d021      	beq.n	800137c <SD_disk_read+0xb0>
 8001338:	2300      	movs	r3, #0
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	e01e      	b.n	800137c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	2052      	movs	r0, #82	; 0x52
 8001342:	f7ff fe72 	bl	800102a <SD_SendCmd>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d117      	bne.n	800137c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800134c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001350:	68b8      	ldr	r0, [r7, #8]
 8001352:	f7ff fdf9 	bl	8000f48 <SD_RxDataBlock>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d00a      	beq.n	8001372 <SD_disk_read+0xa6>
				buff += 512;
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001362:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	3b01      	subs	r3, #1
 8001368:	603b      	str	r3, [r7, #0]
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1ed      	bne.n	800134c <SD_disk_read+0x80>
 8001370:	e000      	b.n	8001374 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001372:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001374:	2100      	movs	r1, #0
 8001376:	204c      	movs	r0, #76	; 0x4c
 8001378:	f7ff fe57 	bl	800102a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800137c:	f7ff fd04 	bl	8000d88 <DESELECT>
	SPI_RxByte();
 8001380:	f7ff fd44 	bl	8000e0c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	bf14      	ite	ne
 800138a:	2301      	movne	r3, #1
 800138c:	2300      	moveq	r3, #0
 800138e:	b2db      	uxtb	r3, r3
}
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000000 	.word	0x20000000
 800139c:	2000220c 	.word	0x2000220c

080013a0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	4603      	mov	r3, r0
 80013ae:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d102      	bne.n	80013bc <SD_disk_write+0x1c>
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d101      	bne.n	80013c0 <SD_disk_write+0x20>
 80013bc:	2304      	movs	r3, #4
 80013be:	e06b      	b.n	8001498 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80013c0:	4b37      	ldr	r3, [pc, #220]	; (80014a0 <SD_disk_write+0x100>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <SD_disk_write+0x32>
 80013ce:	2303      	movs	r3, #3
 80013d0:	e062      	b.n	8001498 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80013d2:	4b33      	ldr	r3, [pc, #204]	; (80014a0 <SD_disk_write+0x100>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <SD_disk_write+0x44>
 80013e0:	2302      	movs	r3, #2
 80013e2:	e059      	b.n	8001498 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80013e4:	4b2f      	ldr	r3, [pc, #188]	; (80014a4 <SD_disk_write+0x104>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d102      	bne.n	80013f6 <SD_disk_write+0x56>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	025b      	lsls	r3, r3, #9
 80013f4:	607b      	str	r3, [r7, #4]

	SELECT();
 80013f6:	f7ff fcb9 	bl	8000d6c <SELECT>

	if (count == 1)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d110      	bne.n	8001422 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	2058      	movs	r0, #88	; 0x58
 8001404:	f7ff fe11 	bl	800102a <SD_SendCmd>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d13a      	bne.n	8001484 <SD_disk_write+0xe4>
 800140e:	21fe      	movs	r1, #254	; 0xfe
 8001410:	68b8      	ldr	r0, [r7, #8]
 8001412:	f7ff fdc7 	bl	8000fa4 <SD_TxDataBlock>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d033      	beq.n	8001484 <SD_disk_write+0xe4>
			count = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	e030      	b.n	8001484 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001422:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <SD_disk_write+0x104>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d007      	beq.n	800143e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800142e:	2100      	movs	r1, #0
 8001430:	2077      	movs	r0, #119	; 0x77
 8001432:	f7ff fdfa 	bl	800102a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001436:	6839      	ldr	r1, [r7, #0]
 8001438:	2057      	movs	r0, #87	; 0x57
 800143a:	f7ff fdf6 	bl	800102a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	2059      	movs	r0, #89	; 0x59
 8001442:	f7ff fdf2 	bl	800102a <SD_SendCmd>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d11b      	bne.n	8001484 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800144c:	21fc      	movs	r1, #252	; 0xfc
 800144e:	68b8      	ldr	r0, [r7, #8]
 8001450:	f7ff fda8 	bl	8000fa4 <SD_TxDataBlock>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d00a      	beq.n	8001470 <SD_disk_write+0xd0>
				buff += 512;
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001460:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	3b01      	subs	r3, #1
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1ee      	bne.n	800144c <SD_disk_write+0xac>
 800146e:	e000      	b.n	8001472 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001470:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001472:	21fd      	movs	r1, #253	; 0xfd
 8001474:	2000      	movs	r0, #0
 8001476:	f7ff fd95 	bl	8000fa4 <SD_TxDataBlock>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d101      	bne.n	8001484 <SD_disk_write+0xe4>
			{
				count = 1;
 8001480:	2301      	movs	r3, #1
 8001482:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001484:	f7ff fc80 	bl	8000d88 <DESELECT>
	SPI_RxByte();
 8001488:	f7ff fcc0 	bl	8000e0c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	bf14      	ite	ne
 8001492:	2301      	movne	r3, #1
 8001494:	2300      	moveq	r3, #0
 8001496:	b2db      	uxtb	r3, r3
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000000 	.word	0x20000000
 80014a4:	2000220c 	.word	0x2000220c

080014a8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80014a8:	b590      	push	{r4, r7, lr}
 80014aa:	b08b      	sub	sp, #44	; 0x2c
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	603a      	str	r2, [r7, #0]
 80014b2:	71fb      	strb	r3, [r7, #7]
 80014b4:	460b      	mov	r3, r1
 80014b6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <SD_disk_ioctl+0x1e>
 80014c2:	2304      	movs	r3, #4
 80014c4:	e115      	b.n	80016f2 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80014cc:	79bb      	ldrb	r3, [r7, #6]
 80014ce:	2b05      	cmp	r3, #5
 80014d0:	d124      	bne.n	800151c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80014d2:	6a3b      	ldr	r3, [r7, #32]
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d012      	beq.n	8001500 <SD_disk_ioctl+0x58>
 80014da:	2b02      	cmp	r3, #2
 80014dc:	dc1a      	bgt.n	8001514 <SD_disk_ioctl+0x6c>
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d002      	beq.n	80014e8 <SD_disk_ioctl+0x40>
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d006      	beq.n	80014f4 <SD_disk_ioctl+0x4c>
 80014e6:	e015      	b.n	8001514 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80014e8:	f7ff fd16 	bl	8000f18 <SD_PowerOff>
			res = RES_OK;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014f2:	e0fc      	b.n	80016ee <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 80014f4:	f7ff fcce 	bl	8000e94 <SD_PowerOn>
			res = RES_OK;
 80014f8:	2300      	movs	r3, #0
 80014fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014fe:	e0f6      	b.n	80016ee <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	1c5c      	adds	r4, r3, #1
 8001504:	f7ff fd14 	bl	8000f30 <SD_CheckPower>
 8001508:	4603      	mov	r3, r0
 800150a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 800150c:	2300      	movs	r3, #0
 800150e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001512:	e0ec      	b.n	80016ee <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001514:	2304      	movs	r3, #4
 8001516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800151a:	e0e8      	b.n	80016ee <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800151c:	4b77      	ldr	r3, [pc, #476]	; (80016fc <SD_disk_ioctl+0x254>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <SD_disk_ioctl+0x86>
 800152a:	2303      	movs	r3, #3
 800152c:	e0e1      	b.n	80016f2 <SD_disk_ioctl+0x24a>

		SELECT();
 800152e:	f7ff fc1d 	bl	8000d6c <SELECT>

		switch (ctrl)
 8001532:	79bb      	ldrb	r3, [r7, #6]
 8001534:	2b0d      	cmp	r3, #13
 8001536:	f200 80cb 	bhi.w	80016d0 <SD_disk_ioctl+0x228>
 800153a:	a201      	add	r2, pc, #4	; (adr r2, 8001540 <SD_disk_ioctl+0x98>)
 800153c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001540:	0800163b 	.word	0x0800163b
 8001544:	08001579 	.word	0x08001579
 8001548:	0800162b 	.word	0x0800162b
 800154c:	080016d1 	.word	0x080016d1
 8001550:	080016d1 	.word	0x080016d1
 8001554:	080016d1 	.word	0x080016d1
 8001558:	080016d1 	.word	0x080016d1
 800155c:	080016d1 	.word	0x080016d1
 8001560:	080016d1 	.word	0x080016d1
 8001564:	080016d1 	.word	0x080016d1
 8001568:	080016d1 	.word	0x080016d1
 800156c:	0800164d 	.word	0x0800164d
 8001570:	08001671 	.word	0x08001671
 8001574:	08001695 	.word	0x08001695
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001578:	2100      	movs	r1, #0
 800157a:	2049      	movs	r0, #73	; 0x49
 800157c:	f7ff fd55 	bl	800102a <SD_SendCmd>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	f040 80a8 	bne.w	80016d8 <SD_disk_ioctl+0x230>
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	2110      	movs	r1, #16
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fcda 	bl	8000f48 <SD_RxDataBlock>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 809e 	beq.w	80016d8 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 800159c:	7b3b      	ldrb	r3, [r7, #12]
 800159e:	099b      	lsrs	r3, r3, #6
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d10e      	bne.n	80015c4 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80015a6:	7d7b      	ldrb	r3, [r7, #21]
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	7d3b      	ldrb	r3, [r7, #20]
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	4413      	add	r3, r2
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	3301      	adds	r3, #1
 80015b8:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80015ba:	8bfb      	ldrh	r3, [r7, #30]
 80015bc:	029a      	lsls	r2, r3, #10
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	e02e      	b.n	8001622 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80015c4:	7c7b      	ldrb	r3, [r7, #17]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	7dbb      	ldrb	r3, [r7, #22]
 80015ce:	09db      	lsrs	r3, r3, #7
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	4413      	add	r3, r2
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	7d7b      	ldrb	r3, [r7, #21]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	f003 0306 	and.w	r3, r3, #6
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	4413      	add	r3, r2
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	3302      	adds	r3, #2
 80015e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80015ec:	7d3b      	ldrb	r3, [r7, #20]
 80015ee:	099b      	lsrs	r3, r3, #6
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	7cfb      	ldrb	r3, [r7, #19]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	4413      	add	r3, r2
 80015fe:	b29a      	uxth	r2, r3
 8001600:	7cbb      	ldrb	r3, [r7, #18]
 8001602:	029b      	lsls	r3, r3, #10
 8001604:	b29b      	uxth	r3, r3
 8001606:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800160a:	b29b      	uxth	r3, r3
 800160c:	4413      	add	r3, r2
 800160e:	b29b      	uxth	r3, r3
 8001610:	3301      	adds	r3, #1
 8001612:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001614:	8bfa      	ldrh	r2, [r7, #30]
 8001616:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800161a:	3b09      	subs	r3, #9
 800161c:	409a      	lsls	r2, r3
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001628:	e056      	b.n	80016d8 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001630:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001638:	e055      	b.n	80016e6 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800163a:	f7ff fc11 	bl	8000e60 <SD_ReadyWait>
 800163e:	4603      	mov	r3, r0
 8001640:	2bff      	cmp	r3, #255	; 0xff
 8001642:	d14b      	bne.n	80016dc <SD_disk_ioctl+0x234>
 8001644:	2300      	movs	r3, #0
 8001646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800164a:	e047      	b.n	80016dc <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800164c:	2100      	movs	r1, #0
 800164e:	2049      	movs	r0, #73	; 0x49
 8001650:	f7ff fceb 	bl	800102a <SD_SendCmd>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d142      	bne.n	80016e0 <SD_disk_ioctl+0x238>
 800165a:	2110      	movs	r1, #16
 800165c:	6a38      	ldr	r0, [r7, #32]
 800165e:	f7ff fc73 	bl	8000f48 <SD_RxDataBlock>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d03b      	beq.n	80016e0 <SD_disk_ioctl+0x238>
 8001668:	2300      	movs	r3, #0
 800166a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800166e:	e037      	b.n	80016e0 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001670:	2100      	movs	r1, #0
 8001672:	204a      	movs	r0, #74	; 0x4a
 8001674:	f7ff fcd9 	bl	800102a <SD_SendCmd>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d132      	bne.n	80016e4 <SD_disk_ioctl+0x23c>
 800167e:	2110      	movs	r1, #16
 8001680:	6a38      	ldr	r0, [r7, #32]
 8001682:	f7ff fc61 	bl	8000f48 <SD_RxDataBlock>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d02b      	beq.n	80016e4 <SD_disk_ioctl+0x23c>
 800168c:	2300      	movs	r3, #0
 800168e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001692:	e027      	b.n	80016e4 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001694:	2100      	movs	r1, #0
 8001696:	207a      	movs	r0, #122	; 0x7a
 8001698:	f7ff fcc7 	bl	800102a <SD_SendCmd>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d116      	bne.n	80016d0 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80016a2:	2300      	movs	r3, #0
 80016a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80016a8:	e00b      	b.n	80016c2 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80016aa:	6a3c      	ldr	r4, [r7, #32]
 80016ac:	1c63      	adds	r3, r4, #1
 80016ae:	623b      	str	r3, [r7, #32]
 80016b0:	f7ff fbac 	bl	8000e0c <SPI_RxByte>
 80016b4:	4603      	mov	r3, r0
 80016b6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80016b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016bc:	3301      	adds	r3, #1
 80016be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80016c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	d9ef      	bls.n	80016aa <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80016d0:	2304      	movs	r3, #4
 80016d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016d6:	e006      	b.n	80016e6 <SD_disk_ioctl+0x23e>
			break;
 80016d8:	bf00      	nop
 80016da:	e004      	b.n	80016e6 <SD_disk_ioctl+0x23e>
			break;
 80016dc:	bf00      	nop
 80016de:	e002      	b.n	80016e6 <SD_disk_ioctl+0x23e>
			break;
 80016e0:	bf00      	nop
 80016e2:	e000      	b.n	80016e6 <SD_disk_ioctl+0x23e>
			break;
 80016e4:	bf00      	nop
		}

		DESELECT();
 80016e6:	f7ff fb4f 	bl	8000d88 <DESELECT>
		SPI_RxByte();
 80016ea:	f7ff fb8f 	bl	8000e0c <SPI_RxByte>
	}

	return res;
 80016ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	372c      	adds	r7, #44	; 0x2c
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd90      	pop	{r4, r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000000 	.word	0x20000000

08001700 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001704:	4a04      	ldr	r2, [pc, #16]	; (8001718 <MX_FREERTOS_Init+0x18>)
 8001706:	2100      	movs	r1, #0
 8001708:	4804      	ldr	r0, [pc, #16]	; (800171c <MX_FREERTOS_Init+0x1c>)
 800170a:	f00b fc49 	bl	800cfa0 <osThreadNew>
 800170e:	4603      	mov	r3, r0
 8001710:	4a03      	ldr	r2, [pc, #12]	; (8001720 <MX_FREERTOS_Init+0x20>)
 8001712:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	080123c8 	.word	0x080123c8
 800171c:	08001725 	.word	0x08001725
 8001720:	20002210 	.word	0x20002210

08001724 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800172c:	f00e fc96 	bl	801005c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */

  vTaskDelay(3000);
 8001730:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001734:	f00c fea0 	bl	800e478 <vTaskDelay>
  if(!SDcard_start()){
 8001738:	f7ff faa4 	bl	8000c84 <SDcard_start>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d114      	bne.n	800176c <StartDefaultTask+0x48>
	  USB_PRINT("error starting sd card\n");
 8001742:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <StartDefaultTask+0x90>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2101      	movs	r1, #1
 8001748:	4618      	mov	r0, r3
 800174a:	f00c f95b 	bl	800da04 <xQueueSemaphoreTake>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <StartDefaultTask+0x38>
 8001754:	2117      	movs	r1, #23
 8001756:	4818      	ldr	r0, [pc, #96]	; (80017b8 <StartDefaultTask+0x94>)
 8001758:	f00e fd3e 	bl	80101d8 <CDC_Transmit_FS>
 800175c:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <StartDefaultTask+0x90>)
 800175e:	6818      	ldr	r0, [r3, #0]
 8001760:	2300      	movs	r3, #0
 8001762:	2200      	movs	r2, #0
 8001764:	2100      	movs	r1, #0
 8001766:	f00b fed3 	bl	800d510 <xQueueGenericSend>
	  return;
 800176a:	e020      	b.n	80017ae <StartDefaultTask+0x8a>
  }
  if(!start_send_data_tasks()){
 800176c:	f000 f8e8 	bl	8001940 <start_send_data_tasks>
 8001770:	4603      	mov	r3, r0
 8001772:	f083 0301 	eor.w	r3, r3, #1
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	d013      	beq.n	80017a4 <StartDefaultTask+0x80>
	  USB_PRINT("error starting send data tasks\n");
 800177c:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <StartDefaultTask+0x90>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2101      	movs	r1, #1
 8001782:	4618      	mov	r0, r3
 8001784:	f00c f93e 	bl	800da04 <xQueueSemaphoreTake>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <StartDefaultTask+0x72>
 800178e:	211f      	movs	r1, #31
 8001790:	480a      	ldr	r0, [pc, #40]	; (80017bc <StartDefaultTask+0x98>)
 8001792:	f00e fd21 	bl	80101d8 <CDC_Transmit_FS>
 8001796:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <StartDefaultTask+0x90>)
 8001798:	6818      	ldr	r0, [r3, #0]
 800179a:	2300      	movs	r3, #0
 800179c:	2200      	movs	r2, #0
 800179e:	2100      	movs	r1, #0
 80017a0:	f00b feb6 	bl	800d510 <xQueueGenericSend>


  /* Infinite loop */
  for(;;)
  {
    vTaskDelay(1000);
 80017a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017a8:	f00c fe66 	bl	800e478 <vTaskDelay>
 80017ac:	e7fa      	b.n	80017a4 <StartDefaultTask+0x80>
  }
  /* USER CODE END StartDefaultTask */
}
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20002200 	.word	0x20002200
 80017b8:	080122a4 	.word	0x080122a4
 80017bc:	080122bc 	.word	0x080122bc

080017c0 <send_data>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void send_data(void* arg){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b098      	sub	sp, #96	; 0x60
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	uint32_t settings_in_bits = (uint32_t)arg;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	657b      	str	r3, [r7, #84]	; 0x54
	QueueHandle_t SDcard_queue = SDcard_get_queue_handle();
 80017cc:	f7fe fee2 	bl	8000594 <SDcard_get_queue_handle>
 80017d0:	6538      	str	r0, [r7, #80]	; 0x50
	uint16_t period_ms = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint8_t array_size = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	data_type_t type = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	char buf [35];
	int n = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	65bb      	str	r3, [r7, #88]	; 0x58

	if(settings_in_bits>>31){
 80017e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	da03      	bge.n	80017f6 <send_data+0x36>
		array_size = 3;
 80017ee:	2303      	movs	r3, #3
 80017f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80017f4:	e002      	b.n	80017fc <send_data+0x3c>
	} else {
		array_size = 1;
 80017f6:	2301      	movs	r3, #1
 80017f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	period_ms = (settings_in_bits<<1)>>16;
 80017fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	0c1b      	lsrs	r3, r3, #16
 8001802:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	type = (settings_in_bits<<16)>>16;
 8001806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001808:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	srand(type);
 800180c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001810:	4618      	mov	r0, r3
 8001812:	f00f fb01 	bl	8010e18 <srand>
	TickType_t LastWakeTime = xTaskGetTickCount();
 8001816:	f00c ff7f 	bl	800e718 <xTaskGetTickCount>
 800181a:	4603      	mov	r3, r0
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
	for(;;){
		if(n == 3) break;
 800181e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001820:	2b03      	cmp	r3, #3
 8001822:	d103      	bne.n	800182c <send_data+0x6c>
			sprintf(buf, "fail send data to queue - %d\n", data.data_type);
			USB_PRINT(buf);
		}
		n++;
	}
	vTaskDelete(NULL);
 8001824:	2000      	movs	r0, #0
 8001826:	f00c fd37 	bl	800e298 <vTaskDelete>
}
 800182a:	e07e      	b.n	800192a <send_data+0x16a>
		vTaskDelayUntil(&LastWakeTime, pdMS_TO_TICKS(period_ms));
 800182c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001830:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001834:	fb02 f303 	mul.w	r3, r2, r3
 8001838:	4a3d      	ldr	r2, [pc, #244]	; (8001930 <send_data+0x170>)
 800183a:	fba2 2303 	umull	r2, r3, r2, r3
 800183e:	099a      	lsrs	r2, r3, #6
 8001840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001844:	4611      	mov	r1, r2
 8001846:	4618      	mov	r0, r3
 8001848:	f00c fd98 	bl	800e37c <vTaskDelayUntil>
			.value = {rand()%100,rand()%100,rand()%100},
 800184c:	f00f fb12 	bl	8010e74 <rand>
 8001850:	4602      	mov	r2, r0
 8001852:	4b38      	ldr	r3, [pc, #224]	; (8001934 <send_data+0x174>)
 8001854:	fb83 1302 	smull	r1, r3, r3, r2
 8001858:	1159      	asrs	r1, r3, #5
 800185a:	17d3      	asrs	r3, r2, #31
 800185c:	1acb      	subs	r3, r1, r3
 800185e:	2164      	movs	r1, #100	; 0x64
 8001860:	fb01 f303 	mul.w	r3, r1, r3
 8001864:	1ad3      	subs	r3, r2, r3
		SD_data_t data = {
 8001866:	60fb      	str	r3, [r7, #12]
			.value = {rand()%100,rand()%100,rand()%100},
 8001868:	f00f fb04 	bl	8010e74 <rand>
 800186c:	4602      	mov	r2, r0
 800186e:	4b31      	ldr	r3, [pc, #196]	; (8001934 <send_data+0x174>)
 8001870:	fb83 1302 	smull	r1, r3, r3, r2
 8001874:	1159      	asrs	r1, r3, #5
 8001876:	17d3      	asrs	r3, r2, #31
 8001878:	1acb      	subs	r3, r1, r3
 800187a:	2164      	movs	r1, #100	; 0x64
 800187c:	fb01 f303 	mul.w	r3, r1, r3
 8001880:	1ad3      	subs	r3, r2, r3
		SD_data_t data = {
 8001882:	613b      	str	r3, [r7, #16]
			.value = {rand()%100,rand()%100,rand()%100},
 8001884:	f00f faf6 	bl	8010e74 <rand>
 8001888:	4602      	mov	r2, r0
 800188a:	4b2a      	ldr	r3, [pc, #168]	; (8001934 <send_data+0x174>)
 800188c:	fb83 1302 	smull	r1, r3, r3, r2
 8001890:	1159      	asrs	r1, r3, #5
 8001892:	17d3      	asrs	r3, r2, #31
 8001894:	1acb      	subs	r3, r1, r3
 8001896:	2164      	movs	r1, #100	; 0x64
 8001898:	fb01 f303 	mul.w	r3, r1, r3
 800189c:	1ad3      	subs	r3, r2, r3
		SD_data_t data = {
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80018a4:	763b      	strb	r3, [r7, #24]
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	61fb      	str	r3, [r7, #28]
 80018aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80018ae:	f887 3020 	strb.w	r3, [r7, #32]
		if(xQueueSend(SDcard_queue, (void*)&data, pdMS_TO_TICKS(period_ms)/2) != pdTRUE){
 80018b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80018b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018ba:	fb02 f303 	mul.w	r3, r2, r3
 80018be:	4a1c      	ldr	r2, [pc, #112]	; (8001930 <send_data+0x170>)
 80018c0:	fba2 2303 	umull	r2, r3, r2, r3
 80018c4:	09da      	lsrs	r2, r3, #7
 80018c6:	f107 010c 	add.w	r1, r7, #12
 80018ca:	2300      	movs	r3, #0
 80018cc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80018ce:	f00b fe1f 	bl	800d510 <xQueueGenericSend>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d024      	beq.n	8001922 <send_data+0x162>
			sprintf(buf, "fail send data to queue - %d\n", data.data_type);
 80018d8:	7e3b      	ldrb	r3, [r7, #24]
 80018da:	461a      	mov	r2, r3
 80018dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018e0:	4915      	ldr	r1, [pc, #84]	; (8001938 <send_data+0x178>)
 80018e2:	4618      	mov	r0, r3
 80018e4:	f00f fb7e 	bl	8010fe4 <siprintf>
			USB_PRINT(buf);
 80018e8:	4b14      	ldr	r3, [pc, #80]	; (800193c <send_data+0x17c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2101      	movs	r1, #1
 80018ee:	4618      	mov	r0, r3
 80018f0:	f00c f888 	bl	800da04 <xQueueSemaphoreTake>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00c      	beq.n	8001914 <send_data+0x154>
 80018fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fc6e 	bl	80001e0 <strlen>
 8001904:	4603      	mov	r3, r0
 8001906:	b29a      	uxth	r2, r3
 8001908:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800190c:	4611      	mov	r1, r2
 800190e:	4618      	mov	r0, r3
 8001910:	f00e fc62 	bl	80101d8 <CDC_Transmit_FS>
 8001914:	4b09      	ldr	r3, [pc, #36]	; (800193c <send_data+0x17c>)
 8001916:	6818      	ldr	r0, [r3, #0]
 8001918:	2300      	movs	r3, #0
 800191a:	2200      	movs	r2, #0
 800191c:	2100      	movs	r1, #0
 800191e:	f00b fdf7 	bl	800d510 <xQueueGenericSend>
		n++;
 8001922:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001924:	3301      	adds	r3, #1
 8001926:	65bb      	str	r3, [r7, #88]	; 0x58
	for(;;){
 8001928:	e779      	b.n	800181e <send_data+0x5e>
}
 800192a:	3760      	adds	r7, #96	; 0x60
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	10624dd3 	.word	0x10624dd3
 8001934:	51eb851f 	.word	0x51eb851f
 8001938:	080122dc 	.word	0x080122dc
 800193c:	20002200 	.word	0x20002200

08001940 <start_send_data_tasks>:


static bool start_send_data_tasks(void){
 8001940:	b580      	push	{r7, lr}
 8001942:	b08c      	sub	sp, #48	; 0x30
 8001944:	af02      	add	r7, sp, #8
	BaseType_t ret = pdTRUE;
 8001946:	2301      	movs	r3, #1
 8001948:	607b      	str	r3, [r7, #4]
	uint32_t settings_in_bits = 0UL;
 800194a:	2300      	movs	r3, #0
 800194c:	627b      	str	r3, [r7, #36]	; 0x24

	settings_in_bits = 0<<31; //1 element array
 800194e:	2300      	movs	r3, #0
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
	settings_in_bits += 1<<15; // time in ms
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < sizeof(one_1)/sizeof(one_1[0]); i++){
 800195a:	2300      	movs	r3, #0
 800195c:	623b      	str	r3, [r7, #32]
 800195e:	e021      	b.n	80019a4 <start_send_data_tasks+0x64>
	  settings_in_bits += one_1[i]; //type of data
 8001960:	4a9c      	ldr	r2, [pc, #624]	; (8001bd4 <start_send_data_tasks+0x294>)
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	4413      	add	r3, r2
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	4413      	add	r3, r2
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
	  ret = xTaskCreate(send_data, "send_data", 128*2, (void*)settings_in_bits, 25, NULL);
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	2200      	movs	r2, #0
 8001974:	9201      	str	r2, [sp, #4]
 8001976:	2219      	movs	r2, #25
 8001978:	9200      	str	r2, [sp, #0]
 800197a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800197e:	4996      	ldr	r1, [pc, #600]	; (8001bd8 <start_send_data_tasks+0x298>)
 8001980:	4896      	ldr	r0, [pc, #600]	; (8001bdc <start_send_data_tasks+0x29c>)
 8001982:	f00c fb2e 	bl	800dfe2 <xTaskCreate>
 8001986:	6078      	str	r0, [r7, #4]
	  if(ret != pdPASS) return false;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d001      	beq.n	8001992 <start_send_data_tasks+0x52>
 800198e:	2300      	movs	r3, #0
 8001990:	e13d      	b.n	8001c0e <start_send_data_tasks+0x2ce>
	  settings_in_bits = (settings_in_bits>>15)<<15;
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001998:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < sizeof(one_1)/sizeof(one_1[0]); i++){
 800199e:	6a3b      	ldr	r3, [r7, #32]
 80019a0:	3301      	adds	r3, #1
 80019a2:	623b      	str	r3, [r7, #32]
 80019a4:	6a3b      	ldr	r3, [r7, #32]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d9da      	bls.n	8001960 <start_send_data_tasks+0x20>
	}

	settings_in_bits = 0<<31; //1 element array
 80019aa:	2300      	movs	r3, #0
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
	settings_in_bits += 10<<15; // time in ms
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < sizeof(one_10)/sizeof(one_10[0]); i++){
 80019b6:	2300      	movs	r3, #0
 80019b8:	61fb      	str	r3, [r7, #28]
 80019ba:	e021      	b.n	8001a00 <start_send_data_tasks+0xc0>
	  settings_in_bits += one_10[i]; //type of data
 80019bc:	4a88      	ldr	r2, [pc, #544]	; (8001be0 <start_send_data_tasks+0x2a0>)
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	4413      	add	r3, r2
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	4413      	add	r3, r2
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
	  ret = xTaskCreate(send_data, "send_data", 128*2, (void*)settings_in_bits, 25, NULL);
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	2200      	movs	r2, #0
 80019d0:	9201      	str	r2, [sp, #4]
 80019d2:	2219      	movs	r2, #25
 80019d4:	9200      	str	r2, [sp, #0]
 80019d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019da:	497f      	ldr	r1, [pc, #508]	; (8001bd8 <start_send_data_tasks+0x298>)
 80019dc:	487f      	ldr	r0, [pc, #508]	; (8001bdc <start_send_data_tasks+0x29c>)
 80019de:	f00c fb00 	bl	800dfe2 <xTaskCreate>
 80019e2:	6078      	str	r0, [r7, #4]
	  if(ret != pdPASS) return false;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d001      	beq.n	80019ee <start_send_data_tasks+0xae>
 80019ea:	2300      	movs	r3, #0
 80019ec:	e10f      	b.n	8001c0e <start_send_data_tasks+0x2ce>
	  settings_in_bits = (settings_in_bits>>15)<<15;
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80019f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < sizeof(one_10)/sizeof(one_10[0]); i++){
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3301      	adds	r3, #1
 80019fe:	61fb      	str	r3, [r7, #28]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d9da      	bls.n	80019bc <start_send_data_tasks+0x7c>
	}

	settings_in_bits = 0<<31; //1 element array
 8001a06:	2300      	movs	r3, #0
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
	settings_in_bits += 100<<15; // time in ms
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	f503 1348 	add.w	r3, r3, #3276800	; 0x320000
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < sizeof(one_100)/sizeof(one_100[0]); i++){
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
 8001a16:	e01e      	b.n	8001a56 <start_send_data_tasks+0x116>
	  settings_in_bits += one_100[i]; //type of data
 8001a18:	230e      	movs	r3, #14
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	4413      	add	r3, r2
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
	  ret = xTaskCreate(send_data, "send_data", 128*2, (void*)settings_in_bits, 25, NULL);
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	2200      	movs	r2, #0
 8001a26:	9201      	str	r2, [sp, #4]
 8001a28:	2219      	movs	r2, #25
 8001a2a:	9200      	str	r2, [sp, #0]
 8001a2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a30:	4969      	ldr	r1, [pc, #420]	; (8001bd8 <start_send_data_tasks+0x298>)
 8001a32:	486a      	ldr	r0, [pc, #424]	; (8001bdc <start_send_data_tasks+0x29c>)
 8001a34:	f00c fad5 	bl	800dfe2 <xTaskCreate>
 8001a38:	6078      	str	r0, [r7, #4]
	  if(ret != pdPASS) return false;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d001      	beq.n	8001a44 <start_send_data_tasks+0x104>
 8001a40:	2300      	movs	r3, #0
 8001a42:	e0e4      	b.n	8001c0e <start_send_data_tasks+0x2ce>
	  settings_in_bits = (settings_in_bits>>15)<<15;
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001a4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < sizeof(one_100)/sizeof(one_100[0]); i++){
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	3301      	adds	r3, #1
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0dd      	beq.n	8001a18 <start_send_data_tasks+0xd8>
	}

	settings_in_bits = 1<<31; //3 element array
 8001a5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
	settings_in_bits += 1<<15; // time in ms
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < sizeof(three_1)/sizeof(three_1[0]); i++){
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	e01e      	b.n	8001aae <start_send_data_tasks+0x16e>
	  settings_in_bits += three_1[i]; //type of data
 8001a70:	2306      	movs	r3, #6
 8001a72:	461a      	mov	r2, r3
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	4413      	add	r3, r2
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
	  ret = xTaskCreate(send_data, "send_data", 128*2, (void*)settings_in_bits, 25, NULL);
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	9201      	str	r2, [sp, #4]
 8001a80:	2219      	movs	r2, #25
 8001a82:	9200      	str	r2, [sp, #0]
 8001a84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a88:	4953      	ldr	r1, [pc, #332]	; (8001bd8 <start_send_data_tasks+0x298>)
 8001a8a:	4854      	ldr	r0, [pc, #336]	; (8001bdc <start_send_data_tasks+0x29c>)
 8001a8c:	f00c faa9 	bl	800dfe2 <xTaskCreate>
 8001a90:	6078      	str	r0, [r7, #4]
	  if(ret != pdPASS) return false;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d001      	beq.n	8001a9c <start_send_data_tasks+0x15c>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e0b8      	b.n	8001c0e <start_send_data_tasks+0x2ce>
	  settings_in_bits = (settings_in_bits>>15)<<15;
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001aa2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < sizeof(three_1)/sizeof(three_1[0]); i++){
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0dd      	beq.n	8001a70 <start_send_data_tasks+0x130>
	}
	settings_in_bits = 1<<31; //3 element array
 8001ab4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
	settings_in_bits += 10<<15; // time in ms
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < sizeof(three_10)/sizeof(three_10[0]); i++){
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	e021      	b.n	8001b0c <start_send_data_tasks+0x1cc>
	  settings_in_bits += three_10[i]; //type of data
 8001ac8:	4a46      	ldr	r2, [pc, #280]	; (8001be4 <start_send_data_tasks+0x2a4>)
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	4413      	add	r3, r2
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	4413      	add	r3, r2
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
	  ret = xTaskCreate(send_data, "send_data", 128*2, (void*)settings_in_bits, 25, NULL);
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	2200      	movs	r2, #0
 8001adc:	9201      	str	r2, [sp, #4]
 8001ade:	2219      	movs	r2, #25
 8001ae0:	9200      	str	r2, [sp, #0]
 8001ae2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ae6:	493c      	ldr	r1, [pc, #240]	; (8001bd8 <start_send_data_tasks+0x298>)
 8001ae8:	483c      	ldr	r0, [pc, #240]	; (8001bdc <start_send_data_tasks+0x29c>)
 8001aea:	f00c fa7a 	bl	800dfe2 <xTaskCreate>
 8001aee:	6078      	str	r0, [r7, #4]
	  if(ret != pdPASS) return false;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d001      	beq.n	8001afa <start_send_data_tasks+0x1ba>
 8001af6:	2300      	movs	r3, #0
 8001af8:	e089      	b.n	8001c0e <start_send_data_tasks+0x2ce>
	  settings_in_bits = (settings_in_bits>>15)<<15;
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001b00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < sizeof(three_10)/sizeof(three_10[0]); i++){
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d9da      	bls.n	8001ac8 <start_send_data_tasks+0x188>
	}

	settings_in_bits = 1<<31; //3 element array
 8001b12:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
	settings_in_bits += 100<<15; // time in ms
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	f503 1348 	add.w	r3, r3, #3276800	; 0x320000
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < sizeof(three_100)/sizeof(three_100[0]); i++){
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	e021      	b.n	8001b6a <start_send_data_tasks+0x22a>
	  settings_in_bits += three_100[i]; //type of data
 8001b26:	4a30      	ldr	r2, [pc, #192]	; (8001be8 <start_send_data_tasks+0x2a8>)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	4413      	add	r3, r2
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
	  ret = xTaskCreate(send_data, "send_data", 128*2, (void*)settings_in_bits, 25, NULL);
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	2200      	movs	r2, #0
 8001b3a:	9201      	str	r2, [sp, #4]
 8001b3c:	2219      	movs	r2, #25
 8001b3e:	9200      	str	r2, [sp, #0]
 8001b40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b44:	4924      	ldr	r1, [pc, #144]	; (8001bd8 <start_send_data_tasks+0x298>)
 8001b46:	4825      	ldr	r0, [pc, #148]	; (8001bdc <start_send_data_tasks+0x29c>)
 8001b48:	f00c fa4b 	bl	800dfe2 <xTaskCreate>
 8001b4c:	6078      	str	r0, [r7, #4]
	  if(ret != pdPASS) return false;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d001      	beq.n	8001b58 <start_send_data_tasks+0x218>
 8001b54:	2300      	movs	r3, #0
 8001b56:	e05a      	b.n	8001c0e <start_send_data_tasks+0x2ce>
	  settings_in_bits = (settings_in_bits>>15)<<15;
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001b5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < sizeof(three_100)/sizeof(three_100[0]); i++){
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	3301      	adds	r3, #1
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d9da      	bls.n	8001b26 <start_send_data_tasks+0x1e6>
	}

	settings_in_bits = 1<<31; //3 element array
 8001b70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
	settings_in_bits += rand()%1000<<15; // time in ms
 8001b76:	f00f f97d 	bl	8010e74 <rand>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <start_send_data_tasks+0x2ac>)
 8001b7e:	fb83 1302 	smull	r1, r3, r3, r2
 8001b82:	1199      	asrs	r1, r3, #6
 8001b84:	17d3      	asrs	r3, r2, #31
 8001b86:	1acb      	subs	r3, r1, r3
 8001b88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b8c:	fb01 f303 	mul.w	r3, r1, r3
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	03db      	lsls	r3, r3, #15
 8001b94:	461a      	mov	r2, r3
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	4413      	add	r3, r2
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < sizeof(three_ap)/sizeof(three_ap[0]); i++){
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	e031      	b.n	8001c06 <start_send_data_tasks+0x2c6>
	  settings_in_bits += three_ap[i]; //type of data
 8001ba2:	4a13      	ldr	r2, [pc, #76]	; (8001bf0 <start_send_data_tasks+0x2b0>)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	4413      	add	r3, r2
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
	  ret = xTaskCreate(send_data, "send_data", 128*2, (void*)settings_in_bits, 25, NULL);
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	9201      	str	r2, [sp, #4]
 8001bb8:	2219      	movs	r2, #25
 8001bba:	9200      	str	r2, [sp, #0]
 8001bbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bc0:	4905      	ldr	r1, [pc, #20]	; (8001bd8 <start_send_data_tasks+0x298>)
 8001bc2:	4806      	ldr	r0, [pc, #24]	; (8001bdc <start_send_data_tasks+0x29c>)
 8001bc4:	f00c fa0d 	bl	800dfe2 <xTaskCreate>
 8001bc8:	6078      	str	r0, [r7, #4]
	  if(ret != pdPASS) return false;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d011      	beq.n	8001bf4 <start_send_data_tasks+0x2b4>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	e01c      	b.n	8001c0e <start_send_data_tasks+0x2ce>
 8001bd4:	080123b0 	.word	0x080123b0
 8001bd8:	080122fc 	.word	0x080122fc
 8001bdc:	080017c1 	.word	0x080017c1
 8001be0:	080123b4 	.word	0x080123b4
 8001be4:	080123b8 	.word	0x080123b8
 8001be8:	080123c0 	.word	0x080123c0
 8001bec:	10624dd3 	.word	0x10624dd3
 8001bf0:	080123c4 	.word	0x080123c4
	  settings_in_bits = (settings_in_bits>>15)<<15;
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001bfa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < sizeof(three_ap)/sizeof(three_ap[0]); i++){
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	3301      	adds	r3, #1
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d9ca      	bls.n	8001ba2 <start_send_data_tasks+0x262>
	}
	return true;
 8001c0c:	2301      	movs	r3, #1
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3728      	adds	r7, #40	; 0x28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop

08001c18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1e:	f107 030c 	add.w	r3, r7, #12
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	60da      	str	r2, [r3, #12]
 8001c2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	4b2a      	ldr	r3, [pc, #168]	; (8001cdc <MX_GPIO_Init+0xc4>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a29      	ldr	r2, [pc, #164]	; (8001cdc <MX_GPIO_Init+0xc4>)
 8001c38:	f043 0304 	orr.w	r3, r3, #4
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <MX_GPIO_Init+0xc4>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	4b23      	ldr	r3, [pc, #140]	; (8001cdc <MX_GPIO_Init+0xc4>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a22      	ldr	r2, [pc, #136]	; (8001cdc <MX_GPIO_Init+0xc4>)
 8001c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b20      	ldr	r3, [pc, #128]	; (8001cdc <MX_GPIO_Init+0xc4>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c62:	607b      	str	r3, [r7, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	603b      	str	r3, [r7, #0]
 8001c6a:	4b1c      	ldr	r3, [pc, #112]	; (8001cdc <MX_GPIO_Init+0xc4>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a1b      	ldr	r2, [pc, #108]	; (8001cdc <MX_GPIO_Init+0xc4>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b19      	ldr	r3, [pc, #100]	; (8001cdc <MX_GPIO_Init+0xc4>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c82:	2200      	movs	r2, #0
 8001c84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c88:	4815      	ldr	r0, [pc, #84]	; (8001ce0 <MX_GPIO_Init+0xc8>)
 8001c8a:	f000 fdd9 	bl	8002840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2110      	movs	r1, #16
 8001c92:	4814      	ldr	r0, [pc, #80]	; (8001ce4 <MX_GPIO_Init+0xcc>)
 8001c94:	f000 fdd4 	bl	8002840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001caa:	f107 030c 	add.w	r3, r7, #12
 8001cae:	4619      	mov	r1, r3
 8001cb0:	480b      	ldr	r0, [pc, #44]	; (8001ce0 <MX_GPIO_Init+0xc8>)
 8001cb2:	f000 fc41 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001cb6:	2310      	movs	r3, #16
 8001cb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc6:	f107 030c 	add.w	r3, r7, #12
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <MX_GPIO_Init+0xcc>)
 8001cce:	f000 fc33 	bl	8002538 <HAL_GPIO_Init>

}
 8001cd2:	bf00      	nop
 8001cd4:	3720      	adds	r7, #32
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40020800 	.word	0x40020800
 8001ce4:	40020000 	.word	0x40020000

08001ce8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cec:	f000 fadc 	bl	80022a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cf0:	f000 f80e 	bl	8001d10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  int i = SDdcard_ieie();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cf4:	f7ff ff90 	bl	8001c18 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001cf8:	f000 f890 	bl	8001e1c <MX_SPI1_Init>
  MX_FATFS_Init();
 8001cfc:	f004 ffac 	bl	8006c58 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001d00:	f00b f904 	bl	800cf0c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001d04:	f7ff fcfc 	bl	8001700 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001d08:	f00b f924 	bl	800cf54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d0c:	e7fe      	b.n	8001d0c <main+0x24>
	...

08001d10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b094      	sub	sp, #80	; 0x50
 8001d14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d16:	f107 0320 	add.w	r3, r7, #32
 8001d1a:	2230      	movs	r2, #48	; 0x30
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f00e ffdd 	bl	8010cde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d24:	f107 030c 	add.w	r3, r7, #12
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d34:	2300      	movs	r3, #0
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	4b2a      	ldr	r3, [pc, #168]	; (8001de4 <SystemClock_Config+0xd4>)
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	4a29      	ldr	r2, [pc, #164]	; (8001de4 <SystemClock_Config+0xd4>)
 8001d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d42:	6413      	str	r3, [r2, #64]	; 0x40
 8001d44:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <SystemClock_Config+0xd4>)
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d50:	2300      	movs	r3, #0
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	4b24      	ldr	r3, [pc, #144]	; (8001de8 <SystemClock_Config+0xd8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d5c:	4a22      	ldr	r2, [pc, #136]	; (8001de8 <SystemClock_Config+0xd8>)
 8001d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <SystemClock_Config+0xd8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001d70:	2303      	movs	r3, #3
 8001d72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d7e:	2310      	movs	r3, #16
 8001d80:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d82:	2302      	movs	r3, #2
 8001d84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001d8c:	230f      	movs	r3, #15
 8001d8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001d90:	2390      	movs	r3, #144	; 0x90
 8001d92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d94:	2302      	movs	r3, #2
 8001d96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001d98:	2305      	movs	r3, #5
 8001d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d9c:	f107 0320 	add.w	r3, r7, #32
 8001da0:	4618      	mov	r0, r3
 8001da2:	f001 ffe3 	bl	8003d6c <HAL_RCC_OscConfig>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001dac:	f000 f830 	bl	8001e10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001db0:	230f      	movs	r3, #15
 8001db2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001db4:	2300      	movs	r3, #0
 8001db6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001dc4:	f107 030c 	add.w	r3, r7, #12
 8001dc8:	2100      	movs	r1, #0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f002 fa46 	bl	800425c <HAL_RCC_ClockConfig>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001dd6:	f000 f81b 	bl	8001e10 <Error_Handler>
  }
}
 8001dda:	bf00      	nop
 8001ddc:	3750      	adds	r7, #80	; 0x50
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40007000 	.word	0x40007000

08001dec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d101      	bne.n	8001e02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001dfe:	f000 fa75 	bl	80022ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40010000 	.word	0x40010000

08001e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e14:	b672      	cpsid	i
}
 8001e16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <Error_Handler+0x8>
	...

08001e1c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001e20:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <MX_SPI1_Init+0x64>)
 8001e22:	4a18      	ldr	r2, [pc, #96]	; (8001e84 <MX_SPI1_Init+0x68>)
 8001e24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e26:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <MX_SPI1_Init+0x64>)
 8001e28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e2e:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <MX_SPI1_Init+0x64>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e34:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <MX_SPI1_Init+0x64>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e3a:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <MX_SPI1_Init+0x64>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e40:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <MX_SPI1_Init+0x64>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <MX_SPI1_Init+0x64>)
 8001e48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <MX_SPI1_Init+0x64>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e54:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <MX_SPI1_Init+0x64>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e5a:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <MX_SPI1_Init+0x64>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <MX_SPI1_Init+0x64>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <MX_SPI1_Init+0x64>)
 8001e68:	220a      	movs	r2, #10
 8001e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e6c:	4804      	ldr	r0, [pc, #16]	; (8001e80 <MX_SPI1_Init+0x64>)
 8001e6e:	f002 fbf3 	bl	8004658 <HAL_SPI_Init>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001e78:	f7ff ffca 	bl	8001e10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20002214 	.word	0x20002214
 8001e84:	40013000 	.word	0x40013000

08001e88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	; 0x28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a19      	ldr	r2, [pc, #100]	; (8001f0c <HAL_SPI_MspInit+0x84>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d12b      	bne.n	8001f02 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <HAL_SPI_MspInit+0x88>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	4a17      	ldr	r2, [pc, #92]	; (8001f10 <HAL_SPI_MspInit+0x88>)
 8001eb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eba:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <HAL_SPI_MspInit+0x88>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <HAL_SPI_MspInit+0x88>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a10      	ldr	r2, [pc, #64]	; (8001f10 <HAL_SPI_MspInit+0x88>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <HAL_SPI_MspInit+0x88>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ee2:	23e0      	movs	r3, #224	; 0xe0
 8001ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ef2:	2305      	movs	r3, #5
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef6:	f107 0314 	add.w	r3, r7, #20
 8001efa:	4619      	mov	r1, r3
 8001efc:	4805      	ldr	r0, [pc, #20]	; (8001f14 <HAL_SPI_MspInit+0x8c>)
 8001efe:	f000 fb1b 	bl	8002538 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001f02:	bf00      	nop
 8001f04:	3728      	adds	r7, #40	; 0x28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40013000 	.word	0x40013000
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40020000 	.word	0x40020000

08001f18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	607b      	str	r3, [r7, #4]
 8001f22:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <HAL_MspInit+0x54>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	4a11      	ldr	r2, [pc, #68]	; (8001f6c <HAL_MspInit+0x54>)
 8001f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2e:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <HAL_MspInit+0x54>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f36:	607b      	str	r3, [r7, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	603b      	str	r3, [r7, #0]
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <HAL_MspInit+0x54>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	4a0a      	ldr	r2, [pc, #40]	; (8001f6c <HAL_MspInit+0x54>)
 8001f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f48:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4a:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <HAL_MspInit+0x54>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f52:	603b      	str	r3, [r7, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	210f      	movs	r1, #15
 8001f5a:	f06f 0001 	mvn.w	r0, #1
 8001f5e:	f000 fac1 	bl	80024e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	.word	0x40023800

08001f70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08c      	sub	sp, #48	; 0x30
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001f80:	2200      	movs	r2, #0
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	2019      	movs	r0, #25
 8001f86:	f000 faad 	bl	80024e4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f8a:	2019      	movs	r0, #25
 8001f8c:	f000 fac6 	bl	800251c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	4b1e      	ldr	r3, [pc, #120]	; (8002010 <HAL_InitTick+0xa0>)
 8001f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f98:	4a1d      	ldr	r2, [pc, #116]	; (8002010 <HAL_InitTick+0xa0>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa0:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <HAL_InitTick+0xa0>)
 8001fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fac:	f107 0210 	add.w	r2, r7, #16
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f002 fb1c 	bl	80045f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001fbc:	f002 fb06 	bl	80045cc <HAL_RCC_GetPCLK2Freq>
 8001fc0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc4:	4a13      	ldr	r2, [pc, #76]	; (8002014 <HAL_InitTick+0xa4>)
 8001fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fca:	0c9b      	lsrs	r3, r3, #18
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001fd0:	4b11      	ldr	r3, [pc, #68]	; (8002018 <HAL_InitTick+0xa8>)
 8001fd2:	4a12      	ldr	r2, [pc, #72]	; (800201c <HAL_InitTick+0xac>)
 8001fd4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001fd6:	4b10      	ldr	r3, [pc, #64]	; (8002018 <HAL_InitTick+0xa8>)
 8001fd8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fdc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001fde:	4a0e      	ldr	r2, [pc, #56]	; (8002018 <HAL_InitTick+0xa8>)
 8001fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <HAL_InitTick+0xa8>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fea:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <HAL_InitTick+0xa8>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001ff0:	4809      	ldr	r0, [pc, #36]	; (8002018 <HAL_InitTick+0xa8>)
 8001ff2:	f002 ff63 	bl	8004ebc <HAL_TIM_Base_Init>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d104      	bne.n	8002006 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001ffc:	4806      	ldr	r0, [pc, #24]	; (8002018 <HAL_InitTick+0xa8>)
 8001ffe:	f002 ffb7 	bl	8004f70 <HAL_TIM_Base_Start_IT>
 8002002:	4603      	mov	r3, r0
 8002004:	e000      	b.n	8002008 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
}
 8002008:	4618      	mov	r0, r3
 800200a:	3730      	adds	r7, #48	; 0x30
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40023800 	.word	0x40023800
 8002014:	431bde83 	.word	0x431bde83
 8002018:	2000226c 	.word	0x2000226c
 800201c:	40010000 	.word	0x40010000

08002020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002024:	e7fe      	b.n	8002024 <NMI_Handler+0x4>

08002026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800202a:	e7fe      	b.n	800202a <HardFault_Handler+0x4>

0800202c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002030:	e7fe      	b.n	8002030 <MemManage_Handler+0x4>

08002032 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002036:	e7fe      	b.n	8002036 <BusFault_Handler+0x4>

08002038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800203c:	e7fe      	b.n	800203c <UsageFault_Handler+0x4>

0800203e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	if(Timer1 > 0)
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d005      	beq.n	8002064 <TIM1_UP_TIM10_IRQHandler+0x18>
		Timer1--;
 8002058:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <TIM1_UP_TIM10_IRQHandler+0x38>)
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	3b01      	subs	r3, #1
 800205e:	b29a      	uxth	r2, r3
 8002060:	4b08      	ldr	r3, [pc, #32]	; (8002084 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8002062:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8002064:	4b08      	ldr	r3, [pc, #32]	; (8002088 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d005      	beq.n	8002078 <TIM1_UP_TIM10_IRQHandler+0x2c>
		Timer2--;
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	3b01      	subs	r3, #1
 8002072:	b29a      	uxth	r2, r3
 8002074:	4b04      	ldr	r3, [pc, #16]	; (8002088 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8002076:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002078:	4804      	ldr	r0, [pc, #16]	; (800208c <TIM1_UP_TIM10_IRQHandler+0x40>)
 800207a:	f002 ffdb 	bl	8005034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20002208 	.word	0x20002208
 8002088:	2000220a 	.word	0x2000220a
 800208c:	2000226c 	.word	0x2000226c

08002090 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002094:	4802      	ldr	r0, [pc, #8]	; (80020a0 <OTG_FS_IRQHandler+0x10>)
 8002096:	f000 fd3c 	bl	8002b12 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	2000b620 	.word	0x2000b620

080020a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
	return 1;
 80020a8:	2301      	movs	r3, #1
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <_kill>:

int _kill(int pid, int sig)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020be:	f00e fcdd 	bl	8010a7c <__errno>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2216      	movs	r2, #22
 80020c6:	601a      	str	r2, [r3, #0]
	return -1;
 80020c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <_exit>:

void _exit (int status)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020dc:	f04f 31ff 	mov.w	r1, #4294967295
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff ffe7 	bl	80020b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020e6:	e7fe      	b.n	80020e6 <_exit+0x12>

080020e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	e00a      	b.n	8002110 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020fa:	f3af 8000 	nop.w
 80020fe:	4601      	mov	r1, r0
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	60ba      	str	r2, [r7, #8]
 8002106:	b2ca      	uxtb	r2, r1
 8002108:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	3301      	adds	r3, #1
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	429a      	cmp	r2, r3
 8002116:	dbf0      	blt.n	80020fa <_read+0x12>
	}

return len;
 8002118:	687b      	ldr	r3, [r7, #4]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b086      	sub	sp, #24
 8002126:	af00      	add	r7, sp, #0
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	e009      	b.n	8002148 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	60ba      	str	r2, [r7, #8]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	3301      	adds	r3, #1
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	429a      	cmp	r2, r3
 800214e:	dbf1      	blt.n	8002134 <_write+0x12>
	}
	return len;
 8002150:	687b      	ldr	r3, [r7, #4]
}
 8002152:	4618      	mov	r0, r3
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <_close>:

int _close(int file)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
	return -1;
 8002162:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002182:	605a      	str	r2, [r3, #4]
	return 0;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <_isatty>:

int _isatty(int file)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
	return 1;
 800219a:	2301      	movs	r3, #1
}
 800219c:	4618      	mov	r0, r3
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
	return 0;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021cc:	4a14      	ldr	r2, [pc, #80]	; (8002220 <_sbrk+0x5c>)
 80021ce:	4b15      	ldr	r3, [pc, #84]	; (8002224 <_sbrk+0x60>)
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021d8:	4b13      	ldr	r3, [pc, #76]	; (8002228 <_sbrk+0x64>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d102      	bne.n	80021e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021e0:	4b11      	ldr	r3, [pc, #68]	; (8002228 <_sbrk+0x64>)
 80021e2:	4a12      	ldr	r2, [pc, #72]	; (800222c <_sbrk+0x68>)
 80021e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021e6:	4b10      	ldr	r3, [pc, #64]	; (8002228 <_sbrk+0x64>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4413      	add	r3, r2
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d207      	bcs.n	8002204 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021f4:	f00e fc42 	bl	8010a7c <__errno>
 80021f8:	4603      	mov	r3, r0
 80021fa:	220c      	movs	r2, #12
 80021fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002202:	e009      	b.n	8002218 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002204:	4b08      	ldr	r3, [pc, #32]	; (8002228 <_sbrk+0x64>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800220a:	4b07      	ldr	r3, [pc, #28]	; (8002228 <_sbrk+0x64>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4413      	add	r3, r2
 8002212:	4a05      	ldr	r2, [pc, #20]	; (8002228 <_sbrk+0x64>)
 8002214:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002216:	68fb      	ldr	r3, [r7, #12]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20010000 	.word	0x20010000
 8002224:	00000400 	.word	0x00000400
 8002228:	200022b4 	.word	0x200022b4
 800222c:	2000bd60 	.word	0x2000bd60

08002230 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002234:	4b06      	ldr	r3, [pc, #24]	; (8002250 <SystemInit+0x20>)
 8002236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223a:	4a05      	ldr	r2, [pc, #20]	; (8002250 <SystemInit+0x20>)
 800223c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002240:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002254:	f8df d034 	ldr.w	sp, [pc, #52]	; 800228c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002258:	480d      	ldr	r0, [pc, #52]	; (8002290 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800225a:	490e      	ldr	r1, [pc, #56]	; (8002294 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800225c:	4a0e      	ldr	r2, [pc, #56]	; (8002298 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800225e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002260:	e002      	b.n	8002268 <LoopCopyDataInit>

08002262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002266:	3304      	adds	r3, #4

08002268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800226a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800226c:	d3f9      	bcc.n	8002262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800226e:	4a0b      	ldr	r2, [pc, #44]	; (800229c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002270:	4c0b      	ldr	r4, [pc, #44]	; (80022a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002274:	e001      	b.n	800227a <LoopFillZerobss>

08002276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002278:	3204      	adds	r2, #4

0800227a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800227a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800227c:	d3fb      	bcc.n	8002276 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800227e:	f7ff ffd7 	bl	8002230 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002282:	f00e fcf7 	bl	8010c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002286:	f7ff fd2f 	bl	8001ce8 <main>
  bx  lr    
 800228a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800228c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002294:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8002298:	0801299c 	.word	0x0801299c
  ldr r2, =_sbss
 800229c:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80022a0:	2000bd5c 	.word	0x2000bd5c

080022a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022a4:	e7fe      	b.n	80022a4 <ADC_IRQHandler>
	...

080022a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022ac:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <HAL_Init+0x40>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a0d      	ldr	r2, [pc, #52]	; (80022e8 <HAL_Init+0x40>)
 80022b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_Init+0x40>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <HAL_Init+0x40>)
 80022be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022c4:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <HAL_Init+0x40>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a07      	ldr	r2, [pc, #28]	; (80022e8 <HAL_Init+0x40>)
 80022ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d0:	2003      	movs	r0, #3
 80022d2:	f000 f8fc 	bl	80024ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022d6:	200f      	movs	r0, #15
 80022d8:	f7ff fe4a 	bl	8001f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022dc:	f7ff fe1c 	bl	8001f18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40023c00 	.word	0x40023c00

080022ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_IncTick+0x20>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_IncTick+0x24>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4413      	add	r3, r2
 80022fc:	4a04      	ldr	r2, [pc, #16]	; (8002310 <HAL_IncTick+0x24>)
 80022fe:	6013      	str	r3, [r2, #0]
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	2000000c 	.word	0x2000000c
 8002310:	200022b8 	.word	0x200022b8

08002314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return uwTick;
 8002318:	4b03      	ldr	r3, [pc, #12]	; (8002328 <HAL_GetTick+0x14>)
 800231a:	681b      	ldr	r3, [r3, #0]
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	200022b8 	.word	0x200022b8

0800232c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002334:	f7ff ffee 	bl	8002314 <HAL_GetTick>
 8002338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002344:	d005      	beq.n	8002352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002346:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <HAL_Delay+0x44>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4413      	add	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002352:	bf00      	nop
 8002354:	f7ff ffde 	bl	8002314 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	429a      	cmp	r2, r3
 8002362:	d8f7      	bhi.n	8002354 <HAL_Delay+0x28>
  {
  }
}
 8002364:	bf00      	nop
 8002366:	bf00      	nop
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	2000000c 	.word	0x2000000c

08002374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002390:	4013      	ands	r3, r2
 8002392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800239c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023a6:	4a04      	ldr	r2, [pc, #16]	; (80023b8 <__NVIC_SetPriorityGrouping+0x44>)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	60d3      	str	r3, [r2, #12]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c0:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <__NVIC_GetPriorityGrouping+0x18>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	0a1b      	lsrs	r3, r3, #8
 80023c6:	f003 0307 	and.w	r3, r3, #7
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	db0b      	blt.n	8002402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	f003 021f 	and.w	r2, r3, #31
 80023f0:	4907      	ldr	r1, [pc, #28]	; (8002410 <__NVIC_EnableIRQ+0x38>)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	2001      	movs	r0, #1
 80023fa:	fa00 f202 	lsl.w	r2, r0, r2
 80023fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	e000e100 	.word	0xe000e100

08002414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	6039      	str	r1, [r7, #0]
 800241e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002424:	2b00      	cmp	r3, #0
 8002426:	db0a      	blt.n	800243e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	b2da      	uxtb	r2, r3
 800242c:	490c      	ldr	r1, [pc, #48]	; (8002460 <__NVIC_SetPriority+0x4c>)
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002432:	0112      	lsls	r2, r2, #4
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	440b      	add	r3, r1
 8002438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800243c:	e00a      	b.n	8002454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	b2da      	uxtb	r2, r3
 8002442:	4908      	ldr	r1, [pc, #32]	; (8002464 <__NVIC_SetPriority+0x50>)
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	3b04      	subs	r3, #4
 800244c:	0112      	lsls	r2, r2, #4
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	440b      	add	r3, r1
 8002452:	761a      	strb	r2, [r3, #24]
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	e000e100 	.word	0xe000e100
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002468:	b480      	push	{r7}
 800246a:	b089      	sub	sp, #36	; 0x24
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f1c3 0307 	rsb	r3, r3, #7
 8002482:	2b04      	cmp	r3, #4
 8002484:	bf28      	it	cs
 8002486:	2304      	movcs	r3, #4
 8002488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3304      	adds	r3, #4
 800248e:	2b06      	cmp	r3, #6
 8002490:	d902      	bls.n	8002498 <NVIC_EncodePriority+0x30>
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3b03      	subs	r3, #3
 8002496:	e000      	b.n	800249a <NVIC_EncodePriority+0x32>
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800249c:	f04f 32ff 	mov.w	r2, #4294967295
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43da      	mvns	r2, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	401a      	ands	r2, r3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b0:	f04f 31ff 	mov.w	r1, #4294967295
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ba:	43d9      	mvns	r1, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c0:	4313      	orrs	r3, r2
         );
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3724      	adds	r7, #36	; 0x24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff ff4c 	bl	8002374 <__NVIC_SetPriorityGrouping>
}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024f6:	f7ff ff61 	bl	80023bc <__NVIC_GetPriorityGrouping>
 80024fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	68b9      	ldr	r1, [r7, #8]
 8002500:	6978      	ldr	r0, [r7, #20]
 8002502:	f7ff ffb1 	bl	8002468 <NVIC_EncodePriority>
 8002506:	4602      	mov	r2, r0
 8002508:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250c:	4611      	mov	r1, r2
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff ff80 	bl	8002414 <__NVIC_SetPriority>
}
 8002514:	bf00      	nop
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff ff54 	bl	80023d8 <__NVIC_EnableIRQ>
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002538:	b480      	push	{r7}
 800253a:	b089      	sub	sp, #36	; 0x24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800254a:	2300      	movs	r3, #0
 800254c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	e159      	b.n	8002808 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002554:	2201      	movs	r2, #1
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	4013      	ands	r3, r2
 8002566:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	429a      	cmp	r2, r3
 800256e:	f040 8148 	bne.w	8002802 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	2b01      	cmp	r3, #1
 800257c:	d005      	beq.n	800258a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002586:	2b02      	cmp	r3, #2
 8002588:	d130      	bne.n	80025ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	2203      	movs	r2, #3
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4013      	ands	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025c0:	2201      	movs	r2, #1
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	091b      	lsrs	r3, r3, #4
 80025d6:	f003 0201 	and.w	r2, r3, #1
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d017      	beq.n	8002628 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	2203      	movs	r2, #3
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d123      	bne.n	800267c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	08da      	lsrs	r2, r3, #3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3208      	adds	r2, #8
 800263c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002640:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	220f      	movs	r2, #15
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	08da      	lsrs	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3208      	adds	r2, #8
 8002676:	69b9      	ldr	r1, [r7, #24]
 8002678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	2203      	movs	r2, #3
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0203 	and.w	r2, r3, #3
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 80a2 	beq.w	8002802 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	4b57      	ldr	r3, [pc, #348]	; (8002820 <HAL_GPIO_Init+0x2e8>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	4a56      	ldr	r2, [pc, #344]	; (8002820 <HAL_GPIO_Init+0x2e8>)
 80026c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026cc:	6453      	str	r3, [r2, #68]	; 0x44
 80026ce:	4b54      	ldr	r3, [pc, #336]	; (8002820 <HAL_GPIO_Init+0x2e8>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026da:	4a52      	ldr	r2, [pc, #328]	; (8002824 <HAL_GPIO_Init+0x2ec>)
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	089b      	lsrs	r3, r3, #2
 80026e0:	3302      	adds	r3, #2
 80026e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	220f      	movs	r2, #15
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a49      	ldr	r2, [pc, #292]	; (8002828 <HAL_GPIO_Init+0x2f0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d019      	beq.n	800273a <HAL_GPIO_Init+0x202>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a48      	ldr	r2, [pc, #288]	; (800282c <HAL_GPIO_Init+0x2f4>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d013      	beq.n	8002736 <HAL_GPIO_Init+0x1fe>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a47      	ldr	r2, [pc, #284]	; (8002830 <HAL_GPIO_Init+0x2f8>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d00d      	beq.n	8002732 <HAL_GPIO_Init+0x1fa>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a46      	ldr	r2, [pc, #280]	; (8002834 <HAL_GPIO_Init+0x2fc>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d007      	beq.n	800272e <HAL_GPIO_Init+0x1f6>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a45      	ldr	r2, [pc, #276]	; (8002838 <HAL_GPIO_Init+0x300>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d101      	bne.n	800272a <HAL_GPIO_Init+0x1f2>
 8002726:	2304      	movs	r3, #4
 8002728:	e008      	b.n	800273c <HAL_GPIO_Init+0x204>
 800272a:	2307      	movs	r3, #7
 800272c:	e006      	b.n	800273c <HAL_GPIO_Init+0x204>
 800272e:	2303      	movs	r3, #3
 8002730:	e004      	b.n	800273c <HAL_GPIO_Init+0x204>
 8002732:	2302      	movs	r3, #2
 8002734:	e002      	b.n	800273c <HAL_GPIO_Init+0x204>
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <HAL_GPIO_Init+0x204>
 800273a:	2300      	movs	r3, #0
 800273c:	69fa      	ldr	r2, [r7, #28]
 800273e:	f002 0203 	and.w	r2, r2, #3
 8002742:	0092      	lsls	r2, r2, #2
 8002744:	4093      	lsls	r3, r2
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800274c:	4935      	ldr	r1, [pc, #212]	; (8002824 <HAL_GPIO_Init+0x2ec>)
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	089b      	lsrs	r3, r3, #2
 8002752:	3302      	adds	r3, #2
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800275a:	4b38      	ldr	r3, [pc, #224]	; (800283c <HAL_GPIO_Init+0x304>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800277e:	4a2f      	ldr	r2, [pc, #188]	; (800283c <HAL_GPIO_Init+0x304>)
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002784:	4b2d      	ldr	r3, [pc, #180]	; (800283c <HAL_GPIO_Init+0x304>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027a8:	4a24      	ldr	r2, [pc, #144]	; (800283c <HAL_GPIO_Init+0x304>)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027ae:	4b23      	ldr	r3, [pc, #140]	; (800283c <HAL_GPIO_Init+0x304>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027d2:	4a1a      	ldr	r2, [pc, #104]	; (800283c <HAL_GPIO_Init+0x304>)
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027d8:	4b18      	ldr	r3, [pc, #96]	; (800283c <HAL_GPIO_Init+0x304>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027fc:	4a0f      	ldr	r2, [pc, #60]	; (800283c <HAL_GPIO_Init+0x304>)
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3301      	adds	r3, #1
 8002806:	61fb      	str	r3, [r7, #28]
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	2b0f      	cmp	r3, #15
 800280c:	f67f aea2 	bls.w	8002554 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002810:	bf00      	nop
 8002812:	bf00      	nop
 8002814:	3724      	adds	r7, #36	; 0x24
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40023800 	.word	0x40023800
 8002824:	40013800 	.word	0x40013800
 8002828:	40020000 	.word	0x40020000
 800282c:	40020400 	.word	0x40020400
 8002830:	40020800 	.word	0x40020800
 8002834:	40020c00 	.word	0x40020c00
 8002838:	40021000 	.word	0x40021000
 800283c:	40013c00 	.word	0x40013c00

08002840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	807b      	strh	r3, [r7, #2]
 800284c:	4613      	mov	r3, r2
 800284e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002850:	787b      	ldrb	r3, [r7, #1]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002856:	887a      	ldrh	r2, [r7, #2]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800285c:	e003      	b.n	8002866 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800285e:	887b      	ldrh	r3, [r7, #2]
 8002860:	041a      	lsls	r2, r3, #16
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	619a      	str	r2, [r3, #24]
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002872:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002874:	b08f      	sub	sp, #60	; 0x3c
 8002876:	af0a      	add	r7, sp, #40	; 0x28
 8002878:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e10f      	b.n	8002aa4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d106      	bne.n	80028a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f00d fde2 	bl	8010468 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2203      	movs	r2, #3
 80028a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d102      	bne.n	80028be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f002 fe8f 	bl	80055e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	603b      	str	r3, [r7, #0]
 80028ce:	687e      	ldr	r6, [r7, #4]
 80028d0:	466d      	mov	r5, sp
 80028d2:	f106 0410 	add.w	r4, r6, #16
 80028d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80028e6:	1d33      	adds	r3, r6, #4
 80028e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028ea:	6838      	ldr	r0, [r7, #0]
 80028ec:	f002 fd66 	bl	80053bc <USB_CoreInit>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d005      	beq.n	8002902 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2202      	movs	r2, #2
 80028fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e0d0      	b.n	8002aa4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2100      	movs	r1, #0
 8002908:	4618      	mov	r0, r3
 800290a:	f002 fe7d 	bl	8005608 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800290e:	2300      	movs	r3, #0
 8002910:	73fb      	strb	r3, [r7, #15]
 8002912:	e04a      	b.n	80029aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002914:	7bfa      	ldrb	r2, [r7, #15]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4413      	add	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	333d      	adds	r3, #61	; 0x3d
 8002924:	2201      	movs	r2, #1
 8002926:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002928:	7bfa      	ldrb	r2, [r7, #15]
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	4413      	add	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	333c      	adds	r3, #60	; 0x3c
 8002938:	7bfa      	ldrb	r2, [r7, #15]
 800293a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800293c:	7bfa      	ldrb	r2, [r7, #15]
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	b298      	uxth	r0, r3
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	3344      	adds	r3, #68	; 0x44
 8002950:	4602      	mov	r2, r0
 8002952:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002954:	7bfa      	ldrb	r2, [r7, #15]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	3340      	adds	r3, #64	; 0x40
 8002964:	2200      	movs	r2, #0
 8002966:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002968:	7bfa      	ldrb	r2, [r7, #15]
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4413      	add	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	3348      	adds	r3, #72	; 0x48
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800297c:	7bfa      	ldrb	r2, [r7, #15]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	4413      	add	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	334c      	adds	r3, #76	; 0x4c
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002990:	7bfa      	ldrb	r2, [r7, #15]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	3354      	adds	r3, #84	; 0x54
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	3301      	adds	r3, #1
 80029a8:	73fb      	strb	r3, [r7, #15]
 80029aa:	7bfa      	ldrb	r2, [r7, #15]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d3af      	bcc.n	8002914 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029b4:	2300      	movs	r3, #0
 80029b6:	73fb      	strb	r3, [r7, #15]
 80029b8:	e044      	b.n	8002a44 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029ba:	7bfa      	ldrb	r2, [r7, #15]
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	4613      	mov	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	4413      	add	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	440b      	add	r3, r1
 80029c8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80029cc:	2200      	movs	r2, #0
 80029ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029d0:	7bfa      	ldrb	r2, [r7, #15]
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80029e2:	7bfa      	ldrb	r2, [r7, #15]
 80029e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029e6:	7bfa      	ldrb	r2, [r7, #15]
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	4613      	mov	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4413      	add	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029f8:	2200      	movs	r2, #0
 80029fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029fc:	7bfa      	ldrb	r2, [r7, #15]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	4413      	add	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a12:	7bfa      	ldrb	r2, [r7, #15]
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	440b      	add	r3, r1
 8002a20:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a28:	7bfa      	ldrb	r2, [r7, #15]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	4413      	add	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
 8002a40:	3301      	adds	r3, #1
 8002a42:	73fb      	strb	r3, [r7, #15]
 8002a44:	7bfa      	ldrb	r2, [r7, #15]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d3b5      	bcc.n	80029ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	687e      	ldr	r6, [r7, #4]
 8002a56:	466d      	mov	r5, sp
 8002a58:	f106 0410 	add.w	r4, r6, #16
 8002a5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a68:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a6c:	1d33      	adds	r3, r6, #4
 8002a6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a70:	6838      	ldr	r0, [r7, #0]
 8002a72:	f002 fe15 	bl	80056a0 <USB_DevInit>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e00d      	b.n	8002aa4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f003 ff64 	bl	800696a <USB_DevDisconnect>

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002aac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_PCD_Start+0x1c>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e020      	b.n	8002b0a <HAL_PCD_Start+0x5e>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d109      	bne.n	8002aec <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d005      	beq.n	8002aec <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f002 fd67 	bl	80055c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f003 ff14 	bl	8006928 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b12:	b590      	push	{r4, r7, lr}
 8002b14:	b08d      	sub	sp, #52	; 0x34
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f003 ffd2 	bl	8006ad2 <USB_GetMode>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f040 848a 	bne.w	800344a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f003 ff36 	bl	80069ac <USB_ReadInterrupts>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 8480 	beq.w	8003448 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	0a1b      	lsrs	r3, r3, #8
 8002b52:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f003 ff23 	bl	80069ac <USB_ReadInterrupts>
 8002b66:	4603      	mov	r3, r0
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d107      	bne.n	8002b80 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f002 0202 	and.w	r2, r2, #2
 8002b7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f003 ff11 	bl	80069ac <USB_ReadInterrupts>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f003 0310 	and.w	r3, r3, #16
 8002b90:	2b10      	cmp	r3, #16
 8002b92:	d161      	bne.n	8002c58 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699a      	ldr	r2, [r3, #24]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0210 	bic.w	r2, r2, #16
 8002ba2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	f003 020f 	and.w	r2, r3, #15
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	0c5b      	lsrs	r3, r3, #17
 8002bc8:	f003 030f 	and.w	r3, r3, #15
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d124      	bne.n	8002c1a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d035      	beq.n	8002c48 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	091b      	lsrs	r3, r3, #4
 8002be4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002be6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	461a      	mov	r2, r3
 8002bee:	6a38      	ldr	r0, [r7, #32]
 8002bf0:	f003 fd48 	bl	8006684 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	091b      	lsrs	r3, r3, #4
 8002bfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c00:	441a      	add	r2, r3
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	6a1a      	ldr	r2, [r3, #32]
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	091b      	lsrs	r3, r3, #4
 8002c0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c12:	441a      	add	r2, r3
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	621a      	str	r2, [r3, #32]
 8002c18:	e016      	b.n	8002c48 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	0c5b      	lsrs	r3, r3, #17
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	2b06      	cmp	r3, #6
 8002c24:	d110      	bne.n	8002c48 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c2c:	2208      	movs	r2, #8
 8002c2e:	4619      	mov	r1, r3
 8002c30:	6a38      	ldr	r0, [r7, #32]
 8002c32:	f003 fd27 	bl	8006684 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	6a1a      	ldr	r2, [r3, #32]
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c42:	441a      	add	r2, r3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699a      	ldr	r2, [r3, #24]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0210 	orr.w	r2, r2, #16
 8002c56:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f003 fea5 	bl	80069ac <USB_ReadInterrupts>
 8002c62:	4603      	mov	r3, r0
 8002c64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c68:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c6c:	f040 80a7 	bne.w	8002dbe <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f003 feaa 	bl	80069d2 <USB_ReadDevAllOutEpInterrupt>
 8002c7e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002c80:	e099      	b.n	8002db6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 808e 	beq.w	8002daa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	4611      	mov	r1, r2
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f003 fece 	bl	8006a3a <USB_ReadDevOutEPInterrupt>
 8002c9e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00c      	beq.n	8002cc4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	015a      	lsls	r2, r3, #5
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	2301      	movs	r3, #1
 8002cba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002cbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 fec2 	bl	8003a48 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00c      	beq.n	8002ce8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	015a      	lsls	r2, r3, #5
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cda:	461a      	mov	r2, r3
 8002cdc:	2308      	movs	r3, #8
 8002cde:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ce0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 ff98 	bl	8003c18 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	f003 0310 	and.w	r3, r3, #16
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d008      	beq.n	8002d04 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	015a      	lsls	r2, r3, #5
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cfe:	461a      	mov	r2, r3
 8002d00:	2310      	movs	r3, #16
 8002d02:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d030      	beq.n	8002d70 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d16:	2b80      	cmp	r3, #128	; 0x80
 8002d18:	d109      	bne.n	8002d2e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d2c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d30:	4613      	mov	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4413      	add	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	4413      	add	r3, r2
 8002d40:	3304      	adds	r3, #4
 8002d42:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	78db      	ldrb	r3, [r3, #3]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d108      	bne.n	8002d5e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	4619      	mov	r1, r3
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f00d fc81 	bl	8010660 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	015a      	lsls	r2, r3, #5
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	f003 0320 	and.w	r3, r3, #32
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d008      	beq.n	8002d8c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	015a      	lsls	r2, r3, #5
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d86:	461a      	mov	r2, r3
 8002d88:	2320      	movs	r3, #32
 8002d8a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d009      	beq.n	8002daa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	015a      	lsls	r2, r3, #5
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002da2:	461a      	mov	r2, r3
 8002da4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002da8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	3301      	adds	r3, #1
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db2:	085b      	lsrs	r3, r3, #1
 8002db4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f47f af62 	bne.w	8002c82 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f003 fdf2 	bl	80069ac <USB_ReadInterrupts>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dd2:	f040 80db 	bne.w	8002f8c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f003 fe13 	bl	8006a06 <USB_ReadDevAllInEpInterrupt>
 8002de0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002de6:	e0cd      	b.n	8002f84 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 80c2 	beq.w	8002f78 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	4611      	mov	r1, r2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f003 fe39 	bl	8006a76 <USB_ReadDevInEPInterrupt>
 8002e04:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d057      	beq.n	8002ec0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	2201      	movs	r2, #1
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	69f9      	ldr	r1, [r7, #28]
 8002e2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e30:	4013      	ands	r3, r2
 8002e32:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e40:	461a      	mov	r2, r3
 8002e42:	2301      	movs	r3, #1
 8002e44:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d132      	bne.n	8002eb4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e52:	4613      	mov	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4413      	add	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	334c      	adds	r3, #76	; 0x4c
 8002e5e:	6819      	ldr	r1, [r3, #0]
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e64:	4613      	mov	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4403      	add	r3, r0
 8002e6e:	3348      	adds	r3, #72	; 0x48
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4419      	add	r1, r3
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e78:	4613      	mov	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4403      	add	r3, r0
 8002e82:	334c      	adds	r3, #76	; 0x4c
 8002e84:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d113      	bne.n	8002eb4 <HAL_PCD_IRQHandler+0x3a2>
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e90:	4613      	mov	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	3354      	adds	r3, #84	; 0x54
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d108      	bne.n	8002eb4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002eac:	461a      	mov	r2, r3
 8002eae:	2101      	movs	r1, #1
 8002eb0:	f003 fe40 	bl	8006b34 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	4619      	mov	r1, r3
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f00d fb55 	bl	801056a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d008      	beq.n	8002edc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	2308      	movs	r3, #8
 8002eda:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	f003 0310 	and.w	r3, r3, #16
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d008      	beq.n	8002ef8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	2310      	movs	r3, #16
 8002ef6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d008      	beq.n	8002f14 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f0e:	461a      	mov	r2, r3
 8002f10:	2340      	movs	r3, #64	; 0x40
 8002f12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d023      	beq.n	8002f66 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002f1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f20:	6a38      	ldr	r0, [r7, #32]
 8002f22:	f002 fd21 	bl	8005968 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f28:	4613      	mov	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	3338      	adds	r3, #56	; 0x38
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	4413      	add	r3, r2
 8002f36:	3304      	adds	r3, #4
 8002f38:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	78db      	ldrb	r3, [r3, #3]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d108      	bne.n	8002f54 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2200      	movs	r2, #0
 8002f46:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f00d fb98 	bl	8010684 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f60:	461a      	mov	r2, r3
 8002f62:	2302      	movs	r3, #2
 8002f64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fcdb 	bl	800392e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f80:	085b      	lsrs	r3, r3, #1
 8002f82:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f47f af2e 	bne.w	8002de8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f003 fd0b 	bl	80069ac <USB_ReadInterrupts>
 8002f96:	4603      	mov	r3, r0
 8002f98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fa0:	d122      	bne.n	8002fe8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	69fa      	ldr	r2, [r7, #28]
 8002fac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fb0:	f023 0301 	bic.w	r3, r3, #1
 8002fb4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d108      	bne.n	8002fd2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002fc8:	2100      	movs	r1, #0
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 fec2 	bl	8003d54 <HAL_PCDEx_LPM_Callback>
 8002fd0:	e002      	b.n	8002fd8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f00d fb36 	bl	8010644 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695a      	ldr	r2, [r3, #20]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002fe6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f003 fcdd 	bl	80069ac <USB_ReadInterrupts>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ffc:	d112      	bne.n	8003024 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b01      	cmp	r3, #1
 800300c:	d102      	bne.n	8003014 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f00d faf2 	bl	80105f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695a      	ldr	r2, [r3, #20]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003022:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f003 fcbf 	bl	80069ac <USB_ReadInterrupts>
 800302e:	4603      	mov	r3, r0
 8003030:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003038:	f040 80b7 	bne.w	80031aa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	69fa      	ldr	r2, [r7, #28]
 8003046:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800304a:	f023 0301 	bic.w	r3, r3, #1
 800304e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2110      	movs	r1, #16
 8003056:	4618      	mov	r0, r3
 8003058:	f002 fc86 	bl	8005968 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800305c:	2300      	movs	r3, #0
 800305e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003060:	e046      	b.n	80030f0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	4413      	add	r3, r2
 800306a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800306e:	461a      	mov	r2, r3
 8003070:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003074:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003078:	015a      	lsls	r2, r3, #5
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	4413      	add	r3, r2
 800307e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003086:	0151      	lsls	r1, r2, #5
 8003088:	69fa      	ldr	r2, [r7, #28]
 800308a:	440a      	add	r2, r1
 800308c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003090:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003094:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003098:	015a      	lsls	r2, r3, #5
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	4413      	add	r3, r2
 800309e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a2:	461a      	mov	r2, r3
 80030a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030a8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80030aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ac:	015a      	lsls	r2, r3, #5
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	4413      	add	r3, r2
 80030b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ba:	0151      	lsls	r1, r2, #5
 80030bc:	69fa      	ldr	r2, [r7, #28]
 80030be:	440a      	add	r2, r1
 80030c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80030ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030da:	0151      	lsls	r1, r2, #5
 80030dc:	69fa      	ldr	r2, [r7, #28]
 80030de:	440a      	add	r2, r1
 80030e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80030e8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ec:	3301      	adds	r3, #1
 80030ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d3b3      	bcc.n	8003062 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	69fa      	ldr	r2, [r7, #28]
 8003104:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003108:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800310c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	2b00      	cmp	r3, #0
 8003114:	d016      	beq.n	8003144 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800311c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003120:	69fa      	ldr	r2, [r7, #28]
 8003122:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003126:	f043 030b 	orr.w	r3, r3, #11
 800312a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	69fa      	ldr	r2, [r7, #28]
 8003138:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800313c:	f043 030b 	orr.w	r3, r3, #11
 8003140:	6453      	str	r3, [r2, #68]	; 0x44
 8003142:	e015      	b.n	8003170 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	69fa      	ldr	r2, [r7, #28]
 800314e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003152:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003156:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800315a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	69fa      	ldr	r2, [r7, #28]
 8003166:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800316a:	f043 030b 	orr.w	r3, r3, #11
 800316e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	69fa      	ldr	r2, [r7, #28]
 800317a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800317e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003182:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003194:	461a      	mov	r2, r3
 8003196:	f003 fccd 	bl	8006b34 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80031a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f003 fbfc 	bl	80069ac <USB_ReadInterrupts>
 80031b4:	4603      	mov	r3, r0
 80031b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031be:	d124      	bne.n	800320a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f003 fc92 	bl	8006aee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f002 fc47 	bl	8005a62 <USB_GetDevSpeed>
 80031d4:	4603      	mov	r3, r0
 80031d6:	461a      	mov	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681c      	ldr	r4, [r3, #0]
 80031e0:	f001 f9e8 	bl	80045b4 <HAL_RCC_GetHCLKFreq>
 80031e4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	461a      	mov	r2, r3
 80031ee:	4620      	mov	r0, r4
 80031f0:	f002 f946 	bl	8005480 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f00d f9e0 	bl	80105ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695a      	ldr	r2, [r3, #20]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003208:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f003 fbcc 	bl	80069ac <USB_ReadInterrupts>
 8003214:	4603      	mov	r3, r0
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b08      	cmp	r3, #8
 800321c:	d10a      	bne.n	8003234 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f00d f9bd 	bl	801059e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695a      	ldr	r2, [r3, #20]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f002 0208 	and.w	r2, r2, #8
 8003232:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f003 fbb7 	bl	80069ac <USB_ReadInterrupts>
 800323e:	4603      	mov	r3, r0
 8003240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003244:	2b80      	cmp	r3, #128	; 0x80
 8003246:	d122      	bne.n	800328e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003254:	2301      	movs	r3, #1
 8003256:	627b      	str	r3, [r7, #36]	; 0x24
 8003258:	e014      	b.n	8003284 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800325e:	4613      	mov	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	4413      	add	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d105      	bne.n	800327e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	b2db      	uxtb	r3, r3
 8003276:	4619      	mov	r1, r3
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 fb27 	bl	80038cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	3301      	adds	r3, #1
 8003282:	627b      	str	r3, [r7, #36]	; 0x24
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800328a:	429a      	cmp	r2, r3
 800328c:	d3e5      	bcc.n	800325a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f003 fb8a 	bl	80069ac <USB_ReadInterrupts>
 8003298:	4603      	mov	r3, r0
 800329a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800329e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032a2:	d13b      	bne.n	800331c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032a4:	2301      	movs	r3, #1
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
 80032a8:	e02b      	b.n	8003302 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	015a      	lsls	r2, r3, #5
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	4413      	add	r3, r2
 80032b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032be:	4613      	mov	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	4413      	add	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	3340      	adds	r3, #64	; 0x40
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d115      	bne.n	80032fc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80032d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	da12      	bge.n	80032fc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032da:	4613      	mov	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	4413      	add	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	333f      	adds	r3, #63	; 0x3f
 80032e6:	2201      	movs	r2, #1
 80032e8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	4619      	mov	r1, r3
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fae8 	bl	80038cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	3301      	adds	r3, #1
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003308:	429a      	cmp	r2, r3
 800330a:	d3ce      	bcc.n	80032aa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695a      	ldr	r2, [r3, #20]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800331a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f003 fb43 	bl	80069ac <USB_ReadInterrupts>
 8003326:	4603      	mov	r3, r0
 8003328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800332c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003330:	d155      	bne.n	80033de <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003332:	2301      	movs	r3, #1
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
 8003336:	e045      	b.n	80033c4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	4413      	add	r3, r2
 8003340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800334c:	4613      	mov	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d12e      	bne.n	80033be <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003360:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003362:	2b00      	cmp	r3, #0
 8003364:	da2b      	bge.n	80033be <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003372:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003376:	429a      	cmp	r2, r3
 8003378:	d121      	bne.n	80033be <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800337e:	4613      	mov	r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800338c:	2201      	movs	r2, #1
 800338e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10a      	bne.n	80033be <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	69fa      	ldr	r2, [r7, #28]
 80033b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033ba:	6053      	str	r3, [r2, #4]
            break;
 80033bc:	e007      	b.n	80033ce <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	3301      	adds	r3, #1
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d3b4      	bcc.n	8003338 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695a      	ldr	r2, [r3, #20]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80033dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f003 fae2 	bl	80069ac <USB_ReadInterrupts>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80033ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f2:	d10a      	bne.n	800340a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f00d f957 	bl	80106a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	695a      	ldr	r2, [r3, #20]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003408:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f003 facc 	bl	80069ac <USB_ReadInterrupts>
 8003414:	4603      	mov	r3, r0
 8003416:	f003 0304 	and.w	r3, r3, #4
 800341a:	2b04      	cmp	r3, #4
 800341c:	d115      	bne.n	800344a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f00d f947 	bl	80106c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6859      	ldr	r1, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	430a      	orrs	r2, r1
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	e000      	b.n	800344a <HAL_PCD_IRQHandler+0x938>
      return;
 8003448:	bf00      	nop
    }
  }
}
 800344a:	3734      	adds	r7, #52	; 0x34
 800344c:	46bd      	mov	sp, r7
 800344e:	bd90      	pop	{r4, r7, pc}

08003450 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_PCD_SetAddress+0x1a>
 8003466:	2302      	movs	r3, #2
 8003468:	e013      	b.n	8003492 <HAL_PCD_SetAddress+0x42>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	78fa      	ldrb	r2, [r7, #3]
 8003480:	4611      	mov	r1, r2
 8003482:	4618      	mov	r0, r3
 8003484:	f003 fa2a 	bl	80068dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b084      	sub	sp, #16
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	4608      	mov	r0, r1
 80034a4:	4611      	mov	r1, r2
 80034a6:	461a      	mov	r2, r3
 80034a8:	4603      	mov	r3, r0
 80034aa:	70fb      	strb	r3, [r7, #3]
 80034ac:	460b      	mov	r3, r1
 80034ae:	803b      	strh	r3, [r7, #0]
 80034b0:	4613      	mov	r3, r2
 80034b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	da0f      	bge.n	80034e0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034c0:	78fb      	ldrb	r3, [r7, #3]
 80034c2:	f003 020f 	and.w	r2, r3, #15
 80034c6:	4613      	mov	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	4413      	add	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	3338      	adds	r3, #56	; 0x38
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	4413      	add	r3, r2
 80034d4:	3304      	adds	r3, #4
 80034d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2201      	movs	r2, #1
 80034dc:	705a      	strb	r2, [r3, #1]
 80034de:	e00f      	b.n	8003500 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034e0:	78fb      	ldrb	r3, [r7, #3]
 80034e2:	f003 020f 	and.w	r2, r3, #15
 80034e6:	4613      	mov	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	4413      	add	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	4413      	add	r3, r2
 80034f6:	3304      	adds	r3, #4
 80034f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	b2da      	uxtb	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800350c:	883a      	ldrh	r2, [r7, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	78ba      	ldrb	r2, [r7, #2]
 8003516:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	785b      	ldrb	r3, [r3, #1]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d004      	beq.n	800352a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800352a:	78bb      	ldrb	r3, [r7, #2]
 800352c:	2b02      	cmp	r3, #2
 800352e:	d102      	bne.n	8003536 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_PCD_EP_Open+0xaa>
 8003540:	2302      	movs	r3, #2
 8003542:	e00e      	b.n	8003562 <HAL_PCD_EP_Open+0xc8>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68f9      	ldr	r1, [r7, #12]
 8003552:	4618      	mov	r0, r3
 8003554:	f002 faaa 	bl	8005aac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003560:	7afb      	ldrb	r3, [r7, #11]
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b084      	sub	sp, #16
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	460b      	mov	r3, r1
 8003574:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003576:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800357a:	2b00      	cmp	r3, #0
 800357c:	da0f      	bge.n	800359e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800357e:	78fb      	ldrb	r3, [r7, #3]
 8003580:	f003 020f 	and.w	r2, r3, #15
 8003584:	4613      	mov	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	3338      	adds	r3, #56	; 0x38
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	4413      	add	r3, r2
 8003592:	3304      	adds	r3, #4
 8003594:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2201      	movs	r2, #1
 800359a:	705a      	strb	r2, [r3, #1]
 800359c:	e00f      	b.n	80035be <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800359e:	78fb      	ldrb	r3, [r7, #3]
 80035a0:	f003 020f 	and.w	r2, r3, #15
 80035a4:	4613      	mov	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4413      	add	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	4413      	add	r3, r2
 80035b4:	3304      	adds	r3, #4
 80035b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80035be:	78fb      	ldrb	r3, [r7, #3]
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_PCD_EP_Close+0x6e>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e00e      	b.n	80035f6 <HAL_PCD_EP_Close+0x8c>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68f9      	ldr	r1, [r7, #12]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f002 fae8 	bl	8005bbc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b086      	sub	sp, #24
 8003602:	af00      	add	r7, sp, #0
 8003604:	60f8      	str	r0, [r7, #12]
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	603b      	str	r3, [r7, #0]
 800360a:	460b      	mov	r3, r1
 800360c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800360e:	7afb      	ldrb	r3, [r7, #11]
 8003610:	f003 020f 	and.w	r2, r3, #15
 8003614:	4613      	mov	r3, r2
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	4413      	add	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4413      	add	r3, r2
 8003624:	3304      	adds	r3, #4
 8003626:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2200      	movs	r2, #0
 8003638:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2200      	movs	r2, #0
 800363e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003640:	7afb      	ldrb	r3, [r7, #11]
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	b2da      	uxtb	r2, r3
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d102      	bne.n	800365a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800365a:	7afb      	ldrb	r3, [r7, #11]
 800365c:	f003 030f 	and.w	r3, r3, #15
 8003660:	2b00      	cmp	r3, #0
 8003662:	d109      	bne.n	8003678 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6818      	ldr	r0, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	b2db      	uxtb	r3, r3
 800366e:	461a      	mov	r2, r3
 8003670:	6979      	ldr	r1, [r7, #20]
 8003672:	f002 fdc7 	bl	8006204 <USB_EP0StartXfer>
 8003676:	e008      	b.n	800368a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	461a      	mov	r2, r3
 8003684:	6979      	ldr	r1, [r7, #20]
 8003686:	f002 fb75 	bl	8005d74 <USB_EPStartXfer>
  }

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80036a0:	78fb      	ldrb	r3, [r7, #3]
 80036a2:	f003 020f 	and.w	r2, r3, #15
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	4613      	mov	r3, r2
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	4413      	add	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80036b6:	681b      	ldr	r3, [r3, #0]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	607a      	str	r2, [r7, #4]
 80036ce:	603b      	str	r3, [r7, #0]
 80036d0:	460b      	mov	r3, r1
 80036d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036d4:	7afb      	ldrb	r3, [r7, #11]
 80036d6:	f003 020f 	and.w	r2, r3, #15
 80036da:	4613      	mov	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	4413      	add	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	3338      	adds	r3, #56	; 0x38
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4413      	add	r3, r2
 80036e8:	3304      	adds	r3, #4
 80036ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	2200      	movs	r2, #0
 80036fc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2201      	movs	r2, #1
 8003702:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003704:	7afb      	ldrb	r3, [r7, #11]
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	b2da      	uxtb	r2, r3
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d102      	bne.n	800371e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800371e:	7afb      	ldrb	r3, [r7, #11]
 8003720:	f003 030f 	and.w	r3, r3, #15
 8003724:	2b00      	cmp	r3, #0
 8003726:	d109      	bne.n	800373c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	b2db      	uxtb	r3, r3
 8003732:	461a      	mov	r2, r3
 8003734:	6979      	ldr	r1, [r7, #20]
 8003736:	f002 fd65 	bl	8006204 <USB_EP0StartXfer>
 800373a:	e008      	b.n	800374e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6818      	ldr	r0, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	461a      	mov	r2, r3
 8003748:	6979      	ldr	r1, [r7, #20]
 800374a:	f002 fb13 	bl	8005d74 <USB_EPStartXfer>
  }

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003764:	78fb      	ldrb	r3, [r7, #3]
 8003766:	f003 020f 	and.w	r2, r3, #15
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	429a      	cmp	r2, r3
 8003770:	d901      	bls.n	8003776 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e050      	b.n	8003818 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003776:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800377a:	2b00      	cmp	r3, #0
 800377c:	da0f      	bge.n	800379e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800377e:	78fb      	ldrb	r3, [r7, #3]
 8003780:	f003 020f 	and.w	r2, r3, #15
 8003784:	4613      	mov	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	4413      	add	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	3338      	adds	r3, #56	; 0x38
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	4413      	add	r3, r2
 8003792:	3304      	adds	r3, #4
 8003794:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2201      	movs	r2, #1
 800379a:	705a      	strb	r2, [r3, #1]
 800379c:	e00d      	b.n	80037ba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800379e:	78fa      	ldrb	r2, [r7, #3]
 80037a0:	4613      	mov	r3, r2
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	4413      	add	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	4413      	add	r3, r2
 80037b0:	3304      	adds	r3, #4
 80037b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2201      	movs	r2, #1
 80037be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037c0:	78fb      	ldrb	r3, [r7, #3]
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_PCD_EP_SetStall+0x82>
 80037d6:	2302      	movs	r3, #2
 80037d8:	e01e      	b.n	8003818 <HAL_PCD_EP_SetStall+0xc0>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68f9      	ldr	r1, [r7, #12]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f002 ffa3 	bl	8006734 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037ee:	78fb      	ldrb	r3, [r7, #3]
 80037f0:	f003 030f 	and.w	r3, r3, #15
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10a      	bne.n	800380e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6818      	ldr	r0, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	b2d9      	uxtb	r1, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003808:	461a      	mov	r2, r3
 800380a:	f003 f993 	bl	8006b34 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800382c:	78fb      	ldrb	r3, [r7, #3]
 800382e:	f003 020f 	and.w	r2, r3, #15
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	429a      	cmp	r2, r3
 8003838:	d901      	bls.n	800383e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e042      	b.n	80038c4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800383e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003842:	2b00      	cmp	r3, #0
 8003844:	da0f      	bge.n	8003866 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003846:	78fb      	ldrb	r3, [r7, #3]
 8003848:	f003 020f 	and.w	r2, r3, #15
 800384c:	4613      	mov	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	3338      	adds	r3, #56	; 0x38
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	3304      	adds	r3, #4
 800385c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2201      	movs	r2, #1
 8003862:	705a      	strb	r2, [r3, #1]
 8003864:	e00f      	b.n	8003886 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003866:	78fb      	ldrb	r3, [r7, #3]
 8003868:	f003 020f 	and.w	r2, r3, #15
 800386c:	4613      	mov	r3, r2
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	4413      	add	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	4413      	add	r3, r2
 800387c:	3304      	adds	r3, #4
 800387e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800388c:	78fb      	ldrb	r3, [r7, #3]
 800388e:	f003 030f 	and.w	r3, r3, #15
 8003892:	b2da      	uxtb	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d101      	bne.n	80038a6 <HAL_PCD_EP_ClrStall+0x86>
 80038a2:	2302      	movs	r3, #2
 80038a4:	e00e      	b.n	80038c4 <HAL_PCD_EP_ClrStall+0xa4>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68f9      	ldr	r1, [r7, #12]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f002 ffab 	bl	8006810 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80038d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	da0c      	bge.n	80038fa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038e0:	78fb      	ldrb	r3, [r7, #3]
 80038e2:	f003 020f 	and.w	r2, r3, #15
 80038e6:	4613      	mov	r3, r2
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	4413      	add	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	3338      	adds	r3, #56	; 0x38
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	4413      	add	r3, r2
 80038f4:	3304      	adds	r3, #4
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	e00c      	b.n	8003914 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038fa:	78fb      	ldrb	r3, [r7, #3]
 80038fc:	f003 020f 	and.w	r2, r3, #15
 8003900:	4613      	mov	r3, r2
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	4413      	add	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	4413      	add	r3, r2
 8003910:	3304      	adds	r3, #4
 8003912:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68f9      	ldr	r1, [r7, #12]
 800391a:	4618      	mov	r0, r3
 800391c:	f002 fdca 	bl	80064b4 <USB_EPStopXfer>
 8003920:	4603      	mov	r3, r0
 8003922:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003924:	7afb      	ldrb	r3, [r7, #11]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b08a      	sub	sp, #40	; 0x28
 8003932:	af02      	add	r7, sp, #8
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	4613      	mov	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	4413      	add	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	3338      	adds	r3, #56	; 0x38
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	4413      	add	r3, r2
 8003952:	3304      	adds	r3, #4
 8003954:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a1a      	ldr	r2, [r3, #32]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	429a      	cmp	r2, r3
 8003960:	d901      	bls.n	8003966 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e06c      	b.n	8003a40 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	699a      	ldr	r2, [r3, #24]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	69fa      	ldr	r2, [r7, #28]
 8003978:	429a      	cmp	r2, r3
 800397a:	d902      	bls.n	8003982 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	3303      	adds	r3, #3
 8003986:	089b      	lsrs	r3, r3, #2
 8003988:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800398a:	e02b      	b.n	80039e4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	699a      	ldr	r2, [r3, #24]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d902      	bls.n	80039a8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	3303      	adds	r3, #3
 80039ac:	089b      	lsrs	r3, r3, #2
 80039ae:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6919      	ldr	r1, [r3, #16]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	4603      	mov	r3, r0
 80039c6:	6978      	ldr	r0, [r7, #20]
 80039c8:	f002 fe1e 	bl	8006608 <USB_WritePacket>

    ep->xfer_buff  += len;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	441a      	add	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a1a      	ldr	r2, [r3, #32]
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	441a      	add	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	015a      	lsls	r2, r3, #5
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	4413      	add	r3, r2
 80039ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d809      	bhi.n	8003a0e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a1a      	ldr	r2, [r3, #32]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d203      	bcs.n	8003a0e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1be      	bne.n	800398c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	699a      	ldr	r2, [r3, #24]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d811      	bhi.n	8003a3e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	f003 030f 	and.w	r3, r3, #15
 8003a20:	2201      	movs	r2, #1
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	43db      	mvns	r3, r3
 8003a34:	6939      	ldr	r1, [r7, #16]
 8003a36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3720      	adds	r7, #32
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	333c      	adds	r3, #60	; 0x3c
 8003a60:	3304      	adds	r3, #4
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	015a      	lsls	r2, r3, #5
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d17b      	bne.n	8003b76 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d015      	beq.n	8003ab4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	4a61      	ldr	r2, [pc, #388]	; (8003c10 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	f240 80b9 	bls.w	8003c04 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 80b3 	beq.w	8003c04 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	015a      	lsls	r2, r3, #5
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aaa:	461a      	mov	r2, r3
 8003aac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ab0:	6093      	str	r3, [r2, #8]
 8003ab2:	e0a7      	b.n	8003c04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f003 0320 	and.w	r3, r3, #32
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d009      	beq.n	8003ad2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	015a      	lsls	r2, r3, #5
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aca:	461a      	mov	r2, r3
 8003acc:	2320      	movs	r3, #32
 8003ace:	6093      	str	r3, [r2, #8]
 8003ad0:	e098      	b.n	8003c04 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f040 8093 	bne.w	8003c04 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	4a4b      	ldr	r2, [pc, #300]	; (8003c10 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d90f      	bls.n	8003b06 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00a      	beq.n	8003b06 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003afc:	461a      	mov	r2, r3
 8003afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b02:	6093      	str	r3, [r2, #8]
 8003b04:	e07e      	b.n	8003c04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	4413      	add	r3, r2
 8003b18:	3304      	adds	r3, #4
 8003b1a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	69da      	ldr	r2, [r3, #28]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	0159      	lsls	r1, r3, #5
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	440b      	add	r3, r1
 8003b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b32:	1ad2      	subs	r2, r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d114      	bne.n	8003b68 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d109      	bne.n	8003b5a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b50:	461a      	mov	r2, r3
 8003b52:	2101      	movs	r1, #1
 8003b54:	f002 ffee 	bl	8006b34 <USB_EP0_OutStart>
 8003b58:	e006      	b.n	8003b68 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	691a      	ldr	r2, [r3, #16]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	441a      	add	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f00c fce0 	bl	8010534 <HAL_PCD_DataOutStageCallback>
 8003b74:	e046      	b.n	8003c04 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	4a26      	ldr	r2, [pc, #152]	; (8003c14 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d124      	bne.n	8003bc8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00a      	beq.n	8003b9e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b94:	461a      	mov	r2, r3
 8003b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b9a:	6093      	str	r3, [r2, #8]
 8003b9c:	e032      	b.n	8003c04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f003 0320 	and.w	r3, r3, #32
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d008      	beq.n	8003bba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	2320      	movs	r3, #32
 8003bb8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f00c fcb7 	bl	8010534 <HAL_PCD_DataOutStageCallback>
 8003bc6:	e01d      	b.n	8003c04 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d114      	bne.n	8003bf8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d108      	bne.n	8003bf8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6818      	ldr	r0, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	f002 ff9e 	bl	8006b34 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f00c fc98 	bl	8010534 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3720      	adds	r7, #32
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	4f54300a 	.word	0x4f54300a
 8003c14:	4f54310a 	.word	0x4f54310a

08003c18 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	333c      	adds	r3, #60	; 0x3c
 8003c30:	3304      	adds	r3, #4
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	015a      	lsls	r2, r3, #5
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4a15      	ldr	r2, [pc, #84]	; (8003ca0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d90e      	bls.n	8003c6c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d009      	beq.n	8003c6c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c64:	461a      	mov	r2, r3
 8003c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c6a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f00c fc4f 	bl	8010510 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	4a0a      	ldr	r2, [pc, #40]	; (8003ca0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d90c      	bls.n	8003c94 <PCD_EP_OutSetupPacket_int+0x7c>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d108      	bne.n	8003c94 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6818      	ldr	r0, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	2101      	movs	r1, #1
 8003c90:	f002 ff50 	bl	8006b34 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	4f54300a 	.word	0x4f54300a

08003ca4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	460b      	mov	r3, r1
 8003cae:	70fb      	strb	r3, [r7, #3]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003cbc:	78fb      	ldrb	r3, [r7, #3]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d107      	bne.n	8003cd2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003cc2:	883b      	ldrh	r3, [r7, #0]
 8003cc4:	0419      	lsls	r1, r3, #16
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	629a      	str	r2, [r3, #40]	; 0x28
 8003cd0:	e028      	b.n	8003d24 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd8:	0c1b      	lsrs	r3, r3, #16
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	4413      	add	r3, r2
 8003cde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	73fb      	strb	r3, [r7, #15]
 8003ce4:	e00d      	b.n	8003d02 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	7bfb      	ldrb	r3, [r7, #15]
 8003cec:	3340      	adds	r3, #64	; 0x40
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	0c1b      	lsrs	r3, r3, #16
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	73fb      	strb	r3, [r7, #15]
 8003d02:	7bfa      	ldrb	r2, [r7, #15]
 8003d04:	78fb      	ldrb	r3, [r7, #3]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d3ec      	bcc.n	8003ce6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003d0c:	883b      	ldrh	r3, [r7, #0]
 8003d0e:	0418      	lsls	r0, r3, #16
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6819      	ldr	r1, [r3, #0]
 8003d14:	78fb      	ldrb	r3, [r7, #3]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	4302      	orrs	r2, r0
 8003d1c:	3340      	adds	r3, #64	; 0x40
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	887a      	ldrh	r2, [r7, #2]
 8003d44:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e267      	b.n	800424e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d075      	beq.n	8003e76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d8a:	4b88      	ldr	r3, [pc, #544]	; (8003fac <HAL_RCC_OscConfig+0x240>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 030c 	and.w	r3, r3, #12
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	d00c      	beq.n	8003db0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d96:	4b85      	ldr	r3, [pc, #532]	; (8003fac <HAL_RCC_OscConfig+0x240>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d112      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003da2:	4b82      	ldr	r3, [pc, #520]	; (8003fac <HAL_RCC_OscConfig+0x240>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003daa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dae:	d10b      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db0:	4b7e      	ldr	r3, [pc, #504]	; (8003fac <HAL_RCC_OscConfig+0x240>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d05b      	beq.n	8003e74 <HAL_RCC_OscConfig+0x108>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d157      	bne.n	8003e74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e242      	b.n	800424e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd0:	d106      	bne.n	8003de0 <HAL_RCC_OscConfig+0x74>
 8003dd2:	4b76      	ldr	r3, [pc, #472]	; (8003fac <HAL_RCC_OscConfig+0x240>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a75      	ldr	r2, [pc, #468]	; (8003fac <HAL_RCC_OscConfig+0x240>)
 8003dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ddc:	6013      	str	r3, [r2, #0]
 8003dde:	e01d      	b.n	8003e1c <HAL_RCC_OscConfig+0xb0>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003de8:	d10c      	bne.n	8003e04 <HAL_RCC_OscConfig+0x98>
 8003dea:	4b70      	ldr	r3, [pc, #448]	; (8003fac <HAL_RCC_OscConfig+0x240>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a6f      	ldr	r2, [pc, #444]	; (8003fac <HAL_RCC_OscConfig+0x240>)
 8003df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	4b6d      	ldr	r3, [pc, #436]	; (8003fac <HAL_RCC_OscConfig+0x240>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a6c      	ldr	r2, [pc, #432]	; (8003fac <HAL_RCC_OscConfig+0x240>)
 8003dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e00:	6013      	str	r3, [r2, #0]
 8003e02:	e00b      	b.n	8003e1c <HAL_RCC_OscConfig+0xb0>
 8003e04:	4b69      	ldr	r3, [pc, #420]	; (8003fac <HAL_RCC_OscConfig+0x240>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a68      	ldr	r2, [pc, #416]	; (8003fac <HAL_RCC_OscConfig+0x240>)
 8003e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e0e:	6013      	str	r3, [r2, #0]
 8003e10:	4b66      	ldr	r3, [pc, #408]	; (8003fac <HAL_RCC_OscConfig+0x240>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a65      	ldr	r2, [pc, #404]	; (8003fac <HAL_RCC_OscConfig+0x240>)
 8003e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d013      	beq.n	8003e4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e24:	f7fe fa76 	bl	8002314 <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e2c:	f7fe fa72 	bl	8002314 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b64      	cmp	r3, #100	; 0x64
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e207      	b.n	800424e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e3e:	4b5b      	ldr	r3, [pc, #364]	; (8003fac <HAL_RCC_OscConfig+0x240>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0f0      	beq.n	8003e2c <HAL_RCC_OscConfig+0xc0>
 8003e4a:	e014      	b.n	8003e76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4c:	f7fe fa62 	bl	8002314 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e54:	f7fe fa5e 	bl	8002314 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b64      	cmp	r3, #100	; 0x64
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e1f3      	b.n	800424e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e66:	4b51      	ldr	r3, [pc, #324]	; (8003fac <HAL_RCC_OscConfig+0x240>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0xe8>
 8003e72:	e000      	b.n	8003e76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d063      	beq.n	8003f4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e82:	4b4a      	ldr	r3, [pc, #296]	; (8003fac <HAL_RCC_OscConfig+0x240>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 030c 	and.w	r3, r3, #12
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00b      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e8e:	4b47      	ldr	r3, [pc, #284]	; (8003fac <HAL_RCC_OscConfig+0x240>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e96:	2b08      	cmp	r3, #8
 8003e98:	d11c      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e9a:	4b44      	ldr	r3, [pc, #272]	; (8003fac <HAL_RCC_OscConfig+0x240>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d116      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ea6:	4b41      	ldr	r3, [pc, #260]	; (8003fac <HAL_RCC_OscConfig+0x240>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d005      	beq.n	8003ebe <HAL_RCC_OscConfig+0x152>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d001      	beq.n	8003ebe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e1c7      	b.n	800424e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ebe:	4b3b      	ldr	r3, [pc, #236]	; (8003fac <HAL_RCC_OscConfig+0x240>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	4937      	ldr	r1, [pc, #220]	; (8003fac <HAL_RCC_OscConfig+0x240>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ed2:	e03a      	b.n	8003f4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d020      	beq.n	8003f1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003edc:	4b34      	ldr	r3, [pc, #208]	; (8003fb0 <HAL_RCC_OscConfig+0x244>)
 8003ede:	2201      	movs	r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee2:	f7fe fa17 	bl	8002314 <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee8:	e008      	b.n	8003efc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eea:	f7fe fa13 	bl	8002314 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d901      	bls.n	8003efc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e1a8      	b.n	800424e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003efc:	4b2b      	ldr	r3, [pc, #172]	; (8003fac <HAL_RCC_OscConfig+0x240>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0f0      	beq.n	8003eea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f08:	4b28      	ldr	r3, [pc, #160]	; (8003fac <HAL_RCC_OscConfig+0x240>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	4925      	ldr	r1, [pc, #148]	; (8003fac <HAL_RCC_OscConfig+0x240>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	600b      	str	r3, [r1, #0]
 8003f1c:	e015      	b.n	8003f4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f1e:	4b24      	ldr	r3, [pc, #144]	; (8003fb0 <HAL_RCC_OscConfig+0x244>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f24:	f7fe f9f6 	bl	8002314 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f2c:	f7fe f9f2 	bl	8002314 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e187      	b.n	800424e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f3e:	4b1b      	ldr	r3, [pc, #108]	; (8003fac <HAL_RCC_OscConfig+0x240>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1f0      	bne.n	8003f2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d036      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d016      	beq.n	8003f8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f5e:	4b15      	ldr	r3, [pc, #84]	; (8003fb4 <HAL_RCC_OscConfig+0x248>)
 8003f60:	2201      	movs	r2, #1
 8003f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f64:	f7fe f9d6 	bl	8002314 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f6c:	f7fe f9d2 	bl	8002314 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e167      	b.n	800424e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f7e:	4b0b      	ldr	r3, [pc, #44]	; (8003fac <HAL_RCC_OscConfig+0x240>)
 8003f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d0f0      	beq.n	8003f6c <HAL_RCC_OscConfig+0x200>
 8003f8a:	e01b      	b.n	8003fc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f8c:	4b09      	ldr	r3, [pc, #36]	; (8003fb4 <HAL_RCC_OscConfig+0x248>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f92:	f7fe f9bf 	bl	8002314 <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f98:	e00e      	b.n	8003fb8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f9a:	f7fe f9bb 	bl	8002314 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d907      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e150      	b.n	800424e <HAL_RCC_OscConfig+0x4e2>
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	42470000 	.word	0x42470000
 8003fb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fb8:	4b88      	ldr	r3, [pc, #544]	; (80041dc <HAL_RCC_OscConfig+0x470>)
 8003fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1ea      	bne.n	8003f9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 8097 	beq.w	8004100 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fd6:	4b81      	ldr	r3, [pc, #516]	; (80041dc <HAL_RCC_OscConfig+0x470>)
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10f      	bne.n	8004002 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60bb      	str	r3, [r7, #8]
 8003fe6:	4b7d      	ldr	r3, [pc, #500]	; (80041dc <HAL_RCC_OscConfig+0x470>)
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	4a7c      	ldr	r2, [pc, #496]	; (80041dc <HAL_RCC_OscConfig+0x470>)
 8003fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ff2:	4b7a      	ldr	r3, [pc, #488]	; (80041dc <HAL_RCC_OscConfig+0x470>)
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffa:	60bb      	str	r3, [r7, #8]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ffe:	2301      	movs	r3, #1
 8004000:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004002:	4b77      	ldr	r3, [pc, #476]	; (80041e0 <HAL_RCC_OscConfig+0x474>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400a:	2b00      	cmp	r3, #0
 800400c:	d118      	bne.n	8004040 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800400e:	4b74      	ldr	r3, [pc, #464]	; (80041e0 <HAL_RCC_OscConfig+0x474>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a73      	ldr	r2, [pc, #460]	; (80041e0 <HAL_RCC_OscConfig+0x474>)
 8004014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800401a:	f7fe f97b 	bl	8002314 <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004020:	e008      	b.n	8004034 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004022:	f7fe f977 	bl	8002314 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e10c      	b.n	800424e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004034:	4b6a      	ldr	r3, [pc, #424]	; (80041e0 <HAL_RCC_OscConfig+0x474>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0f0      	beq.n	8004022 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d106      	bne.n	8004056 <HAL_RCC_OscConfig+0x2ea>
 8004048:	4b64      	ldr	r3, [pc, #400]	; (80041dc <HAL_RCC_OscConfig+0x470>)
 800404a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404c:	4a63      	ldr	r2, [pc, #396]	; (80041dc <HAL_RCC_OscConfig+0x470>)
 800404e:	f043 0301 	orr.w	r3, r3, #1
 8004052:	6713      	str	r3, [r2, #112]	; 0x70
 8004054:	e01c      	b.n	8004090 <HAL_RCC_OscConfig+0x324>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2b05      	cmp	r3, #5
 800405c:	d10c      	bne.n	8004078 <HAL_RCC_OscConfig+0x30c>
 800405e:	4b5f      	ldr	r3, [pc, #380]	; (80041dc <HAL_RCC_OscConfig+0x470>)
 8004060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004062:	4a5e      	ldr	r2, [pc, #376]	; (80041dc <HAL_RCC_OscConfig+0x470>)
 8004064:	f043 0304 	orr.w	r3, r3, #4
 8004068:	6713      	str	r3, [r2, #112]	; 0x70
 800406a:	4b5c      	ldr	r3, [pc, #368]	; (80041dc <HAL_RCC_OscConfig+0x470>)
 800406c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406e:	4a5b      	ldr	r2, [pc, #364]	; (80041dc <HAL_RCC_OscConfig+0x470>)
 8004070:	f043 0301 	orr.w	r3, r3, #1
 8004074:	6713      	str	r3, [r2, #112]	; 0x70
 8004076:	e00b      	b.n	8004090 <HAL_RCC_OscConfig+0x324>
 8004078:	4b58      	ldr	r3, [pc, #352]	; (80041dc <HAL_RCC_OscConfig+0x470>)
 800407a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407c:	4a57      	ldr	r2, [pc, #348]	; (80041dc <HAL_RCC_OscConfig+0x470>)
 800407e:	f023 0301 	bic.w	r3, r3, #1
 8004082:	6713      	str	r3, [r2, #112]	; 0x70
 8004084:	4b55      	ldr	r3, [pc, #340]	; (80041dc <HAL_RCC_OscConfig+0x470>)
 8004086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004088:	4a54      	ldr	r2, [pc, #336]	; (80041dc <HAL_RCC_OscConfig+0x470>)
 800408a:	f023 0304 	bic.w	r3, r3, #4
 800408e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d015      	beq.n	80040c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004098:	f7fe f93c 	bl	8002314 <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800409e:	e00a      	b.n	80040b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040a0:	f7fe f938 	bl	8002314 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e0cb      	b.n	800424e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040b6:	4b49      	ldr	r3, [pc, #292]	; (80041dc <HAL_RCC_OscConfig+0x470>)
 80040b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0ee      	beq.n	80040a0 <HAL_RCC_OscConfig+0x334>
 80040c2:	e014      	b.n	80040ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040c4:	f7fe f926 	bl	8002314 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ca:	e00a      	b.n	80040e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040cc:	f7fe f922 	bl	8002314 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040da:	4293      	cmp	r3, r2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e0b5      	b.n	800424e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040e2:	4b3e      	ldr	r3, [pc, #248]	; (80041dc <HAL_RCC_OscConfig+0x470>)
 80040e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1ee      	bne.n	80040cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040ee:	7dfb      	ldrb	r3, [r7, #23]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d105      	bne.n	8004100 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040f4:	4b39      	ldr	r3, [pc, #228]	; (80041dc <HAL_RCC_OscConfig+0x470>)
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	4a38      	ldr	r2, [pc, #224]	; (80041dc <HAL_RCC_OscConfig+0x470>)
 80040fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 80a1 	beq.w	800424c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800410a:	4b34      	ldr	r3, [pc, #208]	; (80041dc <HAL_RCC_OscConfig+0x470>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 030c 	and.w	r3, r3, #12
 8004112:	2b08      	cmp	r3, #8
 8004114:	d05c      	beq.n	80041d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	2b02      	cmp	r3, #2
 800411c:	d141      	bne.n	80041a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800411e:	4b31      	ldr	r3, [pc, #196]	; (80041e4 <HAL_RCC_OscConfig+0x478>)
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004124:	f7fe f8f6 	bl	8002314 <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800412c:	f7fe f8f2 	bl	8002314 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e087      	b.n	800424e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413e:	4b27      	ldr	r3, [pc, #156]	; (80041dc <HAL_RCC_OscConfig+0x470>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1f0      	bne.n	800412c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69da      	ldr	r2, [r3, #28]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	019b      	lsls	r3, r3, #6
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004160:	085b      	lsrs	r3, r3, #1
 8004162:	3b01      	subs	r3, #1
 8004164:	041b      	lsls	r3, r3, #16
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	061b      	lsls	r3, r3, #24
 800416e:	491b      	ldr	r1, [pc, #108]	; (80041dc <HAL_RCC_OscConfig+0x470>)
 8004170:	4313      	orrs	r3, r2
 8004172:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004174:	4b1b      	ldr	r3, [pc, #108]	; (80041e4 <HAL_RCC_OscConfig+0x478>)
 8004176:	2201      	movs	r2, #1
 8004178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417a:	f7fe f8cb 	bl	8002314 <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004180:	e008      	b.n	8004194 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004182:	f7fe f8c7 	bl	8002314 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e05c      	b.n	800424e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004194:	4b11      	ldr	r3, [pc, #68]	; (80041dc <HAL_RCC_OscConfig+0x470>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0f0      	beq.n	8004182 <HAL_RCC_OscConfig+0x416>
 80041a0:	e054      	b.n	800424c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a2:	4b10      	ldr	r3, [pc, #64]	; (80041e4 <HAL_RCC_OscConfig+0x478>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a8:	f7fe f8b4 	bl	8002314 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041b0:	f7fe f8b0 	bl	8002314 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e045      	b.n	800424e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041c2:	4b06      	ldr	r3, [pc, #24]	; (80041dc <HAL_RCC_OscConfig+0x470>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1f0      	bne.n	80041b0 <HAL_RCC_OscConfig+0x444>
 80041ce:	e03d      	b.n	800424c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d107      	bne.n	80041e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e038      	b.n	800424e <HAL_RCC_OscConfig+0x4e2>
 80041dc:	40023800 	.word	0x40023800
 80041e0:	40007000 	.word	0x40007000
 80041e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041e8:	4b1b      	ldr	r3, [pc, #108]	; (8004258 <HAL_RCC_OscConfig+0x4ec>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d028      	beq.n	8004248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004200:	429a      	cmp	r2, r3
 8004202:	d121      	bne.n	8004248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800420e:	429a      	cmp	r2, r3
 8004210:	d11a      	bne.n	8004248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004218:	4013      	ands	r3, r2
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800421e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004220:	4293      	cmp	r3, r2
 8004222:	d111      	bne.n	8004248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422e:	085b      	lsrs	r3, r3, #1
 8004230:	3b01      	subs	r3, #1
 8004232:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004234:	429a      	cmp	r2, r3
 8004236:	d107      	bne.n	8004248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004244:	429a      	cmp	r2, r3
 8004246:	d001      	beq.n	800424c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e000      	b.n	800424e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3718      	adds	r7, #24
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	40023800 	.word	0x40023800

0800425c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e0cc      	b.n	800440a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004270:	4b68      	ldr	r3, [pc, #416]	; (8004414 <HAL_RCC_ClockConfig+0x1b8>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	429a      	cmp	r2, r3
 800427c:	d90c      	bls.n	8004298 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800427e:	4b65      	ldr	r3, [pc, #404]	; (8004414 <HAL_RCC_ClockConfig+0x1b8>)
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004286:	4b63      	ldr	r3, [pc, #396]	; (8004414 <HAL_RCC_ClockConfig+0x1b8>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0307 	and.w	r3, r3, #7
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	429a      	cmp	r2, r3
 8004292:	d001      	beq.n	8004298 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e0b8      	b.n	800440a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d020      	beq.n	80042e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042b0:	4b59      	ldr	r3, [pc, #356]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	4a58      	ldr	r2, [pc, #352]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80042b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d005      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042c8:	4b53      	ldr	r3, [pc, #332]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	4a52      	ldr	r2, [pc, #328]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80042ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042d4:	4b50      	ldr	r3, [pc, #320]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	494d      	ldr	r1, [pc, #308]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d044      	beq.n	800437c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d107      	bne.n	800430a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fa:	4b47      	ldr	r3, [pc, #284]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d119      	bne.n	800433a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e07f      	b.n	800440a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2b02      	cmp	r3, #2
 8004310:	d003      	beq.n	800431a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004316:	2b03      	cmp	r3, #3
 8004318:	d107      	bne.n	800432a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800431a:	4b3f      	ldr	r3, [pc, #252]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d109      	bne.n	800433a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e06f      	b.n	800440a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800432a:	4b3b      	ldr	r3, [pc, #236]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e067      	b.n	800440a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800433a:	4b37      	ldr	r3, [pc, #220]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f023 0203 	bic.w	r2, r3, #3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	4934      	ldr	r1, [pc, #208]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 8004348:	4313      	orrs	r3, r2
 800434a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800434c:	f7fd ffe2 	bl	8002314 <HAL_GetTick>
 8004350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004352:	e00a      	b.n	800436a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004354:	f7fd ffde 	bl	8002314 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004362:	4293      	cmp	r3, r2
 8004364:	d901      	bls.n	800436a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e04f      	b.n	800440a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800436a:	4b2b      	ldr	r3, [pc, #172]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 020c 	and.w	r2, r3, #12
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	429a      	cmp	r2, r3
 800437a:	d1eb      	bne.n	8004354 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800437c:	4b25      	ldr	r3, [pc, #148]	; (8004414 <HAL_RCC_ClockConfig+0x1b8>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	429a      	cmp	r2, r3
 8004388:	d20c      	bcs.n	80043a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800438a:	4b22      	ldr	r3, [pc, #136]	; (8004414 <HAL_RCC_ClockConfig+0x1b8>)
 800438c:	683a      	ldr	r2, [r7, #0]
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004392:	4b20      	ldr	r3, [pc, #128]	; (8004414 <HAL_RCC_ClockConfig+0x1b8>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	429a      	cmp	r2, r3
 800439e:	d001      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e032      	b.n	800440a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d008      	beq.n	80043c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043b0:	4b19      	ldr	r3, [pc, #100]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	4916      	ldr	r1, [pc, #88]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d009      	beq.n	80043e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043ce:	4b12      	ldr	r3, [pc, #72]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	490e      	ldr	r1, [pc, #56]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043e2:	f000 f821 	bl	8004428 <HAL_RCC_GetSysClockFreq>
 80043e6:	4602      	mov	r2, r0
 80043e8:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <HAL_RCC_ClockConfig+0x1bc>)
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	091b      	lsrs	r3, r3, #4
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	490a      	ldr	r1, [pc, #40]	; (800441c <HAL_RCC_ClockConfig+0x1c0>)
 80043f4:	5ccb      	ldrb	r3, [r1, r3]
 80043f6:	fa22 f303 	lsr.w	r3, r2, r3
 80043fa:	4a09      	ldr	r2, [pc, #36]	; (8004420 <HAL_RCC_ClockConfig+0x1c4>)
 80043fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043fe:	4b09      	ldr	r3, [pc, #36]	; (8004424 <HAL_RCC_ClockConfig+0x1c8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4618      	mov	r0, r3
 8004404:	f7fd fdb4 	bl	8001f70 <HAL_InitTick>

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	40023c00 	.word	0x40023c00
 8004418:	40023800 	.word	0x40023800
 800441c:	080123ec 	.word	0x080123ec
 8004420:	20000004 	.word	0x20000004
 8004424:	20000008 	.word	0x20000008

08004428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800442c:	b090      	sub	sp, #64	; 0x40
 800442e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	637b      	str	r3, [r7, #52]	; 0x34
 8004434:	2300      	movs	r3, #0
 8004436:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004438:	2300      	movs	r3, #0
 800443a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800443c:	2300      	movs	r3, #0
 800443e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004440:	4b59      	ldr	r3, [pc, #356]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f003 030c 	and.w	r3, r3, #12
 8004448:	2b08      	cmp	r3, #8
 800444a:	d00d      	beq.n	8004468 <HAL_RCC_GetSysClockFreq+0x40>
 800444c:	2b08      	cmp	r3, #8
 800444e:	f200 80a1 	bhi.w	8004594 <HAL_RCC_GetSysClockFreq+0x16c>
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <HAL_RCC_GetSysClockFreq+0x34>
 8004456:	2b04      	cmp	r3, #4
 8004458:	d003      	beq.n	8004462 <HAL_RCC_GetSysClockFreq+0x3a>
 800445a:	e09b      	b.n	8004594 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800445c:	4b53      	ldr	r3, [pc, #332]	; (80045ac <HAL_RCC_GetSysClockFreq+0x184>)
 800445e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004460:	e09b      	b.n	800459a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004462:	4b53      	ldr	r3, [pc, #332]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004464:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004466:	e098      	b.n	800459a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004468:	4b4f      	ldr	r3, [pc, #316]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004470:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004472:	4b4d      	ldr	r3, [pc, #308]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d028      	beq.n	80044d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800447e:	4b4a      	ldr	r3, [pc, #296]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	099b      	lsrs	r3, r3, #6
 8004484:	2200      	movs	r2, #0
 8004486:	623b      	str	r3, [r7, #32]
 8004488:	627a      	str	r2, [r7, #36]	; 0x24
 800448a:	6a3b      	ldr	r3, [r7, #32]
 800448c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004490:	2100      	movs	r1, #0
 8004492:	4b47      	ldr	r3, [pc, #284]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004494:	fb03 f201 	mul.w	r2, r3, r1
 8004498:	2300      	movs	r3, #0
 800449a:	fb00 f303 	mul.w	r3, r0, r3
 800449e:	4413      	add	r3, r2
 80044a0:	4a43      	ldr	r2, [pc, #268]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80044a2:	fba0 1202 	umull	r1, r2, r0, r2
 80044a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044a8:	460a      	mov	r2, r1
 80044aa:	62ba      	str	r2, [r7, #40]	; 0x28
 80044ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044ae:	4413      	add	r3, r2
 80044b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044b4:	2200      	movs	r2, #0
 80044b6:	61bb      	str	r3, [r7, #24]
 80044b8:	61fa      	str	r2, [r7, #28]
 80044ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80044c2:	f7fb fee5 	bl	8000290 <__aeabi_uldivmod>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	4613      	mov	r3, r2
 80044cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044ce:	e053      	b.n	8004578 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044d0:	4b35      	ldr	r3, [pc, #212]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	099b      	lsrs	r3, r3, #6
 80044d6:	2200      	movs	r2, #0
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	617a      	str	r2, [r7, #20]
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80044e2:	f04f 0b00 	mov.w	fp, #0
 80044e6:	4652      	mov	r2, sl
 80044e8:	465b      	mov	r3, fp
 80044ea:	f04f 0000 	mov.w	r0, #0
 80044ee:	f04f 0100 	mov.w	r1, #0
 80044f2:	0159      	lsls	r1, r3, #5
 80044f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044f8:	0150      	lsls	r0, r2, #5
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	ebb2 080a 	subs.w	r8, r2, sl
 8004502:	eb63 090b 	sbc.w	r9, r3, fp
 8004506:	f04f 0200 	mov.w	r2, #0
 800450a:	f04f 0300 	mov.w	r3, #0
 800450e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004512:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004516:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800451a:	ebb2 0408 	subs.w	r4, r2, r8
 800451e:	eb63 0509 	sbc.w	r5, r3, r9
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	f04f 0300 	mov.w	r3, #0
 800452a:	00eb      	lsls	r3, r5, #3
 800452c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004530:	00e2      	lsls	r2, r4, #3
 8004532:	4614      	mov	r4, r2
 8004534:	461d      	mov	r5, r3
 8004536:	eb14 030a 	adds.w	r3, r4, sl
 800453a:	603b      	str	r3, [r7, #0]
 800453c:	eb45 030b 	adc.w	r3, r5, fp
 8004540:	607b      	str	r3, [r7, #4]
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	f04f 0300 	mov.w	r3, #0
 800454a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800454e:	4629      	mov	r1, r5
 8004550:	028b      	lsls	r3, r1, #10
 8004552:	4621      	mov	r1, r4
 8004554:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004558:	4621      	mov	r1, r4
 800455a:	028a      	lsls	r2, r1, #10
 800455c:	4610      	mov	r0, r2
 800455e:	4619      	mov	r1, r3
 8004560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004562:	2200      	movs	r2, #0
 8004564:	60bb      	str	r3, [r7, #8]
 8004566:	60fa      	str	r2, [r7, #12]
 8004568:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800456c:	f7fb fe90 	bl	8000290 <__aeabi_uldivmod>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4613      	mov	r3, r2
 8004576:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004578:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	0c1b      	lsrs	r3, r3, #16
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	3301      	adds	r3, #1
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004588:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004590:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004592:	e002      	b.n	800459a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004594:	4b05      	ldr	r3, [pc, #20]	; (80045ac <HAL_RCC_GetSysClockFreq+0x184>)
 8004596:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004598:	bf00      	nop
    }
  }
  return sysclockfreq;
 800459a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800459c:	4618      	mov	r0, r3
 800459e:	3740      	adds	r7, #64	; 0x40
 80045a0:	46bd      	mov	sp, r7
 80045a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045a6:	bf00      	nop
 80045a8:	40023800 	.word	0x40023800
 80045ac:	00f42400 	.word	0x00f42400
 80045b0:	017d7840 	.word	0x017d7840

080045b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045b8:	4b03      	ldr	r3, [pc, #12]	; (80045c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045ba:	681b      	ldr	r3, [r3, #0]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	20000004 	.word	0x20000004

080045cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045d0:	f7ff fff0 	bl	80045b4 <HAL_RCC_GetHCLKFreq>
 80045d4:	4602      	mov	r2, r0
 80045d6:	4b05      	ldr	r3, [pc, #20]	; (80045ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	0b5b      	lsrs	r3, r3, #13
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	4903      	ldr	r1, [pc, #12]	; (80045f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045e2:	5ccb      	ldrb	r3, [r1, r3]
 80045e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40023800 	.word	0x40023800
 80045f0:	080123fc 	.word	0x080123fc

080045f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	220f      	movs	r2, #15
 8004602:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004604:	4b12      	ldr	r3, [pc, #72]	; (8004650 <HAL_RCC_GetClockConfig+0x5c>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f003 0203 	and.w	r2, r3, #3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004610:	4b0f      	ldr	r3, [pc, #60]	; (8004650 <HAL_RCC_GetClockConfig+0x5c>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800461c:	4b0c      	ldr	r3, [pc, #48]	; (8004650 <HAL_RCC_GetClockConfig+0x5c>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004628:	4b09      	ldr	r3, [pc, #36]	; (8004650 <HAL_RCC_GetClockConfig+0x5c>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	08db      	lsrs	r3, r3, #3
 800462e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004636:	4b07      	ldr	r3, [pc, #28]	; (8004654 <HAL_RCC_GetClockConfig+0x60>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0207 	and.w	r2, r3, #7
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	601a      	str	r2, [r3, #0]
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40023800 	.word	0x40023800
 8004654:	40023c00 	.word	0x40023c00

08004658 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e07b      	b.n	8004762 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	2b00      	cmp	r3, #0
 8004670:	d108      	bne.n	8004684 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800467a:	d009      	beq.n	8004690 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	61da      	str	r2, [r3, #28]
 8004682:	e005      	b.n	8004690 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d106      	bne.n	80046b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7fd fbec 	bl	8001e88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	431a      	orrs	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004700:	431a      	orrs	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004714:	ea42 0103 	orr.w	r1, r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	0c1b      	lsrs	r3, r3, #16
 800472e:	f003 0104 	and.w	r1, r3, #4
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	f003 0210 	and.w	r2, r3, #16
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	430a      	orrs	r2, r1
 8004740:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69da      	ldr	r2, [r3, #28]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004750:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b088      	sub	sp, #32
 800476e:	af00      	add	r7, sp, #0
 8004770:	60f8      	str	r0, [r7, #12]
 8004772:	60b9      	str	r1, [r7, #8]
 8004774:	603b      	str	r3, [r7, #0]
 8004776:	4613      	mov	r3, r2
 8004778:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004784:	2b01      	cmp	r3, #1
 8004786:	d101      	bne.n	800478c <HAL_SPI_Transmit+0x22>
 8004788:	2302      	movs	r3, #2
 800478a:	e126      	b.n	80049da <HAL_SPI_Transmit+0x270>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004794:	f7fd fdbe 	bl	8002314 <HAL_GetTick>
 8004798:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800479a:	88fb      	ldrh	r3, [r7, #6]
 800479c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d002      	beq.n	80047b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80047aa:	2302      	movs	r3, #2
 80047ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047ae:	e10b      	b.n	80049c8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <HAL_SPI_Transmit+0x52>
 80047b6:	88fb      	ldrh	r3, [r7, #6]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d102      	bne.n	80047c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047c0:	e102      	b.n	80049c8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2203      	movs	r2, #3
 80047c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	88fa      	ldrh	r2, [r7, #6]
 80047da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	88fa      	ldrh	r2, [r7, #6]
 80047e0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004808:	d10f      	bne.n	800482a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004818:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004828:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004834:	2b40      	cmp	r3, #64	; 0x40
 8004836:	d007      	beq.n	8004848 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004846:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004850:	d14b      	bne.n	80048ea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d002      	beq.n	8004860 <HAL_SPI_Transmit+0xf6>
 800485a:	8afb      	ldrh	r3, [r7, #22]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d13e      	bne.n	80048de <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	881a      	ldrh	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004870:	1c9a      	adds	r2, r3, #2
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004884:	e02b      	b.n	80048de <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b02      	cmp	r3, #2
 8004892:	d112      	bne.n	80048ba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	881a      	ldrh	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a4:	1c9a      	adds	r2, r3, #2
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	3b01      	subs	r3, #1
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80048b8:	e011      	b.n	80048de <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048ba:	f7fd fd2b 	bl	8002314 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d803      	bhi.n	80048d2 <HAL_SPI_Transmit+0x168>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d0:	d102      	bne.n	80048d8 <HAL_SPI_Transmit+0x16e>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d102      	bne.n	80048de <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048dc:	e074      	b.n	80049c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1ce      	bne.n	8004886 <HAL_SPI_Transmit+0x11c>
 80048e8:	e04c      	b.n	8004984 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <HAL_SPI_Transmit+0x18e>
 80048f2:	8afb      	ldrh	r3, [r7, #22]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d140      	bne.n	800497a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	330c      	adds	r3, #12
 8004902:	7812      	ldrb	r2, [r2, #0]
 8004904:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004914:	b29b      	uxth	r3, r3
 8004916:	3b01      	subs	r3, #1
 8004918:	b29a      	uxth	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800491e:	e02c      	b.n	800497a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b02      	cmp	r3, #2
 800492c:	d113      	bne.n	8004956 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	330c      	adds	r3, #12
 8004938:	7812      	ldrb	r2, [r2, #0]
 800493a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004940:	1c5a      	adds	r2, r3, #1
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800494a:	b29b      	uxth	r3, r3
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	86da      	strh	r2, [r3, #54]	; 0x36
 8004954:	e011      	b.n	800497a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004956:	f7fd fcdd 	bl	8002314 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d803      	bhi.n	800496e <HAL_SPI_Transmit+0x204>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496c:	d102      	bne.n	8004974 <HAL_SPI_Transmit+0x20a>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d102      	bne.n	800497a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004978:	e026      	b.n	80049c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800497e:	b29b      	uxth	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1cd      	bne.n	8004920 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	6839      	ldr	r1, [r7, #0]
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 fa55 	bl	8004e38 <SPI_EndRxTxTransaction>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2220      	movs	r2, #32
 8004998:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10a      	bne.n	80049b8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049a2:	2300      	movs	r3, #0
 80049a4:	613b      	str	r3, [r7, #16]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	613b      	str	r3, [r7, #16]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	613b      	str	r3, [r7, #16]
 80049b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	77fb      	strb	r3, [r7, #31]
 80049c4:	e000      	b.n	80049c8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80049c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3720      	adds	r7, #32
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b08c      	sub	sp, #48	; 0x30
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	60f8      	str	r0, [r7, #12]
 80049ea:	60b9      	str	r1, [r7, #8]
 80049ec:	607a      	str	r2, [r7, #4]
 80049ee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80049f0:	2301      	movs	r3, #1
 80049f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d101      	bne.n	8004a08 <HAL_SPI_TransmitReceive+0x26>
 8004a04:	2302      	movs	r3, #2
 8004a06:	e18a      	b.n	8004d1e <HAL_SPI_TransmitReceive+0x33c>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a10:	f7fd fc80 	bl	8002314 <HAL_GetTick>
 8004a14:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004a26:	887b      	ldrh	r3, [r7, #2]
 8004a28:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d00f      	beq.n	8004a52 <HAL_SPI_TransmitReceive+0x70>
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a38:	d107      	bne.n	8004a4a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d103      	bne.n	8004a4a <HAL_SPI_TransmitReceive+0x68>
 8004a42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d003      	beq.n	8004a52 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a50:	e15b      	b.n	8004d0a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d005      	beq.n	8004a64 <HAL_SPI_TransmitReceive+0x82>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d002      	beq.n	8004a64 <HAL_SPI_TransmitReceive+0x82>
 8004a5e:	887b      	ldrh	r3, [r7, #2]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d103      	bne.n	8004a6c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a6a:	e14e      	b.n	8004d0a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d003      	beq.n	8004a80 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2205      	movs	r2, #5
 8004a7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	887a      	ldrh	r2, [r7, #2]
 8004a90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	887a      	ldrh	r2, [r7, #2]
 8004a96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	887a      	ldrh	r2, [r7, #2]
 8004aa2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	887a      	ldrh	r2, [r7, #2]
 8004aa8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac0:	2b40      	cmp	r3, #64	; 0x40
 8004ac2:	d007      	beq.n	8004ad4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ad2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004adc:	d178      	bne.n	8004bd0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d002      	beq.n	8004aec <HAL_SPI_TransmitReceive+0x10a>
 8004ae6:	8b7b      	ldrh	r3, [r7, #26]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d166      	bne.n	8004bba <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af0:	881a      	ldrh	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afc:	1c9a      	adds	r2, r3, #2
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b10:	e053      	b.n	8004bba <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d11b      	bne.n	8004b58 <HAL_SPI_TransmitReceive+0x176>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d016      	beq.n	8004b58 <HAL_SPI_TransmitReceive+0x176>
 8004b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d113      	bne.n	8004b58 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b34:	881a      	ldrh	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b40:	1c9a      	adds	r2, r3, #2
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d119      	bne.n	8004b9a <HAL_SPI_TransmitReceive+0x1b8>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d014      	beq.n	8004b9a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68da      	ldr	r2, [r3, #12]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7a:	b292      	uxth	r2, r2
 8004b7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b82:	1c9a      	adds	r2, r3, #2
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b96:	2301      	movs	r3, #1
 8004b98:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b9a:	f7fd fbbb 	bl	8002314 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d807      	bhi.n	8004bba <HAL_SPI_TransmitReceive+0x1d8>
 8004baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb0:	d003      	beq.n	8004bba <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004bb8:	e0a7      	b.n	8004d0a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1a6      	bne.n	8004b12 <HAL_SPI_TransmitReceive+0x130>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1a1      	bne.n	8004b12 <HAL_SPI_TransmitReceive+0x130>
 8004bce:	e07c      	b.n	8004cca <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <HAL_SPI_TransmitReceive+0x1fc>
 8004bd8:	8b7b      	ldrh	r3, [r7, #26]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d16b      	bne.n	8004cb6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	330c      	adds	r3, #12
 8004be8:	7812      	ldrb	r2, [r2, #0]
 8004bea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c04:	e057      	b.n	8004cb6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d11c      	bne.n	8004c4e <HAL_SPI_TransmitReceive+0x26c>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d017      	beq.n	8004c4e <HAL_SPI_TransmitReceive+0x26c>
 8004c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d114      	bne.n	8004c4e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	330c      	adds	r3, #12
 8004c2e:	7812      	ldrb	r2, [r2, #0]
 8004c30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c36:	1c5a      	adds	r2, r3, #1
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	3b01      	subs	r3, #1
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d119      	bne.n	8004c90 <HAL_SPI_TransmitReceive+0x2ae>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d014      	beq.n	8004c90 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68da      	ldr	r2, [r3, #12]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c70:	b2d2      	uxtb	r2, r2
 8004c72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c78:	1c5a      	adds	r2, r3, #1
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	3b01      	subs	r3, #1
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c90:	f7fd fb40 	bl	8002314 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d803      	bhi.n	8004ca8 <HAL_SPI_TransmitReceive+0x2c6>
 8004ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca6:	d102      	bne.n	8004cae <HAL_SPI_TransmitReceive+0x2cc>
 8004ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d103      	bne.n	8004cb6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004cb4:	e029      	b.n	8004d0a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1a2      	bne.n	8004c06 <HAL_SPI_TransmitReceive+0x224>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d19d      	bne.n	8004c06 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ccc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f000 f8b2 	bl	8004e38 <SPI_EndRxTxTransaction>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d006      	beq.n	8004ce8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004ce6:	e010      	b.n	8004d0a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10b      	bne.n	8004d08 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	617b      	str	r3, [r7, #20]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	e000      	b.n	8004d0a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004d08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3730      	adds	r7, #48	; 0x30
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
	...

08004d28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b088      	sub	sp, #32
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	603b      	str	r3, [r7, #0]
 8004d34:	4613      	mov	r3, r2
 8004d36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d38:	f7fd faec 	bl	8002314 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d40:	1a9b      	subs	r3, r3, r2
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	4413      	add	r3, r2
 8004d46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d48:	f7fd fae4 	bl	8002314 <HAL_GetTick>
 8004d4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d4e:	4b39      	ldr	r3, [pc, #228]	; (8004e34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	015b      	lsls	r3, r3, #5
 8004d54:	0d1b      	lsrs	r3, r3, #20
 8004d56:	69fa      	ldr	r2, [r7, #28]
 8004d58:	fb02 f303 	mul.w	r3, r2, r3
 8004d5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d5e:	e054      	b.n	8004e0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d66:	d050      	beq.n	8004e0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d68:	f7fd fad4 	bl	8002314 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	69fa      	ldr	r2, [r7, #28]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d902      	bls.n	8004d7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d13d      	bne.n	8004dfa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d96:	d111      	bne.n	8004dbc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004da0:	d004      	beq.n	8004dac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004daa:	d107      	bne.n	8004dbc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dc4:	d10f      	bne.n	8004de6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004de4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e017      	b.n	8004e2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e00:	2300      	movs	r3, #0
 8004e02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	4013      	ands	r3, r2
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	bf0c      	ite	eq
 8004e1a:	2301      	moveq	r3, #1
 8004e1c:	2300      	movne	r3, #0
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	461a      	mov	r2, r3
 8004e22:	79fb      	ldrb	r3, [r7, #7]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d19b      	bne.n	8004d60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3720      	adds	r7, #32
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20000004 	.word	0x20000004

08004e38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b088      	sub	sp, #32
 8004e3c:	af02      	add	r7, sp, #8
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e44:	4b1b      	ldr	r3, [pc, #108]	; (8004eb4 <SPI_EndRxTxTransaction+0x7c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a1b      	ldr	r2, [pc, #108]	; (8004eb8 <SPI_EndRxTxTransaction+0x80>)
 8004e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4e:	0d5b      	lsrs	r3, r3, #21
 8004e50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e54:	fb02 f303 	mul.w	r3, r2, r3
 8004e58:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e62:	d112      	bne.n	8004e8a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2180      	movs	r1, #128	; 0x80
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f7ff ff5a 	bl	8004d28 <SPI_WaitFlagStateUntilTimeout>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d016      	beq.n	8004ea8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7e:	f043 0220 	orr.w	r2, r3, #32
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e00f      	b.n	8004eaa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00a      	beq.n	8004ea6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea0:	2b80      	cmp	r3, #128	; 0x80
 8004ea2:	d0f2      	beq.n	8004e8a <SPI_EndRxTxTransaction+0x52>
 8004ea4:	e000      	b.n	8004ea8 <SPI_EndRxTxTransaction+0x70>
        break;
 8004ea6:	bf00      	nop
  }

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3718      	adds	r7, #24
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	20000004 	.word	0x20000004
 8004eb8:	165e9f81 	.word	0x165e9f81

08004ebc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e041      	b.n	8004f52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d106      	bne.n	8004ee8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f839 	bl	8004f5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	4619      	mov	r1, r3
 8004efa:	4610      	mov	r0, r2
 8004efc:	f000 f9ca 	bl	8005294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
	...

08004f70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d001      	beq.n	8004f88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e044      	b.n	8005012 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0201 	orr.w	r2, r2, #1
 8004f9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a1e      	ldr	r2, [pc, #120]	; (8005020 <HAL_TIM_Base_Start_IT+0xb0>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d018      	beq.n	8004fdc <HAL_TIM_Base_Start_IT+0x6c>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb2:	d013      	beq.n	8004fdc <HAL_TIM_Base_Start_IT+0x6c>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a1a      	ldr	r2, [pc, #104]	; (8005024 <HAL_TIM_Base_Start_IT+0xb4>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00e      	beq.n	8004fdc <HAL_TIM_Base_Start_IT+0x6c>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a19      	ldr	r2, [pc, #100]	; (8005028 <HAL_TIM_Base_Start_IT+0xb8>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d009      	beq.n	8004fdc <HAL_TIM_Base_Start_IT+0x6c>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a17      	ldr	r2, [pc, #92]	; (800502c <HAL_TIM_Base_Start_IT+0xbc>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d004      	beq.n	8004fdc <HAL_TIM_Base_Start_IT+0x6c>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a16      	ldr	r2, [pc, #88]	; (8005030 <HAL_TIM_Base_Start_IT+0xc0>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d111      	bne.n	8005000 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2b06      	cmp	r3, #6
 8004fec:	d010      	beq.n	8005010 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f042 0201 	orr.w	r2, r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ffe:	e007      	b.n	8005010 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f042 0201 	orr.w	r2, r2, #1
 800500e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	40010000 	.word	0x40010000
 8005024:	40000400 	.word	0x40000400
 8005028:	40000800 	.word	0x40000800
 800502c:	40000c00 	.word	0x40000c00
 8005030:	40014000 	.word	0x40014000

08005034 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b02      	cmp	r3, #2
 8005048:	d122      	bne.n	8005090 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b02      	cmp	r3, #2
 8005056:	d11b      	bne.n	8005090 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f06f 0202 	mvn.w	r2, #2
 8005060:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	f003 0303 	and.w	r3, r3, #3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f8ee 	bl	8005258 <HAL_TIM_IC_CaptureCallback>
 800507c:	e005      	b.n	800508a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f8e0 	bl	8005244 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 f8f1 	bl	800526c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	f003 0304 	and.w	r3, r3, #4
 800509a:	2b04      	cmp	r3, #4
 800509c:	d122      	bne.n	80050e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f003 0304 	and.w	r3, r3, #4
 80050a8:	2b04      	cmp	r3, #4
 80050aa:	d11b      	bne.n	80050e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f06f 0204 	mvn.w	r2, #4
 80050b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2202      	movs	r2, #2
 80050ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f8c4 	bl	8005258 <HAL_TIM_IC_CaptureCallback>
 80050d0:	e005      	b.n	80050de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f8b6 	bl	8005244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f8c7 	bl	800526c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	f003 0308 	and.w	r3, r3, #8
 80050ee:	2b08      	cmp	r3, #8
 80050f0:	d122      	bne.n	8005138 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f003 0308 	and.w	r3, r3, #8
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d11b      	bne.n	8005138 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f06f 0208 	mvn.w	r2, #8
 8005108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2204      	movs	r2, #4
 800510e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	f003 0303 	and.w	r3, r3, #3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f89a 	bl	8005258 <HAL_TIM_IC_CaptureCallback>
 8005124:	e005      	b.n	8005132 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f88c 	bl	8005244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f89d 	bl	800526c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	f003 0310 	and.w	r3, r3, #16
 8005142:	2b10      	cmp	r3, #16
 8005144:	d122      	bne.n	800518c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f003 0310 	and.w	r3, r3, #16
 8005150:	2b10      	cmp	r3, #16
 8005152:	d11b      	bne.n	800518c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f06f 0210 	mvn.w	r2, #16
 800515c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2208      	movs	r2, #8
 8005162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f870 	bl	8005258 <HAL_TIM_IC_CaptureCallback>
 8005178:	e005      	b.n	8005186 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f862 	bl	8005244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f873 	bl	800526c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b01      	cmp	r3, #1
 8005198:	d10e      	bne.n	80051b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d107      	bne.n	80051b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f06f 0201 	mvn.w	r2, #1
 80051b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7fc fe1a 	bl	8001dec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c2:	2b80      	cmp	r3, #128	; 0x80
 80051c4:	d10e      	bne.n	80051e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d0:	2b80      	cmp	r3, #128	; 0x80
 80051d2:	d107      	bne.n	80051e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f8e2 	bl	80053a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ee:	2b40      	cmp	r3, #64	; 0x40
 80051f0:	d10e      	bne.n	8005210 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fc:	2b40      	cmp	r3, #64	; 0x40
 80051fe:	d107      	bne.n	8005210 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f838 	bl	8005280 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f003 0320 	and.w	r3, r3, #32
 800521a:	2b20      	cmp	r3, #32
 800521c:	d10e      	bne.n	800523c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f003 0320 	and.w	r3, r3, #32
 8005228:	2b20      	cmp	r3, #32
 800522a:	d107      	bne.n	800523c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f06f 0220 	mvn.w	r2, #32
 8005234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f8ac 	bl	8005394 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800523c:	bf00      	nop
 800523e:	3708      	adds	r7, #8
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a34      	ldr	r2, [pc, #208]	; (8005378 <TIM_Base_SetConfig+0xe4>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00f      	beq.n	80052cc <TIM_Base_SetConfig+0x38>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b2:	d00b      	beq.n	80052cc <TIM_Base_SetConfig+0x38>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a31      	ldr	r2, [pc, #196]	; (800537c <TIM_Base_SetConfig+0xe8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d007      	beq.n	80052cc <TIM_Base_SetConfig+0x38>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a30      	ldr	r2, [pc, #192]	; (8005380 <TIM_Base_SetConfig+0xec>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d003      	beq.n	80052cc <TIM_Base_SetConfig+0x38>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a2f      	ldr	r2, [pc, #188]	; (8005384 <TIM_Base_SetConfig+0xf0>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d108      	bne.n	80052de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a25      	ldr	r2, [pc, #148]	; (8005378 <TIM_Base_SetConfig+0xe4>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d01b      	beq.n	800531e <TIM_Base_SetConfig+0x8a>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ec:	d017      	beq.n	800531e <TIM_Base_SetConfig+0x8a>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a22      	ldr	r2, [pc, #136]	; (800537c <TIM_Base_SetConfig+0xe8>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d013      	beq.n	800531e <TIM_Base_SetConfig+0x8a>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a21      	ldr	r2, [pc, #132]	; (8005380 <TIM_Base_SetConfig+0xec>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d00f      	beq.n	800531e <TIM_Base_SetConfig+0x8a>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a20      	ldr	r2, [pc, #128]	; (8005384 <TIM_Base_SetConfig+0xf0>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d00b      	beq.n	800531e <TIM_Base_SetConfig+0x8a>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a1f      	ldr	r2, [pc, #124]	; (8005388 <TIM_Base_SetConfig+0xf4>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d007      	beq.n	800531e <TIM_Base_SetConfig+0x8a>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a1e      	ldr	r2, [pc, #120]	; (800538c <TIM_Base_SetConfig+0xf8>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d003      	beq.n	800531e <TIM_Base_SetConfig+0x8a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a1d      	ldr	r2, [pc, #116]	; (8005390 <TIM_Base_SetConfig+0xfc>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d108      	bne.n	8005330 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005324:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	4313      	orrs	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	4313      	orrs	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a08      	ldr	r2, [pc, #32]	; (8005378 <TIM_Base_SetConfig+0xe4>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d103      	bne.n	8005364 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	691a      	ldr	r2, [r3, #16]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	615a      	str	r2, [r3, #20]
}
 800536a:	bf00      	nop
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40010000 	.word	0x40010000
 800537c:	40000400 	.word	0x40000400
 8005380:	40000800 	.word	0x40000800
 8005384:	40000c00 	.word	0x40000c00
 8005388:	40014000 	.word	0x40014000
 800538c:	40014400 	.word	0x40014400
 8005390:	40014800 	.word	0x40014800

08005394 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053bc:	b084      	sub	sp, #16
 80053be:	b580      	push	{r7, lr}
 80053c0:	b084      	sub	sp, #16
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
 80053c6:	f107 001c 	add.w	r0, r7, #28
 80053ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d122      	bne.n	800541a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80053e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d105      	bne.n	800540e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f001 fbee 	bl	8006bf0 <USB_CoreReset>
 8005414:	4603      	mov	r3, r0
 8005416:	73fb      	strb	r3, [r7, #15]
 8005418:	e01a      	b.n	8005450 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f001 fbe2 	bl	8006bf0 <USB_CoreReset>
 800542c:	4603      	mov	r3, r0
 800542e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005432:	2b00      	cmp	r3, #0
 8005434:	d106      	bne.n	8005444 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	639a      	str	r2, [r3, #56]	; 0x38
 8005442:	e005      	b.n	8005450 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005448:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005452:	2b01      	cmp	r3, #1
 8005454:	d10b      	bne.n	800546e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f043 0206 	orr.w	r2, r3, #6
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f043 0220 	orr.w	r2, r3, #32
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800546e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800547a:	b004      	add	sp, #16
 800547c:	4770      	bx	lr
	...

08005480 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	4613      	mov	r3, r2
 800548c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800548e:	79fb      	ldrb	r3, [r7, #7]
 8005490:	2b02      	cmp	r3, #2
 8005492:	d165      	bne.n	8005560 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	4a41      	ldr	r2, [pc, #260]	; (800559c <USB_SetTurnaroundTime+0x11c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d906      	bls.n	80054aa <USB_SetTurnaroundTime+0x2a>
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	4a40      	ldr	r2, [pc, #256]	; (80055a0 <USB_SetTurnaroundTime+0x120>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d202      	bcs.n	80054aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80054a4:	230f      	movs	r3, #15
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	e062      	b.n	8005570 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	4a3c      	ldr	r2, [pc, #240]	; (80055a0 <USB_SetTurnaroundTime+0x120>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d306      	bcc.n	80054c0 <USB_SetTurnaroundTime+0x40>
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	4a3b      	ldr	r2, [pc, #236]	; (80055a4 <USB_SetTurnaroundTime+0x124>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d202      	bcs.n	80054c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80054ba:	230e      	movs	r3, #14
 80054bc:	617b      	str	r3, [r7, #20]
 80054be:	e057      	b.n	8005570 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	4a38      	ldr	r2, [pc, #224]	; (80055a4 <USB_SetTurnaroundTime+0x124>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d306      	bcc.n	80054d6 <USB_SetTurnaroundTime+0x56>
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4a37      	ldr	r2, [pc, #220]	; (80055a8 <USB_SetTurnaroundTime+0x128>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d202      	bcs.n	80054d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80054d0:	230d      	movs	r3, #13
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	e04c      	b.n	8005570 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	4a33      	ldr	r2, [pc, #204]	; (80055a8 <USB_SetTurnaroundTime+0x128>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d306      	bcc.n	80054ec <USB_SetTurnaroundTime+0x6c>
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	4a32      	ldr	r2, [pc, #200]	; (80055ac <USB_SetTurnaroundTime+0x12c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d802      	bhi.n	80054ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80054e6:	230c      	movs	r3, #12
 80054e8:	617b      	str	r3, [r7, #20]
 80054ea:	e041      	b.n	8005570 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	4a2f      	ldr	r2, [pc, #188]	; (80055ac <USB_SetTurnaroundTime+0x12c>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d906      	bls.n	8005502 <USB_SetTurnaroundTime+0x82>
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4a2e      	ldr	r2, [pc, #184]	; (80055b0 <USB_SetTurnaroundTime+0x130>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d802      	bhi.n	8005502 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80054fc:	230b      	movs	r3, #11
 80054fe:	617b      	str	r3, [r7, #20]
 8005500:	e036      	b.n	8005570 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	4a2a      	ldr	r2, [pc, #168]	; (80055b0 <USB_SetTurnaroundTime+0x130>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d906      	bls.n	8005518 <USB_SetTurnaroundTime+0x98>
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	4a29      	ldr	r2, [pc, #164]	; (80055b4 <USB_SetTurnaroundTime+0x134>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d802      	bhi.n	8005518 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005512:	230a      	movs	r3, #10
 8005514:	617b      	str	r3, [r7, #20]
 8005516:	e02b      	b.n	8005570 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	4a26      	ldr	r2, [pc, #152]	; (80055b4 <USB_SetTurnaroundTime+0x134>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d906      	bls.n	800552e <USB_SetTurnaroundTime+0xae>
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	4a25      	ldr	r2, [pc, #148]	; (80055b8 <USB_SetTurnaroundTime+0x138>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d202      	bcs.n	800552e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005528:	2309      	movs	r3, #9
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	e020      	b.n	8005570 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	4a21      	ldr	r2, [pc, #132]	; (80055b8 <USB_SetTurnaroundTime+0x138>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d306      	bcc.n	8005544 <USB_SetTurnaroundTime+0xc4>
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	4a20      	ldr	r2, [pc, #128]	; (80055bc <USB_SetTurnaroundTime+0x13c>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d802      	bhi.n	8005544 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800553e:	2308      	movs	r3, #8
 8005540:	617b      	str	r3, [r7, #20]
 8005542:	e015      	b.n	8005570 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	4a1d      	ldr	r2, [pc, #116]	; (80055bc <USB_SetTurnaroundTime+0x13c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d906      	bls.n	800555a <USB_SetTurnaroundTime+0xda>
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	4a1c      	ldr	r2, [pc, #112]	; (80055c0 <USB_SetTurnaroundTime+0x140>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d202      	bcs.n	800555a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005554:	2307      	movs	r3, #7
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	e00a      	b.n	8005570 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800555a:	2306      	movs	r3, #6
 800555c:	617b      	str	r3, [r7, #20]
 800555e:	e007      	b.n	8005570 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005560:	79fb      	ldrb	r3, [r7, #7]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d102      	bne.n	800556c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005566:	2309      	movs	r3, #9
 8005568:	617b      	str	r3, [r7, #20]
 800556a:	e001      	b.n	8005570 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800556c:	2309      	movs	r3, #9
 800556e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	68da      	ldr	r2, [r3, #12]
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	029b      	lsls	r3, r3, #10
 8005584:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005588:	431a      	orrs	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	371c      	adds	r7, #28
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	00d8acbf 	.word	0x00d8acbf
 80055a0:	00e4e1c0 	.word	0x00e4e1c0
 80055a4:	00f42400 	.word	0x00f42400
 80055a8:	01067380 	.word	0x01067380
 80055ac:	011a499f 	.word	0x011a499f
 80055b0:	01312cff 	.word	0x01312cff
 80055b4:	014ca43f 	.word	0x014ca43f
 80055b8:	016e3600 	.word	0x016e3600
 80055bc:	01a6ab1f 	.word	0x01a6ab1f
 80055c0:	01e84800 	.word	0x01e84800

080055c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f043 0201 	orr.w	r2, r3, #1
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b083      	sub	sp, #12
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f023 0201 	bic.w	r2, r3, #1
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	460b      	mov	r3, r1
 8005612:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005614:	2300      	movs	r3, #0
 8005616:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005624:	78fb      	ldrb	r3, [r7, #3]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d115      	bne.n	8005656 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005636:	2001      	movs	r0, #1
 8005638:	f7fc fe78 	bl	800232c <HAL_Delay>
      ms++;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	3301      	adds	r3, #1
 8005640:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f001 fa45 	bl	8006ad2 <USB_GetMode>
 8005648:	4603      	mov	r3, r0
 800564a:	2b01      	cmp	r3, #1
 800564c:	d01e      	beq.n	800568c <USB_SetCurrentMode+0x84>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2b31      	cmp	r3, #49	; 0x31
 8005652:	d9f0      	bls.n	8005636 <USB_SetCurrentMode+0x2e>
 8005654:	e01a      	b.n	800568c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005656:	78fb      	ldrb	r3, [r7, #3]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d115      	bne.n	8005688 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005668:	2001      	movs	r0, #1
 800566a:	f7fc fe5f 	bl	800232c <HAL_Delay>
      ms++;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	3301      	adds	r3, #1
 8005672:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f001 fa2c 	bl	8006ad2 <USB_GetMode>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d005      	beq.n	800568c <USB_SetCurrentMode+0x84>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2b31      	cmp	r3, #49	; 0x31
 8005684:	d9f0      	bls.n	8005668 <USB_SetCurrentMode+0x60>
 8005686:	e001      	b.n	800568c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e005      	b.n	8005698 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2b32      	cmp	r3, #50	; 0x32
 8005690:	d101      	bne.n	8005696 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e000      	b.n	8005698 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056a0:	b084      	sub	sp, #16
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b086      	sub	sp, #24
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80056ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056b2:	2300      	movs	r3, #0
 80056b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80056ba:	2300      	movs	r3, #0
 80056bc:	613b      	str	r3, [r7, #16]
 80056be:	e009      	b.n	80056d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	3340      	adds	r3, #64	; 0x40
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	2200      	movs	r2, #0
 80056cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	3301      	adds	r3, #1
 80056d2:	613b      	str	r3, [r7, #16]
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	2b0e      	cmp	r3, #14
 80056d8:	d9f2      	bls.n	80056c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80056da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d11c      	bne.n	800571a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056ee:	f043 0302 	orr.w	r3, r3, #2
 80056f2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005704:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005710:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	639a      	str	r2, [r3, #56]	; 0x38
 8005718:	e00b      	b.n	8005732 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005738:	461a      	mov	r2, r3
 800573a:	2300      	movs	r3, #0
 800573c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005744:	4619      	mov	r1, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800574c:	461a      	mov	r2, r3
 800574e:	680b      	ldr	r3, [r1, #0]
 8005750:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005754:	2b01      	cmp	r3, #1
 8005756:	d10c      	bne.n	8005772 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800575a:	2b00      	cmp	r3, #0
 800575c:	d104      	bne.n	8005768 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800575e:	2100      	movs	r1, #0
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f965 	bl	8005a30 <USB_SetDevSpeed>
 8005766:	e008      	b.n	800577a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005768:	2101      	movs	r1, #1
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f960 	bl	8005a30 <USB_SetDevSpeed>
 8005770:	e003      	b.n	800577a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005772:	2103      	movs	r1, #3
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f95b 	bl	8005a30 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800577a:	2110      	movs	r1, #16
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f8f3 	bl	8005968 <USB_FlushTxFifo>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f91f 	bl	80059d0 <USB_FlushRxFifo>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a2:	461a      	mov	r2, r3
 80057a4:	2300      	movs	r3, #0
 80057a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ae:	461a      	mov	r2, r3
 80057b0:	2300      	movs	r3, #0
 80057b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ba:	461a      	mov	r2, r3
 80057bc:	2300      	movs	r3, #0
 80057be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057c0:	2300      	movs	r3, #0
 80057c2:	613b      	str	r3, [r7, #16]
 80057c4:	e043      	b.n	800584e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057dc:	d118      	bne.n	8005810 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10a      	bne.n	80057fa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f0:	461a      	mov	r2, r3
 80057f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057f6:	6013      	str	r3, [r2, #0]
 80057f8:	e013      	b.n	8005822 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	4413      	add	r3, r2
 8005802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005806:	461a      	mov	r2, r3
 8005808:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	e008      	b.n	8005822 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4413      	add	r3, r2
 8005818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581c:	461a      	mov	r2, r3
 800581e:	2300      	movs	r3, #0
 8005820:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	4413      	add	r3, r2
 800582a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582e:	461a      	mov	r2, r3
 8005830:	2300      	movs	r3, #0
 8005832:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005840:	461a      	mov	r2, r3
 8005842:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005846:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	3301      	adds	r3, #1
 800584c:	613b      	str	r3, [r7, #16]
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	429a      	cmp	r2, r3
 8005854:	d3b7      	bcc.n	80057c6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005856:	2300      	movs	r3, #0
 8005858:	613b      	str	r3, [r7, #16]
 800585a:	e043      	b.n	80058e4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	4413      	add	r3, r2
 8005864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800586e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005872:	d118      	bne.n	80058a6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10a      	bne.n	8005890 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4413      	add	r3, r2
 8005882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005886:	461a      	mov	r2, r3
 8005888:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800588c:	6013      	str	r3, [r2, #0]
 800588e:	e013      	b.n	80058b8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589c:	461a      	mov	r2, r3
 800589e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058a2:	6013      	str	r3, [r2, #0]
 80058a4:	e008      	b.n	80058b8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b2:	461a      	mov	r2, r3
 80058b4:	2300      	movs	r3, #0
 80058b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c4:	461a      	mov	r2, r3
 80058c6:	2300      	movs	r3, #0
 80058c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d6:	461a      	mov	r2, r3
 80058d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	3301      	adds	r3, #1
 80058e2:	613b      	str	r3, [r7, #16]
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d3b7      	bcc.n	800585c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800590c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800590e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005910:	2b00      	cmp	r3, #0
 8005912:	d105      	bne.n	8005920 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	f043 0210 	orr.w	r2, r3, #16
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	699a      	ldr	r2, [r3, #24]
 8005924:	4b0f      	ldr	r3, [pc, #60]	; (8005964 <USB_DevInit+0x2c4>)
 8005926:	4313      	orrs	r3, r2
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800592c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800592e:	2b00      	cmp	r3, #0
 8005930:	d005      	beq.n	800593e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	f043 0208 	orr.w	r2, r3, #8
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800593e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005940:	2b01      	cmp	r3, #1
 8005942:	d107      	bne.n	8005954 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800594c:	f043 0304 	orr.w	r3, r3, #4
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005954:	7dfb      	ldrb	r3, [r7, #23]
}
 8005956:	4618      	mov	r0, r3
 8005958:	3718      	adds	r7, #24
 800595a:	46bd      	mov	sp, r7
 800595c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005960:	b004      	add	sp, #16
 8005962:	4770      	bx	lr
 8005964:	803c3800 	.word	0x803c3800

08005968 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005972:	2300      	movs	r3, #0
 8005974:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	3301      	adds	r3, #1
 800597a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4a13      	ldr	r2, [pc, #76]	; (80059cc <USB_FlushTxFifo+0x64>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d901      	bls.n	8005988 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e01b      	b.n	80059c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	2b00      	cmp	r3, #0
 800598e:	daf2      	bge.n	8005976 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	019b      	lsls	r3, r3, #6
 8005998:	f043 0220 	orr.w	r2, r3, #32
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	3301      	adds	r3, #1
 80059a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	4a08      	ldr	r2, [pc, #32]	; (80059cc <USB_FlushTxFifo+0x64>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d901      	bls.n	80059b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e006      	b.n	80059c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f003 0320 	and.w	r3, r3, #32
 80059ba:	2b20      	cmp	r3, #32
 80059bc:	d0f0      	beq.n	80059a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	00030d40 	.word	0x00030d40

080059d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059d8:	2300      	movs	r3, #0
 80059da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	3301      	adds	r3, #1
 80059e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	4a11      	ldr	r2, [pc, #68]	; (8005a2c <USB_FlushRxFifo+0x5c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d901      	bls.n	80059ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e018      	b.n	8005a20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	daf2      	bge.n	80059dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2210      	movs	r2, #16
 80059fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	3301      	adds	r3, #1
 8005a04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	4a08      	ldr	r2, [pc, #32]	; (8005a2c <USB_FlushRxFifo+0x5c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d901      	bls.n	8005a12 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e006      	b.n	8005a20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	f003 0310 	and.w	r3, r3, #16
 8005a1a:	2b10      	cmp	r3, #16
 8005a1c:	d0f0      	beq.n	8005a00 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	00030d40 	.word	0x00030d40

08005a30 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	460b      	mov	r3, r1
 8005a3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	78fb      	ldrb	r3, [r7, #3]
 8005a4a:	68f9      	ldr	r1, [r7, #12]
 8005a4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a50:	4313      	orrs	r3, r2
 8005a52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b087      	sub	sp, #28
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f003 0306 	and.w	r3, r3, #6
 8005a7a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d102      	bne.n	8005a88 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005a82:	2300      	movs	r3, #0
 8005a84:	75fb      	strb	r3, [r7, #23]
 8005a86:	e00a      	b.n	8005a9e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d002      	beq.n	8005a94 <USB_GetDevSpeed+0x32>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2b06      	cmp	r3, #6
 8005a92:	d102      	bne.n	8005a9a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005a94:	2302      	movs	r3, #2
 8005a96:	75fb      	strb	r3, [r7, #23]
 8005a98:	e001      	b.n	8005a9e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005a9a:	230f      	movs	r3, #15
 8005a9c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	371c      	adds	r7, #28
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	785b      	ldrb	r3, [r3, #1]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d13a      	bne.n	8005b3e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ace:	69da      	ldr	r2, [r3, #28]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	f003 030f 	and.w	r3, r3, #15
 8005ad8:	2101      	movs	r1, #1
 8005ada:	fa01 f303 	lsl.w	r3, r1, r3
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	68f9      	ldr	r1, [r7, #12]
 8005ae2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d155      	bne.n	8005bac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	791b      	ldrb	r3, [r3, #4]
 8005b1a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b1c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	059b      	lsls	r3, r3, #22
 8005b22:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b24:	4313      	orrs	r3, r2
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	0151      	lsls	r1, r2, #5
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b3a:	6013      	str	r3, [r2, #0]
 8005b3c:	e036      	b.n	8005bac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b44:	69da      	ldr	r2, [r3, #28]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	2101      	movs	r1, #1
 8005b50:	fa01 f303 	lsl.w	r3, r1, r3
 8005b54:	041b      	lsls	r3, r3, #16
 8005b56:	68f9      	ldr	r1, [r7, #12]
 8005b58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d11a      	bne.n	8005bac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	791b      	ldrb	r3, [r3, #4]
 8005b90:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b92:	430b      	orrs	r3, r1
 8005b94:	4313      	orrs	r3, r2
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	0151      	lsls	r1, r2, #5
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	440a      	add	r2, r1
 8005b9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005baa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
	...

08005bbc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	785b      	ldrb	r3, [r3, #1]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d161      	bne.n	8005c9c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bee:	d11f      	bne.n	8005c30 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	0151      	lsls	r1, r2, #5
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	440a      	add	r2, r1
 8005c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c0e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	0151      	lsls	r1, r2, #5
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	440a      	add	r2, r1
 8005c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	f003 030f 	and.w	r3, r3, #15
 8005c40:	2101      	movs	r1, #1
 8005c42:	fa01 f303 	lsl.w	r3, r1, r3
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	68f9      	ldr	r1, [r7, #12]
 8005c4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c50:	4013      	ands	r3, r2
 8005c52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5a:	69da      	ldr	r2, [r3, #28]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	f003 030f 	and.w	r3, r3, #15
 8005c64:	2101      	movs	r1, #1
 8005c66:	fa01 f303 	lsl.w	r3, r1, r3
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	43db      	mvns	r3, r3
 8005c6e:	68f9      	ldr	r1, [r7, #12]
 8005c70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c74:	4013      	ands	r3, r2
 8005c76:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	0159      	lsls	r1, r3, #5
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	440b      	add	r3, r1
 8005c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c92:	4619      	mov	r1, r3
 8005c94:	4b35      	ldr	r3, [pc, #212]	; (8005d6c <USB_DeactivateEndpoint+0x1b0>)
 8005c96:	4013      	ands	r3, r2
 8005c98:	600b      	str	r3, [r1, #0]
 8005c9a:	e060      	b.n	8005d5e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cb2:	d11f      	bne.n	8005cf4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	0151      	lsls	r1, r2, #5
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	440a      	add	r2, r1
 8005cca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cd2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	0151      	lsls	r1, r2, #5
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	440a      	add	r2, r1
 8005cea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cf2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	f003 030f 	and.w	r3, r3, #15
 8005d04:	2101      	movs	r1, #1
 8005d06:	fa01 f303 	lsl.w	r3, r1, r3
 8005d0a:	041b      	lsls	r3, r3, #16
 8005d0c:	43db      	mvns	r3, r3
 8005d0e:	68f9      	ldr	r1, [r7, #12]
 8005d10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d14:	4013      	ands	r3, r2
 8005d16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1e:	69da      	ldr	r2, [r3, #28]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	f003 030f 	and.w	r3, r3, #15
 8005d28:	2101      	movs	r1, #1
 8005d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d2e:	041b      	lsls	r3, r3, #16
 8005d30:	43db      	mvns	r3, r3
 8005d32:	68f9      	ldr	r1, [r7, #12]
 8005d34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d38:	4013      	ands	r3, r2
 8005d3a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	0159      	lsls	r1, r3, #5
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	440b      	add	r3, r1
 8005d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d56:	4619      	mov	r1, r3
 8005d58:	4b05      	ldr	r3, [pc, #20]	; (8005d70 <USB_DeactivateEndpoint+0x1b4>)
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	ec337800 	.word	0xec337800
 8005d70:	eff37800 	.word	0xeff37800

08005d74 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b08a      	sub	sp, #40	; 0x28
 8005d78:	af02      	add	r7, sp, #8
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	785b      	ldrb	r3, [r3, #1]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	f040 815c 	bne.w	800604e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d132      	bne.n	8005e04 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	0151      	lsls	r1, r2, #5
 8005db0:	69fa      	ldr	r2, [r7, #28]
 8005db2:	440a      	add	r2, r1
 8005db4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005db8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005dbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005dc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	0151      	lsls	r1, r2, #5
 8005dd4:	69fa      	ldr	r2, [r7, #28]
 8005dd6:	440a      	add	r2, r1
 8005dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ddc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005de0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	0151      	lsls	r1, r2, #5
 8005df4:	69fa      	ldr	r2, [r7, #28]
 8005df6:	440a      	add	r2, r1
 8005df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dfc:	0cdb      	lsrs	r3, r3, #19
 8005dfe:	04db      	lsls	r3, r3, #19
 8005e00:	6113      	str	r3, [r2, #16]
 8005e02:	e074      	b.n	8005eee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	0151      	lsls	r1, r2, #5
 8005e16:	69fa      	ldr	r2, [r7, #28]
 8005e18:	440a      	add	r2, r1
 8005e1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e1e:	0cdb      	lsrs	r3, r3, #19
 8005e20:	04db      	lsls	r3, r3, #19
 8005e22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	0151      	lsls	r1, r2, #5
 8005e36:	69fa      	ldr	r2, [r7, #28]
 8005e38:	440a      	add	r2, r1
 8005e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e54:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	6999      	ldr	r1, [r3, #24]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	440b      	add	r3, r1
 8005e60:	1e59      	subs	r1, r3, #1
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e6a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005e6c:	4b9d      	ldr	r3, [pc, #628]	; (80060e4 <USB_EPStartXfer+0x370>)
 8005e6e:	400b      	ands	r3, r1
 8005e70:	69b9      	ldr	r1, [r7, #24]
 8005e72:	0148      	lsls	r0, r1, #5
 8005e74:	69f9      	ldr	r1, [r7, #28]
 8005e76:	4401      	add	r1, r0
 8005e78:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8c:	691a      	ldr	r2, [r3, #16]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e96:	69b9      	ldr	r1, [r7, #24]
 8005e98:	0148      	lsls	r0, r1, #5
 8005e9a:	69f9      	ldr	r1, [r7, #28]
 8005e9c:	4401      	add	r1, r0
 8005e9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	791b      	ldrb	r3, [r3, #4]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d11f      	bne.n	8005eee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	015a      	lsls	r2, r3, #5
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	0151      	lsls	r1, r2, #5
 8005ec0:	69fa      	ldr	r2, [r7, #28]
 8005ec2:	440a      	add	r2, r1
 8005ec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ec8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005ecc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	0151      	lsls	r1, r2, #5
 8005ee0:	69fa      	ldr	r2, [r7, #28]
 8005ee2:	440a      	add	r2, r1
 8005ee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ee8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005eec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005eee:	79fb      	ldrb	r3, [r7, #7]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d14b      	bne.n	8005f8c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d009      	beq.n	8005f10 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f08:	461a      	mov	r2, r3
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	791b      	ldrb	r3, [r3, #4]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d128      	bne.n	8005f6a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d110      	bne.n	8005f4a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	69ba      	ldr	r2, [r7, #24]
 8005f38:	0151      	lsls	r1, r2, #5
 8005f3a:	69fa      	ldr	r2, [r7, #28]
 8005f3c:	440a      	add	r2, r1
 8005f3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f46:	6013      	str	r3, [r2, #0]
 8005f48:	e00f      	b.n	8005f6a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	015a      	lsls	r2, r3, #5
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	4413      	add	r3, r2
 8005f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	0151      	lsls	r1, r2, #5
 8005f5c:	69fa      	ldr	r2, [r7, #28]
 8005f5e:	440a      	add	r2, r1
 8005f60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f68:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	015a      	lsls	r2, r3, #5
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	0151      	lsls	r1, r2, #5
 8005f7c:	69fa      	ldr	r2, [r7, #28]
 8005f7e:	440a      	add	r2, r1
 8005f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f88:	6013      	str	r3, [r2, #0]
 8005f8a:	e133      	b.n	80061f4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	69ba      	ldr	r2, [r7, #24]
 8005f9c:	0151      	lsls	r1, r2, #5
 8005f9e:	69fa      	ldr	r2, [r7, #28]
 8005fa0:	440a      	add	r2, r1
 8005fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fa6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005faa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	791b      	ldrb	r3, [r3, #4]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d015      	beq.n	8005fe0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 811b 	beq.w	80061f4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	f003 030f 	and.w	r3, r3, #15
 8005fce:	2101      	movs	r1, #1
 8005fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd4:	69f9      	ldr	r1, [r7, #28]
 8005fd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	634b      	str	r3, [r1, #52]	; 0x34
 8005fde:	e109      	b.n	80061f4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d110      	bne.n	8006012 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	0151      	lsls	r1, r2, #5
 8006002:	69fa      	ldr	r2, [r7, #28]
 8006004:	440a      	add	r2, r1
 8006006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800600a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800600e:	6013      	str	r3, [r2, #0]
 8006010:	e00f      	b.n	8006032 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	4413      	add	r3, r2
 800601a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	0151      	lsls	r1, r2, #5
 8006024:	69fa      	ldr	r2, [r7, #28]
 8006026:	440a      	add	r2, r1
 8006028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800602c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006030:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	6919      	ldr	r1, [r3, #16]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	781a      	ldrb	r2, [r3, #0]
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	b298      	uxth	r0, r3
 8006040:	79fb      	ldrb	r3, [r7, #7]
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	4603      	mov	r3, r0
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f000 fade 	bl	8006608 <USB_WritePacket>
 800604c:	e0d2      	b.n	80061f4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	4413      	add	r3, r2
 8006056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	0151      	lsls	r1, r2, #5
 8006060:	69fa      	ldr	r2, [r7, #28]
 8006062:	440a      	add	r2, r1
 8006064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006068:	0cdb      	lsrs	r3, r3, #19
 800606a:	04db      	lsls	r3, r3, #19
 800606c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	015a      	lsls	r2, r3, #5
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	4413      	add	r3, r2
 8006076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	0151      	lsls	r1, r2, #5
 8006080:	69fa      	ldr	r2, [r7, #28]
 8006082:	440a      	add	r2, r1
 8006084:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006088:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800608c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006090:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d126      	bne.n	80060e8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	015a      	lsls	r2, r3, #5
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	4413      	add	r3, r2
 80060a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a6:	691a      	ldr	r2, [r3, #16]
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060b0:	69b9      	ldr	r1, [r7, #24]
 80060b2:	0148      	lsls	r0, r1, #5
 80060b4:	69f9      	ldr	r1, [r7, #28]
 80060b6:	4401      	add	r1, r0
 80060b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060bc:	4313      	orrs	r3, r2
 80060be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	0151      	lsls	r1, r2, #5
 80060d2:	69fa      	ldr	r2, [r7, #28]
 80060d4:	440a      	add	r2, r1
 80060d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060de:	6113      	str	r3, [r2, #16]
 80060e0:	e03a      	b.n	8006158 <USB_EPStartXfer+0x3e4>
 80060e2:	bf00      	nop
 80060e4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	699a      	ldr	r2, [r3, #24]
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	4413      	add	r3, r2
 80060f2:	1e5a      	subs	r2, r3, #1
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060fc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	8afa      	ldrh	r2, [r7, #22]
 8006104:	fb03 f202 	mul.w	r2, r3, r2
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	4413      	add	r3, r2
 8006114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006118:	691a      	ldr	r2, [r3, #16]
 800611a:	8afb      	ldrh	r3, [r7, #22]
 800611c:	04d9      	lsls	r1, r3, #19
 800611e:	4b38      	ldr	r3, [pc, #224]	; (8006200 <USB_EPStartXfer+0x48c>)
 8006120:	400b      	ands	r3, r1
 8006122:	69b9      	ldr	r1, [r7, #24]
 8006124:	0148      	lsls	r0, r1, #5
 8006126:	69f9      	ldr	r1, [r7, #28]
 8006128:	4401      	add	r1, r0
 800612a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800612e:	4313      	orrs	r3, r2
 8006130:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	4413      	add	r3, r2
 800613a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613e:	691a      	ldr	r2, [r3, #16]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	69db      	ldr	r3, [r3, #28]
 8006144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006148:	69b9      	ldr	r1, [r7, #24]
 800614a:	0148      	lsls	r0, r1, #5
 800614c:	69f9      	ldr	r1, [r7, #28]
 800614e:	4401      	add	r1, r0
 8006150:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006154:	4313      	orrs	r3, r2
 8006156:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006158:	79fb      	ldrb	r3, [r7, #7]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d10d      	bne.n	800617a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d009      	beq.n	800617a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	6919      	ldr	r1, [r3, #16]
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006176:	460a      	mov	r2, r1
 8006178:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	791b      	ldrb	r3, [r3, #4]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d128      	bne.n	80061d4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800618e:	2b00      	cmp	r3, #0
 8006190:	d110      	bne.n	80061b4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	4413      	add	r3, r2
 800619a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	69ba      	ldr	r2, [r7, #24]
 80061a2:	0151      	lsls	r1, r2, #5
 80061a4:	69fa      	ldr	r2, [r7, #28]
 80061a6:	440a      	add	r2, r1
 80061a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061b0:	6013      	str	r3, [r2, #0]
 80061b2:	e00f      	b.n	80061d4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	015a      	lsls	r2, r3, #5
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	0151      	lsls	r1, r2, #5
 80061c6:	69fa      	ldr	r2, [r7, #28]
 80061c8:	440a      	add	r2, r1
 80061ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	69ba      	ldr	r2, [r7, #24]
 80061e4:	0151      	lsls	r1, r2, #5
 80061e6:	69fa      	ldr	r2, [r7, #28]
 80061e8:	440a      	add	r2, r1
 80061ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3720      	adds	r7, #32
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	1ff80000 	.word	0x1ff80000

08006204 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006204:	b480      	push	{r7}
 8006206:	b087      	sub	sp, #28
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	4613      	mov	r3, r2
 8006210:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	785b      	ldrb	r3, [r3, #1]
 8006220:	2b01      	cmp	r3, #1
 8006222:	f040 80ce 	bne.w	80063c2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d132      	bne.n	8006294 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	015a      	lsls	r2, r3, #5
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	4413      	add	r3, r2
 8006236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	0151      	lsls	r1, r2, #5
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	440a      	add	r2, r1
 8006244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006248:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800624c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006250:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	015a      	lsls	r2, r3, #5
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	4413      	add	r3, r2
 800625a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	0151      	lsls	r1, r2, #5
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	440a      	add	r2, r1
 8006268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800626c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006270:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	4413      	add	r3, r2
 800627a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	0151      	lsls	r1, r2, #5
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	440a      	add	r2, r1
 8006288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800628c:	0cdb      	lsrs	r3, r3, #19
 800628e:	04db      	lsls	r3, r3, #19
 8006290:	6113      	str	r3, [r2, #16]
 8006292:	e04e      	b.n	8006332 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	4413      	add	r3, r2
 800629c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	0151      	lsls	r1, r2, #5
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	440a      	add	r2, r1
 80062aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ae:	0cdb      	lsrs	r3, r3, #19
 80062b0:	04db      	lsls	r3, r3, #19
 80062b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	0151      	lsls	r1, r2, #5
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	440a      	add	r2, r1
 80062ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062d6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	699a      	ldr	r2, [r3, #24]
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d903      	bls.n	80062ec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	68da      	ldr	r2, [r3, #12]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	0151      	lsls	r1, r2, #5
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	440a      	add	r2, r1
 8006302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006306:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800630a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	4413      	add	r3, r2
 8006314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006318:	691a      	ldr	r2, [r3, #16]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006322:	6939      	ldr	r1, [r7, #16]
 8006324:	0148      	lsls	r0, r1, #5
 8006326:	6979      	ldr	r1, [r7, #20]
 8006328:	4401      	add	r1, r0
 800632a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800632e:	4313      	orrs	r3, r2
 8006330:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006332:	79fb      	ldrb	r3, [r7, #7]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d11e      	bne.n	8006376 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d009      	beq.n	8006354 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800634c:	461a      	mov	r2, r3
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	4413      	add	r3, r2
 800635c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	0151      	lsls	r1, r2, #5
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	440a      	add	r2, r1
 800636a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800636e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006372:	6013      	str	r3, [r2, #0]
 8006374:	e097      	b.n	80064a6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	015a      	lsls	r2, r3, #5
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	4413      	add	r3, r2
 800637e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	0151      	lsls	r1, r2, #5
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	440a      	add	r2, r1
 800638c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006390:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006394:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	2b00      	cmp	r3, #0
 800639c:	f000 8083 	beq.w	80064a6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	f003 030f 	and.w	r3, r3, #15
 80063b0:	2101      	movs	r1, #1
 80063b2:	fa01 f303 	lsl.w	r3, r1, r3
 80063b6:	6979      	ldr	r1, [r7, #20]
 80063b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063bc:	4313      	orrs	r3, r2
 80063be:	634b      	str	r3, [r1, #52]	; 0x34
 80063c0:	e071      	b.n	80064a6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	015a      	lsls	r2, r3, #5
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	4413      	add	r3, r2
 80063ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	0151      	lsls	r1, r2, #5
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	440a      	add	r2, r1
 80063d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063dc:	0cdb      	lsrs	r3, r3, #19
 80063de:	04db      	lsls	r3, r3, #19
 80063e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	015a      	lsls	r2, r3, #5
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	4413      	add	r3, r2
 80063ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	0151      	lsls	r1, r2, #5
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	440a      	add	r2, r1
 80063f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006400:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006404:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	68da      	ldr	r2, [r3, #12]
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	68da      	ldr	r2, [r3, #12]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	4413      	add	r3, r2
 8006426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	0151      	lsls	r1, r2, #5
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	440a      	add	r2, r1
 8006434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006438:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800643c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	4413      	add	r3, r2
 8006446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644a:	691a      	ldr	r2, [r3, #16]
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	69db      	ldr	r3, [r3, #28]
 8006450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006454:	6939      	ldr	r1, [r7, #16]
 8006456:	0148      	lsls	r0, r1, #5
 8006458:	6979      	ldr	r1, [r7, #20]
 800645a:	4401      	add	r1, r0
 800645c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006460:	4313      	orrs	r3, r2
 8006462:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006464:	79fb      	ldrb	r3, [r7, #7]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d10d      	bne.n	8006486 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d009      	beq.n	8006486 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	6919      	ldr	r1, [r3, #16]
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	015a      	lsls	r2, r3, #5
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	4413      	add	r3, r2
 800647e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006482:	460a      	mov	r2, r1
 8006484:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	4413      	add	r3, r2
 800648e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	0151      	lsls	r1, r2, #5
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	440a      	add	r2, r1
 800649c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	371c      	adds	r7, #28
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b087      	sub	sp, #28
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	785b      	ldrb	r3, [r3, #1]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d14a      	bne.n	8006568 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064ea:	f040 8086 	bne.w	80065fa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	7812      	ldrb	r2, [r2, #0]
 8006502:	0151      	lsls	r1, r2, #5
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	440a      	add	r2, r1
 8006508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800650c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006510:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	4413      	add	r3, r2
 800651c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	7812      	ldrb	r2, [r2, #0]
 8006526:	0151      	lsls	r1, r2, #5
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	440a      	add	r2, r1
 800652c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006530:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006534:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	3301      	adds	r3, #1
 800653a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006542:	4293      	cmp	r3, r2
 8006544:	d902      	bls.n	800654c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	75fb      	strb	r3, [r7, #23]
          break;
 800654a:	e056      	b.n	80065fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	4413      	add	r3, r2
 8006556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006560:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006564:	d0e7      	beq.n	8006536 <USB_EPStopXfer+0x82>
 8006566:	e048      	b.n	80065fa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	4413      	add	r3, r2
 8006572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800657c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006580:	d13b      	bne.n	80065fa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	7812      	ldrb	r2, [r2, #0]
 8006596:	0151      	lsls	r1, r2, #5
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	440a      	add	r2, r1
 800659c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065a4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	7812      	ldrb	r2, [r2, #0]
 80065ba:	0151      	lsls	r1, r2, #5
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	440a      	add	r2, r1
 80065c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	3301      	adds	r3, #1
 80065ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d902      	bls.n	80065e0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	75fb      	strb	r3, [r7, #23]
          break;
 80065de:	e00c      	b.n	80065fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065f8:	d0e7      	beq.n	80065ca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80065fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	371c      	adds	r7, #28
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006608:	b480      	push	{r7}
 800660a:	b089      	sub	sp, #36	; 0x24
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	4611      	mov	r1, r2
 8006614:	461a      	mov	r2, r3
 8006616:	460b      	mov	r3, r1
 8006618:	71fb      	strb	r3, [r7, #7]
 800661a:	4613      	mov	r3, r2
 800661c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006626:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800662a:	2b00      	cmp	r3, #0
 800662c:	d123      	bne.n	8006676 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800662e:	88bb      	ldrh	r3, [r7, #4]
 8006630:	3303      	adds	r3, #3
 8006632:	089b      	lsrs	r3, r3, #2
 8006634:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006636:	2300      	movs	r3, #0
 8006638:	61bb      	str	r3, [r7, #24]
 800663a:	e018      	b.n	800666e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800663c:	79fb      	ldrb	r3, [r7, #7]
 800663e:	031a      	lsls	r2, r3, #12
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	4413      	add	r3, r2
 8006644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006648:	461a      	mov	r2, r3
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	3301      	adds	r3, #1
 8006654:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	3301      	adds	r3, #1
 800665a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	3301      	adds	r3, #1
 8006660:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	3301      	adds	r3, #1
 8006666:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	3301      	adds	r3, #1
 800666c:	61bb      	str	r3, [r7, #24]
 800666e:	69ba      	ldr	r2, [r7, #24]
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	429a      	cmp	r2, r3
 8006674:	d3e2      	bcc.n	800663c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3724      	adds	r7, #36	; 0x24
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006684:	b480      	push	{r7}
 8006686:	b08b      	sub	sp, #44	; 0x2c
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	4613      	mov	r3, r2
 8006690:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800669a:	88fb      	ldrh	r3, [r7, #6]
 800669c:	089b      	lsrs	r3, r3, #2
 800669e:	b29b      	uxth	r3, r3
 80066a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80066a2:	88fb      	ldrh	r3, [r7, #6]
 80066a4:	f003 0303 	and.w	r3, r3, #3
 80066a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80066aa:	2300      	movs	r3, #0
 80066ac:	623b      	str	r3, [r7, #32]
 80066ae:	e014      	b.n	80066da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80066bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066be:	3301      	adds	r3, #1
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80066c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c4:	3301      	adds	r3, #1
 80066c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80066c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ca:	3301      	adds	r3, #1
 80066cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80066ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d0:	3301      	adds	r3, #1
 80066d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	3301      	adds	r3, #1
 80066d8:	623b      	str	r3, [r7, #32]
 80066da:	6a3a      	ldr	r2, [r7, #32]
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d3e6      	bcc.n	80066b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80066e2:	8bfb      	ldrh	r3, [r7, #30]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d01e      	beq.n	8006726 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80066e8:	2300      	movs	r3, #0
 80066ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066f2:	461a      	mov	r2, r3
 80066f4:	f107 0310 	add.w	r3, r7, #16
 80066f8:	6812      	ldr	r2, [r2, #0]
 80066fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	b2db      	uxtb	r3, r3
 8006702:	00db      	lsls	r3, r3, #3
 8006704:	fa22 f303 	lsr.w	r3, r2, r3
 8006708:	b2da      	uxtb	r2, r3
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	701a      	strb	r2, [r3, #0]
      i++;
 800670e:	6a3b      	ldr	r3, [r7, #32]
 8006710:	3301      	adds	r3, #1
 8006712:	623b      	str	r3, [r7, #32]
      pDest++;
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	3301      	adds	r3, #1
 8006718:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800671a:	8bfb      	ldrh	r3, [r7, #30]
 800671c:	3b01      	subs	r3, #1
 800671e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006720:	8bfb      	ldrh	r3, [r7, #30]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1ea      	bne.n	80066fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006728:	4618      	mov	r0, r3
 800672a:	372c      	adds	r7, #44	; 0x2c
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	785b      	ldrb	r3, [r3, #1]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d12c      	bne.n	80067aa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	4413      	add	r3, r2
 8006758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	db12      	blt.n	8006788 <USB_EPSetStall+0x54>
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00f      	beq.n	8006788 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4413      	add	r3, r2
 8006770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	0151      	lsls	r1, r2, #5
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	440a      	add	r2, r1
 800677e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006782:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006786:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	0151      	lsls	r1, r2, #5
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	440a      	add	r2, r1
 800679e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80067a6:	6013      	str	r3, [r2, #0]
 80067a8:	e02b      	b.n	8006802 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	db12      	blt.n	80067e2 <USB_EPSetStall+0xae>
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00f      	beq.n	80067e2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	0151      	lsls	r1, r2, #5
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	440a      	add	r2, r1
 80067d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80067e0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	0151      	lsls	r1, r2, #5
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	440a      	add	r2, r1
 80067f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006800:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	785b      	ldrb	r3, [r3, #1]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d128      	bne.n	800687e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	0151      	lsls	r1, r2, #5
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	440a      	add	r2, r1
 8006842:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006846:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800684a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	791b      	ldrb	r3, [r3, #4]
 8006850:	2b03      	cmp	r3, #3
 8006852:	d003      	beq.n	800685c <USB_EPClearStall+0x4c>
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	791b      	ldrb	r3, [r3, #4]
 8006858:	2b02      	cmp	r3, #2
 800685a:	d138      	bne.n	80068ce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	015a      	lsls	r2, r3, #5
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4413      	add	r3, r2
 8006864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	0151      	lsls	r1, r2, #5
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	440a      	add	r2, r1
 8006872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800687a:	6013      	str	r3, [r2, #0]
 800687c:	e027      	b.n	80068ce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	015a      	lsls	r2, r3, #5
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	4413      	add	r3, r2
 8006886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	0151      	lsls	r1, r2, #5
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	440a      	add	r2, r1
 8006894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006898:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800689c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	791b      	ldrb	r3, [r3, #4]
 80068a2:	2b03      	cmp	r3, #3
 80068a4:	d003      	beq.n	80068ae <USB_EPClearStall+0x9e>
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	791b      	ldrb	r3, [r3, #4]
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d10f      	bne.n	80068ce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	0151      	lsls	r1, r2, #5
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	440a      	add	r2, r1
 80068c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068cc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	460b      	mov	r3, r1
 80068e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80068fe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	78fb      	ldrb	r3, [r7, #3]
 800690a:	011b      	lsls	r3, r3, #4
 800690c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006910:	68f9      	ldr	r1, [r7, #12]
 8006912:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006916:	4313      	orrs	r3, r2
 8006918:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3714      	adds	r7, #20
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006942:	f023 0303 	bic.w	r3, r3, #3
 8006946:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006956:	f023 0302 	bic.w	r3, r3, #2
 800695a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800696a:	b480      	push	{r7}
 800696c:	b085      	sub	sp, #20
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006984:	f023 0303 	bic.w	r3, r3, #3
 8006988:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006998:	f043 0302 	orr.w	r3, r3, #2
 800699c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	4013      	ands	r3, r2
 80069c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80069c4:	68fb      	ldr	r3, [r7, #12]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b085      	sub	sp, #20
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ee:	69db      	ldr	r3, [r3, #28]
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	4013      	ands	r3, r2
 80069f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	0c1b      	lsrs	r3, r3, #16
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b085      	sub	sp, #20
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a22:	69db      	ldr	r3, [r3, #28]
 8006a24:	68ba      	ldr	r2, [r7, #8]
 8006a26:	4013      	ands	r3, r2
 8006a28:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	b29b      	uxth	r3, r3
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3714      	adds	r7, #20
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b085      	sub	sp, #20
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
 8006a42:	460b      	mov	r3, r1
 8006a44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006a4a:	78fb      	ldrb	r3, [r7, #3]
 8006a4c:	015a      	lsls	r2, r3, #5
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	4413      	add	r3, r2
 8006a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	4013      	ands	r3, r2
 8006a66:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a68:	68bb      	ldr	r3, [r7, #8]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3714      	adds	r7, #20
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b087      	sub	sp, #28
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	460b      	mov	r3, r1
 8006a80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a98:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006a9a:	78fb      	ldrb	r3, [r7, #3]
 8006a9c:	f003 030f 	and.w	r3, r3, #15
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8006aa6:	01db      	lsls	r3, r3, #7
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006ab0:	78fb      	ldrb	r3, [r7, #3]
 8006ab2:	015a      	lsls	r2, r3, #5
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ac4:	68bb      	ldr	r3, [r7, #8]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	371c      	adds	r7, #28
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b083      	sub	sp, #12
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	f003 0301 	and.w	r3, r3, #1
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	370c      	adds	r7, #12
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b085      	sub	sp, #20
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b08:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006b0c:	f023 0307 	bic.w	r3, r3, #7
 8006b10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b087      	sub	sp, #28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	607a      	str	r2, [r7, #4]
 8006b40:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	333c      	adds	r3, #60	; 0x3c
 8006b4a:	3304      	adds	r3, #4
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	4a26      	ldr	r2, [pc, #152]	; (8006bec <USB_EP0_OutStart+0xb8>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d90a      	bls.n	8006b6e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b68:	d101      	bne.n	8006b6e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	e037      	b.n	8006bde <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b74:	461a      	mov	r2, r3
 8006b76:	2300      	movs	r3, #0
 8006b78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b9c:	f043 0318 	orr.w	r3, r3, #24
 8006ba0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bb0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006bb4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006bb6:	7afb      	ldrb	r3, [r7, #11]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d10f      	bne.n	8006bdc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bd6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006bda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	371c      	adds	r7, #28
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	4f54300a 	.word	0x4f54300a

08006bf0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	4a13      	ldr	r2, [pc, #76]	; (8006c54 <USB_CoreReset+0x64>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d901      	bls.n	8006c0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e01b      	b.n	8006c46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	daf2      	bge.n	8006bfc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	f043 0201 	orr.w	r2, r3, #1
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	4a09      	ldr	r2, [pc, #36]	; (8006c54 <USB_CoreReset+0x64>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d901      	bls.n	8006c38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e006      	b.n	8006c46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	f003 0301 	and.w	r3, r3, #1
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d0f0      	beq.n	8006c26 <USB_CoreReset+0x36>

  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3714      	adds	r7, #20
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	00030d40 	.word	0x00030d40

08006c58 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006c5c:	4904      	ldr	r1, [pc, #16]	; (8006c70 <MX_FATFS_Init+0x18>)
 8006c5e:	4805      	ldr	r0, [pc, #20]	; (8006c74 <MX_FATFS_Init+0x1c>)
 8006c60:	f006 f83a 	bl	800ccd8 <FATFS_LinkDriver>
 8006c64:	4603      	mov	r3, r0
 8006c66:	461a      	mov	r2, r3
 8006c68:	4b03      	ldr	r3, [pc, #12]	; (8006c78 <MX_FATFS_Init+0x20>)
 8006c6a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006c6c:	bf00      	nop
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	200022c0 	.word	0x200022c0
 8006c74:	20000010 	.word	0x20000010
 8006c78:	200022bc 	.word	0x200022bc

08006c7c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006c80:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	4603      	mov	r3, r0
 8006c94:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize(pdrv);
 8006c96:	79fb      	ldrb	r3, [r7, #7]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7fa fa1b 	bl	80010d4 <SD_disk_initialize>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3708      	adds	r7, #8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b082      	sub	sp, #8
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 8006cb4:	79fb      	ldrb	r3, [r7, #7]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7fa faf2 	bl	80012a0 <SD_disk_status>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60b9      	str	r1, [r7, #8]
 8006cd0:	607a      	str	r2, [r7, #4]
 8006cd2:	603b      	str	r3, [r7, #0]
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8006cd8:	7bf8      	ldrb	r0, [r7, #15]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	68b9      	ldr	r1, [r7, #8]
 8006ce0:	f7fa faf4 	bl	80012cc <SD_disk_read>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60b9      	str	r1, [r7, #8]
 8006cf8:	607a      	str	r2, [r7, #4]
 8006cfa:	603b      	str	r3, [r7, #0]
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 8006d00:	7bf8      	ldrb	r0, [r7, #15]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	68b9      	ldr	r1, [r7, #8]
 8006d08:	f7fa fb4a 	bl	80013a0 <SD_disk_write>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	4603      	mov	r3, r0
 8006d20:	603a      	str	r2, [r7, #0]
 8006d22:	71fb      	strb	r3, [r7, #7]
 8006d24:	460b      	mov	r3, r1
 8006d26:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006d28:	79fb      	ldrb	r3, [r7, #7]
 8006d2a:	79b9      	ldrb	r1, [r7, #6]
 8006d2c:	683a      	ldr	r2, [r7, #0]
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7fa fbba 	bl	80014a8 <SD_disk_ioctl>
 8006d34:	4603      	mov	r3, r0
 8006d36:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d4c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006d50:	f009 fe50 	bl	80109f4 <USBD_static_malloc>
 8006d54:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d109      	bne.n	8006d70 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	32b0      	adds	r2, #176	; 0xb0
 8006d66:	2100      	movs	r1, #0
 8006d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006d6c:	2302      	movs	r3, #2
 8006d6e:	e0d4      	b.n	8006f1a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006d70:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006d74:	2100      	movs	r1, #0
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f009 ffb1 	bl	8010cde <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	32b0      	adds	r2, #176	; 0xb0
 8006d86:	68f9      	ldr	r1, [r7, #12]
 8006d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	32b0      	adds	r2, #176	; 0xb0
 8006d96:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	7c1b      	ldrb	r3, [r3, #16]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d138      	bne.n	8006e1a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006da8:	4b5e      	ldr	r3, [pc, #376]	; (8006f24 <USBD_CDC_Init+0x1e4>)
 8006daa:	7819      	ldrb	r1, [r3, #0]
 8006dac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006db0:	2202      	movs	r2, #2
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f009 fcfb 	bl	80107ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006db8:	4b5a      	ldr	r3, [pc, #360]	; (8006f24 <USBD_CDC_Init+0x1e4>)
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	f003 020f 	and.w	r2, r3, #15
 8006dc0:	6879      	ldr	r1, [r7, #4]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4413      	add	r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	440b      	add	r3, r1
 8006dcc:	3324      	adds	r3, #36	; 0x24
 8006dce:	2201      	movs	r2, #1
 8006dd0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006dd2:	4b55      	ldr	r3, [pc, #340]	; (8006f28 <USBD_CDC_Init+0x1e8>)
 8006dd4:	7819      	ldrb	r1, [r3, #0]
 8006dd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dda:	2202      	movs	r2, #2
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f009 fce6 	bl	80107ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006de2:	4b51      	ldr	r3, [pc, #324]	; (8006f28 <USBD_CDC_Init+0x1e8>)
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	f003 020f 	and.w	r2, r3, #15
 8006dea:	6879      	ldr	r1, [r7, #4]
 8006dec:	4613      	mov	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	440b      	add	r3, r1
 8006df6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006dfe:	4b4b      	ldr	r3, [pc, #300]	; (8006f2c <USBD_CDC_Init+0x1ec>)
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	f003 020f 	and.w	r2, r3, #15
 8006e06:	6879      	ldr	r1, [r7, #4]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	440b      	add	r3, r1
 8006e12:	3326      	adds	r3, #38	; 0x26
 8006e14:	2210      	movs	r2, #16
 8006e16:	801a      	strh	r2, [r3, #0]
 8006e18:	e035      	b.n	8006e86 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006e1a:	4b42      	ldr	r3, [pc, #264]	; (8006f24 <USBD_CDC_Init+0x1e4>)
 8006e1c:	7819      	ldrb	r1, [r3, #0]
 8006e1e:	2340      	movs	r3, #64	; 0x40
 8006e20:	2202      	movs	r2, #2
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f009 fcc3 	bl	80107ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e28:	4b3e      	ldr	r3, [pc, #248]	; (8006f24 <USBD_CDC_Init+0x1e4>)
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	f003 020f 	and.w	r2, r3, #15
 8006e30:	6879      	ldr	r1, [r7, #4]
 8006e32:	4613      	mov	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4413      	add	r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	440b      	add	r3, r1
 8006e3c:	3324      	adds	r3, #36	; 0x24
 8006e3e:	2201      	movs	r2, #1
 8006e40:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e42:	4b39      	ldr	r3, [pc, #228]	; (8006f28 <USBD_CDC_Init+0x1e8>)
 8006e44:	7819      	ldrb	r1, [r3, #0]
 8006e46:	2340      	movs	r3, #64	; 0x40
 8006e48:	2202      	movs	r2, #2
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f009 fcaf 	bl	80107ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006e50:	4b35      	ldr	r3, [pc, #212]	; (8006f28 <USBD_CDC_Init+0x1e8>)
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	f003 020f 	and.w	r2, r3, #15
 8006e58:	6879      	ldr	r1, [r7, #4]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4413      	add	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	440b      	add	r3, r1
 8006e64:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e68:	2201      	movs	r2, #1
 8006e6a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006e6c:	4b2f      	ldr	r3, [pc, #188]	; (8006f2c <USBD_CDC_Init+0x1ec>)
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	f003 020f 	and.w	r2, r3, #15
 8006e74:	6879      	ldr	r1, [r7, #4]
 8006e76:	4613      	mov	r3, r2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	4413      	add	r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	440b      	add	r3, r1
 8006e80:	3326      	adds	r3, #38	; 0x26
 8006e82:	2210      	movs	r2, #16
 8006e84:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e86:	4b29      	ldr	r3, [pc, #164]	; (8006f2c <USBD_CDC_Init+0x1ec>)
 8006e88:	7819      	ldrb	r1, [r3, #0]
 8006e8a:	2308      	movs	r3, #8
 8006e8c:	2203      	movs	r2, #3
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f009 fc8d 	bl	80107ae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006e94:	4b25      	ldr	r3, [pc, #148]	; (8006f2c <USBD_CDC_Init+0x1ec>)
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	f003 020f 	and.w	r2, r3, #15
 8006e9c:	6879      	ldr	r1, [r7, #4]
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4413      	add	r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	440b      	add	r3, r1
 8006ea8:	3324      	adds	r3, #36	; 0x24
 8006eaa:	2201      	movs	r2, #1
 8006eac:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	33b0      	adds	r3, #176	; 0xb0
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4413      	add	r3, r2
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d101      	bne.n	8006ee8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	e018      	b.n	8006f1a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	7c1b      	ldrb	r3, [r3, #16]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10a      	bne.n	8006f06 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ef0:	4b0d      	ldr	r3, [pc, #52]	; (8006f28 <USBD_CDC_Init+0x1e8>)
 8006ef2:	7819      	ldrb	r1, [r3, #0]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006efa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f009 fd44 	bl	801098c <USBD_LL_PrepareReceive>
 8006f04:	e008      	b.n	8006f18 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f06:	4b08      	ldr	r3, [pc, #32]	; (8006f28 <USBD_CDC_Init+0x1e8>)
 8006f08:	7819      	ldrb	r1, [r3, #0]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f10:	2340      	movs	r3, #64	; 0x40
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f009 fd3a 	bl	801098c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	200000ab 	.word	0x200000ab
 8006f28:	200000ac 	.word	0x200000ac
 8006f2c:	200000ad 	.word	0x200000ad

08006f30 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006f3c:	4b3a      	ldr	r3, [pc, #232]	; (8007028 <USBD_CDC_DeInit+0xf8>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	4619      	mov	r1, r3
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f009 fc59 	bl	80107fa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006f48:	4b37      	ldr	r3, [pc, #220]	; (8007028 <USBD_CDC_DeInit+0xf8>)
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	f003 020f 	and.w	r2, r3, #15
 8006f50:	6879      	ldr	r1, [r7, #4]
 8006f52:	4613      	mov	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4413      	add	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	440b      	add	r3, r1
 8006f5c:	3324      	adds	r3, #36	; 0x24
 8006f5e:	2200      	movs	r2, #0
 8006f60:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006f62:	4b32      	ldr	r3, [pc, #200]	; (800702c <USBD_CDC_DeInit+0xfc>)
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	4619      	mov	r1, r3
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f009 fc46 	bl	80107fa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006f6e:	4b2f      	ldr	r3, [pc, #188]	; (800702c <USBD_CDC_DeInit+0xfc>)
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	f003 020f 	and.w	r2, r3, #15
 8006f76:	6879      	ldr	r1, [r7, #4]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	440b      	add	r3, r1
 8006f82:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f86:	2200      	movs	r2, #0
 8006f88:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006f8a:	4b29      	ldr	r3, [pc, #164]	; (8007030 <USBD_CDC_DeInit+0x100>)
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f009 fc32 	bl	80107fa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006f96:	4b26      	ldr	r3, [pc, #152]	; (8007030 <USBD_CDC_DeInit+0x100>)
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	f003 020f 	and.w	r2, r3, #15
 8006f9e:	6879      	ldr	r1, [r7, #4]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	440b      	add	r3, r1
 8006faa:	3324      	adds	r3, #36	; 0x24
 8006fac:	2200      	movs	r2, #0
 8006fae:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006fb0:	4b1f      	ldr	r3, [pc, #124]	; (8007030 <USBD_CDC_DeInit+0x100>)
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	f003 020f 	and.w	r2, r3, #15
 8006fb8:	6879      	ldr	r1, [r7, #4]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	440b      	add	r3, r1
 8006fc4:	3326      	adds	r3, #38	; 0x26
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	32b0      	adds	r2, #176	; 0xb0
 8006fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d01f      	beq.n	800701c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	33b0      	adds	r3, #176	; 0xb0
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	32b0      	adds	r2, #176	; 0xb0
 8006ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffe:	4618      	mov	r0, r3
 8007000:	f009 fd06 	bl	8010a10 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	32b0      	adds	r2, #176	; 0xb0
 800700e:	2100      	movs	r1, #0
 8007010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	200000ab 	.word	0x200000ab
 800702c:	200000ac 	.word	0x200000ac
 8007030:	200000ad 	.word	0x200000ad

08007034 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	32b0      	adds	r2, #176	; 0xb0
 8007048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800704c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800704e:	2300      	movs	r3, #0
 8007050:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007052:	2300      	movs	r3, #0
 8007054:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007056:	2300      	movs	r3, #0
 8007058:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007060:	2303      	movs	r3, #3
 8007062:	e0bf      	b.n	80071e4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800706c:	2b00      	cmp	r3, #0
 800706e:	d050      	beq.n	8007112 <USBD_CDC_Setup+0xde>
 8007070:	2b20      	cmp	r3, #32
 8007072:	f040 80af 	bne.w	80071d4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	88db      	ldrh	r3, [r3, #6]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d03a      	beq.n	80070f4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	b25b      	sxtb	r3, r3
 8007084:	2b00      	cmp	r3, #0
 8007086:	da1b      	bge.n	80070c0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	33b0      	adds	r3, #176	; 0xb0
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	4413      	add	r3, r2
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	683a      	ldr	r2, [r7, #0]
 800709c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800709e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80070a0:	683a      	ldr	r2, [r7, #0]
 80070a2:	88d2      	ldrh	r2, [r2, #6]
 80070a4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	88db      	ldrh	r3, [r3, #6]
 80070aa:	2b07      	cmp	r3, #7
 80070ac:	bf28      	it	cs
 80070ae:	2307      	movcs	r3, #7
 80070b0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	89fa      	ldrh	r2, [r7, #14]
 80070b6:	4619      	mov	r1, r3
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f001 fd89 	bl	8008bd0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80070be:	e090      	b.n	80071e2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	785a      	ldrb	r2, [r3, #1]
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	88db      	ldrh	r3, [r3, #6]
 80070ce:	2b3f      	cmp	r3, #63	; 0x3f
 80070d0:	d803      	bhi.n	80070da <USBD_CDC_Setup+0xa6>
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	88db      	ldrh	r3, [r3, #6]
 80070d6:	b2da      	uxtb	r2, r3
 80070d8:	e000      	b.n	80070dc <USBD_CDC_Setup+0xa8>
 80070da:	2240      	movs	r2, #64	; 0x40
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80070e2:	6939      	ldr	r1, [r7, #16]
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80070ea:	461a      	mov	r2, r3
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f001 fd9b 	bl	8008c28 <USBD_CtlPrepareRx>
      break;
 80070f2:	e076      	b.n	80071e2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	33b0      	adds	r3, #176	; 0xb0
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4413      	add	r3, r2
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	7850      	ldrb	r0, [r2, #1]
 800710a:	2200      	movs	r2, #0
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	4798      	blx	r3
      break;
 8007110:	e067      	b.n	80071e2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	785b      	ldrb	r3, [r3, #1]
 8007116:	2b0b      	cmp	r3, #11
 8007118:	d851      	bhi.n	80071be <USBD_CDC_Setup+0x18a>
 800711a:	a201      	add	r2, pc, #4	; (adr r2, 8007120 <USBD_CDC_Setup+0xec>)
 800711c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007120:	08007151 	.word	0x08007151
 8007124:	080071cd 	.word	0x080071cd
 8007128:	080071bf 	.word	0x080071bf
 800712c:	080071bf 	.word	0x080071bf
 8007130:	080071bf 	.word	0x080071bf
 8007134:	080071bf 	.word	0x080071bf
 8007138:	080071bf 	.word	0x080071bf
 800713c:	080071bf 	.word	0x080071bf
 8007140:	080071bf 	.word	0x080071bf
 8007144:	080071bf 	.word	0x080071bf
 8007148:	0800717b 	.word	0x0800717b
 800714c:	080071a5 	.word	0x080071a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007156:	b2db      	uxtb	r3, r3
 8007158:	2b03      	cmp	r3, #3
 800715a:	d107      	bne.n	800716c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800715c:	f107 030a 	add.w	r3, r7, #10
 8007160:	2202      	movs	r2, #2
 8007162:	4619      	mov	r1, r3
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f001 fd33 	bl	8008bd0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800716a:	e032      	b.n	80071d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f001 fcbd 	bl	8008aee <USBD_CtlError>
            ret = USBD_FAIL;
 8007174:	2303      	movs	r3, #3
 8007176:	75fb      	strb	r3, [r7, #23]
          break;
 8007178:	e02b      	b.n	80071d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b03      	cmp	r3, #3
 8007184:	d107      	bne.n	8007196 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007186:	f107 030d 	add.w	r3, r7, #13
 800718a:	2201      	movs	r2, #1
 800718c:	4619      	mov	r1, r3
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f001 fd1e 	bl	8008bd0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007194:	e01d      	b.n	80071d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007196:	6839      	ldr	r1, [r7, #0]
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f001 fca8 	bl	8008aee <USBD_CtlError>
            ret = USBD_FAIL;
 800719e:	2303      	movs	r3, #3
 80071a0:	75fb      	strb	r3, [r7, #23]
          break;
 80071a2:	e016      	b.n	80071d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b03      	cmp	r3, #3
 80071ae:	d00f      	beq.n	80071d0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80071b0:	6839      	ldr	r1, [r7, #0]
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f001 fc9b 	bl	8008aee <USBD_CtlError>
            ret = USBD_FAIL;
 80071b8:	2303      	movs	r3, #3
 80071ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80071bc:	e008      	b.n	80071d0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80071be:	6839      	ldr	r1, [r7, #0]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f001 fc94 	bl	8008aee <USBD_CtlError>
          ret = USBD_FAIL;
 80071c6:	2303      	movs	r3, #3
 80071c8:	75fb      	strb	r3, [r7, #23]
          break;
 80071ca:	e002      	b.n	80071d2 <USBD_CDC_Setup+0x19e>
          break;
 80071cc:	bf00      	nop
 80071ce:	e008      	b.n	80071e2 <USBD_CDC_Setup+0x1ae>
          break;
 80071d0:	bf00      	nop
      }
      break;
 80071d2:	e006      	b.n	80071e2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80071d4:	6839      	ldr	r1, [r7, #0]
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f001 fc89 	bl	8008aee <USBD_CtlError>
      ret = USBD_FAIL;
 80071dc:	2303      	movs	r3, #3
 80071de:	75fb      	strb	r3, [r7, #23]
      break;
 80071e0:	bf00      	nop
  }

  return (uint8_t)ret;
 80071e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3718      	adds	r7, #24
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	460b      	mov	r3, r1
 80071f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80071fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	32b0      	adds	r2, #176	; 0xb0
 800720a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d101      	bne.n	8007216 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007212:	2303      	movs	r3, #3
 8007214:	e065      	b.n	80072e2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	32b0      	adds	r2, #176	; 0xb0
 8007220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007224:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007226:	78fb      	ldrb	r3, [r7, #3]
 8007228:	f003 020f 	and.w	r2, r3, #15
 800722c:	6879      	ldr	r1, [r7, #4]
 800722e:	4613      	mov	r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	4413      	add	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	440b      	add	r3, r1
 8007238:	3318      	adds	r3, #24
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d02f      	beq.n	80072a0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007240:	78fb      	ldrb	r3, [r7, #3]
 8007242:	f003 020f 	and.w	r2, r3, #15
 8007246:	6879      	ldr	r1, [r7, #4]
 8007248:	4613      	mov	r3, r2
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4413      	add	r3, r2
 800724e:	009b      	lsls	r3, r3, #2
 8007250:	440b      	add	r3, r1
 8007252:	3318      	adds	r3, #24
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	78fb      	ldrb	r3, [r7, #3]
 8007258:	f003 010f 	and.w	r1, r3, #15
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	460b      	mov	r3, r1
 8007260:	00db      	lsls	r3, r3, #3
 8007262:	440b      	add	r3, r1
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	4403      	add	r3, r0
 8007268:	3348      	adds	r3, #72	; 0x48
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007270:	fb01 f303 	mul.w	r3, r1, r3
 8007274:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007276:	2b00      	cmp	r3, #0
 8007278:	d112      	bne.n	80072a0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800727a:	78fb      	ldrb	r3, [r7, #3]
 800727c:	f003 020f 	and.w	r2, r3, #15
 8007280:	6879      	ldr	r1, [r7, #4]
 8007282:	4613      	mov	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	440b      	add	r3, r1
 800728c:	3318      	adds	r3, #24
 800728e:	2200      	movs	r2, #0
 8007290:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007292:	78f9      	ldrb	r1, [r7, #3]
 8007294:	2300      	movs	r3, #0
 8007296:	2200      	movs	r2, #0
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f009 fb56 	bl	801094a <USBD_LL_Transmit>
 800729e:	e01f      	b.n	80072e0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	33b0      	adds	r3, #176	; 0xb0
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4413      	add	r3, r2
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d010      	beq.n	80072e0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	33b0      	adds	r3, #176	; 0xb0
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4413      	add	r3, r2
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80072dc:	78fa      	ldrb	r2, [r7, #3]
 80072de:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b084      	sub	sp, #16
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	460b      	mov	r3, r1
 80072f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	32b0      	adds	r2, #176	; 0xb0
 8007300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007304:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	32b0      	adds	r2, #176	; 0xb0
 8007310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d101      	bne.n	800731c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007318:	2303      	movs	r3, #3
 800731a:	e01a      	b.n	8007352 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800731c:	78fb      	ldrb	r3, [r7, #3]
 800731e:	4619      	mov	r1, r3
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f009 fb54 	bl	80109ce <USBD_LL_GetRxDataSize>
 8007326:	4602      	mov	r2, r0
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	33b0      	adds	r3, #176	; 0xb0
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	4413      	add	r3, r2
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800734c:	4611      	mov	r1, r2
 800734e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b084      	sub	sp, #16
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	32b0      	adds	r2, #176	; 0xb0
 800736c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007370:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d101      	bne.n	800737c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007378:	2303      	movs	r3, #3
 800737a:	e025      	b.n	80073c8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	33b0      	adds	r3, #176	; 0xb0
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4413      	add	r3, r2
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d01a      	beq.n	80073c6 <USBD_CDC_EP0_RxReady+0x6c>
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007396:	2bff      	cmp	r3, #255	; 0xff
 8007398:	d015      	beq.n	80073c6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	33b0      	adds	r3, #176	; 0xb0
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	4413      	add	r3, r2
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80073b2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80073ba:	b292      	uxth	r2, r2
 80073bc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	22ff      	movs	r2, #255	; 0xff
 80073c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3710      	adds	r7, #16
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b086      	sub	sp, #24
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80073d8:	2182      	movs	r1, #130	; 0x82
 80073da:	4818      	ldr	r0, [pc, #96]	; (800743c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80073dc:	f000 fd4f 	bl	8007e7e <USBD_GetEpDesc>
 80073e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80073e2:	2101      	movs	r1, #1
 80073e4:	4815      	ldr	r0, [pc, #84]	; (800743c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80073e6:	f000 fd4a 	bl	8007e7e <USBD_GetEpDesc>
 80073ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80073ec:	2181      	movs	r1, #129	; 0x81
 80073ee:	4813      	ldr	r0, [pc, #76]	; (800743c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80073f0:	f000 fd45 	bl	8007e7e <USBD_GetEpDesc>
 80073f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d002      	beq.n	8007402 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	2210      	movs	r2, #16
 8007400:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d006      	beq.n	8007416 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	2200      	movs	r2, #0
 800740c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007410:	711a      	strb	r2, [r3, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d006      	beq.n	800742a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007424:	711a      	strb	r2, [r3, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2243      	movs	r2, #67	; 0x43
 800742e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007430:	4b02      	ldr	r3, [pc, #8]	; (800743c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007432:	4618      	mov	r0, r3
 8007434:	3718      	adds	r7, #24
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	20000068 	.word	0x20000068

08007440 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b086      	sub	sp, #24
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007448:	2182      	movs	r1, #130	; 0x82
 800744a:	4818      	ldr	r0, [pc, #96]	; (80074ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800744c:	f000 fd17 	bl	8007e7e <USBD_GetEpDesc>
 8007450:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007452:	2101      	movs	r1, #1
 8007454:	4815      	ldr	r0, [pc, #84]	; (80074ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007456:	f000 fd12 	bl	8007e7e <USBD_GetEpDesc>
 800745a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800745c:	2181      	movs	r1, #129	; 0x81
 800745e:	4813      	ldr	r0, [pc, #76]	; (80074ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007460:	f000 fd0d 	bl	8007e7e <USBD_GetEpDesc>
 8007464:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d002      	beq.n	8007472 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	2210      	movs	r2, #16
 8007470:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d006      	beq.n	8007486 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	2200      	movs	r2, #0
 800747c:	711a      	strb	r2, [r3, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	f042 0202 	orr.w	r2, r2, #2
 8007484:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d006      	beq.n	800749a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	711a      	strb	r2, [r3, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	f042 0202 	orr.w	r2, r2, #2
 8007498:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2243      	movs	r2, #67	; 0x43
 800749e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80074a0:	4b02      	ldr	r3, [pc, #8]	; (80074ac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3718      	adds	r7, #24
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	20000068 	.word	0x20000068

080074b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80074b8:	2182      	movs	r1, #130	; 0x82
 80074ba:	4818      	ldr	r0, [pc, #96]	; (800751c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80074bc:	f000 fcdf 	bl	8007e7e <USBD_GetEpDesc>
 80074c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074c2:	2101      	movs	r1, #1
 80074c4:	4815      	ldr	r0, [pc, #84]	; (800751c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80074c6:	f000 fcda 	bl	8007e7e <USBD_GetEpDesc>
 80074ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80074cc:	2181      	movs	r1, #129	; 0x81
 80074ce:	4813      	ldr	r0, [pc, #76]	; (800751c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80074d0:	f000 fcd5 	bl	8007e7e <USBD_GetEpDesc>
 80074d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d002      	beq.n	80074e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	2210      	movs	r2, #16
 80074e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d006      	beq.n	80074f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074f0:	711a      	strb	r2, [r3, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d006      	beq.n	800750a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007504:	711a      	strb	r2, [r3, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2243      	movs	r2, #67	; 0x43
 800750e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007510:	4b02      	ldr	r3, [pc, #8]	; (800751c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007512:	4618      	mov	r0, r3
 8007514:	3718      	adds	r7, #24
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	20000068 	.word	0x20000068

08007520 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	220a      	movs	r2, #10
 800752c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800752e:	4b03      	ldr	r3, [pc, #12]	; (800753c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007530:	4618      	mov	r0, r3
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	20000024 	.word	0x20000024

08007540 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d101      	bne.n	8007554 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007550:	2303      	movs	r3, #3
 8007552:	e009      	b.n	8007568 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	33b0      	adds	r3, #176	; 0xb0
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	683a      	ldr	r2, [r7, #0]
 8007564:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007574:	b480      	push	{r7}
 8007576:	b087      	sub	sp, #28
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	32b0      	adds	r2, #176	; 0xb0
 800758a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800758e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007596:	2303      	movs	r3, #3
 8007598:	e008      	b.n	80075ac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	371c      	adds	r7, #28
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	32b0      	adds	r2, #176	; 0xb0
 80075cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d101      	bne.n	80075dc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80075d8:	2303      	movs	r3, #3
 80075da:	e004      	b.n	80075e6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
	...

080075f4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	32b0      	adds	r2, #176	; 0xb0
 8007606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800760a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800760c:	2301      	movs	r3, #1
 800760e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	32b0      	adds	r2, #176	; 0xb0
 800761a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d101      	bne.n	8007626 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007622:	2303      	movs	r3, #3
 8007624:	e025      	b.n	8007672 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800762c:	2b00      	cmp	r3, #0
 800762e:	d11f      	bne.n	8007670 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	2201      	movs	r2, #1
 8007634:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007638:	4b10      	ldr	r3, [pc, #64]	; (800767c <USBD_CDC_TransmitPacket+0x88>)
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	f003 020f 	and.w	r2, r3, #15
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	4613      	mov	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	4413      	add	r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4403      	add	r3, r0
 8007652:	3318      	adds	r3, #24
 8007654:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007656:	4b09      	ldr	r3, [pc, #36]	; (800767c <USBD_CDC_TransmitPacket+0x88>)
 8007658:	7819      	ldrb	r1, [r3, #0]
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f009 f96f 	bl	801094a <USBD_LL_Transmit>

    ret = USBD_OK;
 800766c:	2300      	movs	r3, #0
 800766e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007670:	7bfb      	ldrb	r3, [r7, #15]
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	200000ab 	.word	0x200000ab

08007680 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	32b0      	adds	r2, #176	; 0xb0
 8007692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007696:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	32b0      	adds	r2, #176	; 0xb0
 80076a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d101      	bne.n	80076ae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e018      	b.n	80076e0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	7c1b      	ldrb	r3, [r3, #16]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10a      	bne.n	80076cc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80076b6:	4b0c      	ldr	r3, [pc, #48]	; (80076e8 <USBD_CDC_ReceivePacket+0x68>)
 80076b8:	7819      	ldrb	r1, [r3, #0]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f009 f961 	bl	801098c <USBD_LL_PrepareReceive>
 80076ca:	e008      	b.n	80076de <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80076cc:	4b06      	ldr	r3, [pc, #24]	; (80076e8 <USBD_CDC_ReceivePacket+0x68>)
 80076ce:	7819      	ldrb	r1, [r3, #0]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076d6:	2340      	movs	r3, #64	; 0x40
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f009 f957 	bl	801098c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	200000ac 	.word	0x200000ac

080076ec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	4613      	mov	r3, r2
 80076f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007700:	2303      	movs	r3, #3
 8007702:	e01f      	b.n	8007744 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2200      	movs	r2, #0
 8007718:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d003      	beq.n	800772a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	68ba      	ldr	r2, [r7, #8]
 8007726:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2201      	movs	r2, #1
 800772e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	79fa      	ldrb	r2, [r7, #7]
 8007736:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f008 ffd1 	bl	80106e0 <USBD_LL_Init>
 800773e:	4603      	mov	r3, r0
 8007740:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007742:	7dfb      	ldrb	r3, [r7, #23]
}
 8007744:	4618      	mov	r0, r3
 8007746:	3718      	adds	r7, #24
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007756:	2300      	movs	r3, #0
 8007758:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007760:	2303      	movs	r3, #3
 8007762:	e025      	b.n	80077b0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	32ae      	adds	r2, #174	; 0xae
 8007776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800777a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00f      	beq.n	80077a0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	32ae      	adds	r2, #174	; 0xae
 800778a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800778e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007790:	f107 020e 	add.w	r2, r7, #14
 8007794:	4610      	mov	r0, r2
 8007796:	4798      	blx	r3
 8007798:	4602      	mov	r2, r0
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80077a6:	1c5a      	adds	r2, r3, #1
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f008 ffd9 	bl	8010778 <USBD_LL_Start>
 80077c6:	4603      	mov	r3, r0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80077d8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80077da:	4618      	mov	r0, r3
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b084      	sub	sp, #16
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	460b      	mov	r3, r1
 80077f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80077f2:	2300      	movs	r3, #0
 80077f4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d009      	beq.n	8007814 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	78fa      	ldrb	r2, [r7, #3]
 800780a:	4611      	mov	r1, r2
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	4798      	blx	r3
 8007810:	4603      	mov	r3, r0
 8007812:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007814:	7bfb      	ldrb	r3, [r7, #15]
}
 8007816:	4618      	mov	r0, r3
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b084      	sub	sp, #16
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
 8007826:	460b      	mov	r3, r1
 8007828:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	78fa      	ldrb	r2, [r7, #3]
 8007838:	4611      	mov	r1, r2
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	4798      	blx	r3
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d001      	beq.n	8007848 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007844:	2303      	movs	r3, #3
 8007846:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007848:	7bfb      	ldrb	r3, [r7, #15]
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b084      	sub	sp, #16
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
 800785a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007862:	6839      	ldr	r1, [r7, #0]
 8007864:	4618      	mov	r0, r3
 8007866:	f001 f908 	bl	8008a7a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2201      	movs	r2, #1
 800786e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007878:	461a      	mov	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007886:	f003 031f 	and.w	r3, r3, #31
 800788a:	2b02      	cmp	r3, #2
 800788c:	d01a      	beq.n	80078c4 <USBD_LL_SetupStage+0x72>
 800788e:	2b02      	cmp	r3, #2
 8007890:	d822      	bhi.n	80078d8 <USBD_LL_SetupStage+0x86>
 8007892:	2b00      	cmp	r3, #0
 8007894:	d002      	beq.n	800789c <USBD_LL_SetupStage+0x4a>
 8007896:	2b01      	cmp	r3, #1
 8007898:	d00a      	beq.n	80078b0 <USBD_LL_SetupStage+0x5e>
 800789a:	e01d      	b.n	80078d8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078a2:	4619      	mov	r1, r3
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fb5f 	bl	8007f68 <USBD_StdDevReq>
 80078aa:	4603      	mov	r3, r0
 80078ac:	73fb      	strb	r3, [r7, #15]
      break;
 80078ae:	e020      	b.n	80078f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078b6:	4619      	mov	r1, r3
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fbc7 	bl	800804c <USBD_StdItfReq>
 80078be:	4603      	mov	r3, r0
 80078c0:	73fb      	strb	r3, [r7, #15]
      break;
 80078c2:	e016      	b.n	80078f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078ca:	4619      	mov	r1, r3
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 fc29 	bl	8008124 <USBD_StdEPReq>
 80078d2:	4603      	mov	r3, r0
 80078d4:	73fb      	strb	r3, [r7, #15]
      break;
 80078d6:	e00c      	b.n	80078f2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80078de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	4619      	mov	r1, r3
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f008 ffa6 	bl	8010838 <USBD_LL_StallEP>
 80078ec:	4603      	mov	r3, r0
 80078ee:	73fb      	strb	r3, [r7, #15]
      break;
 80078f0:	bf00      	nop
  }

  return ret;
 80078f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	460b      	mov	r3, r1
 8007906:	607a      	str	r2, [r7, #4]
 8007908:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800790a:	2300      	movs	r3, #0
 800790c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800790e:	7afb      	ldrb	r3, [r7, #11]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d16e      	bne.n	80079f2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800791a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007922:	2b03      	cmp	r3, #3
 8007924:	f040 8098 	bne.w	8007a58 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	689a      	ldr	r2, [r3, #8]
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	429a      	cmp	r2, r3
 8007932:	d913      	bls.n	800795c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	689a      	ldr	r2, [r3, #8]
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	1ad2      	subs	r2, r2, r3
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	68da      	ldr	r2, [r3, #12]
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	4293      	cmp	r3, r2
 800794c:	bf28      	it	cs
 800794e:	4613      	movcs	r3, r2
 8007950:	461a      	mov	r2, r3
 8007952:	6879      	ldr	r1, [r7, #4]
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f001 f984 	bl	8008c62 <USBD_CtlContinueRx>
 800795a:	e07d      	b.n	8007a58 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007962:	f003 031f 	and.w	r3, r3, #31
 8007966:	2b02      	cmp	r3, #2
 8007968:	d014      	beq.n	8007994 <USBD_LL_DataOutStage+0x98>
 800796a:	2b02      	cmp	r3, #2
 800796c:	d81d      	bhi.n	80079aa <USBD_LL_DataOutStage+0xae>
 800796e:	2b00      	cmp	r3, #0
 8007970:	d002      	beq.n	8007978 <USBD_LL_DataOutStage+0x7c>
 8007972:	2b01      	cmp	r3, #1
 8007974:	d003      	beq.n	800797e <USBD_LL_DataOutStage+0x82>
 8007976:	e018      	b.n	80079aa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007978:	2300      	movs	r3, #0
 800797a:	75bb      	strb	r3, [r7, #22]
            break;
 800797c:	e018      	b.n	80079b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007984:	b2db      	uxtb	r3, r3
 8007986:	4619      	mov	r1, r3
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f000 fa5e 	bl	8007e4a <USBD_CoreFindIF>
 800798e:	4603      	mov	r3, r0
 8007990:	75bb      	strb	r3, [r7, #22]
            break;
 8007992:	e00d      	b.n	80079b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800799a:	b2db      	uxtb	r3, r3
 800799c:	4619      	mov	r1, r3
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f000 fa60 	bl	8007e64 <USBD_CoreFindEP>
 80079a4:	4603      	mov	r3, r0
 80079a6:	75bb      	strb	r3, [r7, #22]
            break;
 80079a8:	e002      	b.n	80079b0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80079aa:	2300      	movs	r3, #0
 80079ac:	75bb      	strb	r3, [r7, #22]
            break;
 80079ae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80079b0:	7dbb      	ldrb	r3, [r7, #22]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d119      	bne.n	80079ea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b03      	cmp	r3, #3
 80079c0:	d113      	bne.n	80079ea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80079c2:	7dba      	ldrb	r2, [r7, #22]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	32ae      	adds	r2, #174	; 0xae
 80079c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00b      	beq.n	80079ea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80079d2:	7dba      	ldrb	r2, [r7, #22]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80079da:	7dba      	ldrb	r2, [r7, #22]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	32ae      	adds	r2, #174	; 0xae
 80079e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f001 f94a 	bl	8008c84 <USBD_CtlSendStatus>
 80079f0:	e032      	b.n	8007a58 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80079f2:	7afb      	ldrb	r3, [r7, #11]
 80079f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	4619      	mov	r1, r3
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f000 fa31 	bl	8007e64 <USBD_CoreFindEP>
 8007a02:	4603      	mov	r3, r0
 8007a04:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a06:	7dbb      	ldrb	r3, [r7, #22]
 8007a08:	2bff      	cmp	r3, #255	; 0xff
 8007a0a:	d025      	beq.n	8007a58 <USBD_LL_DataOutStage+0x15c>
 8007a0c:	7dbb      	ldrb	r3, [r7, #22]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d122      	bne.n	8007a58 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	2b03      	cmp	r3, #3
 8007a1c:	d117      	bne.n	8007a4e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007a1e:	7dba      	ldrb	r2, [r7, #22]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	32ae      	adds	r2, #174	; 0xae
 8007a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00f      	beq.n	8007a4e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007a2e:	7dba      	ldrb	r2, [r7, #22]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007a36:	7dba      	ldrb	r2, [r7, #22]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	32ae      	adds	r2, #174	; 0xae
 8007a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	7afa      	ldrb	r2, [r7, #11]
 8007a44:	4611      	mov	r1, r2
 8007a46:	68f8      	ldr	r0, [r7, #12]
 8007a48:	4798      	blx	r3
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007a4e:	7dfb      	ldrb	r3, [r7, #23]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d001      	beq.n	8007a58 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007a54:	7dfb      	ldrb	r3, [r7, #23]
 8007a56:	e000      	b.n	8007a5a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3718      	adds	r7, #24
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b086      	sub	sp, #24
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	60f8      	str	r0, [r7, #12]
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	607a      	str	r2, [r7, #4]
 8007a6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007a70:	7afb      	ldrb	r3, [r7, #11]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d16f      	bne.n	8007b56 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	3314      	adds	r3, #20
 8007a7a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d15a      	bne.n	8007b3c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	689a      	ldr	r2, [r3, #8]
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d914      	bls.n	8007abc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	689a      	ldr	r2, [r3, #8]
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	1ad2      	subs	r2, r2, r3
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	6879      	ldr	r1, [r7, #4]
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f001 f8ac 	bl	8008c06 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007aae:	2300      	movs	r3, #0
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	68f8      	ldr	r0, [r7, #12]
 8007ab6:	f008 ff69 	bl	801098c <USBD_LL_PrepareReceive>
 8007aba:	e03f      	b.n	8007b3c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	68da      	ldr	r2, [r3, #12]
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d11c      	bne.n	8007b02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d316      	bcc.n	8007b02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d20f      	bcs.n	8007b02 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	68f8      	ldr	r0, [r7, #12]
 8007ae8:	f001 f88d 	bl	8008c06 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007af4:	2300      	movs	r3, #0
 8007af6:	2200      	movs	r2, #0
 8007af8:	2100      	movs	r1, #0
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f008 ff46 	bl	801098c <USBD_LL_PrepareReceive>
 8007b00:	e01c      	b.n	8007b3c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b03      	cmp	r3, #3
 8007b0c:	d10f      	bne.n	8007b2e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d009      	beq.n	8007b2e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b2e:	2180      	movs	r1, #128	; 0x80
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f008 fe81 	bl	8010838 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f001 f8b7 	bl	8008caa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d03a      	beq.n	8007bbc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007b46:	68f8      	ldr	r0, [r7, #12]
 8007b48:	f7ff fe42 	bl	80077d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007b54:	e032      	b.n	8007bbc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007b56:	7afb      	ldrb	r3, [r7, #11]
 8007b58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	4619      	mov	r1, r3
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f000 f97f 	bl	8007e64 <USBD_CoreFindEP>
 8007b66:	4603      	mov	r3, r0
 8007b68:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b6a:	7dfb      	ldrb	r3, [r7, #23]
 8007b6c:	2bff      	cmp	r3, #255	; 0xff
 8007b6e:	d025      	beq.n	8007bbc <USBD_LL_DataInStage+0x15a>
 8007b70:	7dfb      	ldrb	r3, [r7, #23]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d122      	bne.n	8007bbc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	2b03      	cmp	r3, #3
 8007b80:	d11c      	bne.n	8007bbc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007b82:	7dfa      	ldrb	r2, [r7, #23]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	32ae      	adds	r2, #174	; 0xae
 8007b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b8c:	695b      	ldr	r3, [r3, #20]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d014      	beq.n	8007bbc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007b92:	7dfa      	ldrb	r2, [r7, #23]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007b9a:	7dfa      	ldrb	r2, [r7, #23]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	32ae      	adds	r2, #174	; 0xae
 8007ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	7afa      	ldrb	r2, [r7, #11]
 8007ba8:	4611      	mov	r1, r2
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	4798      	blx	r3
 8007bae:	4603      	mov	r3, r0
 8007bb0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007bb2:	7dbb      	ldrb	r3, [r7, #22]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d001      	beq.n	8007bbc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007bb8:	7dbb      	ldrb	r3, [r7, #22]
 8007bba:	e000      	b.n	8007bbe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3718      	adds	r7, #24
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b084      	sub	sp, #16
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d014      	beq.n	8007c2c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00e      	beq.n	8007c2c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	6852      	ldr	r2, [r2, #4]
 8007c1a:	b2d2      	uxtb	r2, r2
 8007c1c:	4611      	mov	r1, r2
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	4798      	blx	r3
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d001      	beq.n	8007c2c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c2c:	2340      	movs	r3, #64	; 0x40
 8007c2e:	2200      	movs	r2, #0
 8007c30:	2100      	movs	r1, #0
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f008 fdbb 	bl	80107ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2240      	movs	r2, #64	; 0x40
 8007c44:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c48:	2340      	movs	r3, #64	; 0x40
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	2180      	movs	r1, #128	; 0x80
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f008 fdad 	bl	80107ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2240      	movs	r2, #64	; 0x40
 8007c5e:	621a      	str	r2, [r3, #32]

  return ret;
 8007c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b083      	sub	sp, #12
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	460b      	mov	r3, r1
 8007c74:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	78fa      	ldrb	r2, [r7, #3]
 8007c7a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	370c      	adds	r7, #12
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007c8a:	b480      	push	{r7}
 8007c8c:	b083      	sub	sp, #12
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c98:	b2da      	uxtb	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2204      	movs	r2, #4
 8007ca4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	370c      	adds	r7, #12
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr

08007cb6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b083      	sub	sp, #12
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	2b04      	cmp	r3, #4
 8007cc8:	d106      	bne.n	8007cd8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007cd0:	b2da      	uxtb	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	370c      	adds	r7, #12
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b082      	sub	sp, #8
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b03      	cmp	r3, #3
 8007cf8:	d110      	bne.n	8007d1c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00b      	beq.n	8007d1c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d0a:	69db      	ldr	r3, [r3, #28]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d005      	beq.n	8007d1c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d16:	69db      	ldr	r3, [r3, #28]
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b082      	sub	sp, #8
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	460b      	mov	r3, r1
 8007d30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	32ae      	adds	r2, #174	; 0xae
 8007d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d101      	bne.n	8007d48 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007d44:	2303      	movs	r3, #3
 8007d46:	e01c      	b.n	8007d82 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	2b03      	cmp	r3, #3
 8007d52:	d115      	bne.n	8007d80 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	32ae      	adds	r2, #174	; 0xae
 8007d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d62:	6a1b      	ldr	r3, [r3, #32]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00b      	beq.n	8007d80 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	32ae      	adds	r2, #174	; 0xae
 8007d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d76:	6a1b      	ldr	r3, [r3, #32]
 8007d78:	78fa      	ldrb	r2, [r7, #3]
 8007d7a:	4611      	mov	r1, r2
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b082      	sub	sp, #8
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	460b      	mov	r3, r1
 8007d94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	32ae      	adds	r2, #174	; 0xae
 8007da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d101      	bne.n	8007dac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007da8:	2303      	movs	r3, #3
 8007daa:	e01c      	b.n	8007de6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	2b03      	cmp	r3, #3
 8007db6:	d115      	bne.n	8007de4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	32ae      	adds	r2, #174	; 0xae
 8007dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00b      	beq.n	8007de4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	32ae      	adds	r2, #174	; 0xae
 8007dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ddc:	78fa      	ldrb	r2, [r7, #3]
 8007dde:	4611      	mov	r1, r2
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007dee:	b480      	push	{r7}
 8007df0:	b083      	sub	sp, #12
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00e      	beq.n	8007e40 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	6852      	ldr	r2, [r2, #4]
 8007e2e:	b2d2      	uxtb	r2, r2
 8007e30:	4611      	mov	r1, r2
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	4798      	blx	r3
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d001      	beq.n	8007e40 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b083      	sub	sp, #12
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
 8007e52:	460b      	mov	r3, r1
 8007e54:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007e56:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007e70:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	370c      	adds	r7, #12
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b086      	sub	sp, #24
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
 8007e86:	460b      	mov	r3, r1
 8007e88:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007e92:	2300      	movs	r3, #0
 8007e94:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	885b      	ldrh	r3, [r3, #2]
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d920      	bls.n	8007ee8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007eae:	e013      	b.n	8007ed8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007eb0:	f107 030a 	add.w	r3, r7, #10
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	6978      	ldr	r0, [r7, #20]
 8007eb8:	f000 f81b 	bl	8007ef2 <USBD_GetNextDesc>
 8007ebc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	785b      	ldrb	r3, [r3, #1]
 8007ec2:	2b05      	cmp	r3, #5
 8007ec4:	d108      	bne.n	8007ed8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	789b      	ldrb	r3, [r3, #2]
 8007ece:	78fa      	ldrb	r2, [r7, #3]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d008      	beq.n	8007ee6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	885b      	ldrh	r3, [r3, #2]
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	897b      	ldrh	r3, [r7, #10]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d8e5      	bhi.n	8007eb0 <USBD_GetEpDesc+0x32>
 8007ee4:	e000      	b.n	8007ee8 <USBD_GetEpDesc+0x6a>
          break;
 8007ee6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007ee8:	693b      	ldr	r3, [r7, #16]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3718      	adds	r7, #24
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007ef2:	b480      	push	{r7}
 8007ef4:	b085      	sub	sp, #20
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	881a      	ldrh	r2, [r3, #0]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	4413      	add	r3, r2
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	461a      	mov	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3714      	adds	r7, #20
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b087      	sub	sp, #28
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	3301      	adds	r3, #1
 8007f42:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007f4a:	8a3b      	ldrh	r3, [r7, #16]
 8007f4c:	021b      	lsls	r3, r3, #8
 8007f4e:	b21a      	sxth	r2, r3
 8007f50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	b21b      	sxth	r3, r3
 8007f58:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007f5a:	89fb      	ldrh	r3, [r7, #14]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	371c      	adds	r7, #28
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f72:	2300      	movs	r3, #0
 8007f74:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f7e:	2b40      	cmp	r3, #64	; 0x40
 8007f80:	d005      	beq.n	8007f8e <USBD_StdDevReq+0x26>
 8007f82:	2b40      	cmp	r3, #64	; 0x40
 8007f84:	d857      	bhi.n	8008036 <USBD_StdDevReq+0xce>
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00f      	beq.n	8007faa <USBD_StdDevReq+0x42>
 8007f8a:	2b20      	cmp	r3, #32
 8007f8c:	d153      	bne.n	8008036 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	32ae      	adds	r2, #174	; 0xae
 8007f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	4798      	blx	r3
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8007fa8:	e04a      	b.n	8008040 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	785b      	ldrb	r3, [r3, #1]
 8007fae:	2b09      	cmp	r3, #9
 8007fb0:	d83b      	bhi.n	800802a <USBD_StdDevReq+0xc2>
 8007fb2:	a201      	add	r2, pc, #4	; (adr r2, 8007fb8 <USBD_StdDevReq+0x50>)
 8007fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb8:	0800800d 	.word	0x0800800d
 8007fbc:	08008021 	.word	0x08008021
 8007fc0:	0800802b 	.word	0x0800802b
 8007fc4:	08008017 	.word	0x08008017
 8007fc8:	0800802b 	.word	0x0800802b
 8007fcc:	08007feb 	.word	0x08007feb
 8007fd0:	08007fe1 	.word	0x08007fe1
 8007fd4:	0800802b 	.word	0x0800802b
 8007fd8:	08008003 	.word	0x08008003
 8007fdc:	08007ff5 	.word	0x08007ff5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007fe0:	6839      	ldr	r1, [r7, #0]
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fa3c 	bl	8008460 <USBD_GetDescriptor>
          break;
 8007fe8:	e024      	b.n	8008034 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007fea:	6839      	ldr	r1, [r7, #0]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fba1 	bl	8008734 <USBD_SetAddress>
          break;
 8007ff2:	e01f      	b.n	8008034 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007ff4:	6839      	ldr	r1, [r7, #0]
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 fbe0 	bl	80087bc <USBD_SetConfig>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	73fb      	strb	r3, [r7, #15]
          break;
 8008000:	e018      	b.n	8008034 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008002:	6839      	ldr	r1, [r7, #0]
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 fc83 	bl	8008910 <USBD_GetConfig>
          break;
 800800a:	e013      	b.n	8008034 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800800c:	6839      	ldr	r1, [r7, #0]
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fcb4 	bl	800897c <USBD_GetStatus>
          break;
 8008014:	e00e      	b.n	8008034 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008016:	6839      	ldr	r1, [r7, #0]
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 fce3 	bl	80089e4 <USBD_SetFeature>
          break;
 800801e:	e009      	b.n	8008034 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008020:	6839      	ldr	r1, [r7, #0]
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 fd07 	bl	8008a36 <USBD_ClrFeature>
          break;
 8008028:	e004      	b.n	8008034 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800802a:	6839      	ldr	r1, [r7, #0]
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 fd5e 	bl	8008aee <USBD_CtlError>
          break;
 8008032:	bf00      	nop
      }
      break;
 8008034:	e004      	b.n	8008040 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008036:	6839      	ldr	r1, [r7, #0]
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fd58 	bl	8008aee <USBD_CtlError>
      break;
 800803e:	bf00      	nop
  }

  return ret;
 8008040:	7bfb      	ldrb	r3, [r7, #15]
}
 8008042:	4618      	mov	r0, r3
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop

0800804c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008056:	2300      	movs	r3, #0
 8008058:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008062:	2b40      	cmp	r3, #64	; 0x40
 8008064:	d005      	beq.n	8008072 <USBD_StdItfReq+0x26>
 8008066:	2b40      	cmp	r3, #64	; 0x40
 8008068:	d852      	bhi.n	8008110 <USBD_StdItfReq+0xc4>
 800806a:	2b00      	cmp	r3, #0
 800806c:	d001      	beq.n	8008072 <USBD_StdItfReq+0x26>
 800806e:	2b20      	cmp	r3, #32
 8008070:	d14e      	bne.n	8008110 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008078:	b2db      	uxtb	r3, r3
 800807a:	3b01      	subs	r3, #1
 800807c:	2b02      	cmp	r3, #2
 800807e:	d840      	bhi.n	8008102 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	889b      	ldrh	r3, [r3, #4]
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b01      	cmp	r3, #1
 8008088:	d836      	bhi.n	80080f8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	889b      	ldrh	r3, [r3, #4]
 800808e:	b2db      	uxtb	r3, r3
 8008090:	4619      	mov	r1, r3
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f7ff fed9 	bl	8007e4a <USBD_CoreFindIF>
 8008098:	4603      	mov	r3, r0
 800809a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800809c:	7bbb      	ldrb	r3, [r7, #14]
 800809e:	2bff      	cmp	r3, #255	; 0xff
 80080a0:	d01d      	beq.n	80080de <USBD_StdItfReq+0x92>
 80080a2:	7bbb      	ldrb	r3, [r7, #14]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d11a      	bne.n	80080de <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80080a8:	7bba      	ldrb	r2, [r7, #14]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	32ae      	adds	r2, #174	; 0xae
 80080ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00f      	beq.n	80080d8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80080b8:	7bba      	ldrb	r2, [r7, #14]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80080c0:	7bba      	ldrb	r2, [r7, #14]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	32ae      	adds	r2, #174	; 0xae
 80080c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	6839      	ldr	r1, [r7, #0]
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	4798      	blx	r3
 80080d2:	4603      	mov	r3, r0
 80080d4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80080d6:	e004      	b.n	80080e2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80080d8:	2303      	movs	r3, #3
 80080da:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80080dc:	e001      	b.n	80080e2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80080de:	2303      	movs	r3, #3
 80080e0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	88db      	ldrh	r3, [r3, #6]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d110      	bne.n	800810c <USBD_StdItfReq+0xc0>
 80080ea:	7bfb      	ldrb	r3, [r7, #15]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d10d      	bne.n	800810c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fdc7 	bl	8008c84 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80080f6:	e009      	b.n	800810c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80080f8:	6839      	ldr	r1, [r7, #0]
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 fcf7 	bl	8008aee <USBD_CtlError>
          break;
 8008100:	e004      	b.n	800810c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008102:	6839      	ldr	r1, [r7, #0]
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fcf2 	bl	8008aee <USBD_CtlError>
          break;
 800810a:	e000      	b.n	800810e <USBD_StdItfReq+0xc2>
          break;
 800810c:	bf00      	nop
      }
      break;
 800810e:	e004      	b.n	800811a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008110:	6839      	ldr	r1, [r7, #0]
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fceb 	bl	8008aee <USBD_CtlError>
      break;
 8008118:	bf00      	nop
  }

  return ret;
 800811a:	7bfb      	ldrb	r3, [r7, #15]
}
 800811c:	4618      	mov	r0, r3
 800811e:	3710      	adds	r7, #16
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800812e:	2300      	movs	r3, #0
 8008130:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	889b      	ldrh	r3, [r3, #4]
 8008136:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008140:	2b40      	cmp	r3, #64	; 0x40
 8008142:	d007      	beq.n	8008154 <USBD_StdEPReq+0x30>
 8008144:	2b40      	cmp	r3, #64	; 0x40
 8008146:	f200 817f 	bhi.w	8008448 <USBD_StdEPReq+0x324>
 800814a:	2b00      	cmp	r3, #0
 800814c:	d02a      	beq.n	80081a4 <USBD_StdEPReq+0x80>
 800814e:	2b20      	cmp	r3, #32
 8008150:	f040 817a 	bne.w	8008448 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008154:	7bbb      	ldrb	r3, [r7, #14]
 8008156:	4619      	mov	r1, r3
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f7ff fe83 	bl	8007e64 <USBD_CoreFindEP>
 800815e:	4603      	mov	r3, r0
 8008160:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008162:	7b7b      	ldrb	r3, [r7, #13]
 8008164:	2bff      	cmp	r3, #255	; 0xff
 8008166:	f000 8174 	beq.w	8008452 <USBD_StdEPReq+0x32e>
 800816a:	7b7b      	ldrb	r3, [r7, #13]
 800816c:	2b00      	cmp	r3, #0
 800816e:	f040 8170 	bne.w	8008452 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008172:	7b7a      	ldrb	r2, [r7, #13]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800817a:	7b7a      	ldrb	r2, [r7, #13]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	32ae      	adds	r2, #174	; 0xae
 8008180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	2b00      	cmp	r3, #0
 8008188:	f000 8163 	beq.w	8008452 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800818c:	7b7a      	ldrb	r2, [r7, #13]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	32ae      	adds	r2, #174	; 0xae
 8008192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	6839      	ldr	r1, [r7, #0]
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	4798      	blx	r3
 800819e:	4603      	mov	r3, r0
 80081a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80081a2:	e156      	b.n	8008452 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	785b      	ldrb	r3, [r3, #1]
 80081a8:	2b03      	cmp	r3, #3
 80081aa:	d008      	beq.n	80081be <USBD_StdEPReq+0x9a>
 80081ac:	2b03      	cmp	r3, #3
 80081ae:	f300 8145 	bgt.w	800843c <USBD_StdEPReq+0x318>
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f000 809b 	beq.w	80082ee <USBD_StdEPReq+0x1ca>
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d03c      	beq.n	8008236 <USBD_StdEPReq+0x112>
 80081bc:	e13e      	b.n	800843c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d002      	beq.n	80081d0 <USBD_StdEPReq+0xac>
 80081ca:	2b03      	cmp	r3, #3
 80081cc:	d016      	beq.n	80081fc <USBD_StdEPReq+0xd8>
 80081ce:	e02c      	b.n	800822a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081d0:	7bbb      	ldrb	r3, [r7, #14]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00d      	beq.n	80081f2 <USBD_StdEPReq+0xce>
 80081d6:	7bbb      	ldrb	r3, [r7, #14]
 80081d8:	2b80      	cmp	r3, #128	; 0x80
 80081da:	d00a      	beq.n	80081f2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80081dc:	7bbb      	ldrb	r3, [r7, #14]
 80081de:	4619      	mov	r1, r3
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f008 fb29 	bl	8010838 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80081e6:	2180      	movs	r1, #128	; 0x80
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f008 fb25 	bl	8010838 <USBD_LL_StallEP>
 80081ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081f0:	e020      	b.n	8008234 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80081f2:	6839      	ldr	r1, [r7, #0]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fc7a 	bl	8008aee <USBD_CtlError>
              break;
 80081fa:	e01b      	b.n	8008234 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	885b      	ldrh	r3, [r3, #2]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10e      	bne.n	8008222 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008204:	7bbb      	ldrb	r3, [r7, #14]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00b      	beq.n	8008222 <USBD_StdEPReq+0xfe>
 800820a:	7bbb      	ldrb	r3, [r7, #14]
 800820c:	2b80      	cmp	r3, #128	; 0x80
 800820e:	d008      	beq.n	8008222 <USBD_StdEPReq+0xfe>
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	88db      	ldrh	r3, [r3, #6]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d104      	bne.n	8008222 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008218:	7bbb      	ldrb	r3, [r7, #14]
 800821a:	4619      	mov	r1, r3
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f008 fb0b 	bl	8010838 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 fd2e 	bl	8008c84 <USBD_CtlSendStatus>

              break;
 8008228:	e004      	b.n	8008234 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800822a:	6839      	ldr	r1, [r7, #0]
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 fc5e 	bl	8008aee <USBD_CtlError>
              break;
 8008232:	bf00      	nop
          }
          break;
 8008234:	e107      	b.n	8008446 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800823c:	b2db      	uxtb	r3, r3
 800823e:	2b02      	cmp	r3, #2
 8008240:	d002      	beq.n	8008248 <USBD_StdEPReq+0x124>
 8008242:	2b03      	cmp	r3, #3
 8008244:	d016      	beq.n	8008274 <USBD_StdEPReq+0x150>
 8008246:	e04b      	b.n	80082e0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008248:	7bbb      	ldrb	r3, [r7, #14]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00d      	beq.n	800826a <USBD_StdEPReq+0x146>
 800824e:	7bbb      	ldrb	r3, [r7, #14]
 8008250:	2b80      	cmp	r3, #128	; 0x80
 8008252:	d00a      	beq.n	800826a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008254:	7bbb      	ldrb	r3, [r7, #14]
 8008256:	4619      	mov	r1, r3
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f008 faed 	bl	8010838 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800825e:	2180      	movs	r1, #128	; 0x80
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f008 fae9 	bl	8010838 <USBD_LL_StallEP>
 8008266:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008268:	e040      	b.n	80082ec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fc3e 	bl	8008aee <USBD_CtlError>
              break;
 8008272:	e03b      	b.n	80082ec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	885b      	ldrh	r3, [r3, #2]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d136      	bne.n	80082ea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800827c:	7bbb      	ldrb	r3, [r7, #14]
 800827e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008282:	2b00      	cmp	r3, #0
 8008284:	d004      	beq.n	8008290 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008286:	7bbb      	ldrb	r3, [r7, #14]
 8008288:	4619      	mov	r1, r3
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f008 faf3 	bl	8010876 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 fcf7 	bl	8008c84 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008296:	7bbb      	ldrb	r3, [r7, #14]
 8008298:	4619      	mov	r1, r3
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f7ff fde2 	bl	8007e64 <USBD_CoreFindEP>
 80082a0:	4603      	mov	r3, r0
 80082a2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082a4:	7b7b      	ldrb	r3, [r7, #13]
 80082a6:	2bff      	cmp	r3, #255	; 0xff
 80082a8:	d01f      	beq.n	80082ea <USBD_StdEPReq+0x1c6>
 80082aa:	7b7b      	ldrb	r3, [r7, #13]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d11c      	bne.n	80082ea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80082b0:	7b7a      	ldrb	r2, [r7, #13]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80082b8:	7b7a      	ldrb	r2, [r7, #13]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	32ae      	adds	r2, #174	; 0xae
 80082be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d010      	beq.n	80082ea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80082c8:	7b7a      	ldrb	r2, [r7, #13]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	32ae      	adds	r2, #174	; 0xae
 80082ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	6839      	ldr	r1, [r7, #0]
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	4798      	blx	r3
 80082da:	4603      	mov	r3, r0
 80082dc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80082de:	e004      	b.n	80082ea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80082e0:	6839      	ldr	r1, [r7, #0]
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fc03 	bl	8008aee <USBD_CtlError>
              break;
 80082e8:	e000      	b.n	80082ec <USBD_StdEPReq+0x1c8>
              break;
 80082ea:	bf00      	nop
          }
          break;
 80082ec:	e0ab      	b.n	8008446 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	d002      	beq.n	8008300 <USBD_StdEPReq+0x1dc>
 80082fa:	2b03      	cmp	r3, #3
 80082fc:	d032      	beq.n	8008364 <USBD_StdEPReq+0x240>
 80082fe:	e097      	b.n	8008430 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008300:	7bbb      	ldrb	r3, [r7, #14]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d007      	beq.n	8008316 <USBD_StdEPReq+0x1f2>
 8008306:	7bbb      	ldrb	r3, [r7, #14]
 8008308:	2b80      	cmp	r3, #128	; 0x80
 800830a:	d004      	beq.n	8008316 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800830c:	6839      	ldr	r1, [r7, #0]
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fbed 	bl	8008aee <USBD_CtlError>
                break;
 8008314:	e091      	b.n	800843a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008316:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800831a:	2b00      	cmp	r3, #0
 800831c:	da0b      	bge.n	8008336 <USBD_StdEPReq+0x212>
 800831e:	7bbb      	ldrb	r3, [r7, #14]
 8008320:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008324:	4613      	mov	r3, r2
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	4413      	add	r3, r2
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	3310      	adds	r3, #16
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	4413      	add	r3, r2
 8008332:	3304      	adds	r3, #4
 8008334:	e00b      	b.n	800834e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008336:	7bbb      	ldrb	r3, [r7, #14]
 8008338:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800833c:	4613      	mov	r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4413      	add	r3, r2
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	4413      	add	r3, r2
 800834c:	3304      	adds	r3, #4
 800834e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	2200      	movs	r2, #0
 8008354:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	2202      	movs	r2, #2
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 fc37 	bl	8008bd0 <USBD_CtlSendData>
              break;
 8008362:	e06a      	b.n	800843a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008364:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008368:	2b00      	cmp	r3, #0
 800836a:	da11      	bge.n	8008390 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800836c:	7bbb      	ldrb	r3, [r7, #14]
 800836e:	f003 020f 	and.w	r2, r3, #15
 8008372:	6879      	ldr	r1, [r7, #4]
 8008374:	4613      	mov	r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4413      	add	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	440b      	add	r3, r1
 800837e:	3324      	adds	r3, #36	; 0x24
 8008380:	881b      	ldrh	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d117      	bne.n	80083b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fbb0 	bl	8008aee <USBD_CtlError>
                  break;
 800838e:	e054      	b.n	800843a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008390:	7bbb      	ldrb	r3, [r7, #14]
 8008392:	f003 020f 	and.w	r2, r3, #15
 8008396:	6879      	ldr	r1, [r7, #4]
 8008398:	4613      	mov	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	440b      	add	r3, r1
 80083a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80083a6:	881b      	ldrh	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d104      	bne.n	80083b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fb9d 	bl	8008aee <USBD_CtlError>
                  break;
 80083b4:	e041      	b.n	800843a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	da0b      	bge.n	80083d6 <USBD_StdEPReq+0x2b2>
 80083be:	7bbb      	ldrb	r3, [r7, #14]
 80083c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083c4:	4613      	mov	r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	4413      	add	r3, r2
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	3310      	adds	r3, #16
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	4413      	add	r3, r2
 80083d2:	3304      	adds	r3, #4
 80083d4:	e00b      	b.n	80083ee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083d6:	7bbb      	ldrb	r3, [r7, #14]
 80083d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083dc:	4613      	mov	r3, r2
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	4413      	add	r3, r2
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	4413      	add	r3, r2
 80083ec:	3304      	adds	r3, #4
 80083ee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80083f0:	7bbb      	ldrb	r3, [r7, #14]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d002      	beq.n	80083fc <USBD_StdEPReq+0x2d8>
 80083f6:	7bbb      	ldrb	r3, [r7, #14]
 80083f8:	2b80      	cmp	r3, #128	; 0x80
 80083fa:	d103      	bne.n	8008404 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	2200      	movs	r2, #0
 8008400:	601a      	str	r2, [r3, #0]
 8008402:	e00e      	b.n	8008422 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008404:	7bbb      	ldrb	r3, [r7, #14]
 8008406:	4619      	mov	r1, r3
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f008 fa53 	bl	80108b4 <USBD_LL_IsStallEP>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d003      	beq.n	800841c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	2201      	movs	r2, #1
 8008418:	601a      	str	r2, [r3, #0]
 800841a:	e002      	b.n	8008422 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	2200      	movs	r2, #0
 8008420:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	2202      	movs	r2, #2
 8008426:	4619      	mov	r1, r3
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fbd1 	bl	8008bd0 <USBD_CtlSendData>
              break;
 800842e:	e004      	b.n	800843a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008430:	6839      	ldr	r1, [r7, #0]
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fb5b 	bl	8008aee <USBD_CtlError>
              break;
 8008438:	bf00      	nop
          }
          break;
 800843a:	e004      	b.n	8008446 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800843c:	6839      	ldr	r1, [r7, #0]
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fb55 	bl	8008aee <USBD_CtlError>
          break;
 8008444:	bf00      	nop
      }
      break;
 8008446:	e005      	b.n	8008454 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008448:	6839      	ldr	r1, [r7, #0]
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 fb4f 	bl	8008aee <USBD_CtlError>
      break;
 8008450:	e000      	b.n	8008454 <USBD_StdEPReq+0x330>
      break;
 8008452:	bf00      	nop
  }

  return ret;
 8008454:	7bfb      	ldrb	r3, [r7, #15]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
	...

08008460 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800846a:	2300      	movs	r3, #0
 800846c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800846e:	2300      	movs	r3, #0
 8008470:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008472:	2300      	movs	r3, #0
 8008474:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	885b      	ldrh	r3, [r3, #2]
 800847a:	0a1b      	lsrs	r3, r3, #8
 800847c:	b29b      	uxth	r3, r3
 800847e:	3b01      	subs	r3, #1
 8008480:	2b06      	cmp	r3, #6
 8008482:	f200 8128 	bhi.w	80086d6 <USBD_GetDescriptor+0x276>
 8008486:	a201      	add	r2, pc, #4	; (adr r2, 800848c <USBD_GetDescriptor+0x2c>)
 8008488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800848c:	080084a9 	.word	0x080084a9
 8008490:	080084c1 	.word	0x080084c1
 8008494:	08008501 	.word	0x08008501
 8008498:	080086d7 	.word	0x080086d7
 800849c:	080086d7 	.word	0x080086d7
 80084a0:	08008677 	.word	0x08008677
 80084a4:	080086a3 	.word	0x080086a3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	7c12      	ldrb	r2, [r2, #16]
 80084b4:	f107 0108 	add.w	r1, r7, #8
 80084b8:	4610      	mov	r0, r2
 80084ba:	4798      	blx	r3
 80084bc:	60f8      	str	r0, [r7, #12]
      break;
 80084be:	e112      	b.n	80086e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	7c1b      	ldrb	r3, [r3, #16]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d10d      	bne.n	80084e4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d0:	f107 0208 	add.w	r2, r7, #8
 80084d4:	4610      	mov	r0, r2
 80084d6:	4798      	blx	r3
 80084d8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	3301      	adds	r3, #1
 80084de:	2202      	movs	r2, #2
 80084e0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80084e2:	e100      	b.n	80086e6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ec:	f107 0208 	add.w	r2, r7, #8
 80084f0:	4610      	mov	r0, r2
 80084f2:	4798      	blx	r3
 80084f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	3301      	adds	r3, #1
 80084fa:	2202      	movs	r2, #2
 80084fc:	701a      	strb	r2, [r3, #0]
      break;
 80084fe:	e0f2      	b.n	80086e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	885b      	ldrh	r3, [r3, #2]
 8008504:	b2db      	uxtb	r3, r3
 8008506:	2b05      	cmp	r3, #5
 8008508:	f200 80ac 	bhi.w	8008664 <USBD_GetDescriptor+0x204>
 800850c:	a201      	add	r2, pc, #4	; (adr r2, 8008514 <USBD_GetDescriptor+0xb4>)
 800850e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008512:	bf00      	nop
 8008514:	0800852d 	.word	0x0800852d
 8008518:	08008561 	.word	0x08008561
 800851c:	08008595 	.word	0x08008595
 8008520:	080085c9 	.word	0x080085c9
 8008524:	080085fd 	.word	0x080085fd
 8008528:	08008631 	.word	0x08008631
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00b      	beq.n	8008550 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	7c12      	ldrb	r2, [r2, #16]
 8008544:	f107 0108 	add.w	r1, r7, #8
 8008548:	4610      	mov	r0, r2
 800854a:	4798      	blx	r3
 800854c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800854e:	e091      	b.n	8008674 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008550:	6839      	ldr	r1, [r7, #0]
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 facb 	bl	8008aee <USBD_CtlError>
            err++;
 8008558:	7afb      	ldrb	r3, [r7, #11]
 800855a:	3301      	adds	r3, #1
 800855c:	72fb      	strb	r3, [r7, #11]
          break;
 800855e:	e089      	b.n	8008674 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00b      	beq.n	8008584 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	7c12      	ldrb	r2, [r2, #16]
 8008578:	f107 0108 	add.w	r1, r7, #8
 800857c:	4610      	mov	r0, r2
 800857e:	4798      	blx	r3
 8008580:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008582:	e077      	b.n	8008674 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008584:	6839      	ldr	r1, [r7, #0]
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 fab1 	bl	8008aee <USBD_CtlError>
            err++;
 800858c:	7afb      	ldrb	r3, [r7, #11]
 800858e:	3301      	adds	r3, #1
 8008590:	72fb      	strb	r3, [r7, #11]
          break;
 8008592:	e06f      	b.n	8008674 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00b      	beq.n	80085b8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	7c12      	ldrb	r2, [r2, #16]
 80085ac:	f107 0108 	add.w	r1, r7, #8
 80085b0:	4610      	mov	r0, r2
 80085b2:	4798      	blx	r3
 80085b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085b6:	e05d      	b.n	8008674 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085b8:	6839      	ldr	r1, [r7, #0]
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 fa97 	bl	8008aee <USBD_CtlError>
            err++;
 80085c0:	7afb      	ldrb	r3, [r7, #11]
 80085c2:	3301      	adds	r3, #1
 80085c4:	72fb      	strb	r3, [r7, #11]
          break;
 80085c6:	e055      	b.n	8008674 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00b      	beq.n	80085ec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	7c12      	ldrb	r2, [r2, #16]
 80085e0:	f107 0108 	add.w	r1, r7, #8
 80085e4:	4610      	mov	r0, r2
 80085e6:	4798      	blx	r3
 80085e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085ea:	e043      	b.n	8008674 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085ec:	6839      	ldr	r1, [r7, #0]
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 fa7d 	bl	8008aee <USBD_CtlError>
            err++;
 80085f4:	7afb      	ldrb	r3, [r7, #11]
 80085f6:	3301      	adds	r3, #1
 80085f8:	72fb      	strb	r3, [r7, #11]
          break;
 80085fa:	e03b      	b.n	8008674 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008602:	695b      	ldr	r3, [r3, #20]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00b      	beq.n	8008620 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800860e:	695b      	ldr	r3, [r3, #20]
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	7c12      	ldrb	r2, [r2, #16]
 8008614:	f107 0108 	add.w	r1, r7, #8
 8008618:	4610      	mov	r0, r2
 800861a:	4798      	blx	r3
 800861c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800861e:	e029      	b.n	8008674 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008620:	6839      	ldr	r1, [r7, #0]
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fa63 	bl	8008aee <USBD_CtlError>
            err++;
 8008628:	7afb      	ldrb	r3, [r7, #11]
 800862a:	3301      	adds	r3, #1
 800862c:	72fb      	strb	r3, [r7, #11]
          break;
 800862e:	e021      	b.n	8008674 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008636:	699b      	ldr	r3, [r3, #24]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00b      	beq.n	8008654 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008642:	699b      	ldr	r3, [r3, #24]
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	7c12      	ldrb	r2, [r2, #16]
 8008648:	f107 0108 	add.w	r1, r7, #8
 800864c:	4610      	mov	r0, r2
 800864e:	4798      	blx	r3
 8008650:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008652:	e00f      	b.n	8008674 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008654:	6839      	ldr	r1, [r7, #0]
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 fa49 	bl	8008aee <USBD_CtlError>
            err++;
 800865c:	7afb      	ldrb	r3, [r7, #11]
 800865e:	3301      	adds	r3, #1
 8008660:	72fb      	strb	r3, [r7, #11]
          break;
 8008662:	e007      	b.n	8008674 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 fa41 	bl	8008aee <USBD_CtlError>
          err++;
 800866c:	7afb      	ldrb	r3, [r7, #11]
 800866e:	3301      	adds	r3, #1
 8008670:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008672:	bf00      	nop
      }
      break;
 8008674:	e037      	b.n	80086e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	7c1b      	ldrb	r3, [r3, #16]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d109      	bne.n	8008692 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008686:	f107 0208 	add.w	r2, r7, #8
 800868a:	4610      	mov	r0, r2
 800868c:	4798      	blx	r3
 800868e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008690:	e029      	b.n	80086e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008692:	6839      	ldr	r1, [r7, #0]
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fa2a 	bl	8008aee <USBD_CtlError>
        err++;
 800869a:	7afb      	ldrb	r3, [r7, #11]
 800869c:	3301      	adds	r3, #1
 800869e:	72fb      	strb	r3, [r7, #11]
      break;
 80086a0:	e021      	b.n	80086e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	7c1b      	ldrb	r3, [r3, #16]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10d      	bne.n	80086c6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b2:	f107 0208 	add.w	r2, r7, #8
 80086b6:	4610      	mov	r0, r2
 80086b8:	4798      	blx	r3
 80086ba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	3301      	adds	r3, #1
 80086c0:	2207      	movs	r2, #7
 80086c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086c4:	e00f      	b.n	80086e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80086c6:	6839      	ldr	r1, [r7, #0]
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 fa10 	bl	8008aee <USBD_CtlError>
        err++;
 80086ce:	7afb      	ldrb	r3, [r7, #11]
 80086d0:	3301      	adds	r3, #1
 80086d2:	72fb      	strb	r3, [r7, #11]
      break;
 80086d4:	e007      	b.n	80086e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80086d6:	6839      	ldr	r1, [r7, #0]
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 fa08 	bl	8008aee <USBD_CtlError>
      err++;
 80086de:	7afb      	ldrb	r3, [r7, #11]
 80086e0:	3301      	adds	r3, #1
 80086e2:	72fb      	strb	r3, [r7, #11]
      break;
 80086e4:	bf00      	nop
  }

  if (err != 0U)
 80086e6:	7afb      	ldrb	r3, [r7, #11]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d11e      	bne.n	800872a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	88db      	ldrh	r3, [r3, #6]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d016      	beq.n	8008722 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80086f4:	893b      	ldrh	r3, [r7, #8]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00e      	beq.n	8008718 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	88da      	ldrh	r2, [r3, #6]
 80086fe:	893b      	ldrh	r3, [r7, #8]
 8008700:	4293      	cmp	r3, r2
 8008702:	bf28      	it	cs
 8008704:	4613      	movcs	r3, r2
 8008706:	b29b      	uxth	r3, r3
 8008708:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800870a:	893b      	ldrh	r3, [r7, #8]
 800870c:	461a      	mov	r2, r3
 800870e:	68f9      	ldr	r1, [r7, #12]
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 fa5d 	bl	8008bd0 <USBD_CtlSendData>
 8008716:	e009      	b.n	800872c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008718:	6839      	ldr	r1, [r7, #0]
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 f9e7 	bl	8008aee <USBD_CtlError>
 8008720:	e004      	b.n	800872c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 faae 	bl	8008c84 <USBD_CtlSendStatus>
 8008728:	e000      	b.n	800872c <USBD_GetDescriptor+0x2cc>
    return;
 800872a:	bf00      	nop
  }
}
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop

08008734 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	889b      	ldrh	r3, [r3, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d131      	bne.n	80087aa <USBD_SetAddress+0x76>
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	88db      	ldrh	r3, [r3, #6]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d12d      	bne.n	80087aa <USBD_SetAddress+0x76>
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	885b      	ldrh	r3, [r3, #2]
 8008752:	2b7f      	cmp	r3, #127	; 0x7f
 8008754:	d829      	bhi.n	80087aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	885b      	ldrh	r3, [r3, #2]
 800875a:	b2db      	uxtb	r3, r3
 800875c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008760:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008768:	b2db      	uxtb	r3, r3
 800876a:	2b03      	cmp	r3, #3
 800876c:	d104      	bne.n	8008778 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 f9bc 	bl	8008aee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008776:	e01d      	b.n	80087b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	7bfa      	ldrb	r2, [r7, #15]
 800877c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008780:	7bfb      	ldrb	r3, [r7, #15]
 8008782:	4619      	mov	r1, r3
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f008 f8c1 	bl	801090c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fa7a 	bl	8008c84 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008790:	7bfb      	ldrb	r3, [r7, #15]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d004      	beq.n	80087a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2202      	movs	r2, #2
 800879a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800879e:	e009      	b.n	80087b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087a8:	e004      	b.n	80087b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80087aa:	6839      	ldr	r1, [r7, #0]
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f99e 	bl	8008aee <USBD_CtlError>
  }
}
 80087b2:	bf00      	nop
 80087b4:	bf00      	nop
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087c6:	2300      	movs	r3, #0
 80087c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	885b      	ldrh	r3, [r3, #2]
 80087ce:	b2da      	uxtb	r2, r3
 80087d0:	4b4e      	ldr	r3, [pc, #312]	; (800890c <USBD_SetConfig+0x150>)
 80087d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80087d4:	4b4d      	ldr	r3, [pc, #308]	; (800890c <USBD_SetConfig+0x150>)
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d905      	bls.n	80087e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80087dc:	6839      	ldr	r1, [r7, #0]
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f985 	bl	8008aee <USBD_CtlError>
    return USBD_FAIL;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e08c      	b.n	8008902 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d002      	beq.n	80087fa <USBD_SetConfig+0x3e>
 80087f4:	2b03      	cmp	r3, #3
 80087f6:	d029      	beq.n	800884c <USBD_SetConfig+0x90>
 80087f8:	e075      	b.n	80088e6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80087fa:	4b44      	ldr	r3, [pc, #272]	; (800890c <USBD_SetConfig+0x150>)
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d020      	beq.n	8008844 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008802:	4b42      	ldr	r3, [pc, #264]	; (800890c <USBD_SetConfig+0x150>)
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	461a      	mov	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800880c:	4b3f      	ldr	r3, [pc, #252]	; (800890c <USBD_SetConfig+0x150>)
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	4619      	mov	r1, r3
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f7fe ffe7 	bl	80077e6 <USBD_SetClassConfig>
 8008818:	4603      	mov	r3, r0
 800881a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800881c:	7bfb      	ldrb	r3, [r7, #15]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d008      	beq.n	8008834 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008822:	6839      	ldr	r1, [r7, #0]
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 f962 	bl	8008aee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2202      	movs	r2, #2
 800882e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008832:	e065      	b.n	8008900 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 fa25 	bl	8008c84 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2203      	movs	r2, #3
 800883e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008842:	e05d      	b.n	8008900 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 fa1d 	bl	8008c84 <USBD_CtlSendStatus>
      break;
 800884a:	e059      	b.n	8008900 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800884c:	4b2f      	ldr	r3, [pc, #188]	; (800890c <USBD_SetConfig+0x150>)
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d112      	bne.n	800887a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2202      	movs	r2, #2
 8008858:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800885c:	4b2b      	ldr	r3, [pc, #172]	; (800890c <USBD_SetConfig+0x150>)
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	461a      	mov	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008866:	4b29      	ldr	r3, [pc, #164]	; (800890c <USBD_SetConfig+0x150>)
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	4619      	mov	r1, r3
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f7fe ffd6 	bl	800781e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 fa06 	bl	8008c84 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008878:	e042      	b.n	8008900 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800887a:	4b24      	ldr	r3, [pc, #144]	; (800890c <USBD_SetConfig+0x150>)
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	461a      	mov	r2, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	429a      	cmp	r2, r3
 8008886:	d02a      	beq.n	80088de <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	b2db      	uxtb	r3, r3
 800888e:	4619      	mov	r1, r3
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f7fe ffc4 	bl	800781e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008896:	4b1d      	ldr	r3, [pc, #116]	; (800890c <USBD_SetConfig+0x150>)
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	461a      	mov	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80088a0:	4b1a      	ldr	r3, [pc, #104]	; (800890c <USBD_SetConfig+0x150>)
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	4619      	mov	r1, r3
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f7fe ff9d 	bl	80077e6 <USBD_SetClassConfig>
 80088ac:	4603      	mov	r3, r0
 80088ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80088b0:	7bfb      	ldrb	r3, [r7, #15]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00f      	beq.n	80088d6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80088b6:	6839      	ldr	r1, [r7, #0]
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 f918 	bl	8008aee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	4619      	mov	r1, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f7fe ffa9 	bl	800781e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2202      	movs	r2, #2
 80088d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80088d4:	e014      	b.n	8008900 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f9d4 	bl	8008c84 <USBD_CtlSendStatus>
      break;
 80088dc:	e010      	b.n	8008900 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 f9d0 	bl	8008c84 <USBD_CtlSendStatus>
      break;
 80088e4:	e00c      	b.n	8008900 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80088e6:	6839      	ldr	r1, [r7, #0]
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 f900 	bl	8008aee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088ee:	4b07      	ldr	r3, [pc, #28]	; (800890c <USBD_SetConfig+0x150>)
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	4619      	mov	r1, r3
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f7fe ff92 	bl	800781e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80088fa:	2303      	movs	r3, #3
 80088fc:	73fb      	strb	r3, [r7, #15]
      break;
 80088fe:	bf00      	nop
  }

  return ret;
 8008900:	7bfb      	ldrb	r3, [r7, #15]
}
 8008902:	4618      	mov	r0, r3
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	200022c4 	.word	0x200022c4

08008910 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	88db      	ldrh	r3, [r3, #6]
 800891e:	2b01      	cmp	r3, #1
 8008920:	d004      	beq.n	800892c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008922:	6839      	ldr	r1, [r7, #0]
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 f8e2 	bl	8008aee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800892a:	e023      	b.n	8008974 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008932:	b2db      	uxtb	r3, r3
 8008934:	2b02      	cmp	r3, #2
 8008936:	dc02      	bgt.n	800893e <USBD_GetConfig+0x2e>
 8008938:	2b00      	cmp	r3, #0
 800893a:	dc03      	bgt.n	8008944 <USBD_GetConfig+0x34>
 800893c:	e015      	b.n	800896a <USBD_GetConfig+0x5a>
 800893e:	2b03      	cmp	r3, #3
 8008940:	d00b      	beq.n	800895a <USBD_GetConfig+0x4a>
 8008942:	e012      	b.n	800896a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	3308      	adds	r3, #8
 800894e:	2201      	movs	r2, #1
 8008950:	4619      	mov	r1, r3
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 f93c 	bl	8008bd0 <USBD_CtlSendData>
        break;
 8008958:	e00c      	b.n	8008974 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	3304      	adds	r3, #4
 800895e:	2201      	movs	r2, #1
 8008960:	4619      	mov	r1, r3
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 f934 	bl	8008bd0 <USBD_CtlSendData>
        break;
 8008968:	e004      	b.n	8008974 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800896a:	6839      	ldr	r1, [r7, #0]
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 f8be 	bl	8008aee <USBD_CtlError>
        break;
 8008972:	bf00      	nop
}
 8008974:	bf00      	nop
 8008976:	3708      	adds	r7, #8
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800898c:	b2db      	uxtb	r3, r3
 800898e:	3b01      	subs	r3, #1
 8008990:	2b02      	cmp	r3, #2
 8008992:	d81e      	bhi.n	80089d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	88db      	ldrh	r3, [r3, #6]
 8008998:	2b02      	cmp	r3, #2
 800899a:	d004      	beq.n	80089a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800899c:	6839      	ldr	r1, [r7, #0]
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 f8a5 	bl	8008aee <USBD_CtlError>
        break;
 80089a4:	e01a      	b.n	80089dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2201      	movs	r2, #1
 80089aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d005      	beq.n	80089c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	f043 0202 	orr.w	r2, r3, #2
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	330c      	adds	r3, #12
 80089c6:	2202      	movs	r2, #2
 80089c8:	4619      	mov	r1, r3
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f900 	bl	8008bd0 <USBD_CtlSendData>
      break;
 80089d0:	e004      	b.n	80089dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80089d2:	6839      	ldr	r1, [r7, #0]
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 f88a 	bl	8008aee <USBD_CtlError>
      break;
 80089da:	bf00      	nop
  }
}
 80089dc:	bf00      	nop
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	885b      	ldrh	r3, [r3, #2]
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d107      	bne.n	8008a06 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2201      	movs	r2, #1
 80089fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f940 	bl	8008c84 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008a04:	e013      	b.n	8008a2e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	885b      	ldrh	r3, [r3, #2]
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	d10b      	bne.n	8008a26 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	889b      	ldrh	r3, [r3, #4]
 8008a12:	0a1b      	lsrs	r3, r3, #8
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	b2da      	uxtb	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f930 	bl	8008c84 <USBD_CtlSendStatus>
}
 8008a24:	e003      	b.n	8008a2e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008a26:	6839      	ldr	r1, [r7, #0]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 f860 	bl	8008aee <USBD_CtlError>
}
 8008a2e:	bf00      	nop
 8008a30:	3708      	adds	r7, #8
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b082      	sub	sp, #8
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
 8008a3e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	2b02      	cmp	r3, #2
 8008a4c:	d80b      	bhi.n	8008a66 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	885b      	ldrh	r3, [r3, #2]
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d10c      	bne.n	8008a70 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 f910 	bl	8008c84 <USBD_CtlSendStatus>
      }
      break;
 8008a64:	e004      	b.n	8008a70 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008a66:	6839      	ldr	r1, [r7, #0]
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 f840 	bl	8008aee <USBD_CtlError>
      break;
 8008a6e:	e000      	b.n	8008a72 <USBD_ClrFeature+0x3c>
      break;
 8008a70:	bf00      	nop
  }
}
 8008a72:	bf00      	nop
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b084      	sub	sp, #16
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
 8008a82:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	781a      	ldrb	r2, [r3, #0]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	3301      	adds	r3, #1
 8008a94:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	781a      	ldrb	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008aa4:	68f8      	ldr	r0, [r7, #12]
 8008aa6:	f7ff fa41 	bl	8007f2c <SWAPBYTE>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	461a      	mov	r2, r3
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	3301      	adds	r3, #1
 8008abc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008abe:	68f8      	ldr	r0, [r7, #12]
 8008ac0:	f7ff fa34 	bl	8007f2c <SWAPBYTE>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	f7ff fa27 	bl	8007f2c <SWAPBYTE>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	80da      	strh	r2, [r3, #6]
}
 8008ae6:	bf00      	nop
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b082      	sub	sp, #8
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
 8008af6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008af8:	2180      	movs	r1, #128	; 0x80
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f007 fe9c 	bl	8010838 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008b00:	2100      	movs	r1, #0
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f007 fe98 	bl	8010838 <USBD_LL_StallEP>
}
 8008b08:	bf00      	nop
 8008b0a:	3708      	adds	r7, #8
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b086      	sub	sp, #24
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d036      	beq.n	8008b94 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008b2a:	6938      	ldr	r0, [r7, #16]
 8008b2c:	f000 f836 	bl	8008b9c <USBD_GetLen>
 8008b30:	4603      	mov	r3, r0
 8008b32:	3301      	adds	r3, #1
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	005b      	lsls	r3, r3, #1
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008b3e:	7dfb      	ldrb	r3, [r7, #23]
 8008b40:	68ba      	ldr	r2, [r7, #8]
 8008b42:	4413      	add	r3, r2
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	7812      	ldrb	r2, [r2, #0]
 8008b48:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b4a:	7dfb      	ldrb	r3, [r7, #23]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008b50:	7dfb      	ldrb	r3, [r7, #23]
 8008b52:	68ba      	ldr	r2, [r7, #8]
 8008b54:	4413      	add	r3, r2
 8008b56:	2203      	movs	r2, #3
 8008b58:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b5a:	7dfb      	ldrb	r3, [r7, #23]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008b60:	e013      	b.n	8008b8a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008b62:	7dfb      	ldrb	r3, [r7, #23]
 8008b64:	68ba      	ldr	r2, [r7, #8]
 8008b66:	4413      	add	r3, r2
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	7812      	ldrb	r2, [r2, #0]
 8008b6c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	3301      	adds	r3, #1
 8008b72:	613b      	str	r3, [r7, #16]
    idx++;
 8008b74:	7dfb      	ldrb	r3, [r7, #23]
 8008b76:	3301      	adds	r3, #1
 8008b78:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008b7a:	7dfb      	ldrb	r3, [r7, #23]
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	4413      	add	r3, r2
 8008b80:	2200      	movs	r2, #0
 8008b82:	701a      	strb	r2, [r3, #0]
    idx++;
 8008b84:	7dfb      	ldrb	r3, [r7, #23]
 8008b86:	3301      	adds	r3, #1
 8008b88:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1e7      	bne.n	8008b62 <USBD_GetString+0x52>
 8008b92:	e000      	b.n	8008b96 <USBD_GetString+0x86>
    return;
 8008b94:	bf00      	nop
  }
}
 8008b96:	3718      	adds	r7, #24
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008bac:	e005      	b.n	8008bba <USBD_GetLen+0x1e>
  {
    len++;
 8008bae:	7bfb      	ldrb	r3, [r7, #15]
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1f5      	bne.n	8008bae <USBD_GetLen+0x12>
  }

  return len;
 8008bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3714      	adds	r7, #20
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2202      	movs	r2, #2
 8008be0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	68ba      	ldr	r2, [r7, #8]
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f007 fea7 	bl	801094a <USBD_LL_Transmit>

  return USBD_OK;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b084      	sub	sp, #16
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	60f8      	str	r0, [r7, #12]
 8008c0e:	60b9      	str	r1, [r7, #8]
 8008c10:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	68ba      	ldr	r2, [r7, #8]
 8008c16:	2100      	movs	r1, #0
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f007 fe96 	bl	801094a <USBD_LL_Transmit>

  return USBD_OK;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2203      	movs	r2, #3
 8008c38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	68ba      	ldr	r2, [r7, #8]
 8008c50:	2100      	movs	r1, #0
 8008c52:	68f8      	ldr	r0, [r7, #12]
 8008c54:	f007 fe9a 	bl	801098c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b084      	sub	sp, #16
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	60f8      	str	r0, [r7, #12]
 8008c6a:	60b9      	str	r1, [r7, #8]
 8008c6c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	2100      	movs	r1, #0
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f007 fe89 	bl	801098c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2204      	movs	r2, #4
 8008c90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008c94:	2300      	movs	r3, #0
 8008c96:	2200      	movs	r2, #0
 8008c98:	2100      	movs	r1, #0
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f007 fe55 	bl	801094a <USBD_LL_Transmit>

  return USBD_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3708      	adds	r7, #8
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b082      	sub	sp, #8
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2205      	movs	r2, #5
 8008cb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cba:	2300      	movs	r3, #0
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f007 fe63 	bl	801098c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008cda:	79fb      	ldrb	r3, [r7, #7]
 8008cdc:	4a08      	ldr	r2, [pc, #32]	; (8008d00 <disk_status+0x30>)
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4413      	add	r3, r2
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	79fa      	ldrb	r2, [r7, #7]
 8008ce8:	4905      	ldr	r1, [pc, #20]	; (8008d00 <disk_status+0x30>)
 8008cea:	440a      	add	r2, r1
 8008cec:	7a12      	ldrb	r2, [r2, #8]
 8008cee:	4610      	mov	r0, r2
 8008cf0:	4798      	blx	r3
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3710      	adds	r7, #16
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	20002358 	.word	0x20002358

08008d04 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008d12:	79fb      	ldrb	r3, [r7, #7]
 8008d14:	4a0d      	ldr	r2, [pc, #52]	; (8008d4c <disk_initialize+0x48>)
 8008d16:	5cd3      	ldrb	r3, [r2, r3]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d111      	bne.n	8008d40 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008d1c:	79fb      	ldrb	r3, [r7, #7]
 8008d1e:	4a0b      	ldr	r2, [pc, #44]	; (8008d4c <disk_initialize+0x48>)
 8008d20:	2101      	movs	r1, #1
 8008d22:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008d24:	79fb      	ldrb	r3, [r7, #7]
 8008d26:	4a09      	ldr	r2, [pc, #36]	; (8008d4c <disk_initialize+0x48>)
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	4413      	add	r3, r2
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	79fa      	ldrb	r2, [r7, #7]
 8008d32:	4906      	ldr	r1, [pc, #24]	; (8008d4c <disk_initialize+0x48>)
 8008d34:	440a      	add	r2, r1
 8008d36:	7a12      	ldrb	r2, [r2, #8]
 8008d38:	4610      	mov	r0, r2
 8008d3a:	4798      	blx	r3
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	20002358 	.word	0x20002358

08008d50 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008d50:	b590      	push	{r4, r7, lr}
 8008d52:	b087      	sub	sp, #28
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60b9      	str	r1, [r7, #8]
 8008d58:	607a      	str	r2, [r7, #4]
 8008d5a:	603b      	str	r3, [r7, #0]
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008d60:	7bfb      	ldrb	r3, [r7, #15]
 8008d62:	4a0a      	ldr	r2, [pc, #40]	; (8008d8c <disk_read+0x3c>)
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	4413      	add	r3, r2
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	689c      	ldr	r4, [r3, #8]
 8008d6c:	7bfb      	ldrb	r3, [r7, #15]
 8008d6e:	4a07      	ldr	r2, [pc, #28]	; (8008d8c <disk_read+0x3c>)
 8008d70:	4413      	add	r3, r2
 8008d72:	7a18      	ldrb	r0, [r3, #8]
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	68b9      	ldr	r1, [r7, #8]
 8008d7a:	47a0      	blx	r4
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	371c      	adds	r7, #28
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd90      	pop	{r4, r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	20002358 	.word	0x20002358

08008d90 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008d90:	b590      	push	{r4, r7, lr}
 8008d92:	b087      	sub	sp, #28
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60b9      	str	r1, [r7, #8]
 8008d98:	607a      	str	r2, [r7, #4]
 8008d9a:	603b      	str	r3, [r7, #0]
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008da0:	7bfb      	ldrb	r3, [r7, #15]
 8008da2:	4a0a      	ldr	r2, [pc, #40]	; (8008dcc <disk_write+0x3c>)
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	4413      	add	r3, r2
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	68dc      	ldr	r4, [r3, #12]
 8008dac:	7bfb      	ldrb	r3, [r7, #15]
 8008dae:	4a07      	ldr	r2, [pc, #28]	; (8008dcc <disk_write+0x3c>)
 8008db0:	4413      	add	r3, r2
 8008db2:	7a18      	ldrb	r0, [r3, #8]
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	68b9      	ldr	r1, [r7, #8]
 8008dba:	47a0      	blx	r4
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	75fb      	strb	r3, [r7, #23]
  return res;
 8008dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	371c      	adds	r7, #28
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd90      	pop	{r4, r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	20002358 	.word	0x20002358

08008dd0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	603a      	str	r2, [r7, #0]
 8008dda:	71fb      	strb	r3, [r7, #7]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008de0:	79fb      	ldrb	r3, [r7, #7]
 8008de2:	4a09      	ldr	r2, [pc, #36]	; (8008e08 <disk_ioctl+0x38>)
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	4413      	add	r3, r2
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	691b      	ldr	r3, [r3, #16]
 8008dec:	79fa      	ldrb	r2, [r7, #7]
 8008dee:	4906      	ldr	r1, [pc, #24]	; (8008e08 <disk_ioctl+0x38>)
 8008df0:	440a      	add	r2, r1
 8008df2:	7a10      	ldrb	r0, [r2, #8]
 8008df4:	79b9      	ldrb	r1, [r7, #6]
 8008df6:	683a      	ldr	r2, [r7, #0]
 8008df8:	4798      	blx	r3
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	73fb      	strb	r3, [r7, #15]
  return res;
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3710      	adds	r7, #16
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	20002358 	.word	0x20002358

08008e0c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	3301      	adds	r3, #1
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008e1c:	89fb      	ldrh	r3, [r7, #14]
 8008e1e:	021b      	lsls	r3, r3, #8
 8008e20:	b21a      	sxth	r2, r3
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	b21b      	sxth	r3, r3
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	b21b      	sxth	r3, r3
 8008e2c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008e2e:	89fb      	ldrh	r3, [r7, #14]
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3714      	adds	r7, #20
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	3303      	adds	r3, #3
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	021b      	lsls	r3, r3, #8
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	3202      	adds	r2, #2
 8008e54:	7812      	ldrb	r2, [r2, #0]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	021b      	lsls	r3, r3, #8
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	3201      	adds	r2, #1
 8008e62:	7812      	ldrb	r2, [r2, #0]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	021b      	lsls	r3, r3, #8
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	7812      	ldrb	r2, [r2, #0]
 8008e70:	4313      	orrs	r3, r2
 8008e72:	60fb      	str	r3, [r7, #12]
	return rv;
 8008e74:	68fb      	ldr	r3, [r7, #12]
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3714      	adds	r7, #20
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr

08008e82 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008e82:	b480      	push	{r7}
 8008e84:	b083      	sub	sp, #12
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	1c5a      	adds	r2, r3, #1
 8008e92:	607a      	str	r2, [r7, #4]
 8008e94:	887a      	ldrh	r2, [r7, #2]
 8008e96:	b2d2      	uxtb	r2, r2
 8008e98:	701a      	strb	r2, [r3, #0]
 8008e9a:	887b      	ldrh	r3, [r7, #2]
 8008e9c:	0a1b      	lsrs	r3, r3, #8
 8008e9e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	1c5a      	adds	r2, r3, #1
 8008ea4:	607a      	str	r2, [r7, #4]
 8008ea6:	887a      	ldrh	r2, [r7, #2]
 8008ea8:	b2d2      	uxtb	r2, r2
 8008eaa:	701a      	strb	r2, [r3, #0]
}
 8008eac:	bf00      	nop
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	1c5a      	adds	r2, r3, #1
 8008ec6:	607a      	str	r2, [r7, #4]
 8008ec8:	683a      	ldr	r2, [r7, #0]
 8008eca:	b2d2      	uxtb	r2, r2
 8008ecc:	701a      	strb	r2, [r3, #0]
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	0a1b      	lsrs	r3, r3, #8
 8008ed2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	1c5a      	adds	r2, r3, #1
 8008ed8:	607a      	str	r2, [r7, #4]
 8008eda:	683a      	ldr	r2, [r7, #0]
 8008edc:	b2d2      	uxtb	r2, r2
 8008ede:	701a      	strb	r2, [r3, #0]
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	0a1b      	lsrs	r3, r3, #8
 8008ee4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	1c5a      	adds	r2, r3, #1
 8008eea:	607a      	str	r2, [r7, #4]
 8008eec:	683a      	ldr	r2, [r7, #0]
 8008eee:	b2d2      	uxtb	r2, r2
 8008ef0:	701a      	strb	r2, [r3, #0]
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	0a1b      	lsrs	r3, r3, #8
 8008ef6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	1c5a      	adds	r2, r3, #1
 8008efc:	607a      	str	r2, [r7, #4]
 8008efe:	683a      	ldr	r2, [r7, #0]
 8008f00:	b2d2      	uxtb	r2, r2
 8008f02:	701a      	strb	r2, [r3, #0]
}
 8008f04:	bf00      	nop
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008f10:	b480      	push	{r7}
 8008f12:	b087      	sub	sp, #28
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00d      	beq.n	8008f46 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008f2a:	693a      	ldr	r2, [r7, #16]
 8008f2c:	1c53      	adds	r3, r2, #1
 8008f2e:	613b      	str	r3, [r7, #16]
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	1c59      	adds	r1, r3, #1
 8008f34:	6179      	str	r1, [r7, #20]
 8008f36:	7812      	ldrb	r2, [r2, #0]
 8008f38:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	607b      	str	r3, [r7, #4]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1f1      	bne.n	8008f2a <mem_cpy+0x1a>
	}
}
 8008f46:	bf00      	nop
 8008f48:	371c      	adds	r7, #28
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr

08008f52 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008f52:	b480      	push	{r7}
 8008f54:	b087      	sub	sp, #28
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	60f8      	str	r0, [r7, #12]
 8008f5a:	60b9      	str	r1, [r7, #8]
 8008f5c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	1c5a      	adds	r2, r3, #1
 8008f66:	617a      	str	r2, [r7, #20]
 8008f68:	68ba      	ldr	r2, [r7, #8]
 8008f6a:	b2d2      	uxtb	r2, r2
 8008f6c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	3b01      	subs	r3, #1
 8008f72:	607b      	str	r3, [r7, #4]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1f3      	bne.n	8008f62 <mem_set+0x10>
}
 8008f7a:	bf00      	nop
 8008f7c:	bf00      	nop
 8008f7e:	371c      	adds	r7, #28
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008f88:	b480      	push	{r7}
 8008f8a:	b089      	sub	sp, #36	; 0x24
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	61fb      	str	r3, [r7, #28]
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	1c5a      	adds	r2, r3, #1
 8008fa4:	61fa      	str	r2, [r7, #28]
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	4619      	mov	r1, r3
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	1c5a      	adds	r2, r3, #1
 8008fae:	61ba      	str	r2, [r7, #24]
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	1acb      	subs	r3, r1, r3
 8008fb4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	3b01      	subs	r3, #1
 8008fba:	607b      	str	r3, [r7, #4]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d002      	beq.n	8008fc8 <mem_cmp+0x40>
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d0eb      	beq.n	8008fa0 <mem_cmp+0x18>

	return r;
 8008fc8:	697b      	ldr	r3, [r7, #20]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3724      	adds	r7, #36	; 0x24
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr

08008fd6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008fd6:	b480      	push	{r7}
 8008fd8:	b083      	sub	sp, #12
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
 8008fde:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008fe0:	e002      	b.n	8008fe8 <chk_chr+0x12>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	607b      	str	r3, [r7, #4]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d005      	beq.n	8008ffc <chk_chr+0x26>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d1f2      	bne.n	8008fe2 <chk_chr+0xc>
	return *str;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
}
 8009000:	4618      	mov	r0, r3
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800900c:	b480      	push	{r7}
 800900e:	b085      	sub	sp, #20
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009016:	2300      	movs	r3, #0
 8009018:	60bb      	str	r3, [r7, #8]
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	60fb      	str	r3, [r7, #12]
 800901e:	e029      	b.n	8009074 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009020:	4a27      	ldr	r2, [pc, #156]	; (80090c0 <chk_lock+0xb4>)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	011b      	lsls	r3, r3, #4
 8009026:	4413      	add	r3, r2
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d01d      	beq.n	800906a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800902e:	4a24      	ldr	r2, [pc, #144]	; (80090c0 <chk_lock+0xb4>)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	011b      	lsls	r3, r3, #4
 8009034:	4413      	add	r3, r2
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	429a      	cmp	r2, r3
 800903e:	d116      	bne.n	800906e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009040:	4a1f      	ldr	r2, [pc, #124]	; (80090c0 <chk_lock+0xb4>)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	011b      	lsls	r3, r3, #4
 8009046:	4413      	add	r3, r2
 8009048:	3304      	adds	r3, #4
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009050:	429a      	cmp	r2, r3
 8009052:	d10c      	bne.n	800906e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009054:	4a1a      	ldr	r2, [pc, #104]	; (80090c0 <chk_lock+0xb4>)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	011b      	lsls	r3, r3, #4
 800905a:	4413      	add	r3, r2
 800905c:	3308      	adds	r3, #8
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009064:	429a      	cmp	r2, r3
 8009066:	d102      	bne.n	800906e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009068:	e007      	b.n	800907a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800906a:	2301      	movs	r3, #1
 800906c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	3301      	adds	r3, #1
 8009072:	60fb      	str	r3, [r7, #12]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2b01      	cmp	r3, #1
 8009078:	d9d2      	bls.n	8009020 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2b02      	cmp	r3, #2
 800907e:	d109      	bne.n	8009094 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d102      	bne.n	800908c <chk_lock+0x80>
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	2b02      	cmp	r3, #2
 800908a:	d101      	bne.n	8009090 <chk_lock+0x84>
 800908c:	2300      	movs	r3, #0
 800908e:	e010      	b.n	80090b2 <chk_lock+0xa6>
 8009090:	2312      	movs	r3, #18
 8009092:	e00e      	b.n	80090b2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d108      	bne.n	80090ac <chk_lock+0xa0>
 800909a:	4a09      	ldr	r2, [pc, #36]	; (80090c0 <chk_lock+0xb4>)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	011b      	lsls	r3, r3, #4
 80090a0:	4413      	add	r3, r2
 80090a2:	330c      	adds	r3, #12
 80090a4:	881b      	ldrh	r3, [r3, #0]
 80090a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090aa:	d101      	bne.n	80090b0 <chk_lock+0xa4>
 80090ac:	2310      	movs	r3, #16
 80090ae:	e000      	b.n	80090b2 <chk_lock+0xa6>
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3714      	adds	r7, #20
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop
 80090c0:	200022d0 	.word	0x200022d0

080090c4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80090ca:	2300      	movs	r3, #0
 80090cc:	607b      	str	r3, [r7, #4]
 80090ce:	e002      	b.n	80090d6 <enq_lock+0x12>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	3301      	adds	r3, #1
 80090d4:	607b      	str	r3, [r7, #4]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d806      	bhi.n	80090ea <enq_lock+0x26>
 80090dc:	4a09      	ldr	r2, [pc, #36]	; (8009104 <enq_lock+0x40>)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	011b      	lsls	r3, r3, #4
 80090e2:	4413      	add	r3, r2
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1f2      	bne.n	80090d0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	bf14      	ite	ne
 80090f0:	2301      	movne	r3, #1
 80090f2:	2300      	moveq	r3, #0
 80090f4:	b2db      	uxtb	r3, r3
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	370c      	adds	r7, #12
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	200022d0 	.word	0x200022d0

08009108 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009112:	2300      	movs	r3, #0
 8009114:	60fb      	str	r3, [r7, #12]
 8009116:	e01f      	b.n	8009158 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009118:	4a41      	ldr	r2, [pc, #260]	; (8009220 <inc_lock+0x118>)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	011b      	lsls	r3, r3, #4
 800911e:	4413      	add	r3, r2
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	429a      	cmp	r2, r3
 8009128:	d113      	bne.n	8009152 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800912a:	4a3d      	ldr	r2, [pc, #244]	; (8009220 <inc_lock+0x118>)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	011b      	lsls	r3, r3, #4
 8009130:	4413      	add	r3, r2
 8009132:	3304      	adds	r3, #4
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800913a:	429a      	cmp	r2, r3
 800913c:	d109      	bne.n	8009152 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800913e:	4a38      	ldr	r2, [pc, #224]	; (8009220 <inc_lock+0x118>)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	011b      	lsls	r3, r3, #4
 8009144:	4413      	add	r3, r2
 8009146:	3308      	adds	r3, #8
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800914e:	429a      	cmp	r2, r3
 8009150:	d006      	beq.n	8009160 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	3301      	adds	r3, #1
 8009156:	60fb      	str	r3, [r7, #12]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2b01      	cmp	r3, #1
 800915c:	d9dc      	bls.n	8009118 <inc_lock+0x10>
 800915e:	e000      	b.n	8009162 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009160:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2b02      	cmp	r3, #2
 8009166:	d132      	bne.n	80091ce <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009168:	2300      	movs	r3, #0
 800916a:	60fb      	str	r3, [r7, #12]
 800916c:	e002      	b.n	8009174 <inc_lock+0x6c>
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	3301      	adds	r3, #1
 8009172:	60fb      	str	r3, [r7, #12]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2b01      	cmp	r3, #1
 8009178:	d806      	bhi.n	8009188 <inc_lock+0x80>
 800917a:	4a29      	ldr	r2, [pc, #164]	; (8009220 <inc_lock+0x118>)
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	011b      	lsls	r3, r3, #4
 8009180:	4413      	add	r3, r2
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d1f2      	bne.n	800916e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2b02      	cmp	r3, #2
 800918c:	d101      	bne.n	8009192 <inc_lock+0x8a>
 800918e:	2300      	movs	r3, #0
 8009190:	e040      	b.n	8009214 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	4922      	ldr	r1, [pc, #136]	; (8009220 <inc_lock+0x118>)
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	011b      	lsls	r3, r3, #4
 800919c:	440b      	add	r3, r1
 800919e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	689a      	ldr	r2, [r3, #8]
 80091a4:	491e      	ldr	r1, [pc, #120]	; (8009220 <inc_lock+0x118>)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	011b      	lsls	r3, r3, #4
 80091aa:	440b      	add	r3, r1
 80091ac:	3304      	adds	r3, #4
 80091ae:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	695a      	ldr	r2, [r3, #20]
 80091b4:	491a      	ldr	r1, [pc, #104]	; (8009220 <inc_lock+0x118>)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	011b      	lsls	r3, r3, #4
 80091ba:	440b      	add	r3, r1
 80091bc:	3308      	adds	r3, #8
 80091be:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80091c0:	4a17      	ldr	r2, [pc, #92]	; (8009220 <inc_lock+0x118>)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	011b      	lsls	r3, r3, #4
 80091c6:	4413      	add	r3, r2
 80091c8:	330c      	adds	r3, #12
 80091ca:	2200      	movs	r2, #0
 80091cc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d009      	beq.n	80091e8 <inc_lock+0xe0>
 80091d4:	4a12      	ldr	r2, [pc, #72]	; (8009220 <inc_lock+0x118>)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	011b      	lsls	r3, r3, #4
 80091da:	4413      	add	r3, r2
 80091dc:	330c      	adds	r3, #12
 80091de:	881b      	ldrh	r3, [r3, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d001      	beq.n	80091e8 <inc_lock+0xe0>
 80091e4:	2300      	movs	r3, #0
 80091e6:	e015      	b.n	8009214 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d108      	bne.n	8009200 <inc_lock+0xf8>
 80091ee:	4a0c      	ldr	r2, [pc, #48]	; (8009220 <inc_lock+0x118>)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	011b      	lsls	r3, r3, #4
 80091f4:	4413      	add	r3, r2
 80091f6:	330c      	adds	r3, #12
 80091f8:	881b      	ldrh	r3, [r3, #0]
 80091fa:	3301      	adds	r3, #1
 80091fc:	b29a      	uxth	r2, r3
 80091fe:	e001      	b.n	8009204 <inc_lock+0xfc>
 8009200:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009204:	4906      	ldr	r1, [pc, #24]	; (8009220 <inc_lock+0x118>)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	011b      	lsls	r3, r3, #4
 800920a:	440b      	add	r3, r1
 800920c:	330c      	adds	r3, #12
 800920e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	3301      	adds	r3, #1
}
 8009214:	4618      	mov	r0, r3
 8009216:	3714      	adds	r7, #20
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr
 8009220:	200022d0 	.word	0x200022d0

08009224 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009224:	b480      	push	{r7}
 8009226:	b085      	sub	sp, #20
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	3b01      	subs	r3, #1
 8009230:	607b      	str	r3, [r7, #4]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2b01      	cmp	r3, #1
 8009236:	d825      	bhi.n	8009284 <dec_lock+0x60>
		n = Files[i].ctr;
 8009238:	4a17      	ldr	r2, [pc, #92]	; (8009298 <dec_lock+0x74>)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	011b      	lsls	r3, r3, #4
 800923e:	4413      	add	r3, r2
 8009240:	330c      	adds	r3, #12
 8009242:	881b      	ldrh	r3, [r3, #0]
 8009244:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009246:	89fb      	ldrh	r3, [r7, #14]
 8009248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800924c:	d101      	bne.n	8009252 <dec_lock+0x2e>
 800924e:	2300      	movs	r3, #0
 8009250:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009252:	89fb      	ldrh	r3, [r7, #14]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d002      	beq.n	800925e <dec_lock+0x3a>
 8009258:	89fb      	ldrh	r3, [r7, #14]
 800925a:	3b01      	subs	r3, #1
 800925c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800925e:	4a0e      	ldr	r2, [pc, #56]	; (8009298 <dec_lock+0x74>)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	011b      	lsls	r3, r3, #4
 8009264:	4413      	add	r3, r2
 8009266:	330c      	adds	r3, #12
 8009268:	89fa      	ldrh	r2, [r7, #14]
 800926a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800926c:	89fb      	ldrh	r3, [r7, #14]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d105      	bne.n	800927e <dec_lock+0x5a>
 8009272:	4a09      	ldr	r2, [pc, #36]	; (8009298 <dec_lock+0x74>)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	011b      	lsls	r3, r3, #4
 8009278:	4413      	add	r3, r2
 800927a:	2200      	movs	r2, #0
 800927c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800927e:	2300      	movs	r3, #0
 8009280:	737b      	strb	r3, [r7, #13]
 8009282:	e001      	b.n	8009288 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009284:	2302      	movs	r3, #2
 8009286:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009288:	7b7b      	ldrb	r3, [r7, #13]
}
 800928a:	4618      	mov	r0, r3
 800928c:	3714      	adds	r7, #20
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	200022d0 	.word	0x200022d0

0800929c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800929c:	b480      	push	{r7}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80092a4:	2300      	movs	r3, #0
 80092a6:	60fb      	str	r3, [r7, #12]
 80092a8:	e010      	b.n	80092cc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80092aa:	4a0d      	ldr	r2, [pc, #52]	; (80092e0 <clear_lock+0x44>)
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	011b      	lsls	r3, r3, #4
 80092b0:	4413      	add	r3, r2
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d105      	bne.n	80092c6 <clear_lock+0x2a>
 80092ba:	4a09      	ldr	r2, [pc, #36]	; (80092e0 <clear_lock+0x44>)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	011b      	lsls	r3, r3, #4
 80092c0:	4413      	add	r3, r2
 80092c2:	2200      	movs	r2, #0
 80092c4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	3301      	adds	r3, #1
 80092ca:	60fb      	str	r3, [r7, #12]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d9eb      	bls.n	80092aa <clear_lock+0xe>
	}
}
 80092d2:	bf00      	nop
 80092d4:	bf00      	nop
 80092d6:	3714      	adds	r7, #20
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr
 80092e0:	200022d0 	.word	0x200022d0

080092e4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b086      	sub	sp, #24
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80092ec:	2300      	movs	r3, #0
 80092ee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	78db      	ldrb	r3, [r3, #3]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d034      	beq.n	8009362 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092fc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	7858      	ldrb	r0, [r3, #1]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009308:	2301      	movs	r3, #1
 800930a:	697a      	ldr	r2, [r7, #20]
 800930c:	f7ff fd40 	bl	8008d90 <disk_write>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d002      	beq.n	800931c <sync_window+0x38>
			res = FR_DISK_ERR;
 8009316:	2301      	movs	r3, #1
 8009318:	73fb      	strb	r3, [r7, #15]
 800931a:	e022      	b.n	8009362 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009326:	697a      	ldr	r2, [r7, #20]
 8009328:	1ad2      	subs	r2, r2, r3
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6a1b      	ldr	r3, [r3, #32]
 800932e:	429a      	cmp	r2, r3
 8009330:	d217      	bcs.n	8009362 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	789b      	ldrb	r3, [r3, #2]
 8009336:	613b      	str	r3, [r7, #16]
 8009338:	e010      	b.n	800935c <sync_window+0x78>
					wsect += fs->fsize;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6a1b      	ldr	r3, [r3, #32]
 800933e:	697a      	ldr	r2, [r7, #20]
 8009340:	4413      	add	r3, r2
 8009342:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	7858      	ldrb	r0, [r3, #1]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800934e:	2301      	movs	r3, #1
 8009350:	697a      	ldr	r2, [r7, #20]
 8009352:	f7ff fd1d 	bl	8008d90 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	3b01      	subs	r3, #1
 800935a:	613b      	str	r3, [r7, #16]
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	2b01      	cmp	r3, #1
 8009360:	d8eb      	bhi.n	800933a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009362:	7bfb      	ldrb	r3, [r7, #15]
}
 8009364:	4618      	mov	r0, r3
 8009366:	3718      	adds	r7, #24
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009376:	2300      	movs	r3, #0
 8009378:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800937e:	683a      	ldr	r2, [r7, #0]
 8009380:	429a      	cmp	r2, r3
 8009382:	d01b      	beq.n	80093bc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f7ff ffad 	bl	80092e4 <sync_window>
 800938a:	4603      	mov	r3, r0
 800938c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800938e:	7bfb      	ldrb	r3, [r7, #15]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d113      	bne.n	80093bc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	7858      	ldrb	r0, [r3, #1]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800939e:	2301      	movs	r3, #1
 80093a0:	683a      	ldr	r2, [r7, #0]
 80093a2:	f7ff fcd5 	bl	8008d50 <disk_read>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d004      	beq.n	80093b6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80093ac:	f04f 33ff 	mov.w	r3, #4294967295
 80093b0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	683a      	ldr	r2, [r7, #0]
 80093ba:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80093bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
	...

080093c8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f7ff ff87 	bl	80092e4 <sync_window>
 80093d6:	4603      	mov	r3, r0
 80093d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80093da:	7bfb      	ldrb	r3, [r7, #15]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d159      	bne.n	8009494 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	2b03      	cmp	r3, #3
 80093e6:	d149      	bne.n	800947c <sync_fs+0xb4>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	791b      	ldrb	r3, [r3, #4]
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d145      	bne.n	800947c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	899b      	ldrh	r3, [r3, #12]
 80093fa:	461a      	mov	r2, r3
 80093fc:	2100      	movs	r1, #0
 80093fe:	f7ff fda8 	bl	8008f52 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	3338      	adds	r3, #56	; 0x38
 8009406:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800940a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800940e:	4618      	mov	r0, r3
 8009410:	f7ff fd37 	bl	8008e82 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	3338      	adds	r3, #56	; 0x38
 8009418:	4921      	ldr	r1, [pc, #132]	; (80094a0 <sync_fs+0xd8>)
 800941a:	4618      	mov	r0, r3
 800941c:	f7ff fd4c 	bl	8008eb8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	3338      	adds	r3, #56	; 0x38
 8009424:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009428:	491e      	ldr	r1, [pc, #120]	; (80094a4 <sync_fs+0xdc>)
 800942a:	4618      	mov	r0, r3
 800942c:	f7ff fd44 	bl	8008eb8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	3338      	adds	r3, #56	; 0x38
 8009434:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	699b      	ldr	r3, [r3, #24]
 800943c:	4619      	mov	r1, r3
 800943e:	4610      	mov	r0, r2
 8009440:	f7ff fd3a 	bl	8008eb8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	3338      	adds	r3, #56	; 0x38
 8009448:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	695b      	ldr	r3, [r3, #20]
 8009450:	4619      	mov	r1, r3
 8009452:	4610      	mov	r0, r2
 8009454:	f7ff fd30 	bl	8008eb8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945c:	1c5a      	adds	r2, r3, #1
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	7858      	ldrb	r0, [r3, #1]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009470:	2301      	movs	r3, #1
 8009472:	f7ff fc8d 	bl	8008d90 <disk_write>
			fs->fsi_flag = 0;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	785b      	ldrb	r3, [r3, #1]
 8009480:	2200      	movs	r2, #0
 8009482:	2100      	movs	r1, #0
 8009484:	4618      	mov	r0, r3
 8009486:	f7ff fca3 	bl	8008dd0 <disk_ioctl>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d001      	beq.n	8009494 <sync_fs+0xcc>
 8009490:	2301      	movs	r3, #1
 8009492:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009494:	7bfb      	ldrb	r3, [r7, #15]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	41615252 	.word	0x41615252
 80094a4:	61417272 	.word	0x61417272

080094a8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	3b02      	subs	r3, #2
 80094b6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	69db      	ldr	r3, [r3, #28]
 80094bc:	3b02      	subs	r3, #2
 80094be:	683a      	ldr	r2, [r7, #0]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d301      	bcc.n	80094c8 <clust2sect+0x20>
 80094c4:	2300      	movs	r3, #0
 80094c6:	e008      	b.n	80094da <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	895b      	ldrh	r3, [r3, #10]
 80094cc:	461a      	mov	r2, r3
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	fb03 f202 	mul.w	r2, r3, r2
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d8:	4413      	add	r3, r2
}
 80094da:	4618      	mov	r0, r3
 80094dc:	370c      	adds	r7, #12
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr

080094e6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b086      	sub	sp, #24
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
 80094ee:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d904      	bls.n	8009506 <get_fat+0x20>
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	69db      	ldr	r3, [r3, #28]
 8009500:	683a      	ldr	r2, [r7, #0]
 8009502:	429a      	cmp	r2, r3
 8009504:	d302      	bcc.n	800950c <get_fat+0x26>
		val = 1;	/* Internal error */
 8009506:	2301      	movs	r3, #1
 8009508:	617b      	str	r3, [r7, #20]
 800950a:	e0bb      	b.n	8009684 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800950c:	f04f 33ff 	mov.w	r3, #4294967295
 8009510:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	2b03      	cmp	r3, #3
 8009518:	f000 8083 	beq.w	8009622 <get_fat+0x13c>
 800951c:	2b03      	cmp	r3, #3
 800951e:	f300 80a7 	bgt.w	8009670 <get_fat+0x18a>
 8009522:	2b01      	cmp	r3, #1
 8009524:	d002      	beq.n	800952c <get_fat+0x46>
 8009526:	2b02      	cmp	r3, #2
 8009528:	d056      	beq.n	80095d8 <get_fat+0xf2>
 800952a:	e0a1      	b.n	8009670 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	60fb      	str	r3, [r7, #12]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	085b      	lsrs	r3, r3, #1
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	4413      	add	r3, r2
 8009538:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	899b      	ldrh	r3, [r3, #12]
 8009542:	4619      	mov	r1, r3
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	fbb3 f3f1 	udiv	r3, r3, r1
 800954a:	4413      	add	r3, r2
 800954c:	4619      	mov	r1, r3
 800954e:	6938      	ldr	r0, [r7, #16]
 8009550:	f7ff ff0c 	bl	800936c <move_window>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	f040 808d 	bne.w	8009676 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	1c5a      	adds	r2, r3, #1
 8009560:	60fa      	str	r2, [r7, #12]
 8009562:	693a      	ldr	r2, [r7, #16]
 8009564:	8992      	ldrh	r2, [r2, #12]
 8009566:	fbb3 f1f2 	udiv	r1, r3, r2
 800956a:	fb01 f202 	mul.w	r2, r1, r2
 800956e:	1a9b      	subs	r3, r3, r2
 8009570:	693a      	ldr	r2, [r7, #16]
 8009572:	4413      	add	r3, r2
 8009574:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009578:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	899b      	ldrh	r3, [r3, #12]
 8009582:	4619      	mov	r1, r3
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	fbb3 f3f1 	udiv	r3, r3, r1
 800958a:	4413      	add	r3, r2
 800958c:	4619      	mov	r1, r3
 800958e:	6938      	ldr	r0, [r7, #16]
 8009590:	f7ff feec 	bl	800936c <move_window>
 8009594:	4603      	mov	r3, r0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d16f      	bne.n	800967a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	899b      	ldrh	r3, [r3, #12]
 800959e:	461a      	mov	r2, r3
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80095a6:	fb01 f202 	mul.w	r2, r1, r2
 80095aa:	1a9b      	subs	r3, r3, r2
 80095ac:	693a      	ldr	r2, [r7, #16]
 80095ae:	4413      	add	r3, r2
 80095b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80095b4:	021b      	lsls	r3, r3, #8
 80095b6:	461a      	mov	r2, r3
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	f003 0301 	and.w	r3, r3, #1
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d002      	beq.n	80095ce <get_fat+0xe8>
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	091b      	lsrs	r3, r3, #4
 80095cc:	e002      	b.n	80095d4 <get_fat+0xee>
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095d4:	617b      	str	r3, [r7, #20]
			break;
 80095d6:	e055      	b.n	8009684 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	899b      	ldrh	r3, [r3, #12]
 80095e0:	085b      	lsrs	r3, r3, #1
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	4619      	mov	r1, r3
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80095ec:	4413      	add	r3, r2
 80095ee:	4619      	mov	r1, r3
 80095f0:	6938      	ldr	r0, [r7, #16]
 80095f2:	f7ff febb 	bl	800936c <move_window>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d140      	bne.n	800967e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	005b      	lsls	r3, r3, #1
 8009606:	693a      	ldr	r2, [r7, #16]
 8009608:	8992      	ldrh	r2, [r2, #12]
 800960a:	fbb3 f0f2 	udiv	r0, r3, r2
 800960e:	fb00 f202 	mul.w	r2, r0, r2
 8009612:	1a9b      	subs	r3, r3, r2
 8009614:	440b      	add	r3, r1
 8009616:	4618      	mov	r0, r3
 8009618:	f7ff fbf8 	bl	8008e0c <ld_word>
 800961c:	4603      	mov	r3, r0
 800961e:	617b      	str	r3, [r7, #20]
			break;
 8009620:	e030      	b.n	8009684 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	899b      	ldrh	r3, [r3, #12]
 800962a:	089b      	lsrs	r3, r3, #2
 800962c:	b29b      	uxth	r3, r3
 800962e:	4619      	mov	r1, r3
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	fbb3 f3f1 	udiv	r3, r3, r1
 8009636:	4413      	add	r3, r2
 8009638:	4619      	mov	r1, r3
 800963a:	6938      	ldr	r0, [r7, #16]
 800963c:	f7ff fe96 	bl	800936c <move_window>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d11d      	bne.n	8009682 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	693a      	ldr	r2, [r7, #16]
 8009652:	8992      	ldrh	r2, [r2, #12]
 8009654:	fbb3 f0f2 	udiv	r0, r3, r2
 8009658:	fb00 f202 	mul.w	r2, r0, r2
 800965c:	1a9b      	subs	r3, r3, r2
 800965e:	440b      	add	r3, r1
 8009660:	4618      	mov	r0, r3
 8009662:	f7ff fbeb 	bl	8008e3c <ld_dword>
 8009666:	4603      	mov	r3, r0
 8009668:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800966c:	617b      	str	r3, [r7, #20]
			break;
 800966e:	e009      	b.n	8009684 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009670:	2301      	movs	r3, #1
 8009672:	617b      	str	r3, [r7, #20]
 8009674:	e006      	b.n	8009684 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009676:	bf00      	nop
 8009678:	e004      	b.n	8009684 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800967a:	bf00      	nop
 800967c:	e002      	b.n	8009684 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800967e:	bf00      	nop
 8009680:	e000      	b.n	8009684 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009682:	bf00      	nop
		}
	}

	return val;
 8009684:	697b      	ldr	r3, [r7, #20]
}
 8009686:	4618      	mov	r0, r3
 8009688:	3718      	adds	r7, #24
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800968e:	b590      	push	{r4, r7, lr}
 8009690:	b089      	sub	sp, #36	; 0x24
 8009692:	af00      	add	r7, sp, #0
 8009694:	60f8      	str	r0, [r7, #12]
 8009696:	60b9      	str	r1, [r7, #8]
 8009698:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800969a:	2302      	movs	r3, #2
 800969c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	f240 8102 	bls.w	80098aa <put_fat+0x21c>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	69db      	ldr	r3, [r3, #28]
 80096aa:	68ba      	ldr	r2, [r7, #8]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	f080 80fc 	bcs.w	80098aa <put_fat+0x21c>
		switch (fs->fs_type) {
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	2b03      	cmp	r3, #3
 80096b8:	f000 80b6 	beq.w	8009828 <put_fat+0x19a>
 80096bc:	2b03      	cmp	r3, #3
 80096be:	f300 80fd 	bgt.w	80098bc <put_fat+0x22e>
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d003      	beq.n	80096ce <put_fat+0x40>
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	f000 8083 	beq.w	80097d2 <put_fat+0x144>
 80096cc:	e0f6      	b.n	80098bc <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	61bb      	str	r3, [r7, #24]
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	085b      	lsrs	r3, r3, #1
 80096d6:	69ba      	ldr	r2, [r7, #24]
 80096d8:	4413      	add	r3, r2
 80096da:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	899b      	ldrh	r3, [r3, #12]
 80096e4:	4619      	mov	r1, r3
 80096e6:	69bb      	ldr	r3, [r7, #24]
 80096e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80096ec:	4413      	add	r3, r2
 80096ee:	4619      	mov	r1, r3
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f7ff fe3b 	bl	800936c <move_window>
 80096f6:	4603      	mov	r3, r0
 80096f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80096fa:	7ffb      	ldrb	r3, [r7, #31]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	f040 80d6 	bne.w	80098ae <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	1c5a      	adds	r2, r3, #1
 800970c:	61ba      	str	r2, [r7, #24]
 800970e:	68fa      	ldr	r2, [r7, #12]
 8009710:	8992      	ldrh	r2, [r2, #12]
 8009712:	fbb3 f0f2 	udiv	r0, r3, r2
 8009716:	fb00 f202 	mul.w	r2, r0, r2
 800971a:	1a9b      	subs	r3, r3, r2
 800971c:	440b      	add	r3, r1
 800971e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	f003 0301 	and.w	r3, r3, #1
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00d      	beq.n	8009746 <put_fat+0xb8>
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	b25b      	sxtb	r3, r3
 8009730:	f003 030f 	and.w	r3, r3, #15
 8009734:	b25a      	sxtb	r2, r3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	b2db      	uxtb	r3, r3
 800973a:	011b      	lsls	r3, r3, #4
 800973c:	b25b      	sxtb	r3, r3
 800973e:	4313      	orrs	r3, r2
 8009740:	b25b      	sxtb	r3, r3
 8009742:	b2db      	uxtb	r3, r3
 8009744:	e001      	b.n	800974a <put_fat+0xbc>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	b2db      	uxtb	r3, r3
 800974a:	697a      	ldr	r2, [r7, #20]
 800974c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2201      	movs	r2, #1
 8009752:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	899b      	ldrh	r3, [r3, #12]
 800975c:	4619      	mov	r1, r3
 800975e:	69bb      	ldr	r3, [r7, #24]
 8009760:	fbb3 f3f1 	udiv	r3, r3, r1
 8009764:	4413      	add	r3, r2
 8009766:	4619      	mov	r1, r3
 8009768:	68f8      	ldr	r0, [r7, #12]
 800976a:	f7ff fdff 	bl	800936c <move_window>
 800976e:	4603      	mov	r3, r0
 8009770:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009772:	7ffb      	ldrb	r3, [r7, #31]
 8009774:	2b00      	cmp	r3, #0
 8009776:	f040 809c 	bne.w	80098b2 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	899b      	ldrh	r3, [r3, #12]
 8009784:	461a      	mov	r2, r3
 8009786:	69bb      	ldr	r3, [r7, #24]
 8009788:	fbb3 f0f2 	udiv	r0, r3, r2
 800978c:	fb00 f202 	mul.w	r2, r0, r2
 8009790:	1a9b      	subs	r3, r3, r2
 8009792:	440b      	add	r3, r1
 8009794:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	f003 0301 	and.w	r3, r3, #1
 800979c:	2b00      	cmp	r3, #0
 800979e:	d003      	beq.n	80097a8 <put_fat+0x11a>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	091b      	lsrs	r3, r3, #4
 80097a4:	b2db      	uxtb	r3, r3
 80097a6:	e00e      	b.n	80097c6 <put_fat+0x138>
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	b25b      	sxtb	r3, r3
 80097ae:	f023 030f 	bic.w	r3, r3, #15
 80097b2:	b25a      	sxtb	r2, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	0a1b      	lsrs	r3, r3, #8
 80097b8:	b25b      	sxtb	r3, r3
 80097ba:	f003 030f 	and.w	r3, r3, #15
 80097be:	b25b      	sxtb	r3, r3
 80097c0:	4313      	orrs	r3, r2
 80097c2:	b25b      	sxtb	r3, r3
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	697a      	ldr	r2, [r7, #20]
 80097c8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2201      	movs	r2, #1
 80097ce:	70da      	strb	r2, [r3, #3]
			break;
 80097d0:	e074      	b.n	80098bc <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	899b      	ldrh	r3, [r3, #12]
 80097da:	085b      	lsrs	r3, r3, #1
 80097dc:	b29b      	uxth	r3, r3
 80097de:	4619      	mov	r1, r3
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80097e6:	4413      	add	r3, r2
 80097e8:	4619      	mov	r1, r3
 80097ea:	68f8      	ldr	r0, [r7, #12]
 80097ec:	f7ff fdbe 	bl	800936c <move_window>
 80097f0:	4603      	mov	r3, r0
 80097f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80097f4:	7ffb      	ldrb	r3, [r7, #31]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d15d      	bne.n	80098b6 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	005b      	lsls	r3, r3, #1
 8009804:	68fa      	ldr	r2, [r7, #12]
 8009806:	8992      	ldrh	r2, [r2, #12]
 8009808:	fbb3 f0f2 	udiv	r0, r3, r2
 800980c:	fb00 f202 	mul.w	r2, r0, r2
 8009810:	1a9b      	subs	r3, r3, r2
 8009812:	440b      	add	r3, r1
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	b292      	uxth	r2, r2
 8009818:	4611      	mov	r1, r2
 800981a:	4618      	mov	r0, r3
 800981c:	f7ff fb31 	bl	8008e82 <st_word>
			fs->wflag = 1;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2201      	movs	r2, #1
 8009824:	70da      	strb	r2, [r3, #3]
			break;
 8009826:	e049      	b.n	80098bc <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	899b      	ldrh	r3, [r3, #12]
 8009830:	089b      	lsrs	r3, r3, #2
 8009832:	b29b      	uxth	r3, r3
 8009834:	4619      	mov	r1, r3
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	fbb3 f3f1 	udiv	r3, r3, r1
 800983c:	4413      	add	r3, r2
 800983e:	4619      	mov	r1, r3
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f7ff fd93 	bl	800936c <move_window>
 8009846:	4603      	mov	r3, r0
 8009848:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800984a:	7ffb      	ldrb	r3, [r7, #31]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d134      	bne.n	80098ba <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	68fa      	ldr	r2, [r7, #12]
 8009862:	8992      	ldrh	r2, [r2, #12]
 8009864:	fbb3 f0f2 	udiv	r0, r3, r2
 8009868:	fb00 f202 	mul.w	r2, r0, r2
 800986c:	1a9b      	subs	r3, r3, r2
 800986e:	440b      	add	r3, r1
 8009870:	4618      	mov	r0, r3
 8009872:	f7ff fae3 	bl	8008e3c <ld_dword>
 8009876:	4603      	mov	r3, r0
 8009878:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800987c:	4323      	orrs	r3, r4
 800987e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	8992      	ldrh	r2, [r2, #12]
 800988e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009892:	fb00 f202 	mul.w	r2, r0, r2
 8009896:	1a9b      	subs	r3, r3, r2
 8009898:	440b      	add	r3, r1
 800989a:	6879      	ldr	r1, [r7, #4]
 800989c:	4618      	mov	r0, r3
 800989e:	f7ff fb0b 	bl	8008eb8 <st_dword>
			fs->wflag = 1;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2201      	movs	r2, #1
 80098a6:	70da      	strb	r2, [r3, #3]
			break;
 80098a8:	e008      	b.n	80098bc <put_fat+0x22e>
		}
	}
 80098aa:	bf00      	nop
 80098ac:	e006      	b.n	80098bc <put_fat+0x22e>
			if (res != FR_OK) break;
 80098ae:	bf00      	nop
 80098b0:	e004      	b.n	80098bc <put_fat+0x22e>
			if (res != FR_OK) break;
 80098b2:	bf00      	nop
 80098b4:	e002      	b.n	80098bc <put_fat+0x22e>
			if (res != FR_OK) break;
 80098b6:	bf00      	nop
 80098b8:	e000      	b.n	80098bc <put_fat+0x22e>
			if (res != FR_OK) break;
 80098ba:	bf00      	nop
	return res;
 80098bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3724      	adds	r7, #36	; 0x24
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd90      	pop	{r4, r7, pc}

080098c6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80098c6:	b580      	push	{r7, lr}
 80098c8:	b088      	sub	sp, #32
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	60f8      	str	r0, [r7, #12]
 80098ce:	60b9      	str	r1, [r7, #8]
 80098d0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d904      	bls.n	80098ec <remove_chain+0x26>
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	69db      	ldr	r3, [r3, #28]
 80098e6:	68ba      	ldr	r2, [r7, #8]
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d301      	bcc.n	80098f0 <remove_chain+0x2a>
 80098ec:	2302      	movs	r3, #2
 80098ee:	e04b      	b.n	8009988 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00c      	beq.n	8009910 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80098f6:	f04f 32ff 	mov.w	r2, #4294967295
 80098fa:	6879      	ldr	r1, [r7, #4]
 80098fc:	69b8      	ldr	r0, [r7, #24]
 80098fe:	f7ff fec6 	bl	800968e <put_fat>
 8009902:	4603      	mov	r3, r0
 8009904:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009906:	7ffb      	ldrb	r3, [r7, #31]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d001      	beq.n	8009910 <remove_chain+0x4a>
 800990c:	7ffb      	ldrb	r3, [r7, #31]
 800990e:	e03b      	b.n	8009988 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009910:	68b9      	ldr	r1, [r7, #8]
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	f7ff fde7 	bl	80094e6 <get_fat>
 8009918:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d031      	beq.n	8009984 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	2b01      	cmp	r3, #1
 8009924:	d101      	bne.n	800992a <remove_chain+0x64>
 8009926:	2302      	movs	r3, #2
 8009928:	e02e      	b.n	8009988 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009930:	d101      	bne.n	8009936 <remove_chain+0x70>
 8009932:	2301      	movs	r3, #1
 8009934:	e028      	b.n	8009988 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009936:	2200      	movs	r2, #0
 8009938:	68b9      	ldr	r1, [r7, #8]
 800993a:	69b8      	ldr	r0, [r7, #24]
 800993c:	f7ff fea7 	bl	800968e <put_fat>
 8009940:	4603      	mov	r3, r0
 8009942:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009944:	7ffb      	ldrb	r3, [r7, #31]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d001      	beq.n	800994e <remove_chain+0x88>
 800994a:	7ffb      	ldrb	r3, [r7, #31]
 800994c:	e01c      	b.n	8009988 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	699a      	ldr	r2, [r3, #24]
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	69db      	ldr	r3, [r3, #28]
 8009956:	3b02      	subs	r3, #2
 8009958:	429a      	cmp	r2, r3
 800995a:	d20b      	bcs.n	8009974 <remove_chain+0xae>
			fs->free_clst++;
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	699b      	ldr	r3, [r3, #24]
 8009960:	1c5a      	adds	r2, r3, #1
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	791b      	ldrb	r3, [r3, #4]
 800996a:	f043 0301 	orr.w	r3, r3, #1
 800996e:	b2da      	uxtb	r2, r3
 8009970:	69bb      	ldr	r3, [r7, #24]
 8009972:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	69db      	ldr	r3, [r3, #28]
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	429a      	cmp	r2, r3
 8009980:	d3c6      	bcc.n	8009910 <remove_chain+0x4a>
 8009982:	e000      	b.n	8009986 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009984:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009986:	2300      	movs	r3, #0
}
 8009988:	4618      	mov	r0, r3
 800998a:	3720      	adds	r7, #32
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b088      	sub	sp, #32
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d10d      	bne.n	80099c2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	695b      	ldr	r3, [r3, #20]
 80099aa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d004      	beq.n	80099bc <create_chain+0x2c>
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	69db      	ldr	r3, [r3, #28]
 80099b6:	69ba      	ldr	r2, [r7, #24]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d31b      	bcc.n	80099f4 <create_chain+0x64>
 80099bc:	2301      	movs	r3, #1
 80099be:	61bb      	str	r3, [r7, #24]
 80099c0:	e018      	b.n	80099f4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80099c2:	6839      	ldr	r1, [r7, #0]
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f7ff fd8e 	bl	80094e6 <get_fat>
 80099ca:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d801      	bhi.n	80099d6 <create_chain+0x46>
 80099d2:	2301      	movs	r3, #1
 80099d4:	e070      	b.n	8009ab8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099dc:	d101      	bne.n	80099e2 <create_chain+0x52>
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	e06a      	b.n	8009ab8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	69db      	ldr	r3, [r3, #28]
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d201      	bcs.n	80099f0 <create_chain+0x60>
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	e063      	b.n	8009ab8 <create_chain+0x128>
		scl = clst;
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80099f4:	69bb      	ldr	r3, [r7, #24]
 80099f6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80099f8:	69fb      	ldr	r3, [r7, #28]
 80099fa:	3301      	adds	r3, #1
 80099fc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	69db      	ldr	r3, [r3, #28]
 8009a02:	69fa      	ldr	r2, [r7, #28]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d307      	bcc.n	8009a18 <create_chain+0x88>
				ncl = 2;
 8009a08:	2302      	movs	r3, #2
 8009a0a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009a0c:	69fa      	ldr	r2, [r7, #28]
 8009a0e:	69bb      	ldr	r3, [r7, #24]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d901      	bls.n	8009a18 <create_chain+0x88>
 8009a14:	2300      	movs	r3, #0
 8009a16:	e04f      	b.n	8009ab8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009a18:	69f9      	ldr	r1, [r7, #28]
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f7ff fd63 	bl	80094e6 <get_fat>
 8009a20:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00e      	beq.n	8009a46 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d003      	beq.n	8009a36 <create_chain+0xa6>
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a34:	d101      	bne.n	8009a3a <create_chain+0xaa>
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	e03e      	b.n	8009ab8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009a3a:	69fa      	ldr	r2, [r7, #28]
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d1da      	bne.n	80099f8 <create_chain+0x68>
 8009a42:	2300      	movs	r3, #0
 8009a44:	e038      	b.n	8009ab8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009a46:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009a48:	f04f 32ff 	mov.w	r2, #4294967295
 8009a4c:	69f9      	ldr	r1, [r7, #28]
 8009a4e:	6938      	ldr	r0, [r7, #16]
 8009a50:	f7ff fe1d 	bl	800968e <put_fat>
 8009a54:	4603      	mov	r3, r0
 8009a56:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009a58:	7dfb      	ldrb	r3, [r7, #23]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d109      	bne.n	8009a72 <create_chain+0xe2>
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d006      	beq.n	8009a72 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009a64:	69fa      	ldr	r2, [r7, #28]
 8009a66:	6839      	ldr	r1, [r7, #0]
 8009a68:	6938      	ldr	r0, [r7, #16]
 8009a6a:	f7ff fe10 	bl	800968e <put_fat>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009a72:	7dfb      	ldrb	r3, [r7, #23]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d116      	bne.n	8009aa6 <create_chain+0x116>
		fs->last_clst = ncl;
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	69fa      	ldr	r2, [r7, #28]
 8009a7c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	699a      	ldr	r2, [r3, #24]
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	69db      	ldr	r3, [r3, #28]
 8009a86:	3b02      	subs	r3, #2
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d804      	bhi.n	8009a96 <create_chain+0x106>
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	699b      	ldr	r3, [r3, #24]
 8009a90:	1e5a      	subs	r2, r3, #1
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	791b      	ldrb	r3, [r3, #4]
 8009a9a:	f043 0301 	orr.w	r3, r3, #1
 8009a9e:	b2da      	uxtb	r2, r3
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	711a      	strb	r2, [r3, #4]
 8009aa4:	e007      	b.n	8009ab6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009aa6:	7dfb      	ldrb	r3, [r7, #23]
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d102      	bne.n	8009ab2 <create_chain+0x122>
 8009aac:	f04f 33ff 	mov.w	r3, #4294967295
 8009ab0:	e000      	b.n	8009ab4 <create_chain+0x124>
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009ab6:	69fb      	ldr	r3, [r7, #28]
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3720      	adds	r7, #32
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b087      	sub	sp, #28
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad4:	3304      	adds	r3, #4
 8009ad6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	899b      	ldrh	r3, [r3, #12]
 8009adc:	461a      	mov	r2, r3
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	8952      	ldrh	r2, [r2, #10]
 8009ae8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009aec:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	1d1a      	adds	r2, r3, #4
 8009af2:	613a      	str	r2, [r7, #16]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d101      	bne.n	8009b02 <clmt_clust+0x42>
 8009afe:	2300      	movs	r3, #0
 8009b00:	e010      	b.n	8009b24 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8009b02:	697a      	ldr	r2, [r7, #20]
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d307      	bcc.n	8009b1a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8009b0a:	697a      	ldr	r2, [r7, #20]
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	1ad3      	subs	r3, r2, r3
 8009b10:	617b      	str	r3, [r7, #20]
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	3304      	adds	r3, #4
 8009b16:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009b18:	e7e9      	b.n	8009aee <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8009b1a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	4413      	add	r3, r2
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	371c      	adds	r7, #28
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b46:	d204      	bcs.n	8009b52 <dir_sdi+0x22>
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	f003 031f 	and.w	r3, r3, #31
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d001      	beq.n	8009b56 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009b52:	2302      	movs	r3, #2
 8009b54:	e071      	b.n	8009c3a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	683a      	ldr	r2, [r7, #0]
 8009b5a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d106      	bne.n	8009b76 <dir_sdi+0x46>
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	d902      	bls.n	8009b76 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b74:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d10c      	bne.n	8009b96 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	095b      	lsrs	r3, r3, #5
 8009b80:	693a      	ldr	r2, [r7, #16]
 8009b82:	8912      	ldrh	r2, [r2, #8]
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d301      	bcc.n	8009b8c <dir_sdi+0x5c>
 8009b88:	2302      	movs	r3, #2
 8009b8a:	e056      	b.n	8009c3a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	61da      	str	r2, [r3, #28]
 8009b94:	e02d      	b.n	8009bf2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	895b      	ldrh	r3, [r3, #10]
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	899b      	ldrh	r3, [r3, #12]
 8009ba0:	fb02 f303 	mul.w	r3, r2, r3
 8009ba4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009ba6:	e019      	b.n	8009bdc <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6979      	ldr	r1, [r7, #20]
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7ff fc9a 	bl	80094e6 <get_fat>
 8009bb2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bba:	d101      	bne.n	8009bc0 <dir_sdi+0x90>
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	e03c      	b.n	8009c3a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d904      	bls.n	8009bd0 <dir_sdi+0xa0>
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	69db      	ldr	r3, [r3, #28]
 8009bca:	697a      	ldr	r2, [r7, #20]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d301      	bcc.n	8009bd4 <dir_sdi+0xa4>
 8009bd0:	2302      	movs	r3, #2
 8009bd2:	e032      	b.n	8009c3a <dir_sdi+0x10a>
			ofs -= csz;
 8009bd4:	683a      	ldr	r2, [r7, #0]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	1ad3      	subs	r3, r2, r3
 8009bda:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009bdc:	683a      	ldr	r2, [r7, #0]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d2e1      	bcs.n	8009ba8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8009be4:	6979      	ldr	r1, [r7, #20]
 8009be6:	6938      	ldr	r0, [r7, #16]
 8009be8:	f7ff fc5e 	bl	80094a8 <clust2sect>
 8009bec:	4602      	mov	r2, r0
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	697a      	ldr	r2, [r7, #20]
 8009bf6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	69db      	ldr	r3, [r3, #28]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d101      	bne.n	8009c04 <dir_sdi+0xd4>
 8009c00:	2302      	movs	r3, #2
 8009c02:	e01a      	b.n	8009c3a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	69da      	ldr	r2, [r3, #28]
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	899b      	ldrh	r3, [r3, #12]
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c14:	441a      	add	r2, r3
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	899b      	ldrh	r3, [r3, #12]
 8009c24:	461a      	mov	r2, r3
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	fbb3 f0f2 	udiv	r0, r3, r2
 8009c2c:	fb00 f202 	mul.w	r2, r0, r2
 8009c30:	1a9b      	subs	r3, r3, r2
 8009c32:	18ca      	adds	r2, r1, r3
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3718      	adds	r7, #24
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b086      	sub	sp, #24
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	695b      	ldr	r3, [r3, #20]
 8009c56:	3320      	adds	r3, #32
 8009c58:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	69db      	ldr	r3, [r3, #28]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d003      	beq.n	8009c6a <dir_next+0x28>
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c68:	d301      	bcc.n	8009c6e <dir_next+0x2c>
 8009c6a:	2304      	movs	r3, #4
 8009c6c:	e0bb      	b.n	8009de6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	899b      	ldrh	r3, [r3, #12]
 8009c72:	461a      	mov	r2, r3
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c7a:	fb01 f202 	mul.w	r2, r1, r2
 8009c7e:	1a9b      	subs	r3, r3, r2
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	f040 809d 	bne.w	8009dc0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	69db      	ldr	r3, [r3, #28]
 8009c8a:	1c5a      	adds	r2, r3, #1
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	699b      	ldr	r3, [r3, #24]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d10b      	bne.n	8009cb0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	095b      	lsrs	r3, r3, #5
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	8912      	ldrh	r2, [r2, #8]
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	f0c0 808d 	bcc.w	8009dc0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	61da      	str	r2, [r3, #28]
 8009cac:	2304      	movs	r3, #4
 8009cae:	e09a      	b.n	8009de6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	899b      	ldrh	r3, [r3, #12]
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009cbc:	68fa      	ldr	r2, [r7, #12]
 8009cbe:	8952      	ldrh	r2, [r2, #10]
 8009cc0:	3a01      	subs	r2, #1
 8009cc2:	4013      	ands	r3, r2
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d17b      	bne.n	8009dc0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	699b      	ldr	r3, [r3, #24]
 8009cce:	4619      	mov	r1, r3
 8009cd0:	4610      	mov	r0, r2
 8009cd2:	f7ff fc08 	bl	80094e6 <get_fat>
 8009cd6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d801      	bhi.n	8009ce2 <dir_next+0xa0>
 8009cde:	2302      	movs	r3, #2
 8009ce0:	e081      	b.n	8009de6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ce8:	d101      	bne.n	8009cee <dir_next+0xac>
 8009cea:	2301      	movs	r3, #1
 8009cec:	e07b      	b.n	8009de6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	69db      	ldr	r3, [r3, #28]
 8009cf2:	697a      	ldr	r2, [r7, #20]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d359      	bcc.n	8009dac <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d104      	bne.n	8009d08 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2200      	movs	r2, #0
 8009d02:	61da      	str	r2, [r3, #28]
 8009d04:	2304      	movs	r3, #4
 8009d06:	e06e      	b.n	8009de6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	699b      	ldr	r3, [r3, #24]
 8009d0e:	4619      	mov	r1, r3
 8009d10:	4610      	mov	r0, r2
 8009d12:	f7ff fe3d 	bl	8009990 <create_chain>
 8009d16:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d101      	bne.n	8009d22 <dir_next+0xe0>
 8009d1e:	2307      	movs	r3, #7
 8009d20:	e061      	b.n	8009de6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d101      	bne.n	8009d2c <dir_next+0xea>
 8009d28:	2302      	movs	r3, #2
 8009d2a:	e05c      	b.n	8009de6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d32:	d101      	bne.n	8009d38 <dir_next+0xf6>
 8009d34:	2301      	movs	r3, #1
 8009d36:	e056      	b.n	8009de6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f7ff fad3 	bl	80092e4 <sync_window>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d001      	beq.n	8009d48 <dir_next+0x106>
 8009d44:	2301      	movs	r3, #1
 8009d46:	e04e      	b.n	8009de6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	899b      	ldrh	r3, [r3, #12]
 8009d52:	461a      	mov	r2, r3
 8009d54:	2100      	movs	r1, #0
 8009d56:	f7ff f8fc 	bl	8008f52 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	613b      	str	r3, [r7, #16]
 8009d5e:	6979      	ldr	r1, [r7, #20]
 8009d60:	68f8      	ldr	r0, [r7, #12]
 8009d62:	f7ff fba1 	bl	80094a8 <clust2sect>
 8009d66:	4602      	mov	r2, r0
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	635a      	str	r2, [r3, #52]	; 0x34
 8009d6c:	e012      	b.n	8009d94 <dir_next+0x152>
						fs->wflag = 1;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2201      	movs	r2, #1
 8009d72:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	f7ff fab5 	bl	80092e4 <sync_window>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d001      	beq.n	8009d84 <dir_next+0x142>
 8009d80:	2301      	movs	r3, #1
 8009d82:	e030      	b.n	8009de6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	3301      	adds	r3, #1
 8009d88:	613b      	str	r3, [r7, #16]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d8e:	1c5a      	adds	r2, r3, #1
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	635a      	str	r2, [r3, #52]	; 0x34
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	895b      	ldrh	r3, [r3, #10]
 8009d98:	461a      	mov	r2, r3
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d3e6      	bcc.n	8009d6e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	1ad2      	subs	r2, r2, r3
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	697a      	ldr	r2, [r7, #20]
 8009db0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009db2:	6979      	ldr	r1, [r7, #20]
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	f7ff fb77 	bl	80094a8 <clust2sect>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	68ba      	ldr	r2, [r7, #8]
 8009dc4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	899b      	ldrh	r3, [r3, #12]
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	fbb3 f0f2 	udiv	r0, r3, r2
 8009dd8:	fb00 f202 	mul.w	r2, r0, r2
 8009ddc:	1a9b      	subs	r3, r3, r2
 8009dde:	18ca      	adds	r2, r1, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3718      	adds	r7, #24
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b086      	sub	sp, #24
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
 8009df6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009dfe:	2100      	movs	r1, #0
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f7ff fe95 	bl	8009b30 <dir_sdi>
 8009e06:	4603      	mov	r3, r0
 8009e08:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009e0a:	7dfb      	ldrb	r3, [r7, #23]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d12b      	bne.n	8009e68 <dir_alloc+0x7a>
		n = 0;
 8009e10:	2300      	movs	r3, #0
 8009e12:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	69db      	ldr	r3, [r3, #28]
 8009e18:	4619      	mov	r1, r3
 8009e1a:	68f8      	ldr	r0, [r7, #12]
 8009e1c:	f7ff faa6 	bl	800936c <move_window>
 8009e20:	4603      	mov	r3, r0
 8009e22:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009e24:	7dfb      	ldrb	r3, [r7, #23]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d11d      	bne.n	8009e66 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6a1b      	ldr	r3, [r3, #32]
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	2be5      	cmp	r3, #229	; 0xe5
 8009e32:	d004      	beq.n	8009e3e <dir_alloc+0x50>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6a1b      	ldr	r3, [r3, #32]
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d107      	bne.n	8009e4e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	3301      	adds	r3, #1
 8009e42:	613b      	str	r3, [r7, #16]
 8009e44:	693a      	ldr	r2, [r7, #16]
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d102      	bne.n	8009e52 <dir_alloc+0x64>
 8009e4c:	e00c      	b.n	8009e68 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009e4e:	2300      	movs	r3, #0
 8009e50:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009e52:	2101      	movs	r1, #1
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f7ff fef4 	bl	8009c42 <dir_next>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009e5e:	7dfb      	ldrb	r3, [r7, #23]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d0d7      	beq.n	8009e14 <dir_alloc+0x26>
 8009e64:	e000      	b.n	8009e68 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009e66:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009e68:	7dfb      	ldrb	r3, [r7, #23]
 8009e6a:	2b04      	cmp	r3, #4
 8009e6c:	d101      	bne.n	8009e72 <dir_alloc+0x84>
 8009e6e:	2307      	movs	r3, #7
 8009e70:	75fb      	strb	r3, [r7, #23]
	return res;
 8009e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3718      	adds	r7, #24
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	331a      	adds	r3, #26
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7fe ffbe 	bl	8008e0c <ld_word>
 8009e90:	4603      	mov	r3, r0
 8009e92:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	2b03      	cmp	r3, #3
 8009e9a:	d109      	bne.n	8009eb0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	3314      	adds	r3, #20
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7fe ffb3 	bl	8008e0c <ld_word>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	041b      	lsls	r3, r3, #16
 8009eaa:	68fa      	ldr	r2, [r7, #12]
 8009eac:	4313      	orrs	r3, r2
 8009eae:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3710      	adds	r7, #16
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}

08009eba <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b084      	sub	sp, #16
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	60f8      	str	r0, [r7, #12]
 8009ec2:	60b9      	str	r1, [r7, #8]
 8009ec4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	331a      	adds	r3, #26
 8009eca:	687a      	ldr	r2, [r7, #4]
 8009ecc:	b292      	uxth	r2, r2
 8009ece:	4611      	mov	r1, r2
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7fe ffd6 	bl	8008e82 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	2b03      	cmp	r3, #3
 8009edc:	d109      	bne.n	8009ef2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	f103 0214 	add.w	r2, r3, #20
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	0c1b      	lsrs	r3, r3, #16
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	4619      	mov	r1, r3
 8009eec:	4610      	mov	r0, r2
 8009eee:	f7fe ffc8 	bl	8008e82 <st_word>
	}
}
 8009ef2:	bf00      	nop
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
	...

08009efc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8009efc:	b590      	push	{r4, r7, lr}
 8009efe:	b087      	sub	sp, #28
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	331a      	adds	r3, #26
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7fe ff7e 	bl	8008e0c <ld_word>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d001      	beq.n	8009f1a <cmp_lfn+0x1e>
 8009f16:	2300      	movs	r3, #0
 8009f18:	e059      	b.n	8009fce <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f22:	1e5a      	subs	r2, r3, #1
 8009f24:	4613      	mov	r3, r2
 8009f26:	005b      	lsls	r3, r3, #1
 8009f28:	4413      	add	r3, r2
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	4413      	add	r3, r2
 8009f2e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009f30:	2301      	movs	r3, #1
 8009f32:	81fb      	strh	r3, [r7, #14]
 8009f34:	2300      	movs	r3, #0
 8009f36:	613b      	str	r3, [r7, #16]
 8009f38:	e033      	b.n	8009fa2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009f3a:	4a27      	ldr	r2, [pc, #156]	; (8009fd8 <cmp_lfn+0xdc>)
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	4413      	add	r3, r2
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	461a      	mov	r2, r3
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	4413      	add	r3, r2
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7fe ff5f 	bl	8008e0c <ld_word>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009f52:	89fb      	ldrh	r3, [r7, #14]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d01a      	beq.n	8009f8e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	2b31      	cmp	r3, #49	; 0x31
 8009f5c:	d812      	bhi.n	8009f84 <cmp_lfn+0x88>
 8009f5e:	89bb      	ldrh	r3, [r7, #12]
 8009f60:	4618      	mov	r0, r3
 8009f62:	f002 ff05 	bl	800cd70 <ff_wtoupper>
 8009f66:	4603      	mov	r3, r0
 8009f68:	461c      	mov	r4, r3
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	1c5a      	adds	r2, r3, #1
 8009f6e:	617a      	str	r2, [r7, #20]
 8009f70:	005b      	lsls	r3, r3, #1
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	4413      	add	r3, r2
 8009f76:	881b      	ldrh	r3, [r3, #0]
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f002 fef9 	bl	800cd70 <ff_wtoupper>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	429c      	cmp	r4, r3
 8009f82:	d001      	beq.n	8009f88 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8009f84:	2300      	movs	r3, #0
 8009f86:	e022      	b.n	8009fce <cmp_lfn+0xd2>
			}
			wc = uc;
 8009f88:	89bb      	ldrh	r3, [r7, #12]
 8009f8a:	81fb      	strh	r3, [r7, #14]
 8009f8c:	e006      	b.n	8009f9c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009f8e:	89bb      	ldrh	r3, [r7, #12]
 8009f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d001      	beq.n	8009f9c <cmp_lfn+0xa0>
 8009f98:	2300      	movs	r3, #0
 8009f9a:	e018      	b.n	8009fce <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	613b      	str	r3, [r7, #16]
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	2b0c      	cmp	r3, #12
 8009fa6:	d9c8      	bls.n	8009f3a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d00b      	beq.n	8009fcc <cmp_lfn+0xd0>
 8009fb4:	89fb      	ldrh	r3, [r7, #14]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d008      	beq.n	8009fcc <cmp_lfn+0xd0>
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	005b      	lsls	r3, r3, #1
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	881b      	ldrh	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d001      	beq.n	8009fcc <cmp_lfn+0xd0>
 8009fc8:	2300      	movs	r3, #0
 8009fca:	e000      	b.n	8009fce <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8009fcc:	2301      	movs	r3, #1
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	371c      	adds	r7, #28
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd90      	pop	{r4, r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	08012484 	.word	0x08012484

08009fdc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b086      	sub	sp, #24
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	331a      	adds	r3, #26
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7fe ff0e 	bl	8008e0c <ld_word>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d001      	beq.n	8009ffa <pick_lfn+0x1e>
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	e04d      	b.n	800a096 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a002:	1e5a      	subs	r2, r3, #1
 800a004:	4613      	mov	r3, r2
 800a006:	005b      	lsls	r3, r3, #1
 800a008:	4413      	add	r3, r2
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	4413      	add	r3, r2
 800a00e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a010:	2301      	movs	r3, #1
 800a012:	81fb      	strh	r3, [r7, #14]
 800a014:	2300      	movs	r3, #0
 800a016:	613b      	str	r3, [r7, #16]
 800a018:	e028      	b.n	800a06c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a01a:	4a21      	ldr	r2, [pc, #132]	; (800a0a0 <pick_lfn+0xc4>)
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	4413      	add	r3, r2
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	461a      	mov	r2, r3
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	4413      	add	r3, r2
 800a028:	4618      	mov	r0, r3
 800a02a:	f7fe feef 	bl	8008e0c <ld_word>
 800a02e:	4603      	mov	r3, r0
 800a030:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a032:	89fb      	ldrh	r3, [r7, #14]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d00f      	beq.n	800a058 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	2b31      	cmp	r3, #49	; 0x31
 800a03c:	d901      	bls.n	800a042 <pick_lfn+0x66>
 800a03e:	2300      	movs	r3, #0
 800a040:	e029      	b.n	800a096 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a042:	89bb      	ldrh	r3, [r7, #12]
 800a044:	81fb      	strh	r3, [r7, #14]
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	1c5a      	adds	r2, r3, #1
 800a04a:	617a      	str	r2, [r7, #20]
 800a04c:	005b      	lsls	r3, r3, #1
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	4413      	add	r3, r2
 800a052:	89fa      	ldrh	r2, [r7, #14]
 800a054:	801a      	strh	r2, [r3, #0]
 800a056:	e006      	b.n	800a066 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a058:	89bb      	ldrh	r3, [r7, #12]
 800a05a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a05e:	4293      	cmp	r3, r2
 800a060:	d001      	beq.n	800a066 <pick_lfn+0x8a>
 800a062:	2300      	movs	r3, #0
 800a064:	e017      	b.n	800a096 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	3301      	adds	r3, #1
 800a06a:	613b      	str	r3, [r7, #16]
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	2b0c      	cmp	r3, #12
 800a070:	d9d3      	bls.n	800a01a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00a      	beq.n	800a094 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	2b31      	cmp	r3, #49	; 0x31
 800a082:	d901      	bls.n	800a088 <pick_lfn+0xac>
 800a084:	2300      	movs	r3, #0
 800a086:	e006      	b.n	800a096 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	005b      	lsls	r3, r3, #1
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	4413      	add	r3, r2
 800a090:	2200      	movs	r2, #0
 800a092:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800a094:	2301      	movs	r3, #1
}
 800a096:	4618      	mov	r0, r3
 800a098:	3718      	adds	r7, #24
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	08012484 	.word	0x08012484

0800a0a4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b088      	sub	sp, #32
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	4611      	mov	r1, r2
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	71fb      	strb	r3, [r7, #7]
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	330d      	adds	r3, #13
 800a0be:	79ba      	ldrb	r2, [r7, #6]
 800a0c0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	330b      	adds	r3, #11
 800a0c6:	220f      	movs	r2, #15
 800a0c8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	330c      	adds	r3, #12
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	331a      	adds	r3, #26
 800a0d6:	2100      	movs	r1, #0
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7fe fed2 	bl	8008e82 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a0de:	79fb      	ldrb	r3, [r7, #7]
 800a0e0:	1e5a      	subs	r2, r3, #1
 800a0e2:	4613      	mov	r3, r2
 800a0e4:	005b      	lsls	r3, r3, #1
 800a0e6:	4413      	add	r3, r2
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	4413      	add	r3, r2
 800a0ec:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	82fb      	strh	r3, [r7, #22]
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a0f6:	8afb      	ldrh	r3, [r7, #22]
 800a0f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d007      	beq.n	800a110 <put_lfn+0x6c>
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	1c5a      	adds	r2, r3, #1
 800a104:	61fa      	str	r2, [r7, #28]
 800a106:	005b      	lsls	r3, r3, #1
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	4413      	add	r3, r2
 800a10c:	881b      	ldrh	r3, [r3, #0]
 800a10e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a110:	4a17      	ldr	r2, [pc, #92]	; (800a170 <put_lfn+0xcc>)
 800a112:	69bb      	ldr	r3, [r7, #24]
 800a114:	4413      	add	r3, r2
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	461a      	mov	r2, r3
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	4413      	add	r3, r2
 800a11e:	8afa      	ldrh	r2, [r7, #22]
 800a120:	4611      	mov	r1, r2
 800a122:	4618      	mov	r0, r3
 800a124:	f7fe fead 	bl	8008e82 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a128:	8afb      	ldrh	r3, [r7, #22]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d102      	bne.n	800a134 <put_lfn+0x90>
 800a12e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a132:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a134:	69bb      	ldr	r3, [r7, #24]
 800a136:	3301      	adds	r3, #1
 800a138:	61bb      	str	r3, [r7, #24]
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	2b0c      	cmp	r3, #12
 800a13e:	d9da      	bls.n	800a0f6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a140:	8afb      	ldrh	r3, [r7, #22]
 800a142:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a146:	4293      	cmp	r3, r2
 800a148:	d006      	beq.n	800a158 <put_lfn+0xb4>
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	005b      	lsls	r3, r3, #1
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	4413      	add	r3, r2
 800a152:	881b      	ldrh	r3, [r3, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d103      	bne.n	800a160 <put_lfn+0xbc>
 800a158:	79fb      	ldrb	r3, [r7, #7]
 800a15a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a15e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	79fa      	ldrb	r2, [r7, #7]
 800a164:	701a      	strb	r2, [r3, #0]
}
 800a166:	bf00      	nop
 800a168:	3720      	adds	r7, #32
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	08012484 	.word	0x08012484

0800a174 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b08c      	sub	sp, #48	; 0x30
 800a178:	af00      	add	r7, sp, #0
 800a17a:	60f8      	str	r0, [r7, #12]
 800a17c:	60b9      	str	r1, [r7, #8]
 800a17e:	607a      	str	r2, [r7, #4]
 800a180:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a182:	220b      	movs	r2, #11
 800a184:	68b9      	ldr	r1, [r7, #8]
 800a186:	68f8      	ldr	r0, [r7, #12]
 800a188:	f7fe fec2 	bl	8008f10 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	2b05      	cmp	r3, #5
 800a190:	d92b      	bls.n	800a1ea <gen_numname+0x76>
		sr = seq;
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a196:	e022      	b.n	800a1de <gen_numname+0x6a>
			wc = *lfn++;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	1c9a      	adds	r2, r3, #2
 800a19c:	607a      	str	r2, [r7, #4]
 800a19e:	881b      	ldrh	r3, [r3, #0]
 800a1a0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1a6:	e017      	b.n	800a1d8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a1a8:	69fb      	ldr	r3, [r7, #28]
 800a1aa:	005a      	lsls	r2, r3, #1
 800a1ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a1ae:	f003 0301 	and.w	r3, r3, #1
 800a1b2:	4413      	add	r3, r2
 800a1b4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a1b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a1b8:	085b      	lsrs	r3, r3, #1
 800a1ba:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a1bc:	69fb      	ldr	r3, [r7, #28]
 800a1be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d005      	beq.n	800a1d2 <gen_numname+0x5e>
 800a1c6:	69fb      	ldr	r3, [r7, #28]
 800a1c8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800a1cc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800a1d0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1da:	2b0f      	cmp	r3, #15
 800a1dc:	d9e4      	bls.n	800a1a8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	881b      	ldrh	r3, [r3, #0]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d1d8      	bne.n	800a198 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a1ea:	2307      	movs	r3, #7
 800a1ec:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	f003 030f 	and.w	r3, r3, #15
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	3330      	adds	r3, #48	; 0x30
 800a1fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800a1fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a202:	2b39      	cmp	r3, #57	; 0x39
 800a204:	d904      	bls.n	800a210 <gen_numname+0x9c>
 800a206:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a20a:	3307      	adds	r3, #7
 800a20c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800a210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a212:	1e5a      	subs	r2, r3, #1
 800a214:	62ba      	str	r2, [r7, #40]	; 0x28
 800a216:	3330      	adds	r3, #48	; 0x30
 800a218:	443b      	add	r3, r7
 800a21a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a21e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	091b      	lsrs	r3, r3, #4
 800a226:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1df      	bne.n	800a1ee <gen_numname+0x7a>
	ns[i] = '~';
 800a22e:	f107 0214 	add.w	r2, r7, #20
 800a232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a234:	4413      	add	r3, r2
 800a236:	227e      	movs	r2, #126	; 0x7e
 800a238:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a23a:	2300      	movs	r3, #0
 800a23c:	627b      	str	r3, [r7, #36]	; 0x24
 800a23e:	e002      	b.n	800a246 <gen_numname+0xd2>
 800a240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a242:	3301      	adds	r3, #1
 800a244:	627b      	str	r3, [r7, #36]	; 0x24
 800a246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d205      	bcs.n	800a25a <gen_numname+0xe6>
 800a24e:	68fa      	ldr	r2, [r7, #12]
 800a250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a252:	4413      	add	r3, r2
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	2b20      	cmp	r3, #32
 800a258:	d1f2      	bne.n	800a240 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25c:	2b07      	cmp	r3, #7
 800a25e:	d807      	bhi.n	800a270 <gen_numname+0xfc>
 800a260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a262:	1c5a      	adds	r2, r3, #1
 800a264:	62ba      	str	r2, [r7, #40]	; 0x28
 800a266:	3330      	adds	r3, #48	; 0x30
 800a268:	443b      	add	r3, r7
 800a26a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a26e:	e000      	b.n	800a272 <gen_numname+0xfe>
 800a270:	2120      	movs	r1, #32
 800a272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a274:	1c5a      	adds	r2, r3, #1
 800a276:	627a      	str	r2, [r7, #36]	; 0x24
 800a278:	68fa      	ldr	r2, [r7, #12]
 800a27a:	4413      	add	r3, r2
 800a27c:	460a      	mov	r2, r1
 800a27e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a282:	2b07      	cmp	r3, #7
 800a284:	d9e9      	bls.n	800a25a <gen_numname+0xe6>
}
 800a286:	bf00      	nop
 800a288:	bf00      	nop
 800a28a:	3730      	adds	r7, #48	; 0x30
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a290:	b480      	push	{r7}
 800a292:	b085      	sub	sp, #20
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a298:	2300      	movs	r3, #0
 800a29a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a29c:	230b      	movs	r3, #11
 800a29e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a2a0:	7bfb      	ldrb	r3, [r7, #15]
 800a2a2:	b2da      	uxtb	r2, r3
 800a2a4:	0852      	lsrs	r2, r2, #1
 800a2a6:	01db      	lsls	r3, r3, #7
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	b2da      	uxtb	r2, r3
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	1c59      	adds	r1, r3, #1
 800a2b0:	6079      	str	r1, [r7, #4]
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	60bb      	str	r3, [r7, #8]
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d1ed      	bne.n	800a2a0 <sum_sfn+0x10>
	return sum;
 800a2c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3714      	adds	r7, #20
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr

0800a2d2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800a2d2:	b580      	push	{r7, lr}
 800a2d4:	b086      	sub	sp, #24
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
 800a2da:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800a2dc:	2304      	movs	r3, #4
 800a2de:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800a2e6:	23ff      	movs	r3, #255	; 0xff
 800a2e8:	757b      	strb	r3, [r7, #21]
 800a2ea:	23ff      	movs	r3, #255	; 0xff
 800a2ec:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800a2ee:	e081      	b.n	800a3f4 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	69db      	ldr	r3, [r3, #28]
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	6938      	ldr	r0, [r7, #16]
 800a2f8:	f7ff f838 	bl	800936c <move_window>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a300:	7dfb      	ldrb	r3, [r7, #23]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d17c      	bne.n	800a400 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6a1b      	ldr	r3, [r3, #32]
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800a30e:	7dbb      	ldrb	r3, [r7, #22]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d102      	bne.n	800a31a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800a314:	2304      	movs	r3, #4
 800a316:	75fb      	strb	r3, [r7, #23]
 800a318:	e077      	b.n	800a40a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6a1b      	ldr	r3, [r3, #32]
 800a31e:	330b      	adds	r3, #11
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a326:	73fb      	strb	r3, [r7, #15]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	7bfa      	ldrb	r2, [r7, #15]
 800a32c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800a32e:	7dbb      	ldrb	r3, [r7, #22]
 800a330:	2be5      	cmp	r3, #229	; 0xe5
 800a332:	d00e      	beq.n	800a352 <dir_read+0x80>
 800a334:	7dbb      	ldrb	r3, [r7, #22]
 800a336:	2b2e      	cmp	r3, #46	; 0x2e
 800a338:	d00b      	beq.n	800a352 <dir_read+0x80>
 800a33a:	7bfb      	ldrb	r3, [r7, #15]
 800a33c:	f023 0320 	bic.w	r3, r3, #32
 800a340:	2b08      	cmp	r3, #8
 800a342:	bf0c      	ite	eq
 800a344:	2301      	moveq	r3, #1
 800a346:	2300      	movne	r3, #0
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	461a      	mov	r2, r3
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	4293      	cmp	r3, r2
 800a350:	d002      	beq.n	800a358 <dir_read+0x86>
				ord = 0xFF;
 800a352:	23ff      	movs	r3, #255	; 0xff
 800a354:	757b      	strb	r3, [r7, #21]
 800a356:	e044      	b.n	800a3e2 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800a358:	7bfb      	ldrb	r3, [r7, #15]
 800a35a:	2b0f      	cmp	r3, #15
 800a35c:	d12f      	bne.n	800a3be <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800a35e:	7dbb      	ldrb	r3, [r7, #22]
 800a360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a364:	2b00      	cmp	r3, #0
 800a366:	d00d      	beq.n	800a384 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6a1b      	ldr	r3, [r3, #32]
 800a36c:	7b5b      	ldrb	r3, [r3, #13]
 800a36e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800a370:	7dbb      	ldrb	r3, [r7, #22]
 800a372:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a376:	75bb      	strb	r3, [r7, #22]
 800a378:	7dbb      	ldrb	r3, [r7, #22]
 800a37a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	695a      	ldr	r2, [r3, #20]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a384:	7dba      	ldrb	r2, [r7, #22]
 800a386:	7d7b      	ldrb	r3, [r7, #21]
 800a388:	429a      	cmp	r2, r3
 800a38a:	d115      	bne.n	800a3b8 <dir_read+0xe6>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6a1b      	ldr	r3, [r3, #32]
 800a390:	330d      	adds	r3, #13
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	7d3a      	ldrb	r2, [r7, #20]
 800a396:	429a      	cmp	r2, r3
 800a398:	d10e      	bne.n	800a3b8 <dir_read+0xe6>
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	691a      	ldr	r2, [r3, #16]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6a1b      	ldr	r3, [r3, #32]
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	4610      	mov	r0, r2
 800a3a6:	f7ff fe19 	bl	8009fdc <pick_lfn>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d003      	beq.n	800a3b8 <dir_read+0xe6>
 800a3b0:	7d7b      	ldrb	r3, [r7, #21]
 800a3b2:	3b01      	subs	r3, #1
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	e000      	b.n	800a3ba <dir_read+0xe8>
 800a3b8:	23ff      	movs	r3, #255	; 0xff
 800a3ba:	757b      	strb	r3, [r7, #21]
 800a3bc:	e011      	b.n	800a3e2 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800a3be:	7d7b      	ldrb	r3, [r7, #21]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d109      	bne.n	800a3d8 <dir_read+0x106>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6a1b      	ldr	r3, [r3, #32]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7ff ff61 	bl	800a290 <sum_sfn>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	7d3b      	ldrb	r3, [r7, #20]
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d015      	beq.n	800a404 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f04f 32ff 	mov.w	r2, #4294967295
 800a3de:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800a3e0:	e010      	b.n	800a404 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800a3e2:	2100      	movs	r1, #0
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f7ff fc2c 	bl	8009c42 <dir_next>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a3ee:	7dfb      	ldrb	r3, [r7, #23]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d109      	bne.n	800a408 <dir_read+0x136>
	while (dp->sect) {
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	69db      	ldr	r3, [r3, #28]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f47f af79 	bne.w	800a2f0 <dir_read+0x1e>
 800a3fe:	e004      	b.n	800a40a <dir_read+0x138>
		if (res != FR_OK) break;
 800a400:	bf00      	nop
 800a402:	e002      	b.n	800a40a <dir_read+0x138>
					break;
 800a404:	bf00      	nop
 800a406:	e000      	b.n	800a40a <dir_read+0x138>
		if (res != FR_OK) break;
 800a408:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800a40a:	7dfb      	ldrb	r3, [r7, #23]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d002      	beq.n	800a416 <dir_read+0x144>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	61da      	str	r2, [r3, #28]
	return res;
 800a416:	7dfb      	ldrb	r3, [r7, #23]
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3718      	adds	r7, #24
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b086      	sub	sp, #24
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a42e:	2100      	movs	r1, #0
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f7ff fb7d 	bl	8009b30 <dir_sdi>
 800a436:	4603      	mov	r3, r0
 800a438:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a43a:	7dfb      	ldrb	r3, [r7, #23]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d001      	beq.n	800a444 <dir_find+0x24>
 800a440:	7dfb      	ldrb	r3, [r7, #23]
 800a442:	e0a9      	b.n	800a598 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a444:	23ff      	movs	r3, #255	; 0xff
 800a446:	753b      	strb	r3, [r7, #20]
 800a448:	7d3b      	ldrb	r3, [r7, #20]
 800a44a:	757b      	strb	r3, [r7, #21]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f04f 32ff 	mov.w	r2, #4294967295
 800a452:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	69db      	ldr	r3, [r3, #28]
 800a458:	4619      	mov	r1, r3
 800a45a:	6938      	ldr	r0, [r7, #16]
 800a45c:	f7fe ff86 	bl	800936c <move_window>
 800a460:	4603      	mov	r3, r0
 800a462:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a464:	7dfb      	ldrb	r3, [r7, #23]
 800a466:	2b00      	cmp	r3, #0
 800a468:	f040 8090 	bne.w	800a58c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a1b      	ldr	r3, [r3, #32]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a474:	7dbb      	ldrb	r3, [r7, #22]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d102      	bne.n	800a480 <dir_find+0x60>
 800a47a:	2304      	movs	r3, #4
 800a47c:	75fb      	strb	r3, [r7, #23]
 800a47e:	e08a      	b.n	800a596 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6a1b      	ldr	r3, [r3, #32]
 800a484:	330b      	adds	r3, #11
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a48c:	73fb      	strb	r3, [r7, #15]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	7bfa      	ldrb	r2, [r7, #15]
 800a492:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a494:	7dbb      	ldrb	r3, [r7, #22]
 800a496:	2be5      	cmp	r3, #229	; 0xe5
 800a498:	d007      	beq.n	800a4aa <dir_find+0x8a>
 800a49a:	7bfb      	ldrb	r3, [r7, #15]
 800a49c:	f003 0308 	and.w	r3, r3, #8
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d009      	beq.n	800a4b8 <dir_find+0x98>
 800a4a4:	7bfb      	ldrb	r3, [r7, #15]
 800a4a6:	2b0f      	cmp	r3, #15
 800a4a8:	d006      	beq.n	800a4b8 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a4aa:	23ff      	movs	r3, #255	; 0xff
 800a4ac:	757b      	strb	r3, [r7, #21]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a4b4:	631a      	str	r2, [r3, #48]	; 0x30
 800a4b6:	e05e      	b.n	800a576 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a4b8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ba:	2b0f      	cmp	r3, #15
 800a4bc:	d136      	bne.n	800a52c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a4c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d154      	bne.n	800a576 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a4cc:	7dbb      	ldrb	r3, [r7, #22]
 800a4ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00d      	beq.n	800a4f2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6a1b      	ldr	r3, [r3, #32]
 800a4da:	7b5b      	ldrb	r3, [r3, #13]
 800a4dc:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800a4de:	7dbb      	ldrb	r3, [r7, #22]
 800a4e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4e4:	75bb      	strb	r3, [r7, #22]
 800a4e6:	7dbb      	ldrb	r3, [r7, #22]
 800a4e8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	695a      	ldr	r2, [r3, #20]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a4f2:	7dba      	ldrb	r2, [r7, #22]
 800a4f4:	7d7b      	ldrb	r3, [r7, #21]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d115      	bne.n	800a526 <dir_find+0x106>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6a1b      	ldr	r3, [r3, #32]
 800a4fe:	330d      	adds	r3, #13
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	7d3a      	ldrb	r2, [r7, #20]
 800a504:	429a      	cmp	r2, r3
 800a506:	d10e      	bne.n	800a526 <dir_find+0x106>
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	691a      	ldr	r2, [r3, #16]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6a1b      	ldr	r3, [r3, #32]
 800a510:	4619      	mov	r1, r3
 800a512:	4610      	mov	r0, r2
 800a514:	f7ff fcf2 	bl	8009efc <cmp_lfn>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d003      	beq.n	800a526 <dir_find+0x106>
 800a51e:	7d7b      	ldrb	r3, [r7, #21]
 800a520:	3b01      	subs	r3, #1
 800a522:	b2db      	uxtb	r3, r3
 800a524:	e000      	b.n	800a528 <dir_find+0x108>
 800a526:	23ff      	movs	r3, #255	; 0xff
 800a528:	757b      	strb	r3, [r7, #21]
 800a52a:	e024      	b.n	800a576 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a52c:	7d7b      	ldrb	r3, [r7, #21]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d109      	bne.n	800a546 <dir_find+0x126>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6a1b      	ldr	r3, [r3, #32]
 800a536:	4618      	mov	r0, r3
 800a538:	f7ff feaa 	bl	800a290 <sum_sfn>
 800a53c:	4603      	mov	r3, r0
 800a53e:	461a      	mov	r2, r3
 800a540:	7d3b      	ldrb	r3, [r7, #20]
 800a542:	4293      	cmp	r3, r2
 800a544:	d024      	beq.n	800a590 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a54c:	f003 0301 	and.w	r3, r3, #1
 800a550:	2b00      	cmp	r3, #0
 800a552:	d10a      	bne.n	800a56a <dir_find+0x14a>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6a18      	ldr	r0, [r3, #32]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	3324      	adds	r3, #36	; 0x24
 800a55c:	220b      	movs	r2, #11
 800a55e:	4619      	mov	r1, r3
 800a560:	f7fe fd12 	bl	8008f88 <mem_cmp>
 800a564:	4603      	mov	r3, r0
 800a566:	2b00      	cmp	r3, #0
 800a568:	d014      	beq.n	800a594 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a56a:	23ff      	movs	r3, #255	; 0xff
 800a56c:	757b      	strb	r3, [r7, #21]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f04f 32ff 	mov.w	r2, #4294967295
 800a574:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a576:	2100      	movs	r1, #0
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f7ff fb62 	bl	8009c42 <dir_next>
 800a57e:	4603      	mov	r3, r0
 800a580:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a582:	7dfb      	ldrb	r3, [r7, #23]
 800a584:	2b00      	cmp	r3, #0
 800a586:	f43f af65 	beq.w	800a454 <dir_find+0x34>
 800a58a:	e004      	b.n	800a596 <dir_find+0x176>
		if (res != FR_OK) break;
 800a58c:	bf00      	nop
 800a58e:	e002      	b.n	800a596 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a590:	bf00      	nop
 800a592:	e000      	b.n	800a596 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a594:	bf00      	nop

	return res;
 800a596:	7dfb      	ldrb	r3, [r7, #23]
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3718      	adds	r7, #24
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b08c      	sub	sp, #48	; 0x30
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a5b4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d001      	beq.n	800a5c0 <dir_register+0x20>
 800a5bc:	2306      	movs	r3, #6
 800a5be:	e0e0      	b.n	800a782 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	627b      	str	r3, [r7, #36]	; 0x24
 800a5c4:	e002      	b.n	800a5cc <dir_register+0x2c>
 800a5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	627b      	str	r3, [r7, #36]	; 0x24
 800a5cc:	69fb      	ldr	r3, [r7, #28]
 800a5ce:	691a      	ldr	r2, [r3, #16]
 800a5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d2:	005b      	lsls	r3, r3, #1
 800a5d4:	4413      	add	r3, r2
 800a5d6:	881b      	ldrh	r3, [r3, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d1f4      	bne.n	800a5c6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800a5e2:	f107 030c 	add.w	r3, r7, #12
 800a5e6:	220c      	movs	r2, #12
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f7fe fc91 	bl	8008f10 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800a5ee:	7dfb      	ldrb	r3, [r7, #23]
 800a5f0:	f003 0301 	and.w	r3, r3, #1
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d032      	beq.n	800a65e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2240      	movs	r2, #64	; 0x40
 800a5fc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800a600:	2301      	movs	r3, #1
 800a602:	62bb      	str	r3, [r7, #40]	; 0x28
 800a604:	e016      	b.n	800a634 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800a60c:	69fb      	ldr	r3, [r7, #28]
 800a60e:	691a      	ldr	r2, [r3, #16]
 800a610:	f107 010c 	add.w	r1, r7, #12
 800a614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a616:	f7ff fdad 	bl	800a174 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f7ff ff00 	bl	800a420 <dir_find>
 800a620:	4603      	mov	r3, r0
 800a622:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800a626:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d106      	bne.n	800a63c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800a62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a630:	3301      	adds	r3, #1
 800a632:	62bb      	str	r3, [r7, #40]	; 0x28
 800a634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a636:	2b63      	cmp	r3, #99	; 0x63
 800a638:	d9e5      	bls.n	800a606 <dir_register+0x66>
 800a63a:	e000      	b.n	800a63e <dir_register+0x9e>
			if (res != FR_OK) break;
 800a63c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800a63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a640:	2b64      	cmp	r3, #100	; 0x64
 800a642:	d101      	bne.n	800a648 <dir_register+0xa8>
 800a644:	2307      	movs	r3, #7
 800a646:	e09c      	b.n	800a782 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800a648:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a64c:	2b04      	cmp	r3, #4
 800a64e:	d002      	beq.n	800a656 <dir_register+0xb6>
 800a650:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a654:	e095      	b.n	800a782 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800a656:	7dfa      	ldrb	r2, [r7, #23]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800a65e:	7dfb      	ldrb	r3, [r7, #23]
 800a660:	f003 0302 	and.w	r3, r3, #2
 800a664:	2b00      	cmp	r3, #0
 800a666:	d007      	beq.n	800a678 <dir_register+0xd8>
 800a668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66a:	330c      	adds	r3, #12
 800a66c:	4a47      	ldr	r2, [pc, #284]	; (800a78c <dir_register+0x1ec>)
 800a66e:	fba2 2303 	umull	r2, r3, r2, r3
 800a672:	089b      	lsrs	r3, r3, #2
 800a674:	3301      	adds	r3, #1
 800a676:	e000      	b.n	800a67a <dir_register+0xda>
 800a678:	2301      	movs	r3, #1
 800a67a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800a67c:	6a39      	ldr	r1, [r7, #32]
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f7ff fbb5 	bl	8009dee <dir_alloc>
 800a684:	4603      	mov	r3, r0
 800a686:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800a68a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d148      	bne.n	800a724 <dir_register+0x184>
 800a692:	6a3b      	ldr	r3, [r7, #32]
 800a694:	3b01      	subs	r3, #1
 800a696:	623b      	str	r3, [r7, #32]
 800a698:	6a3b      	ldr	r3, [r7, #32]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d042      	beq.n	800a724 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	695a      	ldr	r2, [r3, #20]
 800a6a2:	6a3b      	ldr	r3, [r7, #32]
 800a6a4:	015b      	lsls	r3, r3, #5
 800a6a6:	1ad3      	subs	r3, r2, r3
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f7ff fa40 	bl	8009b30 <dir_sdi>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a6b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d132      	bne.n	800a724 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	3324      	adds	r3, #36	; 0x24
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7ff fde4 	bl	800a290 <sum_sfn>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	69db      	ldr	r3, [r3, #28]
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	69f8      	ldr	r0, [r7, #28]
 800a6d4:	f7fe fe4a 	bl	800936c <move_window>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800a6de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d11d      	bne.n	800a722 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800a6e6:	69fb      	ldr	r3, [r7, #28]
 800a6e8:	6918      	ldr	r0, [r3, #16]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a19      	ldr	r1, [r3, #32]
 800a6ee:	6a3b      	ldr	r3, [r7, #32]
 800a6f0:	b2da      	uxtb	r2, r3
 800a6f2:	7efb      	ldrb	r3, [r7, #27]
 800a6f4:	f7ff fcd6 	bl	800a0a4 <put_lfn>
				fs->wflag = 1;
 800a6f8:	69fb      	ldr	r3, [r7, #28]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800a6fe:	2100      	movs	r1, #0
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f7ff fa9e 	bl	8009c42 <dir_next>
 800a706:	4603      	mov	r3, r0
 800a708:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800a70c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a710:	2b00      	cmp	r3, #0
 800a712:	d107      	bne.n	800a724 <dir_register+0x184>
 800a714:	6a3b      	ldr	r3, [r7, #32]
 800a716:	3b01      	subs	r3, #1
 800a718:	623b      	str	r3, [r7, #32]
 800a71a:	6a3b      	ldr	r3, [r7, #32]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d1d5      	bne.n	800a6cc <dir_register+0x12c>
 800a720:	e000      	b.n	800a724 <dir_register+0x184>
				if (res != FR_OK) break;
 800a722:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a724:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d128      	bne.n	800a77e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	69db      	ldr	r3, [r3, #28]
 800a730:	4619      	mov	r1, r3
 800a732:	69f8      	ldr	r0, [r7, #28]
 800a734:	f7fe fe1a 	bl	800936c <move_window>
 800a738:	4603      	mov	r3, r0
 800a73a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a73e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a742:	2b00      	cmp	r3, #0
 800a744:	d11b      	bne.n	800a77e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6a1b      	ldr	r3, [r3, #32]
 800a74a:	2220      	movs	r2, #32
 800a74c:	2100      	movs	r1, #0
 800a74e:	4618      	mov	r0, r3
 800a750:	f7fe fbff 	bl	8008f52 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6a18      	ldr	r0, [r3, #32]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	3324      	adds	r3, #36	; 0x24
 800a75c:	220b      	movs	r2, #11
 800a75e:	4619      	mov	r1, r3
 800a760:	f7fe fbd6 	bl	8008f10 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6a1b      	ldr	r3, [r3, #32]
 800a76e:	330c      	adds	r3, #12
 800a770:	f002 0218 	and.w	r2, r2, #24
 800a774:	b2d2      	uxtb	r2, r2
 800a776:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	2201      	movs	r2, #1
 800a77c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a77e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a782:	4618      	mov	r0, r3
 800a784:	3730      	adds	r7, #48	; 0x30
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	4ec4ec4f 	.word	0x4ec4ec4f

0800a790 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b086      	sub	sp, #24
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	695b      	ldr	r3, [r3, #20]
 800a7a2:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ac:	d007      	beq.n	800a7be <dir_remove+0x2e>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f7ff f9bb 	bl	8009b30 <dir_sdi>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	e000      	b.n	800a7c0 <dir_remove+0x30>
 800a7be:	2300      	movs	r3, #0
 800a7c0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a7c2:	7dfb      	ldrb	r3, [r7, #23]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d128      	bne.n	800a81a <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	69db      	ldr	r3, [r3, #28]
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	6938      	ldr	r0, [r7, #16]
 800a7d0:	f7fe fdcc 	bl	800936c <move_window>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a7d8:	7dfb      	ldrb	r3, [r7, #23]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d115      	bne.n	800a80a <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6a1b      	ldr	r3, [r3, #32]
 800a7e2:	22e5      	movs	r2, #229	; 0xe5
 800a7e4:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	695b      	ldr	r3, [r3, #20]
 800a7f0:	68fa      	ldr	r2, [r7, #12]
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d90b      	bls.n	800a80e <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800a7f6:	2100      	movs	r1, #0
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f7ff fa22 	bl	8009c42 <dir_next>
 800a7fe:	4603      	mov	r3, r0
 800a800:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800a802:	7dfb      	ldrb	r3, [r7, #23]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d0df      	beq.n	800a7c8 <dir_remove+0x38>
 800a808:	e002      	b.n	800a810 <dir_remove+0x80>
			if (res != FR_OK) break;
 800a80a:	bf00      	nop
 800a80c:	e000      	b.n	800a810 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800a80e:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800a810:	7dfb      	ldrb	r3, [r7, #23]
 800a812:	2b04      	cmp	r3, #4
 800a814:	d101      	bne.n	800a81a <dir_remove+0x8a>
 800a816:	2302      	movs	r3, #2
 800a818:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800a81a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3718      	adds	r7, #24
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b088      	sub	sp, #32
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	2200      	movs	r2, #0
 800a838:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	69db      	ldr	r3, [r3, #28]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	f000 80c9 	beq.w	800a9d6 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a84c:	d032      	beq.n	800a8b4 <get_fileinfo+0x90>
			i = j = 0;
 800a84e:	2300      	movs	r3, #0
 800a850:	61bb      	str	r3, [r7, #24]
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800a856:	e01b      	b.n	800a890 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800a858:	89fb      	ldrh	r3, [r7, #14]
 800a85a:	2100      	movs	r1, #0
 800a85c:	4618      	mov	r0, r3
 800a85e:	f002 fa4b 	bl	800ccf8 <ff_convert>
 800a862:	4603      	mov	r3, r0
 800a864:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800a866:	89fb      	ldrh	r3, [r7, #14]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d102      	bne.n	800a872 <get_fileinfo+0x4e>
 800a86c:	2300      	movs	r3, #0
 800a86e:	61fb      	str	r3, [r7, #28]
 800a870:	e01a      	b.n	800a8a8 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	2b31      	cmp	r3, #49	; 0x31
 800a876:	d902      	bls.n	800a87e <get_fileinfo+0x5a>
 800a878:	2300      	movs	r3, #0
 800a87a:	61fb      	str	r3, [r7, #28]
 800a87c:	e014      	b.n	800a8a8 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800a87e:	69fb      	ldr	r3, [r7, #28]
 800a880:	1c5a      	adds	r2, r3, #1
 800a882:	61fa      	str	r2, [r7, #28]
 800a884:	89fa      	ldrh	r2, [r7, #14]
 800a886:	b2d1      	uxtb	r1, r2
 800a888:	683a      	ldr	r2, [r7, #0]
 800a88a:	4413      	add	r3, r2
 800a88c:	460a      	mov	r2, r1
 800a88e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	691a      	ldr	r2, [r3, #16]
 800a894:	69bb      	ldr	r3, [r7, #24]
 800a896:	1c59      	adds	r1, r3, #1
 800a898:	61b9      	str	r1, [r7, #24]
 800a89a:	005b      	lsls	r3, r3, #1
 800a89c:	4413      	add	r3, r2
 800a89e:	881b      	ldrh	r3, [r3, #0]
 800a8a0:	81fb      	strh	r3, [r7, #14]
 800a8a2:	89fb      	ldrh	r3, [r7, #14]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d1d7      	bne.n	800a858 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800a8a8:	683a      	ldr	r2, [r7, #0]
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	3316      	adds	r3, #22
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	61bb      	str	r3, [r7, #24]
 800a8b8:	69bb      	ldr	r3, [r7, #24]
 800a8ba:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800a8bc:	683a      	ldr	r2, [r7, #0]
 800a8be:	69fb      	ldr	r3, [r7, #28]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	3316      	adds	r3, #22
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800a8c8:	e04c      	b.n	800a964 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a1a      	ldr	r2, [r3, #32]
 800a8ce:	69fb      	ldr	r3, [r7, #28]
 800a8d0:	1c59      	adds	r1, r3, #1
 800a8d2:	61f9      	str	r1, [r7, #28]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800a8da:	7dfb      	ldrb	r3, [r7, #23]
 800a8dc:	2b20      	cmp	r3, #32
 800a8de:	d100      	bne.n	800a8e2 <get_fileinfo+0xbe>
 800a8e0:	e040      	b.n	800a964 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800a8e2:	7dfb      	ldrb	r3, [r7, #23]
 800a8e4:	2b05      	cmp	r3, #5
 800a8e6:	d101      	bne.n	800a8ec <get_fileinfo+0xc8>
 800a8e8:	23e5      	movs	r3, #229	; 0xe5
 800a8ea:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800a8ec:	69fb      	ldr	r3, [r7, #28]
 800a8ee:	2b09      	cmp	r3, #9
 800a8f0:	d10f      	bne.n	800a912 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800a8f2:	89bb      	ldrh	r3, [r7, #12]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d105      	bne.n	800a904 <get_fileinfo+0xe0>
 800a8f8:	683a      	ldr	r2, [r7, #0]
 800a8fa:	69bb      	ldr	r3, [r7, #24]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	3316      	adds	r3, #22
 800a900:	222e      	movs	r2, #46	; 0x2e
 800a902:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800a904:	69bb      	ldr	r3, [r7, #24]
 800a906:	1c5a      	adds	r2, r3, #1
 800a908:	61ba      	str	r2, [r7, #24]
 800a90a:	683a      	ldr	r2, [r7, #0]
 800a90c:	4413      	add	r3, r2
 800a90e:	222e      	movs	r2, #46	; 0x2e
 800a910:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800a912:	683a      	ldr	r2, [r7, #0]
 800a914:	69bb      	ldr	r3, [r7, #24]
 800a916:	4413      	add	r3, r2
 800a918:	3309      	adds	r3, #9
 800a91a:	7dfa      	ldrb	r2, [r7, #23]
 800a91c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800a91e:	89bb      	ldrh	r3, [r7, #12]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d11c      	bne.n	800a95e <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800a924:	7dfb      	ldrb	r3, [r7, #23]
 800a926:	2b40      	cmp	r3, #64	; 0x40
 800a928:	d913      	bls.n	800a952 <get_fileinfo+0x12e>
 800a92a:	7dfb      	ldrb	r3, [r7, #23]
 800a92c:	2b5a      	cmp	r3, #90	; 0x5a
 800a92e:	d810      	bhi.n	800a952 <get_fileinfo+0x12e>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6a1b      	ldr	r3, [r3, #32]
 800a934:	330c      	adds	r3, #12
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	461a      	mov	r2, r3
 800a93a:	69fb      	ldr	r3, [r7, #28]
 800a93c:	2b08      	cmp	r3, #8
 800a93e:	d901      	bls.n	800a944 <get_fileinfo+0x120>
 800a940:	2310      	movs	r3, #16
 800a942:	e000      	b.n	800a946 <get_fileinfo+0x122>
 800a944:	2308      	movs	r3, #8
 800a946:	4013      	ands	r3, r2
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d002      	beq.n	800a952 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800a94c:	7dfb      	ldrb	r3, [r7, #23]
 800a94e:	3320      	adds	r3, #32
 800a950:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800a952:	683a      	ldr	r2, [r7, #0]
 800a954:	69bb      	ldr	r3, [r7, #24]
 800a956:	4413      	add	r3, r2
 800a958:	3316      	adds	r3, #22
 800a95a:	7dfa      	ldrb	r2, [r7, #23]
 800a95c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	3301      	adds	r3, #1
 800a962:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800a964:	69fb      	ldr	r3, [r7, #28]
 800a966:	2b0a      	cmp	r3, #10
 800a968:	d9af      	bls.n	800a8ca <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800a96a:	89bb      	ldrh	r3, [r7, #12]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d10d      	bne.n	800a98c <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800a970:	683a      	ldr	r2, [r7, #0]
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	4413      	add	r3, r2
 800a976:	3316      	adds	r3, #22
 800a978:	2200      	movs	r2, #0
 800a97a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6a1b      	ldr	r3, [r3, #32]
 800a980:	330c      	adds	r3, #12
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d101      	bne.n	800a98c <get_fileinfo+0x168>
 800a988:	2300      	movs	r3, #0
 800a98a:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800a98c:	683a      	ldr	r2, [r7, #0]
 800a98e:	69bb      	ldr	r3, [r7, #24]
 800a990:	4413      	add	r3, r2
 800a992:	3309      	adds	r3, #9
 800a994:	2200      	movs	r2, #0
 800a996:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6a1b      	ldr	r3, [r3, #32]
 800a99c:	7ada      	ldrb	r2, [r3, #11]
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6a1b      	ldr	r3, [r3, #32]
 800a9a6:	331c      	adds	r3, #28
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f7fe fa47 	bl	8008e3c <ld_dword>
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6a1b      	ldr	r3, [r3, #32]
 800a9b8:	3316      	adds	r3, #22
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7fe fa3e 	bl	8008e3c <ld_dword>
 800a9c0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	b29a      	uxth	r2, r3
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	80da      	strh	r2, [r3, #6]
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	0c1b      	lsrs	r3, r3, #16
 800a9ce:	b29a      	uxth	r2, r3
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	809a      	strh	r2, [r3, #4]
 800a9d4:	e000      	b.n	800a9d8 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a9d6:	bf00      	nop
}
 800a9d8:	3720      	adds	r7, #32
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}
	...

0800a9e0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b08a      	sub	sp, #40	; 0x28
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	613b      	str	r3, [r7, #16]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	691b      	ldr	r3, [r3, #16]
 800a9f6:	60fb      	str	r3, [r7, #12]
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	617b      	str	r3, [r7, #20]
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800aa00:	69bb      	ldr	r3, [r7, #24]
 800aa02:	1c5a      	adds	r2, r3, #1
 800aa04:	61ba      	str	r2, [r7, #24]
 800aa06:	693a      	ldr	r2, [r7, #16]
 800aa08:	4413      	add	r3, r2
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800aa0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa10:	2b1f      	cmp	r3, #31
 800aa12:	d940      	bls.n	800aa96 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800aa14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa16:	2b2f      	cmp	r3, #47	; 0x2f
 800aa18:	d006      	beq.n	800aa28 <create_name+0x48>
 800aa1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa1c:	2b5c      	cmp	r3, #92	; 0x5c
 800aa1e:	d110      	bne.n	800aa42 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800aa20:	e002      	b.n	800aa28 <create_name+0x48>
 800aa22:	69bb      	ldr	r3, [r7, #24]
 800aa24:	3301      	adds	r3, #1
 800aa26:	61bb      	str	r3, [r7, #24]
 800aa28:	693a      	ldr	r2, [r7, #16]
 800aa2a:	69bb      	ldr	r3, [r7, #24]
 800aa2c:	4413      	add	r3, r2
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	2b2f      	cmp	r3, #47	; 0x2f
 800aa32:	d0f6      	beq.n	800aa22 <create_name+0x42>
 800aa34:	693a      	ldr	r2, [r7, #16]
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	4413      	add	r3, r2
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	2b5c      	cmp	r3, #92	; 0x5c
 800aa3e:	d0f0      	beq.n	800aa22 <create_name+0x42>
			break;
 800aa40:	e02a      	b.n	800aa98 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	2b31      	cmp	r3, #49	; 0x31
 800aa46:	d901      	bls.n	800aa4c <create_name+0x6c>
 800aa48:	2306      	movs	r3, #6
 800aa4a:	e17d      	b.n	800ad48 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800aa4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800aa52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa54:	2101      	movs	r1, #1
 800aa56:	4618      	mov	r0, r3
 800aa58:	f002 f94e 	bl	800ccf8 <ff_convert>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800aa60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d101      	bne.n	800aa6a <create_name+0x8a>
 800aa66:	2306      	movs	r3, #6
 800aa68:	e16e      	b.n	800ad48 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800aa6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa6c:	2b7f      	cmp	r3, #127	; 0x7f
 800aa6e:	d809      	bhi.n	800aa84 <create_name+0xa4>
 800aa70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa72:	4619      	mov	r1, r3
 800aa74:	488d      	ldr	r0, [pc, #564]	; (800acac <create_name+0x2cc>)
 800aa76:	f7fe faae 	bl	8008fd6 <chk_chr>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d001      	beq.n	800aa84 <create_name+0xa4>
 800aa80:	2306      	movs	r3, #6
 800aa82:	e161      	b.n	800ad48 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	1c5a      	adds	r2, r3, #1
 800aa88:	617a      	str	r2, [r7, #20]
 800aa8a:	005b      	lsls	r3, r3, #1
 800aa8c:	68fa      	ldr	r2, [r7, #12]
 800aa8e:	4413      	add	r3, r2
 800aa90:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aa92:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800aa94:	e7b4      	b.n	800aa00 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800aa96:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800aa98:	693a      	ldr	r2, [r7, #16]
 800aa9a:	69bb      	ldr	r3, [r7, #24]
 800aa9c:	441a      	add	r2, r3
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800aaa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aaa4:	2b1f      	cmp	r3, #31
 800aaa6:	d801      	bhi.n	800aaac <create_name+0xcc>
 800aaa8:	2304      	movs	r3, #4
 800aaaa:	e000      	b.n	800aaae <create_name+0xce>
 800aaac:	2300      	movs	r3, #0
 800aaae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800aab2:	e011      	b.n	800aad8 <create_name+0xf8>
		w = lfn[di - 1];
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800aaba:	3b01      	subs	r3, #1
 800aabc:	005b      	lsls	r3, r3, #1
 800aabe:	68fa      	ldr	r2, [r7, #12]
 800aac0:	4413      	add	r3, r2
 800aac2:	881b      	ldrh	r3, [r3, #0]
 800aac4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800aac6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aac8:	2b20      	cmp	r3, #32
 800aaca:	d002      	beq.n	800aad2 <create_name+0xf2>
 800aacc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aace:	2b2e      	cmp	r3, #46	; 0x2e
 800aad0:	d106      	bne.n	800aae0 <create_name+0x100>
		di--;
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	3b01      	subs	r3, #1
 800aad6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d1ea      	bne.n	800aab4 <create_name+0xd4>
 800aade:	e000      	b.n	800aae2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800aae0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	005b      	lsls	r3, r3, #1
 800aae6:	68fa      	ldr	r2, [r7, #12]
 800aae8:	4413      	add	r3, r2
 800aaea:	2200      	movs	r2, #0
 800aaec:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d101      	bne.n	800aaf8 <create_name+0x118>
 800aaf4:	2306      	movs	r3, #6
 800aaf6:	e127      	b.n	800ad48 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	3324      	adds	r3, #36	; 0x24
 800aafc:	220b      	movs	r2, #11
 800aafe:	2120      	movs	r1, #32
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7fe fa26 	bl	8008f52 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ab06:	2300      	movs	r3, #0
 800ab08:	61bb      	str	r3, [r7, #24]
 800ab0a:	e002      	b.n	800ab12 <create_name+0x132>
 800ab0c:	69bb      	ldr	r3, [r7, #24]
 800ab0e:	3301      	adds	r3, #1
 800ab10:	61bb      	str	r3, [r7, #24]
 800ab12:	69bb      	ldr	r3, [r7, #24]
 800ab14:	005b      	lsls	r3, r3, #1
 800ab16:	68fa      	ldr	r2, [r7, #12]
 800ab18:	4413      	add	r3, r2
 800ab1a:	881b      	ldrh	r3, [r3, #0]
 800ab1c:	2b20      	cmp	r3, #32
 800ab1e:	d0f5      	beq.n	800ab0c <create_name+0x12c>
 800ab20:	69bb      	ldr	r3, [r7, #24]
 800ab22:	005b      	lsls	r3, r3, #1
 800ab24:	68fa      	ldr	r2, [r7, #12]
 800ab26:	4413      	add	r3, r2
 800ab28:	881b      	ldrh	r3, [r3, #0]
 800ab2a:	2b2e      	cmp	r3, #46	; 0x2e
 800ab2c:	d0ee      	beq.n	800ab0c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ab2e:	69bb      	ldr	r3, [r7, #24]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d009      	beq.n	800ab48 <create_name+0x168>
 800ab34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab38:	f043 0303 	orr.w	r3, r3, #3
 800ab3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ab40:	e002      	b.n	800ab48 <create_name+0x168>
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	3b01      	subs	r3, #1
 800ab46:	617b      	str	r3, [r7, #20]
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d009      	beq.n	800ab62 <create_name+0x182>
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ab54:	3b01      	subs	r3, #1
 800ab56:	005b      	lsls	r3, r3, #1
 800ab58:	68fa      	ldr	r2, [r7, #12]
 800ab5a:	4413      	add	r3, r2
 800ab5c:	881b      	ldrh	r3, [r3, #0]
 800ab5e:	2b2e      	cmp	r3, #46	; 0x2e
 800ab60:	d1ef      	bne.n	800ab42 <create_name+0x162>

	i = b = 0; ni = 8;
 800ab62:	2300      	movs	r3, #0
 800ab64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ab68:	2300      	movs	r3, #0
 800ab6a:	623b      	str	r3, [r7, #32]
 800ab6c:	2308      	movs	r3, #8
 800ab6e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ab70:	69bb      	ldr	r3, [r7, #24]
 800ab72:	1c5a      	adds	r2, r3, #1
 800ab74:	61ba      	str	r2, [r7, #24]
 800ab76:	005b      	lsls	r3, r3, #1
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	4413      	add	r3, r2
 800ab7c:	881b      	ldrh	r3, [r3, #0]
 800ab7e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ab80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	f000 8090 	beq.w	800aca8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ab88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab8a:	2b20      	cmp	r3, #32
 800ab8c:	d006      	beq.n	800ab9c <create_name+0x1bc>
 800ab8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab90:	2b2e      	cmp	r3, #46	; 0x2e
 800ab92:	d10a      	bne.n	800abaa <create_name+0x1ca>
 800ab94:	69ba      	ldr	r2, [r7, #24]
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d006      	beq.n	800abaa <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800ab9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aba0:	f043 0303 	orr.w	r3, r3, #3
 800aba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aba8:	e07d      	b.n	800aca6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800abaa:	6a3a      	ldr	r2, [r7, #32]
 800abac:	69fb      	ldr	r3, [r7, #28]
 800abae:	429a      	cmp	r2, r3
 800abb0:	d203      	bcs.n	800abba <create_name+0x1da>
 800abb2:	69ba      	ldr	r2, [r7, #24]
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d123      	bne.n	800ac02 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	2b0b      	cmp	r3, #11
 800abbe:	d106      	bne.n	800abce <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800abc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abc4:	f043 0303 	orr.w	r3, r3, #3
 800abc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800abcc:	e075      	b.n	800acba <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800abce:	69ba      	ldr	r2, [r7, #24]
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d005      	beq.n	800abe2 <create_name+0x202>
 800abd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abda:	f043 0303 	orr.w	r3, r3, #3
 800abde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800abe2:	69ba      	ldr	r2, [r7, #24]
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d866      	bhi.n	800acb8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	61bb      	str	r3, [r7, #24]
 800abee:	2308      	movs	r3, #8
 800abf0:	623b      	str	r3, [r7, #32]
 800abf2:	230b      	movs	r3, #11
 800abf4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800abf6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ac00:	e051      	b.n	800aca6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ac02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac04:	2b7f      	cmp	r3, #127	; 0x7f
 800ac06:	d914      	bls.n	800ac32 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ac08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac0a:	2100      	movs	r1, #0
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f002 f873 	bl	800ccf8 <ff_convert>
 800ac12:	4603      	mov	r3, r0
 800ac14:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ac16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d004      	beq.n	800ac26 <create_name+0x246>
 800ac1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac1e:	3b80      	subs	r3, #128	; 0x80
 800ac20:	4a23      	ldr	r2, [pc, #140]	; (800acb0 <create_name+0x2d0>)
 800ac22:	5cd3      	ldrb	r3, [r2, r3]
 800ac24:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ac26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac2a:	f043 0302 	orr.w	r3, r3, #2
 800ac2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ac32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d007      	beq.n	800ac48 <create_name+0x268>
 800ac38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	481d      	ldr	r0, [pc, #116]	; (800acb4 <create_name+0x2d4>)
 800ac3e:	f7fe f9ca 	bl	8008fd6 <chk_chr>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d008      	beq.n	800ac5a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ac48:	235f      	movs	r3, #95	; 0x5f
 800ac4a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ac4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac50:	f043 0303 	orr.w	r3, r3, #3
 800ac54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ac58:	e01b      	b.n	800ac92 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ac5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac5c:	2b40      	cmp	r3, #64	; 0x40
 800ac5e:	d909      	bls.n	800ac74 <create_name+0x294>
 800ac60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac62:	2b5a      	cmp	r3, #90	; 0x5a
 800ac64:	d806      	bhi.n	800ac74 <create_name+0x294>
					b |= 2;
 800ac66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ac6a:	f043 0302 	orr.w	r3, r3, #2
 800ac6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ac72:	e00e      	b.n	800ac92 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ac74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac76:	2b60      	cmp	r3, #96	; 0x60
 800ac78:	d90b      	bls.n	800ac92 <create_name+0x2b2>
 800ac7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac7c:	2b7a      	cmp	r3, #122	; 0x7a
 800ac7e:	d808      	bhi.n	800ac92 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800ac80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ac84:	f043 0301 	orr.w	r3, r3, #1
 800ac88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ac8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac8e:	3b20      	subs	r3, #32
 800ac90:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ac92:	6a3b      	ldr	r3, [r7, #32]
 800ac94:	1c5a      	adds	r2, r3, #1
 800ac96:	623a      	str	r2, [r7, #32]
 800ac98:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ac9a:	b2d1      	uxtb	r1, r2
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	4413      	add	r3, r2
 800aca0:	460a      	mov	r2, r1
 800aca2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800aca6:	e763      	b.n	800ab70 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800aca8:	bf00      	nop
 800acaa:	e006      	b.n	800acba <create_name+0x2da>
 800acac:	08012308 	.word	0x08012308
 800acb0:	08012404 	.word	0x08012404
 800acb4:	08012314 	.word	0x08012314
			if (si > di) break;			/* No extension */
 800acb8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800acc0:	2be5      	cmp	r3, #229	; 0xe5
 800acc2:	d103      	bne.n	800accc <create_name+0x2ec>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2205      	movs	r2, #5
 800acc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800accc:	69fb      	ldr	r3, [r7, #28]
 800acce:	2b08      	cmp	r3, #8
 800acd0:	d104      	bne.n	800acdc <create_name+0x2fc>
 800acd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800acdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ace0:	f003 030c 	and.w	r3, r3, #12
 800ace4:	2b0c      	cmp	r3, #12
 800ace6:	d005      	beq.n	800acf4 <create_name+0x314>
 800ace8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800acec:	f003 0303 	and.w	r3, r3, #3
 800acf0:	2b03      	cmp	r3, #3
 800acf2:	d105      	bne.n	800ad00 <create_name+0x320>
 800acf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800acf8:	f043 0302 	orr.w	r3, r3, #2
 800acfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ad00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad04:	f003 0302 	and.w	r3, r3, #2
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d117      	bne.n	800ad3c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ad0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ad10:	f003 0303 	and.w	r3, r3, #3
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	d105      	bne.n	800ad24 <create_name+0x344>
 800ad18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad1c:	f043 0310 	orr.w	r3, r3, #16
 800ad20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ad24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ad28:	f003 030c 	and.w	r3, r3, #12
 800ad2c:	2b04      	cmp	r3, #4
 800ad2e:	d105      	bne.n	800ad3c <create_name+0x35c>
 800ad30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad34:	f043 0308 	orr.w	r3, r3, #8
 800ad38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ad42:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800ad46:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3728      	adds	r7, #40	; 0x28
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b086      	sub	sp, #24
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ad64:	e002      	b.n	800ad6c <follow_path+0x1c>
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	3301      	adds	r3, #1
 800ad6a:	603b      	str	r3, [r7, #0]
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	2b2f      	cmp	r3, #47	; 0x2f
 800ad72:	d0f8      	beq.n	800ad66 <follow_path+0x16>
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	2b5c      	cmp	r3, #92	; 0x5c
 800ad7a:	d0f4      	beq.n	800ad66 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	2b1f      	cmp	r3, #31
 800ad88:	d80a      	bhi.n	800ada0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2280      	movs	r2, #128	; 0x80
 800ad8e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ad92:	2100      	movs	r1, #0
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f7fe fecb 	bl	8009b30 <dir_sdi>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	75fb      	strb	r3, [r7, #23]
 800ad9e:	e048      	b.n	800ae32 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ada0:	463b      	mov	r3, r7
 800ada2:	4619      	mov	r1, r3
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f7ff fe1b 	bl	800a9e0 <create_name>
 800adaa:	4603      	mov	r3, r0
 800adac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800adae:	7dfb      	ldrb	r3, [r7, #23]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d139      	bne.n	800ae28 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f7ff fb33 	bl	800a420 <dir_find>
 800adba:	4603      	mov	r3, r0
 800adbc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800adc4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800adc6:	7dfb      	ldrb	r3, [r7, #23]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d00a      	beq.n	800ade2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800adcc:	7dfb      	ldrb	r3, [r7, #23]
 800adce:	2b04      	cmp	r3, #4
 800add0:	d12c      	bne.n	800ae2c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800add2:	7afb      	ldrb	r3, [r7, #11]
 800add4:	f003 0304 	and.w	r3, r3, #4
 800add8:	2b00      	cmp	r3, #0
 800adda:	d127      	bne.n	800ae2c <follow_path+0xdc>
 800addc:	2305      	movs	r3, #5
 800adde:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ade0:	e024      	b.n	800ae2c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ade2:	7afb      	ldrb	r3, [r7, #11]
 800ade4:	f003 0304 	and.w	r3, r3, #4
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d121      	bne.n	800ae30 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	799b      	ldrb	r3, [r3, #6]
 800adf0:	f003 0310 	and.w	r3, r3, #16
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d102      	bne.n	800adfe <follow_path+0xae>
				res = FR_NO_PATH; break;
 800adf8:	2305      	movs	r3, #5
 800adfa:	75fb      	strb	r3, [r7, #23]
 800adfc:	e019      	b.n	800ae32 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	695b      	ldr	r3, [r3, #20]
 800ae08:	68fa      	ldr	r2, [r7, #12]
 800ae0a:	8992      	ldrh	r2, [r2, #12]
 800ae0c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ae10:	fb00 f202 	mul.w	r2, r0, r2
 800ae14:	1a9b      	subs	r3, r3, r2
 800ae16:	440b      	add	r3, r1
 800ae18:	4619      	mov	r1, r3
 800ae1a:	68f8      	ldr	r0, [r7, #12]
 800ae1c:	f7ff f82e 	bl	8009e7c <ld_clust>
 800ae20:	4602      	mov	r2, r0
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ae26:	e7bb      	b.n	800ada0 <follow_path+0x50>
			if (res != FR_OK) break;
 800ae28:	bf00      	nop
 800ae2a:	e002      	b.n	800ae32 <follow_path+0xe2>
				break;
 800ae2c:	bf00      	nop
 800ae2e:	e000      	b.n	800ae32 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ae30:	bf00      	nop
			}
		}
	}

	return res;
 800ae32:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3718      	adds	r7, #24
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b087      	sub	sp, #28
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ae44:	f04f 33ff 	mov.w	r3, #4294967295
 800ae48:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d031      	beq.n	800aeb6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	617b      	str	r3, [r7, #20]
 800ae58:	e002      	b.n	800ae60 <get_ldnumber+0x24>
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	617b      	str	r3, [r7, #20]
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	2b1f      	cmp	r3, #31
 800ae66:	d903      	bls.n	800ae70 <get_ldnumber+0x34>
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	2b3a      	cmp	r3, #58	; 0x3a
 800ae6e:	d1f4      	bne.n	800ae5a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	2b3a      	cmp	r3, #58	; 0x3a
 800ae76:	d11c      	bne.n	800aeb2 <get_ldnumber+0x76>
			tp = *path;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	1c5a      	adds	r2, r3, #1
 800ae82:	60fa      	str	r2, [r7, #12]
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	3b30      	subs	r3, #48	; 0x30
 800ae88:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	2b09      	cmp	r3, #9
 800ae8e:	d80e      	bhi.n	800aeae <get_ldnumber+0x72>
 800ae90:	68fa      	ldr	r2, [r7, #12]
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d10a      	bne.n	800aeae <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d107      	bne.n	800aeae <get_ldnumber+0x72>
					vol = (int)i;
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	3301      	adds	r3, #1
 800aea6:	617b      	str	r3, [r7, #20]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	697a      	ldr	r2, [r7, #20]
 800aeac:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	e002      	b.n	800aeb8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800aeb6:	693b      	ldr	r3, [r7, #16]
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	371c      	adds	r7, #28
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2200      	movs	r2, #0
 800aed2:	70da      	strb	r2, [r3, #3]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f04f 32ff 	mov.w	r2, #4294967295
 800aeda:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800aedc:	6839      	ldr	r1, [r7, #0]
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f7fe fa44 	bl	800936c <move_window>
 800aee4:	4603      	mov	r3, r0
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d001      	beq.n	800aeee <check_fs+0x2a>
 800aeea:	2304      	movs	r3, #4
 800aeec:	e038      	b.n	800af60 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	3338      	adds	r3, #56	; 0x38
 800aef2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7fd ff88 	bl	8008e0c <ld_word>
 800aefc:	4603      	mov	r3, r0
 800aefe:	461a      	mov	r2, r3
 800af00:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800af04:	429a      	cmp	r2, r3
 800af06:	d001      	beq.n	800af0c <check_fs+0x48>
 800af08:	2303      	movs	r3, #3
 800af0a:	e029      	b.n	800af60 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800af12:	2be9      	cmp	r3, #233	; 0xe9
 800af14:	d009      	beq.n	800af2a <check_fs+0x66>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800af1c:	2beb      	cmp	r3, #235	; 0xeb
 800af1e:	d11e      	bne.n	800af5e <check_fs+0x9a>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800af26:	2b90      	cmp	r3, #144	; 0x90
 800af28:	d119      	bne.n	800af5e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	3338      	adds	r3, #56	; 0x38
 800af2e:	3336      	adds	r3, #54	; 0x36
 800af30:	4618      	mov	r0, r3
 800af32:	f7fd ff83 	bl	8008e3c <ld_dword>
 800af36:	4603      	mov	r3, r0
 800af38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800af3c:	4a0a      	ldr	r2, [pc, #40]	; (800af68 <check_fs+0xa4>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d101      	bne.n	800af46 <check_fs+0x82>
 800af42:	2300      	movs	r3, #0
 800af44:	e00c      	b.n	800af60 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	3338      	adds	r3, #56	; 0x38
 800af4a:	3352      	adds	r3, #82	; 0x52
 800af4c:	4618      	mov	r0, r3
 800af4e:	f7fd ff75 	bl	8008e3c <ld_dword>
 800af52:	4603      	mov	r3, r0
 800af54:	4a05      	ldr	r2, [pc, #20]	; (800af6c <check_fs+0xa8>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d101      	bne.n	800af5e <check_fs+0x9a>
 800af5a:	2300      	movs	r3, #0
 800af5c:	e000      	b.n	800af60 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800af5e:	2302      	movs	r3, #2
}
 800af60:	4618      	mov	r0, r3
 800af62:	3708      	adds	r7, #8
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}
 800af68:	00544146 	.word	0x00544146
 800af6c:	33544146 	.word	0x33544146

0800af70 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b096      	sub	sp, #88	; 0x58
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	4613      	mov	r3, r2
 800af7c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	2200      	movs	r2, #0
 800af82:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800af84:	68f8      	ldr	r0, [r7, #12]
 800af86:	f7ff ff59 	bl	800ae3c <get_ldnumber>
 800af8a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800af8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af8e:	2b00      	cmp	r3, #0
 800af90:	da01      	bge.n	800af96 <find_volume+0x26>
 800af92:	230b      	movs	r3, #11
 800af94:	e265      	b.n	800b462 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800af96:	4a9f      	ldr	r2, [pc, #636]	; (800b214 <find_volume+0x2a4>)
 800af98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af9e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800afa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d101      	bne.n	800afaa <find_volume+0x3a>
 800afa6:	230c      	movs	r3, #12
 800afa8:	e25b      	b.n	800b462 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800afb0:	79fb      	ldrb	r3, [r7, #7]
 800afb2:	f023 0301 	bic.w	r3, r3, #1
 800afb6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800afb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d01a      	beq.n	800aff6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800afc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc2:	785b      	ldrb	r3, [r3, #1]
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7fd fe83 	bl	8008cd0 <disk_status>
 800afca:	4603      	mov	r3, r0
 800afcc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800afd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800afd4:	f003 0301 	and.w	r3, r3, #1
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d10c      	bne.n	800aff6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800afdc:	79fb      	ldrb	r3, [r7, #7]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d007      	beq.n	800aff2 <find_volume+0x82>
 800afe2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800afe6:	f003 0304 	and.w	r3, r3, #4
 800afea:	2b00      	cmp	r3, #0
 800afec:	d001      	beq.n	800aff2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800afee:	230a      	movs	r3, #10
 800aff0:	e237      	b.n	800b462 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800aff2:	2300      	movs	r3, #0
 800aff4:	e235      	b.n	800b462 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800aff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff8:	2200      	movs	r2, #0
 800affa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800affc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800affe:	b2da      	uxtb	r2, r3
 800b000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b002:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b006:	785b      	ldrb	r3, [r3, #1]
 800b008:	4618      	mov	r0, r3
 800b00a:	f7fd fe7b 	bl	8008d04 <disk_initialize>
 800b00e:	4603      	mov	r3, r0
 800b010:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b014:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b018:	f003 0301 	and.w	r3, r3, #1
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d001      	beq.n	800b024 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b020:	2303      	movs	r3, #3
 800b022:	e21e      	b.n	800b462 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b024:	79fb      	ldrb	r3, [r7, #7]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d007      	beq.n	800b03a <find_volume+0xca>
 800b02a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b02e:	f003 0304 	and.w	r3, r3, #4
 800b032:	2b00      	cmp	r3, #0
 800b034:	d001      	beq.n	800b03a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b036:	230a      	movs	r3, #10
 800b038:	e213      	b.n	800b462 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03c:	7858      	ldrb	r0, [r3, #1]
 800b03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b040:	330c      	adds	r3, #12
 800b042:	461a      	mov	r2, r3
 800b044:	2102      	movs	r1, #2
 800b046:	f7fd fec3 	bl	8008dd0 <disk_ioctl>
 800b04a:	4603      	mov	r3, r0
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d001      	beq.n	800b054 <find_volume+0xe4>
 800b050:	2301      	movs	r3, #1
 800b052:	e206      	b.n	800b462 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b056:	899b      	ldrh	r3, [r3, #12]
 800b058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b05c:	d80d      	bhi.n	800b07a <find_volume+0x10a>
 800b05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b060:	899b      	ldrh	r3, [r3, #12]
 800b062:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b066:	d308      	bcc.n	800b07a <find_volume+0x10a>
 800b068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06a:	899b      	ldrh	r3, [r3, #12]
 800b06c:	461a      	mov	r2, r3
 800b06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b070:	899b      	ldrh	r3, [r3, #12]
 800b072:	3b01      	subs	r3, #1
 800b074:	4013      	ands	r3, r2
 800b076:	2b00      	cmp	r3, #0
 800b078:	d001      	beq.n	800b07e <find_volume+0x10e>
 800b07a:	2301      	movs	r3, #1
 800b07c:	e1f1      	b.n	800b462 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b07e:	2300      	movs	r3, #0
 800b080:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b082:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b084:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b086:	f7ff ff1d 	bl	800aec4 <check_fs>
 800b08a:	4603      	mov	r3, r0
 800b08c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b090:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b094:	2b02      	cmp	r3, #2
 800b096:	d149      	bne.n	800b12c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b098:	2300      	movs	r3, #0
 800b09a:	643b      	str	r3, [r7, #64]	; 0x40
 800b09c:	e01e      	b.n	800b0dc <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b0a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0a6:	011b      	lsls	r3, r3, #4
 800b0a8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b0ac:	4413      	add	r3, r2
 800b0ae:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b2:	3304      	adds	r3, #4
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d006      	beq.n	800b0c8 <find_volume+0x158>
 800b0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0bc:	3308      	adds	r3, #8
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7fd febc 	bl	8008e3c <ld_dword>
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	e000      	b.n	800b0ca <find_volume+0x15a>
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0cc:	009b      	lsls	r3, r3, #2
 800b0ce:	3358      	adds	r3, #88	; 0x58
 800b0d0:	443b      	add	r3, r7
 800b0d2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b0d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0d8:	3301      	adds	r3, #1
 800b0da:	643b      	str	r3, [r7, #64]	; 0x40
 800b0dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0de:	2b03      	cmp	r3, #3
 800b0e0:	d9dd      	bls.n	800b09e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b0e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d002      	beq.n	800b0f2 <find_volume+0x182>
 800b0ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0ee:	3b01      	subs	r3, #1
 800b0f0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b0f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	3358      	adds	r3, #88	; 0x58
 800b0f8:	443b      	add	r3, r7
 800b0fa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b0fe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b102:	2b00      	cmp	r3, #0
 800b104:	d005      	beq.n	800b112 <find_volume+0x1a2>
 800b106:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b108:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b10a:	f7ff fedb 	bl	800aec4 <check_fs>
 800b10e:	4603      	mov	r3, r0
 800b110:	e000      	b.n	800b114 <find_volume+0x1a4>
 800b112:	2303      	movs	r3, #3
 800b114:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b118:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d905      	bls.n	800b12c <find_volume+0x1bc>
 800b120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b122:	3301      	adds	r3, #1
 800b124:	643b      	str	r3, [r7, #64]	; 0x40
 800b126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b128:	2b03      	cmp	r3, #3
 800b12a:	d9e2      	bls.n	800b0f2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b12c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b130:	2b04      	cmp	r3, #4
 800b132:	d101      	bne.n	800b138 <find_volume+0x1c8>
 800b134:	2301      	movs	r3, #1
 800b136:	e194      	b.n	800b462 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b138:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d901      	bls.n	800b144 <find_volume+0x1d4>
 800b140:	230d      	movs	r3, #13
 800b142:	e18e      	b.n	800b462 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b146:	3338      	adds	r3, #56	; 0x38
 800b148:	330b      	adds	r3, #11
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7fd fe5e 	bl	8008e0c <ld_word>
 800b150:	4603      	mov	r3, r0
 800b152:	461a      	mov	r2, r3
 800b154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b156:	899b      	ldrh	r3, [r3, #12]
 800b158:	429a      	cmp	r2, r3
 800b15a:	d001      	beq.n	800b160 <find_volume+0x1f0>
 800b15c:	230d      	movs	r3, #13
 800b15e:	e180      	b.n	800b462 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b162:	3338      	adds	r3, #56	; 0x38
 800b164:	3316      	adds	r3, #22
 800b166:	4618      	mov	r0, r3
 800b168:	f7fd fe50 	bl	8008e0c <ld_word>
 800b16c:	4603      	mov	r3, r0
 800b16e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b172:	2b00      	cmp	r3, #0
 800b174:	d106      	bne.n	800b184 <find_volume+0x214>
 800b176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b178:	3338      	adds	r3, #56	; 0x38
 800b17a:	3324      	adds	r3, #36	; 0x24
 800b17c:	4618      	mov	r0, r3
 800b17e:	f7fd fe5d 	bl	8008e3c <ld_dword>
 800b182:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b186:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b188:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800b190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b192:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b196:	789b      	ldrb	r3, [r3, #2]
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d005      	beq.n	800b1a8 <find_volume+0x238>
 800b19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19e:	789b      	ldrb	r3, [r3, #2]
 800b1a0:	2b02      	cmp	r3, #2
 800b1a2:	d001      	beq.n	800b1a8 <find_volume+0x238>
 800b1a4:	230d      	movs	r3, #13
 800b1a6:	e15c      	b.n	800b462 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1aa:	789b      	ldrb	r3, [r3, #2]
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1b0:	fb02 f303 	mul.w	r3, r2, r3
 800b1b4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1bc:	b29a      	uxth	r2, r3
 800b1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c4:	895b      	ldrh	r3, [r3, #10]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d008      	beq.n	800b1dc <find_volume+0x26c>
 800b1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1cc:	895b      	ldrh	r3, [r3, #10]
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d2:	895b      	ldrh	r3, [r3, #10]
 800b1d4:	3b01      	subs	r3, #1
 800b1d6:	4013      	ands	r3, r2
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d001      	beq.n	800b1e0 <find_volume+0x270>
 800b1dc:	230d      	movs	r3, #13
 800b1de:	e140      	b.n	800b462 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e2:	3338      	adds	r3, #56	; 0x38
 800b1e4:	3311      	adds	r3, #17
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7fd fe10 	bl	8008e0c <ld_word>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f6:	891b      	ldrh	r3, [r3, #8]
 800b1f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1fa:	8992      	ldrh	r2, [r2, #12]
 800b1fc:	0952      	lsrs	r2, r2, #5
 800b1fe:	b292      	uxth	r2, r2
 800b200:	fbb3 f1f2 	udiv	r1, r3, r2
 800b204:	fb01 f202 	mul.w	r2, r1, r2
 800b208:	1a9b      	subs	r3, r3, r2
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d003      	beq.n	800b218 <find_volume+0x2a8>
 800b210:	230d      	movs	r3, #13
 800b212:	e126      	b.n	800b462 <find_volume+0x4f2>
 800b214:	200022c8 	.word	0x200022c8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21a:	3338      	adds	r3, #56	; 0x38
 800b21c:	3313      	adds	r3, #19
 800b21e:	4618      	mov	r0, r3
 800b220:	f7fd fdf4 	bl	8008e0c <ld_word>
 800b224:	4603      	mov	r3, r0
 800b226:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d106      	bne.n	800b23c <find_volume+0x2cc>
 800b22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b230:	3338      	adds	r3, #56	; 0x38
 800b232:	3320      	adds	r3, #32
 800b234:	4618      	mov	r0, r3
 800b236:	f7fd fe01 	bl	8008e3c <ld_dword>
 800b23a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b23e:	3338      	adds	r3, #56	; 0x38
 800b240:	330e      	adds	r3, #14
 800b242:	4618      	mov	r0, r3
 800b244:	f7fd fde2 	bl	8008e0c <ld_word>
 800b248:	4603      	mov	r3, r0
 800b24a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b24c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d101      	bne.n	800b256 <find_volume+0x2e6>
 800b252:	230d      	movs	r3, #13
 800b254:	e105      	b.n	800b462 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b256:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b25a:	4413      	add	r3, r2
 800b25c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b25e:	8911      	ldrh	r1, [r2, #8]
 800b260:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b262:	8992      	ldrh	r2, [r2, #12]
 800b264:	0952      	lsrs	r2, r2, #5
 800b266:	b292      	uxth	r2, r2
 800b268:	fbb1 f2f2 	udiv	r2, r1, r2
 800b26c:	b292      	uxth	r2, r2
 800b26e:	4413      	add	r3, r2
 800b270:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b272:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b276:	429a      	cmp	r2, r3
 800b278:	d201      	bcs.n	800b27e <find_volume+0x30e>
 800b27a:	230d      	movs	r3, #13
 800b27c:	e0f1      	b.n	800b462 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b27e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b282:	1ad3      	subs	r3, r2, r3
 800b284:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b286:	8952      	ldrh	r2, [r2, #10]
 800b288:	fbb3 f3f2 	udiv	r3, r3, r2
 800b28c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b290:	2b00      	cmp	r3, #0
 800b292:	d101      	bne.n	800b298 <find_volume+0x328>
 800b294:	230d      	movs	r3, #13
 800b296:	e0e4      	b.n	800b462 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800b298:	2303      	movs	r3, #3
 800b29a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d802      	bhi.n	800b2ae <find_volume+0x33e>
 800b2a8:	2302      	movs	r3, #2
 800b2aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d802      	bhi.n	800b2be <find_volume+0x34e>
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c0:	1c9a      	adds	r2, r3, #2
 800b2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800b2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b2ca:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b2cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b2ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2d0:	441a      	add	r2, r3
 800b2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800b2d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2da:	441a      	add	r2, r3
 800b2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2de:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800b2e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b2e4:	2b03      	cmp	r3, #3
 800b2e6:	d11e      	bne.n	800b326 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ea:	3338      	adds	r3, #56	; 0x38
 800b2ec:	332a      	adds	r3, #42	; 0x2a
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7fd fd8c 	bl	8008e0c <ld_word>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d001      	beq.n	800b2fe <find_volume+0x38e>
 800b2fa:	230d      	movs	r3, #13
 800b2fc:	e0b1      	b.n	800b462 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b300:	891b      	ldrh	r3, [r3, #8]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d001      	beq.n	800b30a <find_volume+0x39a>
 800b306:	230d      	movs	r3, #13
 800b308:	e0ab      	b.n	800b462 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b30c:	3338      	adds	r3, #56	; 0x38
 800b30e:	332c      	adds	r3, #44	; 0x2c
 800b310:	4618      	mov	r0, r3
 800b312:	f7fd fd93 	bl	8008e3c <ld_dword>
 800b316:	4602      	mov	r2, r0
 800b318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31e:	69db      	ldr	r3, [r3, #28]
 800b320:	009b      	lsls	r3, r3, #2
 800b322:	647b      	str	r3, [r7, #68]	; 0x44
 800b324:	e01f      	b.n	800b366 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b328:	891b      	ldrh	r3, [r3, #8]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d101      	bne.n	800b332 <find_volume+0x3c2>
 800b32e:	230d      	movs	r3, #13
 800b330:	e097      	b.n	800b462 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b334:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b338:	441a      	add	r2, r3
 800b33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b33c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b33e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b342:	2b02      	cmp	r3, #2
 800b344:	d103      	bne.n	800b34e <find_volume+0x3de>
 800b346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b348:	69db      	ldr	r3, [r3, #28]
 800b34a:	005b      	lsls	r3, r3, #1
 800b34c:	e00a      	b.n	800b364 <find_volume+0x3f4>
 800b34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b350:	69da      	ldr	r2, [r3, #28]
 800b352:	4613      	mov	r3, r2
 800b354:	005b      	lsls	r3, r3, #1
 800b356:	4413      	add	r3, r2
 800b358:	085a      	lsrs	r2, r3, #1
 800b35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b35c:	69db      	ldr	r3, [r3, #28]
 800b35e:	f003 0301 	and.w	r3, r3, #1
 800b362:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b364:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b368:	6a1a      	ldr	r2, [r3, #32]
 800b36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36c:	899b      	ldrh	r3, [r3, #12]
 800b36e:	4619      	mov	r1, r3
 800b370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b372:	440b      	add	r3, r1
 800b374:	3b01      	subs	r3, #1
 800b376:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b378:	8989      	ldrh	r1, [r1, #12]
 800b37a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b37e:	429a      	cmp	r2, r3
 800b380:	d201      	bcs.n	800b386 <find_volume+0x416>
 800b382:	230d      	movs	r3, #13
 800b384:	e06d      	b.n	800b462 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b388:	f04f 32ff 	mov.w	r2, #4294967295
 800b38c:	619a      	str	r2, [r3, #24]
 800b38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b390:	699a      	ldr	r2, [r3, #24]
 800b392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b394:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800b396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b398:	2280      	movs	r2, #128	; 0x80
 800b39a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b39c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3a0:	2b03      	cmp	r3, #3
 800b3a2:	d149      	bne.n	800b438 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a6:	3338      	adds	r3, #56	; 0x38
 800b3a8:	3330      	adds	r3, #48	; 0x30
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7fd fd2e 	bl	8008e0c <ld_word>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d140      	bne.n	800b438 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b3b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	4619      	mov	r1, r3
 800b3bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b3be:	f7fd ffd5 	bl	800936c <move_window>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d137      	bne.n	800b438 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800b3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d0:	3338      	adds	r3, #56	; 0x38
 800b3d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f7fd fd18 	bl	8008e0c <ld_word>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	461a      	mov	r2, r3
 800b3e0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d127      	bne.n	800b438 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ea:	3338      	adds	r3, #56	; 0x38
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7fd fd25 	bl	8008e3c <ld_dword>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	4a1d      	ldr	r2, [pc, #116]	; (800b46c <find_volume+0x4fc>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d11e      	bne.n	800b438 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3fc:	3338      	adds	r3, #56	; 0x38
 800b3fe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b402:	4618      	mov	r0, r3
 800b404:	f7fd fd1a 	bl	8008e3c <ld_dword>
 800b408:	4603      	mov	r3, r0
 800b40a:	4a19      	ldr	r2, [pc, #100]	; (800b470 <find_volume+0x500>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d113      	bne.n	800b438 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b412:	3338      	adds	r3, #56	; 0x38
 800b414:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b418:	4618      	mov	r0, r3
 800b41a:	f7fd fd0f 	bl	8008e3c <ld_dword>
 800b41e:	4602      	mov	r2, r0
 800b420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b422:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b426:	3338      	adds	r3, #56	; 0x38
 800b428:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b42c:	4618      	mov	r0, r3
 800b42e:	f7fd fd05 	bl	8008e3c <ld_dword>
 800b432:	4602      	mov	r2, r0
 800b434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b436:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b43e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b440:	4b0c      	ldr	r3, [pc, #48]	; (800b474 <find_volume+0x504>)
 800b442:	881b      	ldrh	r3, [r3, #0]
 800b444:	3301      	adds	r3, #1
 800b446:	b29a      	uxth	r2, r3
 800b448:	4b0a      	ldr	r3, [pc, #40]	; (800b474 <find_volume+0x504>)
 800b44a:	801a      	strh	r2, [r3, #0]
 800b44c:	4b09      	ldr	r3, [pc, #36]	; (800b474 <find_volume+0x504>)
 800b44e:	881a      	ldrh	r2, [r3, #0]
 800b450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b452:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800b454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b456:	4a08      	ldr	r2, [pc, #32]	; (800b478 <find_volume+0x508>)
 800b458:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b45a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b45c:	f7fd ff1e 	bl	800929c <clear_lock>
#endif
	return FR_OK;
 800b460:	2300      	movs	r3, #0
}
 800b462:	4618      	mov	r0, r3
 800b464:	3758      	adds	r7, #88	; 0x58
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
 800b46a:	bf00      	nop
 800b46c:	41615252 	.word	0x41615252
 800b470:	61417272 	.word	0x61417272
 800b474:	200022cc 	.word	0x200022cc
 800b478:	200022f0 	.word	0x200022f0

0800b47c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b486:	2309      	movs	r3, #9
 800b488:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d01c      	beq.n	800b4ca <validate+0x4e>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d018      	beq.n	800b4ca <validate+0x4e>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d013      	beq.n	800b4ca <validate+0x4e>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	889a      	ldrh	r2, [r3, #4]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	88db      	ldrh	r3, [r3, #6]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d10c      	bne.n	800b4ca <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	785b      	ldrb	r3, [r3, #1]
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7fd fc0a 	bl	8008cd0 <disk_status>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	f003 0301 	and.w	r3, r3, #1
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d101      	bne.n	800b4ca <validate+0x4e>
			res = FR_OK;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b4ca:	7bfb      	ldrb	r3, [r7, #15]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d102      	bne.n	800b4d6 <validate+0x5a>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	e000      	b.n	800b4d8 <validate+0x5c>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	683a      	ldr	r2, [r7, #0]
 800b4da:	6013      	str	r3, [r2, #0]
	return res;
 800b4dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3710      	adds	r7, #16
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}
	...

0800b4e8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b088      	sub	sp, #32
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	60f8      	str	r0, [r7, #12]
 800b4f0:	60b9      	str	r1, [r7, #8]
 800b4f2:	4613      	mov	r3, r2
 800b4f4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b4fa:	f107 0310 	add.w	r3, r7, #16
 800b4fe:	4618      	mov	r0, r3
 800b500:	f7ff fc9c 	bl	800ae3c <get_ldnumber>
 800b504:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b506:	69fb      	ldr	r3, [r7, #28]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	da01      	bge.n	800b510 <f_mount+0x28>
 800b50c:	230b      	movs	r3, #11
 800b50e:	e02b      	b.n	800b568 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b510:	4a17      	ldr	r2, [pc, #92]	; (800b570 <f_mount+0x88>)
 800b512:	69fb      	ldr	r3, [r7, #28]
 800b514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b518:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b51a:	69bb      	ldr	r3, [r7, #24]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d005      	beq.n	800b52c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b520:	69b8      	ldr	r0, [r7, #24]
 800b522:	f7fd febb 	bl	800929c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b526:	69bb      	ldr	r3, [r7, #24]
 800b528:	2200      	movs	r2, #0
 800b52a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d002      	beq.n	800b538 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	2200      	movs	r2, #0
 800b536:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b538:	68fa      	ldr	r2, [r7, #12]
 800b53a:	490d      	ldr	r1, [pc, #52]	; (800b570 <f_mount+0x88>)
 800b53c:	69fb      	ldr	r3, [r7, #28]
 800b53e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d002      	beq.n	800b54e <f_mount+0x66>
 800b548:	79fb      	ldrb	r3, [r7, #7]
 800b54a:	2b01      	cmp	r3, #1
 800b54c:	d001      	beq.n	800b552 <f_mount+0x6a>
 800b54e:	2300      	movs	r3, #0
 800b550:	e00a      	b.n	800b568 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b552:	f107 010c 	add.w	r1, r7, #12
 800b556:	f107 0308 	add.w	r3, r7, #8
 800b55a:	2200      	movs	r2, #0
 800b55c:	4618      	mov	r0, r3
 800b55e:	f7ff fd07 	bl	800af70 <find_volume>
 800b562:	4603      	mov	r3, r0
 800b564:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b566:	7dfb      	ldrb	r3, [r7, #23]
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3720      	adds	r7, #32
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}
 800b570:	200022c8 	.word	0x200022c8

0800b574 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b09a      	sub	sp, #104	; 0x68
 800b578:	af00      	add	r7, sp, #0
 800b57a:	60f8      	str	r0, [r7, #12]
 800b57c:	60b9      	str	r1, [r7, #8]
 800b57e:	4613      	mov	r3, r2
 800b580:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d101      	bne.n	800b58c <f_open+0x18>
 800b588:	2309      	movs	r3, #9
 800b58a:	e1bb      	b.n	800b904 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b58c:	79fb      	ldrb	r3, [r7, #7]
 800b58e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b592:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b594:	79fa      	ldrb	r2, [r7, #7]
 800b596:	f107 0114 	add.w	r1, r7, #20
 800b59a:	f107 0308 	add.w	r3, r7, #8
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7ff fce6 	bl	800af70 <find_volume>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800b5aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	f040 819f 	bne.w	800b8f2 <f_open+0x37e>
		dj.obj.fs = fs;
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b5b8:	68ba      	ldr	r2, [r7, #8]
 800b5ba:	f107 0318 	add.w	r3, r7, #24
 800b5be:	4611      	mov	r1, r2
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7ff fbc5 	bl	800ad50 <follow_path>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b5cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d11a      	bne.n	800b60a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b5d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b5d8:	b25b      	sxtb	r3, r3
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	da03      	bge.n	800b5e6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800b5de:	2306      	movs	r3, #6
 800b5e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b5e4:	e011      	b.n	800b60a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b5e6:	79fb      	ldrb	r3, [r7, #7]
 800b5e8:	f023 0301 	bic.w	r3, r3, #1
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	bf14      	ite	ne
 800b5f0:	2301      	movne	r3, #1
 800b5f2:	2300      	moveq	r3, #0
 800b5f4:	b2db      	uxtb	r3, r3
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	f107 0318 	add.w	r3, r7, #24
 800b5fc:	4611      	mov	r1, r2
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7fd fd04 	bl	800900c <chk_lock>
 800b604:	4603      	mov	r3, r0
 800b606:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b60a:	79fb      	ldrb	r3, [r7, #7]
 800b60c:	f003 031c 	and.w	r3, r3, #28
 800b610:	2b00      	cmp	r3, #0
 800b612:	d07f      	beq.n	800b714 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b614:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d017      	beq.n	800b64c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b61c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b620:	2b04      	cmp	r3, #4
 800b622:	d10e      	bne.n	800b642 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b624:	f7fd fd4e 	bl	80090c4 <enq_lock>
 800b628:	4603      	mov	r3, r0
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d006      	beq.n	800b63c <f_open+0xc8>
 800b62e:	f107 0318 	add.w	r3, r7, #24
 800b632:	4618      	mov	r0, r3
 800b634:	f7fe ffb4 	bl	800a5a0 <dir_register>
 800b638:	4603      	mov	r3, r0
 800b63a:	e000      	b.n	800b63e <f_open+0xca>
 800b63c:	2312      	movs	r3, #18
 800b63e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b642:	79fb      	ldrb	r3, [r7, #7]
 800b644:	f043 0308 	orr.w	r3, r3, #8
 800b648:	71fb      	strb	r3, [r7, #7]
 800b64a:	e010      	b.n	800b66e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b64c:	7fbb      	ldrb	r3, [r7, #30]
 800b64e:	f003 0311 	and.w	r3, r3, #17
 800b652:	2b00      	cmp	r3, #0
 800b654:	d003      	beq.n	800b65e <f_open+0xea>
					res = FR_DENIED;
 800b656:	2307      	movs	r3, #7
 800b658:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b65c:	e007      	b.n	800b66e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b65e:	79fb      	ldrb	r3, [r7, #7]
 800b660:	f003 0304 	and.w	r3, r3, #4
 800b664:	2b00      	cmp	r3, #0
 800b666:	d002      	beq.n	800b66e <f_open+0xfa>
 800b668:	2308      	movs	r3, #8
 800b66a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b66e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b672:	2b00      	cmp	r3, #0
 800b674:	d168      	bne.n	800b748 <f_open+0x1d4>
 800b676:	79fb      	ldrb	r3, [r7, #7]
 800b678:	f003 0308 	and.w	r3, r3, #8
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d063      	beq.n	800b748 <f_open+0x1d4>
				dw = GET_FATTIME();
 800b680:	f7fb fafc 	bl	8006c7c <get_fattime>
 800b684:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b688:	330e      	adds	r3, #14
 800b68a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b68c:	4618      	mov	r0, r3
 800b68e:	f7fd fc13 	bl	8008eb8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b694:	3316      	adds	r3, #22
 800b696:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b698:	4618      	mov	r0, r3
 800b69a:	f7fd fc0d 	bl	8008eb8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a0:	330b      	adds	r3, #11
 800b6a2:	2220      	movs	r2, #32
 800b6a4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6aa:	4611      	mov	r1, r2
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7fe fbe5 	bl	8009e7c <ld_clust>
 800b6b2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7fe fbfd 	bl	8009eba <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c2:	331c      	adds	r3, #28
 800b6c4:	2100      	movs	r1, #0
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7fd fbf6 	bl	8008eb8 <st_dword>
					fs->wflag = 1;
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b6d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d037      	beq.n	800b748 <f_open+0x1d4>
						dw = fs->winsect;
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6dc:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800b6de:	f107 0318 	add.w	r3, r7, #24
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f7fe f8ed 	bl	80098c6 <remove_chain>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800b6f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d126      	bne.n	800b748 <f_open+0x1d4>
							res = move_window(fs, dw);
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7fd fe34 	bl	800936c <move_window>
 800b704:	4603      	mov	r3, r0
 800b706:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b70e:	3a01      	subs	r2, #1
 800b710:	615a      	str	r2, [r3, #20]
 800b712:	e019      	b.n	800b748 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b714:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d115      	bne.n	800b748 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b71c:	7fbb      	ldrb	r3, [r7, #30]
 800b71e:	f003 0310 	and.w	r3, r3, #16
 800b722:	2b00      	cmp	r3, #0
 800b724:	d003      	beq.n	800b72e <f_open+0x1ba>
					res = FR_NO_FILE;
 800b726:	2304      	movs	r3, #4
 800b728:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b72c:	e00c      	b.n	800b748 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b72e:	79fb      	ldrb	r3, [r7, #7]
 800b730:	f003 0302 	and.w	r3, r3, #2
 800b734:	2b00      	cmp	r3, #0
 800b736:	d007      	beq.n	800b748 <f_open+0x1d4>
 800b738:	7fbb      	ldrb	r3, [r7, #30]
 800b73a:	f003 0301 	and.w	r3, r3, #1
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d002      	beq.n	800b748 <f_open+0x1d4>
						res = FR_DENIED;
 800b742:	2307      	movs	r3, #7
 800b744:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800b748:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d128      	bne.n	800b7a2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b750:	79fb      	ldrb	r3, [r7, #7]
 800b752:	f003 0308 	and.w	r3, r3, #8
 800b756:	2b00      	cmp	r3, #0
 800b758:	d003      	beq.n	800b762 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b75a:	79fb      	ldrb	r3, [r7, #7]
 800b75c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b760:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b76a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b770:	79fb      	ldrb	r3, [r7, #7]
 800b772:	f023 0301 	bic.w	r3, r3, #1
 800b776:	2b00      	cmp	r3, #0
 800b778:	bf14      	ite	ne
 800b77a:	2301      	movne	r3, #1
 800b77c:	2300      	moveq	r3, #0
 800b77e:	b2db      	uxtb	r3, r3
 800b780:	461a      	mov	r2, r3
 800b782:	f107 0318 	add.w	r3, r7, #24
 800b786:	4611      	mov	r1, r2
 800b788:	4618      	mov	r0, r3
 800b78a:	f7fd fcbd 	bl	8009108 <inc_lock>
 800b78e:	4602      	mov	r2, r0
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	691b      	ldr	r3, [r3, #16]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d102      	bne.n	800b7a2 <f_open+0x22e>
 800b79c:	2302      	movs	r3, #2
 800b79e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b7a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	f040 80a3 	bne.w	800b8f2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7b0:	4611      	mov	r1, r2
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7fe fb62 	bl	8009e7c <ld_clust>
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c0:	331c      	adds	r3, #28
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7fd fb3a 	bl	8008e3c <ld_dword>
 800b7c8:	4602      	mov	r2, r0
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b7d4:	697a      	ldr	r2, [r7, #20]
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	88da      	ldrh	r2, [r3, #6]
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	79fa      	ldrb	r2, [r7, #7]
 800b7e6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	3330      	adds	r3, #48	; 0x30
 800b7fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b802:	2100      	movs	r1, #0
 800b804:	4618      	mov	r0, r3
 800b806:	f7fd fba4 	bl	8008f52 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b80a:	79fb      	ldrb	r3, [r7, #7]
 800b80c:	f003 0320 	and.w	r3, r3, #32
 800b810:	2b00      	cmp	r3, #0
 800b812:	d06e      	beq.n	800b8f2 <f_open+0x37e>
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	68db      	ldr	r3, [r3, #12]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d06a      	beq.n	800b8f2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	68da      	ldr	r2, [r3, #12]
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	895b      	ldrh	r3, [r3, #10]
 800b828:	461a      	mov	r2, r3
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	899b      	ldrh	r3, [r3, #12]
 800b82e:	fb02 f303 	mul.w	r3, r2, r3
 800b832:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	689b      	ldr	r3, [r3, #8]
 800b838:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	68db      	ldr	r3, [r3, #12]
 800b83e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b840:	e016      	b.n	800b870 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b846:	4618      	mov	r0, r3
 800b848:	f7fd fe4d 	bl	80094e6 <get_fat>
 800b84c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800b84e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b850:	2b01      	cmp	r3, #1
 800b852:	d802      	bhi.n	800b85a <f_open+0x2e6>
 800b854:	2302      	movs	r3, #2
 800b856:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b85a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b85c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b860:	d102      	bne.n	800b868 <f_open+0x2f4>
 800b862:	2301      	movs	r3, #1
 800b864:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b868:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b86a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b86c:	1ad3      	subs	r3, r2, r3
 800b86e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b870:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b874:	2b00      	cmp	r3, #0
 800b876:	d103      	bne.n	800b880 <f_open+0x30c>
 800b878:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b87a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d8e0      	bhi.n	800b842 <f_open+0x2ce>
				}
				fp->clust = clst;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b884:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b886:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d131      	bne.n	800b8f2 <f_open+0x37e>
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	899b      	ldrh	r3, [r3, #12]
 800b892:	461a      	mov	r2, r3
 800b894:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b896:	fbb3 f1f2 	udiv	r1, r3, r2
 800b89a:	fb01 f202 	mul.w	r2, r1, r2
 800b89e:	1a9b      	subs	r3, r3, r2
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d026      	beq.n	800b8f2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7fd fdfd 	bl	80094a8 <clust2sect>
 800b8ae:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b8b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d103      	bne.n	800b8be <f_open+0x34a>
						res = FR_INT_ERR;
 800b8b6:	2302      	movs	r3, #2
 800b8b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b8bc:	e019      	b.n	800b8f2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	899b      	ldrh	r3, [r3, #12]
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8c6:	fbb3 f2f2 	udiv	r2, r3, r2
 800b8ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8cc:	441a      	add	r2, r3
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	7858      	ldrb	r0, [r3, #1]
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	6a1a      	ldr	r2, [r3, #32]
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	f7fd fa35 	bl	8008d50 <disk_read>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d002      	beq.n	800b8f2 <f_open+0x37e>
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b8f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d002      	beq.n	800b900 <f_open+0x38c>
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b900:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800b904:	4618      	mov	r0, r3
 800b906:	3768      	adds	r7, #104	; 0x68
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b08e      	sub	sp, #56	; 0x38
 800b910:	af00      	add	r7, sp, #0
 800b912:	60f8      	str	r0, [r7, #12]
 800b914:	60b9      	str	r1, [r7, #8]
 800b916:	607a      	str	r2, [r7, #4]
 800b918:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	2200      	movs	r2, #0
 800b922:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f107 0214 	add.w	r2, r7, #20
 800b92a:	4611      	mov	r1, r2
 800b92c:	4618      	mov	r0, r3
 800b92e:	f7ff fda5 	bl	800b47c <validate>
 800b932:	4603      	mov	r3, r0
 800b934:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b938:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d107      	bne.n	800b950 <f_read+0x44>
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	7d5b      	ldrb	r3, [r3, #21]
 800b944:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b948:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d002      	beq.n	800b956 <f_read+0x4a>
 800b950:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b954:	e135      	b.n	800bbc2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	7d1b      	ldrb	r3, [r3, #20]
 800b95a:	f003 0301 	and.w	r3, r3, #1
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d101      	bne.n	800b966 <f_read+0x5a>
 800b962:	2307      	movs	r3, #7
 800b964:	e12d      	b.n	800bbc2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	68da      	ldr	r2, [r3, #12]
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	699b      	ldr	r3, [r3, #24]
 800b96e:	1ad3      	subs	r3, r2, r3
 800b970:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	6a3b      	ldr	r3, [r7, #32]
 800b976:	429a      	cmp	r2, r3
 800b978:	f240 811e 	bls.w	800bbb8 <f_read+0x2ac>
 800b97c:	6a3b      	ldr	r3, [r7, #32]
 800b97e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b980:	e11a      	b.n	800bbb8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	699b      	ldr	r3, [r3, #24]
 800b986:	697a      	ldr	r2, [r7, #20]
 800b988:	8992      	ldrh	r2, [r2, #12]
 800b98a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b98e:	fb01 f202 	mul.w	r2, r1, r2
 800b992:	1a9b      	subs	r3, r3, r2
 800b994:	2b00      	cmp	r3, #0
 800b996:	f040 80d5 	bne.w	800bb44 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	699b      	ldr	r3, [r3, #24]
 800b99e:	697a      	ldr	r2, [r7, #20]
 800b9a0:	8992      	ldrh	r2, [r2, #12]
 800b9a2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9a6:	697a      	ldr	r2, [r7, #20]
 800b9a8:	8952      	ldrh	r2, [r2, #10]
 800b9aa:	3a01      	subs	r2, #1
 800b9ac:	4013      	ands	r3, r2
 800b9ae:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800b9b0:	69fb      	ldr	r3, [r7, #28]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d12f      	bne.n	800ba16 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	699b      	ldr	r3, [r3, #24]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d103      	bne.n	800b9c6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	689b      	ldr	r3, [r3, #8]
 800b9c2:	633b      	str	r3, [r7, #48]	; 0x30
 800b9c4:	e013      	b.n	800b9ee <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d007      	beq.n	800b9de <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	699b      	ldr	r3, [r3, #24]
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	68f8      	ldr	r0, [r7, #12]
 800b9d6:	f7fe f873 	bl	8009ac0 <clmt_clust>
 800b9da:	6338      	str	r0, [r7, #48]	; 0x30
 800b9dc:	e007      	b.n	800b9ee <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b9de:	68fa      	ldr	r2, [r7, #12]
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	69db      	ldr	r3, [r3, #28]
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	4610      	mov	r0, r2
 800b9e8:	f7fd fd7d 	bl	80094e6 <get_fat>
 800b9ec:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	d804      	bhi.n	800b9fe <f_read+0xf2>
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2202      	movs	r2, #2
 800b9f8:	755a      	strb	r2, [r3, #21]
 800b9fa:	2302      	movs	r3, #2
 800b9fc:	e0e1      	b.n	800bbc2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba04:	d104      	bne.n	800ba10 <f_read+0x104>
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2201      	movs	r2, #1
 800ba0a:	755a      	strb	r2, [r3, #21]
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	e0d8      	b.n	800bbc2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba14:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ba16:	697a      	ldr	r2, [r7, #20]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	69db      	ldr	r3, [r3, #28]
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	4610      	mov	r0, r2
 800ba20:	f7fd fd42 	bl	80094a8 <clust2sect>
 800ba24:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ba26:	69bb      	ldr	r3, [r7, #24]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d104      	bne.n	800ba36 <f_read+0x12a>
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2202      	movs	r2, #2
 800ba30:	755a      	strb	r2, [r3, #21]
 800ba32:	2302      	movs	r3, #2
 800ba34:	e0c5      	b.n	800bbc2 <f_read+0x2b6>
			sect += csect;
 800ba36:	69ba      	ldr	r2, [r7, #24]
 800ba38:	69fb      	ldr	r3, [r7, #28]
 800ba3a:	4413      	add	r3, r2
 800ba3c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	899b      	ldrh	r3, [r3, #12]
 800ba42:	461a      	mov	r2, r3
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba4a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ba4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d041      	beq.n	800bad6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ba52:	69fa      	ldr	r2, [r7, #28]
 800ba54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba56:	4413      	add	r3, r2
 800ba58:	697a      	ldr	r2, [r7, #20]
 800ba5a:	8952      	ldrh	r2, [r2, #10]
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d905      	bls.n	800ba6c <f_read+0x160>
					cc = fs->csize - csect;
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	895b      	ldrh	r3, [r3, #10]
 800ba64:	461a      	mov	r2, r3
 800ba66:	69fb      	ldr	r3, [r7, #28]
 800ba68:	1ad3      	subs	r3, r2, r3
 800ba6a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	7858      	ldrb	r0, [r3, #1]
 800ba70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba72:	69ba      	ldr	r2, [r7, #24]
 800ba74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ba76:	f7fd f96b 	bl	8008d50 <disk_read>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d004      	beq.n	800ba8a <f_read+0x17e>
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	2201      	movs	r2, #1
 800ba84:	755a      	strb	r2, [r3, #21]
 800ba86:	2301      	movs	r3, #1
 800ba88:	e09b      	b.n	800bbc2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	7d1b      	ldrb	r3, [r3, #20]
 800ba8e:	b25b      	sxtb	r3, r3
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	da18      	bge.n	800bac6 <f_read+0x1ba>
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	6a1a      	ldr	r2, [r3, #32]
 800ba98:	69bb      	ldr	r3, [r7, #24]
 800ba9a:	1ad3      	subs	r3, r2, r3
 800ba9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d911      	bls.n	800bac6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	6a1a      	ldr	r2, [r3, #32]
 800baa6:	69bb      	ldr	r3, [r7, #24]
 800baa8:	1ad3      	subs	r3, r2, r3
 800baaa:	697a      	ldr	r2, [r7, #20]
 800baac:	8992      	ldrh	r2, [r2, #12]
 800baae:	fb02 f303 	mul.w	r3, r2, r3
 800bab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bab4:	18d0      	adds	r0, r2, r3
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	899b      	ldrh	r3, [r3, #12]
 800bac0:	461a      	mov	r2, r3
 800bac2:	f7fd fa25 	bl	8008f10 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	899b      	ldrh	r3, [r3, #12]
 800baca:	461a      	mov	r2, r3
 800bacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bace:	fb02 f303 	mul.w	r3, r2, r3
 800bad2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800bad4:	e05c      	b.n	800bb90 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	6a1b      	ldr	r3, [r3, #32]
 800bada:	69ba      	ldr	r2, [r7, #24]
 800badc:	429a      	cmp	r2, r3
 800bade:	d02e      	beq.n	800bb3e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	7d1b      	ldrb	r3, [r3, #20]
 800bae4:	b25b      	sxtb	r3, r3
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	da18      	bge.n	800bb1c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	7858      	ldrb	r0, [r3, #1]
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	6a1a      	ldr	r2, [r3, #32]
 800baf8:	2301      	movs	r3, #1
 800bafa:	f7fd f949 	bl	8008d90 <disk_write>
 800bafe:	4603      	mov	r3, r0
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d004      	beq.n	800bb0e <f_read+0x202>
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2201      	movs	r2, #1
 800bb08:	755a      	strb	r2, [r3, #21]
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	e059      	b.n	800bbc2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	7d1b      	ldrb	r3, [r3, #20]
 800bb12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb16:	b2da      	uxtb	r2, r3
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	7858      	ldrb	r0, [r3, #1]
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb26:	2301      	movs	r3, #1
 800bb28:	69ba      	ldr	r2, [r7, #24]
 800bb2a:	f7fd f911 	bl	8008d50 <disk_read>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d004      	beq.n	800bb3e <f_read+0x232>
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2201      	movs	r2, #1
 800bb38:	755a      	strb	r2, [r3, #21]
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	e041      	b.n	800bbc2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	69ba      	ldr	r2, [r7, #24]
 800bb42:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	899b      	ldrh	r3, [r3, #12]
 800bb48:	4618      	mov	r0, r3
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	699b      	ldr	r3, [r3, #24]
 800bb4e:	697a      	ldr	r2, [r7, #20]
 800bb50:	8992      	ldrh	r2, [r2, #12]
 800bb52:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb56:	fb01 f202 	mul.w	r2, r1, r2
 800bb5a:	1a9b      	subs	r3, r3, r2
 800bb5c:	1ac3      	subs	r3, r0, r3
 800bb5e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800bb60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d901      	bls.n	800bb6c <f_read+0x260>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	699b      	ldr	r3, [r3, #24]
 800bb76:	697a      	ldr	r2, [r7, #20]
 800bb78:	8992      	ldrh	r2, [r2, #12]
 800bb7a:	fbb3 f0f2 	udiv	r0, r3, r2
 800bb7e:	fb00 f202 	mul.w	r2, r0, r2
 800bb82:	1a9b      	subs	r3, r3, r2
 800bb84:	440b      	add	r3, r1
 800bb86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb88:	4619      	mov	r1, r3
 800bb8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb8c:	f7fd f9c0 	bl	8008f10 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800bb90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb94:	4413      	add	r3, r2
 800bb96:	627b      	str	r3, [r7, #36]	; 0x24
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	699a      	ldr	r2, [r3, #24]
 800bb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb9e:	441a      	add	r2, r3
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	619a      	str	r2, [r3, #24]
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbaa:	441a      	add	r2, r3
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	601a      	str	r2, [r3, #0]
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb4:	1ad3      	subs	r3, r2, r3
 800bbb6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	f47f aee1 	bne.w	800b982 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800bbc0:	2300      	movs	r3, #0
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3738      	adds	r7, #56	; 0x38
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}

0800bbca <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bbca:	b580      	push	{r7, lr}
 800bbcc:	b08c      	sub	sp, #48	; 0x30
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	60f8      	str	r0, [r7, #12]
 800bbd2:	60b9      	str	r1, [r7, #8]
 800bbd4:	607a      	str	r2, [r7, #4]
 800bbd6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f107 0210 	add.w	r2, r7, #16
 800bbe8:	4611      	mov	r1, r2
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7ff fc46 	bl	800b47c <validate>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bbf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d107      	bne.n	800bc0e <f_write+0x44>
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	7d5b      	ldrb	r3, [r3, #21]
 800bc02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bc06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d002      	beq.n	800bc14 <f_write+0x4a>
 800bc0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bc12:	e16a      	b.n	800beea <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	7d1b      	ldrb	r3, [r3, #20]
 800bc18:	f003 0302 	and.w	r3, r3, #2
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d101      	bne.n	800bc24 <f_write+0x5a>
 800bc20:	2307      	movs	r3, #7
 800bc22:	e162      	b.n	800beea <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	699a      	ldr	r2, [r3, #24]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	441a      	add	r2, r3
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	699b      	ldr	r3, [r3, #24]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	f080 814c 	bcs.w	800bece <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	699b      	ldr	r3, [r3, #24]
 800bc3a:	43db      	mvns	r3, r3
 800bc3c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bc3e:	e146      	b.n	800bece <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	699b      	ldr	r3, [r3, #24]
 800bc44:	693a      	ldr	r2, [r7, #16]
 800bc46:	8992      	ldrh	r2, [r2, #12]
 800bc48:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc4c:	fb01 f202 	mul.w	r2, r1, r2
 800bc50:	1a9b      	subs	r3, r3, r2
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	f040 80f1 	bne.w	800be3a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	699b      	ldr	r3, [r3, #24]
 800bc5c:	693a      	ldr	r2, [r7, #16]
 800bc5e:	8992      	ldrh	r2, [r2, #12]
 800bc60:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc64:	693a      	ldr	r2, [r7, #16]
 800bc66:	8952      	ldrh	r2, [r2, #10]
 800bc68:	3a01      	subs	r2, #1
 800bc6a:	4013      	ands	r3, r2
 800bc6c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bc6e:	69bb      	ldr	r3, [r7, #24]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d143      	bne.n	800bcfc <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	699b      	ldr	r3, [r3, #24]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d10c      	bne.n	800bc96 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800bc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d11a      	bne.n	800bcbe <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2100      	movs	r1, #0
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f7fd fe7f 	bl	8009990 <create_chain>
 800bc92:	62b8      	str	r0, [r7, #40]	; 0x28
 800bc94:	e013      	b.n	800bcbe <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d007      	beq.n	800bcae <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	699b      	ldr	r3, [r3, #24]
 800bca2:	4619      	mov	r1, r3
 800bca4:	68f8      	ldr	r0, [r7, #12]
 800bca6:	f7fd ff0b 	bl	8009ac0 <clmt_clust>
 800bcaa:	62b8      	str	r0, [r7, #40]	; 0x28
 800bcac:	e007      	b.n	800bcbe <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bcae:	68fa      	ldr	r2, [r7, #12]
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	69db      	ldr	r3, [r3, #28]
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	4610      	mov	r0, r2
 800bcb8:	f7fd fe6a 	bl	8009990 <create_chain>
 800bcbc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bcbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	f000 8109 	beq.w	800bed8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bcc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	d104      	bne.n	800bcd6 <f_write+0x10c>
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	2202      	movs	r2, #2
 800bcd0:	755a      	strb	r2, [r3, #21]
 800bcd2:	2302      	movs	r3, #2
 800bcd4:	e109      	b.n	800beea <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcdc:	d104      	bne.n	800bce8 <f_write+0x11e>
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2201      	movs	r2, #1
 800bce2:	755a      	strb	r2, [r3, #21]
 800bce4:	2301      	movs	r3, #1
 800bce6:	e100      	b.n	800beea <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcec:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	689b      	ldr	r3, [r3, #8]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d102      	bne.n	800bcfc <f_write+0x132>
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcfa:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	7d1b      	ldrb	r3, [r3, #20]
 800bd00:	b25b      	sxtb	r3, r3
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	da18      	bge.n	800bd38 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	7858      	ldrb	r0, [r3, #1]
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	6a1a      	ldr	r2, [r3, #32]
 800bd14:	2301      	movs	r3, #1
 800bd16:	f7fd f83b 	bl	8008d90 <disk_write>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d004      	beq.n	800bd2a <f_write+0x160>
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	2201      	movs	r2, #1
 800bd24:	755a      	strb	r2, [r3, #21]
 800bd26:	2301      	movs	r3, #1
 800bd28:	e0df      	b.n	800beea <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	7d1b      	ldrb	r3, [r3, #20]
 800bd2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd32:	b2da      	uxtb	r2, r3
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bd38:	693a      	ldr	r2, [r7, #16]
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	69db      	ldr	r3, [r3, #28]
 800bd3e:	4619      	mov	r1, r3
 800bd40:	4610      	mov	r0, r2
 800bd42:	f7fd fbb1 	bl	80094a8 <clust2sect>
 800bd46:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d104      	bne.n	800bd58 <f_write+0x18e>
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2202      	movs	r2, #2
 800bd52:	755a      	strb	r2, [r3, #21]
 800bd54:	2302      	movs	r3, #2
 800bd56:	e0c8      	b.n	800beea <f_write+0x320>
			sect += csect;
 800bd58:	697a      	ldr	r2, [r7, #20]
 800bd5a:	69bb      	ldr	r3, [r7, #24]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	899b      	ldrh	r3, [r3, #12]
 800bd64:	461a      	mov	r2, r3
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd6c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bd6e:	6a3b      	ldr	r3, [r7, #32]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d043      	beq.n	800bdfc <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bd74:	69ba      	ldr	r2, [r7, #24]
 800bd76:	6a3b      	ldr	r3, [r7, #32]
 800bd78:	4413      	add	r3, r2
 800bd7a:	693a      	ldr	r2, [r7, #16]
 800bd7c:	8952      	ldrh	r2, [r2, #10]
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d905      	bls.n	800bd8e <f_write+0x1c4>
					cc = fs->csize - csect;
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	895b      	ldrh	r3, [r3, #10]
 800bd86:	461a      	mov	r2, r3
 800bd88:	69bb      	ldr	r3, [r7, #24]
 800bd8a:	1ad3      	subs	r3, r2, r3
 800bd8c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	7858      	ldrb	r0, [r3, #1]
 800bd92:	6a3b      	ldr	r3, [r7, #32]
 800bd94:	697a      	ldr	r2, [r7, #20]
 800bd96:	69f9      	ldr	r1, [r7, #28]
 800bd98:	f7fc fffa 	bl	8008d90 <disk_write>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d004      	beq.n	800bdac <f_write+0x1e2>
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2201      	movs	r2, #1
 800bda6:	755a      	strb	r2, [r3, #21]
 800bda8:	2301      	movs	r3, #1
 800bdaa:	e09e      	b.n	800beea <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	6a1a      	ldr	r2, [r3, #32]
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	1ad3      	subs	r3, r2, r3
 800bdb4:	6a3a      	ldr	r2, [r7, #32]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d918      	bls.n	800bdec <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	6a1a      	ldr	r2, [r3, #32]
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	1ad3      	subs	r3, r2, r3
 800bdc8:	693a      	ldr	r2, [r7, #16]
 800bdca:	8992      	ldrh	r2, [r2, #12]
 800bdcc:	fb02 f303 	mul.w	r3, r2, r3
 800bdd0:	69fa      	ldr	r2, [r7, #28]
 800bdd2:	18d1      	adds	r1, r2, r3
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	899b      	ldrh	r3, [r3, #12]
 800bdd8:	461a      	mov	r2, r3
 800bdda:	f7fd f899 	bl	8008f10 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	7d1b      	ldrb	r3, [r3, #20]
 800bde2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bde6:	b2da      	uxtb	r2, r3
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	899b      	ldrh	r3, [r3, #12]
 800bdf0:	461a      	mov	r2, r3
 800bdf2:	6a3b      	ldr	r3, [r7, #32]
 800bdf4:	fb02 f303 	mul.w	r3, r2, r3
 800bdf8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800bdfa:	e04b      	b.n	800be94 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	6a1b      	ldr	r3, [r3, #32]
 800be00:	697a      	ldr	r2, [r7, #20]
 800be02:	429a      	cmp	r2, r3
 800be04:	d016      	beq.n	800be34 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	699a      	ldr	r2, [r3, #24]
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800be0e:	429a      	cmp	r2, r3
 800be10:	d210      	bcs.n	800be34 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	7858      	ldrb	r0, [r3, #1]
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800be1c:	2301      	movs	r3, #1
 800be1e:	697a      	ldr	r2, [r7, #20]
 800be20:	f7fc ff96 	bl	8008d50 <disk_read>
 800be24:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800be26:	2b00      	cmp	r3, #0
 800be28:	d004      	beq.n	800be34 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2201      	movs	r2, #1
 800be2e:	755a      	strb	r2, [r3, #21]
 800be30:	2301      	movs	r3, #1
 800be32:	e05a      	b.n	800beea <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	697a      	ldr	r2, [r7, #20]
 800be38:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	899b      	ldrh	r3, [r3, #12]
 800be3e:	4618      	mov	r0, r3
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	699b      	ldr	r3, [r3, #24]
 800be44:	693a      	ldr	r2, [r7, #16]
 800be46:	8992      	ldrh	r2, [r2, #12]
 800be48:	fbb3 f1f2 	udiv	r1, r3, r2
 800be4c:	fb01 f202 	mul.w	r2, r1, r2
 800be50:	1a9b      	subs	r3, r3, r2
 800be52:	1ac3      	subs	r3, r0, r3
 800be54:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800be56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d901      	bls.n	800be62 <f_write+0x298>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	699b      	ldr	r3, [r3, #24]
 800be6c:	693a      	ldr	r2, [r7, #16]
 800be6e:	8992      	ldrh	r2, [r2, #12]
 800be70:	fbb3 f0f2 	udiv	r0, r3, r2
 800be74:	fb00 f202 	mul.w	r2, r0, r2
 800be78:	1a9b      	subs	r3, r3, r2
 800be7a:	440b      	add	r3, r1
 800be7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be7e:	69f9      	ldr	r1, [r7, #28]
 800be80:	4618      	mov	r0, r3
 800be82:	f7fd f845 	bl	8008f10 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	7d1b      	ldrb	r3, [r3, #20]
 800be8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800be8e:	b2da      	uxtb	r2, r3
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800be94:	69fa      	ldr	r2, [r7, #28]
 800be96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be98:	4413      	add	r3, r2
 800be9a:	61fb      	str	r3, [r7, #28]
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	699a      	ldr	r2, [r3, #24]
 800bea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea2:	441a      	add	r2, r3
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	619a      	str	r2, [r3, #24]
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	68da      	ldr	r2, [r3, #12]
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	699b      	ldr	r3, [r3, #24]
 800beb0:	429a      	cmp	r2, r3
 800beb2:	bf38      	it	cc
 800beb4:	461a      	movcc	r2, r3
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	60da      	str	r2, [r3, #12]
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec0:	441a      	add	r2, r3
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	601a      	str	r2, [r3, #0]
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beca:	1ad3      	subs	r3, r2, r3
 800becc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	f47f aeb5 	bne.w	800bc40 <f_write+0x76>
 800bed6:	e000      	b.n	800beda <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bed8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	7d1b      	ldrb	r3, [r3, #20]
 800bede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bee2:	b2da      	uxtb	r2, r3
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bee8:	2300      	movs	r3, #0
}
 800beea:	4618      	mov	r0, r3
 800beec:	3730      	adds	r7, #48	; 0x30
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}

0800bef2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bef2:	b580      	push	{r7, lr}
 800bef4:	b086      	sub	sp, #24
 800bef6:	af00      	add	r7, sp, #0
 800bef8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f107 0208 	add.w	r2, r7, #8
 800bf00:	4611      	mov	r1, r2
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7ff faba 	bl	800b47c <validate>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bf0c:	7dfb      	ldrb	r3, [r7, #23]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d168      	bne.n	800bfe4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	7d1b      	ldrb	r3, [r3, #20]
 800bf16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d062      	beq.n	800bfe4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	7d1b      	ldrb	r3, [r3, #20]
 800bf22:	b25b      	sxtb	r3, r3
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	da15      	bge.n	800bf54 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	7858      	ldrb	r0, [r3, #1]
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6a1a      	ldr	r2, [r3, #32]
 800bf36:	2301      	movs	r3, #1
 800bf38:	f7fc ff2a 	bl	8008d90 <disk_write>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d001      	beq.n	800bf46 <f_sync+0x54>
 800bf42:	2301      	movs	r3, #1
 800bf44:	e04f      	b.n	800bfe6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	7d1b      	ldrb	r3, [r3, #20]
 800bf4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf4e:	b2da      	uxtb	r2, r3
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bf54:	f7fa fe92 	bl	8006c7c <get_fattime>
 800bf58:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bf5a:	68ba      	ldr	r2, [r7, #8]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf60:	4619      	mov	r1, r3
 800bf62:	4610      	mov	r0, r2
 800bf64:	f7fd fa02 	bl	800936c <move_window>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bf6c:	7dfb      	ldrb	r3, [r7, #23]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d138      	bne.n	800bfe4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf76:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	330b      	adds	r3, #11
 800bf7c:	781a      	ldrb	r2, [r3, #0]
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	330b      	adds	r3, #11
 800bf82:	f042 0220 	orr.w	r2, r2, #32
 800bf86:	b2d2      	uxtb	r2, r2
 800bf88:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6818      	ldr	r0, [r3, #0]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	689b      	ldr	r3, [r3, #8]
 800bf92:	461a      	mov	r2, r3
 800bf94:	68f9      	ldr	r1, [r7, #12]
 800bf96:	f7fd ff90 	bl	8009eba <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	f103 021c 	add.w	r2, r3, #28
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	68db      	ldr	r3, [r3, #12]
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	4610      	mov	r0, r2
 800bfa8:	f7fc ff86 	bl	8008eb8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	3316      	adds	r3, #22
 800bfb0:	6939      	ldr	r1, [r7, #16]
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7fc ff80 	bl	8008eb8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	3312      	adds	r3, #18
 800bfbc:	2100      	movs	r1, #0
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7fc ff5f 	bl	8008e82 <st_word>
					fs->wflag = 1;
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f7fd f9fb 	bl	80093c8 <sync_fs>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	7d1b      	ldrb	r3, [r3, #20]
 800bfda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfde:	b2da      	uxtb	r2, r3
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bfe4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3718      	adds	r7, #24
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}

0800bfee <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bfee:	b580      	push	{r7, lr}
 800bff0:	b084      	sub	sp, #16
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f7ff ff7b 	bl	800bef2 <f_sync>
 800bffc:	4603      	mov	r3, r0
 800bffe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c000:	7bfb      	ldrb	r3, [r7, #15]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d118      	bne.n	800c038 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f107 0208 	add.w	r2, r7, #8
 800c00c:	4611      	mov	r1, r2
 800c00e:	4618      	mov	r0, r3
 800c010:	f7ff fa34 	bl	800b47c <validate>
 800c014:	4603      	mov	r3, r0
 800c016:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c018:	7bfb      	ldrb	r3, [r7, #15]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d10c      	bne.n	800c038 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	691b      	ldr	r3, [r3, #16]
 800c022:	4618      	mov	r0, r3
 800c024:	f7fd f8fe 	bl	8009224 <dec_lock>
 800c028:	4603      	mov	r3, r0
 800c02a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c02c:	7bfb      	ldrb	r3, [r7, #15]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d102      	bne.n	800c038 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2200      	movs	r2, #0
 800c036:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c038:	7bfb      	ldrb	r3, [r7, #15]
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3710      	adds	r7, #16
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}

0800c042 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c042:	b580      	push	{r7, lr}
 800c044:	b090      	sub	sp, #64	; 0x40
 800c046:	af00      	add	r7, sp, #0
 800c048:	6078      	str	r0, [r7, #4]
 800c04a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f107 0208 	add.w	r2, r7, #8
 800c052:	4611      	mov	r1, r2
 800c054:	4618      	mov	r0, r3
 800c056:	f7ff fa11 	bl	800b47c <validate>
 800c05a:	4603      	mov	r3, r0
 800c05c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c060:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c064:	2b00      	cmp	r3, #0
 800c066:	d103      	bne.n	800c070 <f_lseek+0x2e>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	7d5b      	ldrb	r3, [r3, #21]
 800c06c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c070:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c074:	2b00      	cmp	r3, #0
 800c076:	d002      	beq.n	800c07e <f_lseek+0x3c>
 800c078:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c07c:	e201      	b.n	800c482 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c082:	2b00      	cmp	r3, #0
 800c084:	f000 80d9 	beq.w	800c23a <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c08e:	d15a      	bne.n	800c146 <f_lseek+0x104>
			tbl = fp->cltbl;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c094:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c098:	1d1a      	adds	r2, r3, #4
 800c09a:	627a      	str	r2, [r7, #36]	; 0x24
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	617b      	str	r3, [r7, #20]
 800c0a0:	2302      	movs	r3, #2
 800c0a2:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	689b      	ldr	r3, [r3, #8]
 800c0a8:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800c0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d03a      	beq.n	800c126 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b2:	613b      	str	r3, [r7, #16]
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ba:	3302      	adds	r3, #2
 800c0bc:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800c0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c0:	60fb      	str	r3, [r7, #12]
 800c0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c4:	3301      	adds	r3, #1
 800c0c6:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7fd fa0a 	bl	80094e6 <get_fat>
 800c0d2:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d6:	2b01      	cmp	r3, #1
 800c0d8:	d804      	bhi.n	800c0e4 <f_lseek+0xa2>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2202      	movs	r2, #2
 800c0de:	755a      	strb	r2, [r3, #21]
 800c0e0:	2302      	movs	r3, #2
 800c0e2:	e1ce      	b.n	800c482 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ea:	d104      	bne.n	800c0f6 <f_lseek+0xb4>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	755a      	strb	r2, [r3, #21]
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	e1c5      	b.n	800c482 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	3301      	adds	r3, #1
 800c0fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d0de      	beq.n	800c0be <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	429a      	cmp	r2, r3
 800c106:	d809      	bhi.n	800c11c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800c108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c10a:	1d1a      	adds	r2, r3, #4
 800c10c:	627a      	str	r2, [r7, #36]	; 0x24
 800c10e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c110:	601a      	str	r2, [r3, #0]
 800c112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c114:	1d1a      	adds	r2, r3, #4
 800c116:	627a      	str	r2, [r7, #36]	; 0x24
 800c118:	693a      	ldr	r2, [r7, #16]
 800c11a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	69db      	ldr	r3, [r3, #28]
 800c120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c122:	429a      	cmp	r2, r3
 800c124:	d3c4      	bcc.n	800c0b0 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c12a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c12c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800c12e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	429a      	cmp	r2, r3
 800c134:	d803      	bhi.n	800c13e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800c136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c138:	2200      	movs	r2, #0
 800c13a:	601a      	str	r2, [r3, #0]
 800c13c:	e19f      	b.n	800c47e <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c13e:	2311      	movs	r3, #17
 800c140:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c144:	e19b      	b.n	800c47e <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	68db      	ldr	r3, [r3, #12]
 800c14a:	683a      	ldr	r2, [r7, #0]
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d902      	bls.n	800c156 <f_lseek+0x114>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	68db      	ldr	r3, [r3, #12]
 800c154:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	683a      	ldr	r2, [r7, #0]
 800c15a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	f000 818d 	beq.w	800c47e <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	3b01      	subs	r3, #1
 800c168:	4619      	mov	r1, r3
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f7fd fca8 	bl	8009ac0 <clmt_clust>
 800c170:	4602      	mov	r2, r0
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800c176:	68ba      	ldr	r2, [r7, #8]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	69db      	ldr	r3, [r3, #28]
 800c17c:	4619      	mov	r1, r3
 800c17e:	4610      	mov	r0, r2
 800c180:	f7fd f992 	bl	80094a8 <clust2sect>
 800c184:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c186:	69bb      	ldr	r3, [r7, #24]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d104      	bne.n	800c196 <f_lseek+0x154>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2202      	movs	r2, #2
 800c190:	755a      	strb	r2, [r3, #21]
 800c192:	2302      	movs	r3, #2
 800c194:	e175      	b.n	800c482 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	3b01      	subs	r3, #1
 800c19a:	68ba      	ldr	r2, [r7, #8]
 800c19c:	8992      	ldrh	r2, [r2, #12]
 800c19e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1a2:	68ba      	ldr	r2, [r7, #8]
 800c1a4:	8952      	ldrh	r2, [r2, #10]
 800c1a6:	3a01      	subs	r2, #1
 800c1a8:	4013      	ands	r3, r2
 800c1aa:	69ba      	ldr	r2, [r7, #24]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	699b      	ldr	r3, [r3, #24]
 800c1b4:	68ba      	ldr	r2, [r7, #8]
 800c1b6:	8992      	ldrh	r2, [r2, #12]
 800c1b8:	fbb3 f1f2 	udiv	r1, r3, r2
 800c1bc:	fb01 f202 	mul.w	r2, r1, r2
 800c1c0:	1a9b      	subs	r3, r3, r2
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	f000 815b 	beq.w	800c47e <f_lseek+0x43c>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6a1b      	ldr	r3, [r3, #32]
 800c1cc:	69ba      	ldr	r2, [r7, #24]
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	f000 8155 	beq.w	800c47e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	7d1b      	ldrb	r3, [r3, #20]
 800c1d8:	b25b      	sxtb	r3, r3
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	da18      	bge.n	800c210 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	7858      	ldrb	r0, [r3, #1]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6a1a      	ldr	r2, [r3, #32]
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	f7fc fdcf 	bl	8008d90 <disk_write>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d004      	beq.n	800c202 <f_lseek+0x1c0>
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	755a      	strb	r2, [r3, #21]
 800c1fe:	2301      	movs	r3, #1
 800c200:	e13f      	b.n	800c482 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	7d1b      	ldrb	r3, [r3, #20]
 800c206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c20a:	b2da      	uxtb	r2, r3
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	7858      	ldrb	r0, [r3, #1]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c21a:	2301      	movs	r3, #1
 800c21c:	69ba      	ldr	r2, [r7, #24]
 800c21e:	f7fc fd97 	bl	8008d50 <disk_read>
 800c222:	4603      	mov	r3, r0
 800c224:	2b00      	cmp	r3, #0
 800c226:	d004      	beq.n	800c232 <f_lseek+0x1f0>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2201      	movs	r2, #1
 800c22c:	755a      	strb	r2, [r3, #21]
 800c22e:	2301      	movs	r3, #1
 800c230:	e127      	b.n	800c482 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	69ba      	ldr	r2, [r7, #24]
 800c236:	621a      	str	r2, [r3, #32]
 800c238:	e121      	b.n	800c47e <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	68db      	ldr	r3, [r3, #12]
 800c23e:	683a      	ldr	r2, [r7, #0]
 800c240:	429a      	cmp	r2, r3
 800c242:	d908      	bls.n	800c256 <f_lseek+0x214>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	7d1b      	ldrb	r3, [r3, #20]
 800c248:	f003 0302 	and.w	r3, r3, #2
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d102      	bne.n	800c256 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	68db      	ldr	r3, [r3, #12]
 800c254:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	699b      	ldr	r3, [r3, #24]
 800c25a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c25c:	2300      	movs	r3, #0
 800c25e:	637b      	str	r3, [r7, #52]	; 0x34
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c264:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	f000 80b5 	beq.w	800c3d8 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	895b      	ldrh	r3, [r3, #10]
 800c272:	461a      	mov	r2, r3
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	899b      	ldrh	r3, [r3, #12]
 800c278:	fb02 f303 	mul.w	r3, r2, r3
 800c27c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c27e:	6a3b      	ldr	r3, [r7, #32]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d01b      	beq.n	800c2bc <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	1e5a      	subs	r2, r3, #1
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	fbb2 f2f3 	udiv	r2, r2, r3
 800c28e:	6a3b      	ldr	r3, [r7, #32]
 800c290:	1e59      	subs	r1, r3, #1
 800c292:	69fb      	ldr	r3, [r7, #28]
 800c294:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c298:	429a      	cmp	r2, r3
 800c29a:	d30f      	bcc.n	800c2bc <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c29c:	6a3b      	ldr	r3, [r7, #32]
 800c29e:	1e5a      	subs	r2, r3, #1
 800c2a0:	69fb      	ldr	r3, [r7, #28]
 800c2a2:	425b      	negs	r3, r3
 800c2a4:	401a      	ands	r2, r3
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	699b      	ldr	r3, [r3, #24]
 800c2ae:	683a      	ldr	r2, [r7, #0]
 800c2b0:	1ad3      	subs	r3, r2, r3
 800c2b2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	69db      	ldr	r3, [r3, #28]
 800c2b8:	63bb      	str	r3, [r7, #56]	; 0x38
 800c2ba:	e022      	b.n	800c302 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	689b      	ldr	r3, [r3, #8]
 800c2c0:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d119      	bne.n	800c2fc <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2100      	movs	r1, #0
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f7fd fb5f 	bl	8009990 <create_chain>
 800c2d2:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d6:	2b01      	cmp	r3, #1
 800c2d8:	d104      	bne.n	800c2e4 <f_lseek+0x2a2>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2202      	movs	r2, #2
 800c2de:	755a      	strb	r2, [r3, #21]
 800c2e0:	2302      	movs	r3, #2
 800c2e2:	e0ce      	b.n	800c482 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ea:	d104      	bne.n	800c2f6 <f_lseek+0x2b4>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	755a      	strb	r2, [r3, #21]
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	e0c5      	b.n	800c482 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c2fa:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c300:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800c302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c304:	2b00      	cmp	r3, #0
 800c306:	d067      	beq.n	800c3d8 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800c308:	e03a      	b.n	800c380 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800c30a:	683a      	ldr	r2, [r7, #0]
 800c30c:	69fb      	ldr	r3, [r7, #28]
 800c30e:	1ad3      	subs	r3, r2, r3
 800c310:	603b      	str	r3, [r7, #0]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	699a      	ldr	r2, [r3, #24]
 800c316:	69fb      	ldr	r3, [r7, #28]
 800c318:	441a      	add	r2, r3
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	7d1b      	ldrb	r3, [r3, #20]
 800c322:	f003 0302 	and.w	r3, r3, #2
 800c326:	2b00      	cmp	r3, #0
 800c328:	d00b      	beq.n	800c342 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c32e:	4618      	mov	r0, r3
 800c330:	f7fd fb2e 	bl	8009990 <create_chain>
 800c334:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d108      	bne.n	800c34e <f_lseek+0x30c>
							ofs = 0; break;
 800c33c:	2300      	movs	r3, #0
 800c33e:	603b      	str	r3, [r7, #0]
 800c340:	e022      	b.n	800c388 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c346:	4618      	mov	r0, r3
 800c348:	f7fd f8cd 	bl	80094e6 <get_fat>
 800c34c:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c350:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c354:	d104      	bne.n	800c360 <f_lseek+0x31e>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2201      	movs	r2, #1
 800c35a:	755a      	strb	r2, [r3, #21]
 800c35c:	2301      	movs	r3, #1
 800c35e:	e090      	b.n	800c482 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c362:	2b01      	cmp	r3, #1
 800c364:	d904      	bls.n	800c370 <f_lseek+0x32e>
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	69db      	ldr	r3, [r3, #28]
 800c36a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d304      	bcc.n	800c37a <f_lseek+0x338>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2202      	movs	r2, #2
 800c374:	755a      	strb	r2, [r3, #21]
 800c376:	2302      	movs	r3, #2
 800c378:	e083      	b.n	800c482 <f_lseek+0x440>
					fp->clust = clst;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c37e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c380:	683a      	ldr	r2, [r7, #0]
 800c382:	69fb      	ldr	r3, [r7, #28]
 800c384:	429a      	cmp	r2, r3
 800c386:	d8c0      	bhi.n	800c30a <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	699a      	ldr	r2, [r3, #24]
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	441a      	add	r2, r3
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	899b      	ldrh	r3, [r3, #12]
 800c398:	461a      	mov	r2, r3
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c3a0:	fb01 f202 	mul.w	r2, r1, r2
 800c3a4:	1a9b      	subs	r3, r3, r2
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d016      	beq.n	800c3d8 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7fd f87a 	bl	80094a8 <clust2sect>
 800c3b4:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c3b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d104      	bne.n	800c3c6 <f_lseek+0x384>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2202      	movs	r2, #2
 800c3c0:	755a      	strb	r2, [r3, #21]
 800c3c2:	2302      	movs	r3, #2
 800c3c4:	e05d      	b.n	800c482 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	899b      	ldrh	r3, [r3, #12]
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c3d4:	4413      	add	r3, r2
 800c3d6:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	699a      	ldr	r2, [r3, #24]
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	68db      	ldr	r3, [r3, #12]
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	d90a      	bls.n	800c3fa <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	699a      	ldr	r2, [r3, #24]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	7d1b      	ldrb	r3, [r3, #20]
 800c3f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3f4:	b2da      	uxtb	r2, r3
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	699b      	ldr	r3, [r3, #24]
 800c3fe:	68ba      	ldr	r2, [r7, #8]
 800c400:	8992      	ldrh	r2, [r2, #12]
 800c402:	fbb3 f1f2 	udiv	r1, r3, r2
 800c406:	fb01 f202 	mul.w	r2, r1, r2
 800c40a:	1a9b      	subs	r3, r3, r2
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d036      	beq.n	800c47e <f_lseek+0x43c>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6a1b      	ldr	r3, [r3, #32]
 800c414:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c416:	429a      	cmp	r2, r3
 800c418:	d031      	beq.n	800c47e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	7d1b      	ldrb	r3, [r3, #20]
 800c41e:	b25b      	sxtb	r3, r3
 800c420:	2b00      	cmp	r3, #0
 800c422:	da18      	bge.n	800c456 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	7858      	ldrb	r0, [r3, #1]
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6a1a      	ldr	r2, [r3, #32]
 800c432:	2301      	movs	r3, #1
 800c434:	f7fc fcac 	bl	8008d90 <disk_write>
 800c438:	4603      	mov	r3, r0
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d004      	beq.n	800c448 <f_lseek+0x406>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2201      	movs	r2, #1
 800c442:	755a      	strb	r2, [r3, #21]
 800c444:	2301      	movs	r3, #1
 800c446:	e01c      	b.n	800c482 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	7d1b      	ldrb	r3, [r3, #20]
 800c44c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c450:	b2da      	uxtb	r2, r3
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	7858      	ldrb	r0, [r3, #1]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c460:	2301      	movs	r3, #1
 800c462:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c464:	f7fc fc74 	bl	8008d50 <disk_read>
 800c468:	4603      	mov	r3, r0
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d004      	beq.n	800c478 <f_lseek+0x436>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2201      	movs	r2, #1
 800c472:	755a      	strb	r2, [r3, #21]
 800c474:	2301      	movs	r3, #1
 800c476:	e004      	b.n	800c482 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c47c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c47e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c482:	4618      	mov	r0, r3
 800c484:	3740      	adds	r7, #64	; 0x40
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}

0800c48a <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800c48a:	b580      	push	{r7, lr}
 800c48c:	b090      	sub	sp, #64	; 0x40
 800c48e:	af00      	add	r7, sp, #0
 800c490:	6078      	str	r0, [r7, #4]
 800c492:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800c494:	f107 0108 	add.w	r1, r7, #8
 800c498:	1d3b      	adds	r3, r7, #4
 800c49a:	2200      	movs	r2, #0
 800c49c:	4618      	mov	r0, r3
 800c49e:	f7fe fd67 	bl	800af70 <find_volume>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800c4a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d11f      	bne.n	800c4f0 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	f107 0308 	add.w	r3, r7, #8
 800c4b6:	4611      	mov	r1, r2
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f7fe fc49 	bl	800ad50 <follow_path>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800c4c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d111      	bne.n	800c4f0 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800c4cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c4d0:	b25b      	sxtb	r3, r3
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	da03      	bge.n	800c4de <f_stat+0x54>
				res = FR_INVALID_NAME;
 800c4d6:	2306      	movs	r3, #6
 800c4d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c4dc:	e008      	b.n	800c4f0 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d005      	beq.n	800c4f0 <f_stat+0x66>
 800c4e4:	f107 0308 	add.w	r3, r7, #8
 800c4e8:	6839      	ldr	r1, [r7, #0]
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7fe f99a 	bl	800a824 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800c4f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3740      	adds	r7, #64	; 0x40
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}

0800c4fc <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b0a0      	sub	sp, #128	; 0x80
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800c504:	2300      	movs	r3, #0
 800c506:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800c508:	f107 010c 	add.w	r1, r7, #12
 800c50c:	1d3b      	adds	r3, r7, #4
 800c50e:	2202      	movs	r2, #2
 800c510:	4618      	mov	r0, r3
 800c512:	f7fe fd2d 	bl	800af70 <find_volume>
 800c516:	4603      	mov	r3, r0
 800c518:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 800c520:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c524:	2b00      	cmp	r3, #0
 800c526:	f040 808e 	bne.w	800c646 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800c52a:	687a      	ldr	r2, [r7, #4]
 800c52c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800c530:	4611      	mov	r1, r2
 800c532:	4618      	mov	r0, r3
 800c534:	f7fe fc0c 	bl	800ad50 <follow_path>
 800c538:	4603      	mov	r3, r0
 800c53a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800c53e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c542:	2b00      	cmp	r3, #0
 800c544:	d108      	bne.n	800c558 <f_unlink+0x5c>
 800c546:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800c54a:	2102      	movs	r1, #2
 800c54c:	4618      	mov	r0, r3
 800c54e:	f7fc fd5d 	bl	800900c <chk_lock>
 800c552:	4603      	mov	r3, r0
 800c554:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800c558:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d172      	bne.n	800c646 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800c560:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800c564:	b25b      	sxtb	r3, r3
 800c566:	2b00      	cmp	r3, #0
 800c568:	da03      	bge.n	800c572 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800c56a:	2306      	movs	r3, #6
 800c56c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800c570:	e008      	b.n	800c584 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800c572:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800c576:	f003 0301 	and.w	r3, r3, #1
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d002      	beq.n	800c584 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800c57e:	2307      	movs	r3, #7
 800c580:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 800c584:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d134      	bne.n	800c5f6 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c590:	4611      	mov	r1, r2
 800c592:	4618      	mov	r0, r3
 800c594:	f7fd fc72 	bl	8009e7c <ld_clust>
 800c598:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800c59a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800c59e:	f003 0310 	and.w	r3, r3, #16
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d027      	beq.n	800c5f6 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800c5aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5ac:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800c5ae:	f107 0310 	add.w	r3, r7, #16
 800c5b2:	2100      	movs	r1, #0
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f7fd fabb 	bl	8009b30 <dir_sdi>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 800c5c0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d116      	bne.n	800c5f6 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800c5c8:	f107 0310 	add.w	r3, r7, #16
 800c5cc:	2100      	movs	r1, #0
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f7fd fe7f 	bl	800a2d2 <dir_read>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800c5da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d102      	bne.n	800c5e8 <f_unlink+0xec>
 800c5e2:	2307      	movs	r3, #7
 800c5e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800c5e8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c5ec:	2b04      	cmp	r3, #4
 800c5ee:	d102      	bne.n	800c5f6 <f_unlink+0xfa>
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 800c5f6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d123      	bne.n	800c646 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800c5fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800c602:	4618      	mov	r0, r3
 800c604:	f7fe f8c4 	bl	800a790 <dir_remove>
 800c608:	4603      	mov	r3, r0
 800c60a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800c60e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c612:	2b00      	cmp	r3, #0
 800c614:	d10c      	bne.n	800c630 <f_unlink+0x134>
 800c616:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d009      	beq.n	800c630 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800c61c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800c620:	2200      	movs	r2, #0
 800c622:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c624:	4618      	mov	r0, r3
 800c626:	f7fd f94e 	bl	80098c6 <remove_chain>
 800c62a:	4603      	mov	r3, r0
 800c62c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800c630:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c634:	2b00      	cmp	r3, #0
 800c636:	d106      	bne.n	800c646 <f_unlink+0x14a>
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	4618      	mov	r0, r3
 800c63c:	f7fc fec4 	bl	80093c8 <sync_fs>
 800c640:	4603      	mov	r3, r0
 800c642:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800c646:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3780      	adds	r7, #128	; 0x80
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}

0800c652 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800c652:	b580      	push	{r7, lr}
 800c654:	b088      	sub	sp, #32
 800c656:	af00      	add	r7, sp, #0
 800c658:	60f8      	str	r0, [r7, #12]
 800c65a:	60b9      	str	r1, [r7, #8]
 800c65c:	607a      	str	r2, [r7, #4]
	int n = 0;
 800c65e:	2300      	movs	r3, #0
 800c660:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800c666:	e01b      	b.n	800c6a0 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800c668:	f107 0310 	add.w	r3, r7, #16
 800c66c:	f107 0114 	add.w	r1, r7, #20
 800c670:	2201      	movs	r2, #1
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f7ff f94a 	bl	800b90c <f_read>
		if (rc != 1) break;
 800c678:	693b      	ldr	r3, [r7, #16]
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	d116      	bne.n	800c6ac <f_gets+0x5a>
		c = s[0];
 800c67e:	7d3b      	ldrb	r3, [r7, #20]
 800c680:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800c682:	7dfb      	ldrb	r3, [r7, #23]
 800c684:	2b0d      	cmp	r3, #13
 800c686:	d100      	bne.n	800c68a <f_gets+0x38>
 800c688:	e00a      	b.n	800c6a0 <f_gets+0x4e>
		*p++ = c;
 800c68a:	69bb      	ldr	r3, [r7, #24]
 800c68c:	1c5a      	adds	r2, r3, #1
 800c68e:	61ba      	str	r2, [r7, #24]
 800c690:	7dfa      	ldrb	r2, [r7, #23]
 800c692:	701a      	strb	r2, [r3, #0]
		n++;
 800c694:	69fb      	ldr	r3, [r7, #28]
 800c696:	3301      	adds	r3, #1
 800c698:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800c69a:	7dfb      	ldrb	r3, [r7, #23]
 800c69c:	2b0a      	cmp	r3, #10
 800c69e:	d007      	beq.n	800c6b0 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	3b01      	subs	r3, #1
 800c6a4:	69fa      	ldr	r2, [r7, #28]
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	dbde      	blt.n	800c668 <f_gets+0x16>
 800c6aa:	e002      	b.n	800c6b2 <f_gets+0x60>
		if (rc != 1) break;
 800c6ac:	bf00      	nop
 800c6ae:	e000      	b.n	800c6b2 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800c6b0:	bf00      	nop
	}
	*p = 0;
 800c6b2:	69bb      	ldr	r3, [r7, #24]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800c6b8:	69fb      	ldr	r3, [r7, #28]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d001      	beq.n	800c6c2 <f_gets+0x70>
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	e000      	b.n	800c6c4 <f_gets+0x72>
 800c6c2:	2300      	movs	r3, #0
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3720      	adds	r7, #32
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b084      	sub	sp, #16
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	460b      	mov	r3, r1
 800c6d6:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800c6d8:	78fb      	ldrb	r3, [r7, #3]
 800c6da:	2b0a      	cmp	r3, #10
 800c6dc:	d103      	bne.n	800c6e6 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800c6de:	210d      	movs	r1, #13
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f7ff fff3 	bl	800c6cc <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	685b      	ldr	r3, [r3, #4]
 800c6ea:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	db25      	blt.n	800c73e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	1c5a      	adds	r2, r3, #1
 800c6f6:	60fa      	str	r2, [r7, #12]
 800c6f8:	687a      	ldr	r2, [r7, #4]
 800c6fa:	4413      	add	r3, r2
 800c6fc:	78fa      	ldrb	r2, [r7, #3]
 800c6fe:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2b3c      	cmp	r3, #60	; 0x3c
 800c704:	dd12      	ble.n	800c72c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6818      	ldr	r0, [r3, #0]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f103 010c 	add.w	r1, r3, #12
 800c710:	68fa      	ldr	r2, [r7, #12]
 800c712:	f107 0308 	add.w	r3, r7, #8
 800c716:	f7ff fa58 	bl	800bbca <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800c71a:	68ba      	ldr	r2, [r7, #8]
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	429a      	cmp	r2, r3
 800c720:	d101      	bne.n	800c726 <putc_bfd+0x5a>
 800c722:	2300      	movs	r3, #0
 800c724:	e001      	b.n	800c72a <putc_bfd+0x5e>
 800c726:	f04f 33ff 	mov.w	r3, #4294967295
 800c72a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	68fa      	ldr	r2, [r7, #12]
 800c730:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	689b      	ldr	r3, [r3, #8]
 800c736:	1c5a      	adds	r2, r3, #1
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	609a      	str	r2, [r3, #8]
 800c73c:	e000      	b.n	800c740 <putc_bfd+0x74>
	if (i < 0) return;
 800c73e:	bf00      	nop
}
 800c740:	3710      	adds	r7, #16
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}

0800c746 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800c746:	b580      	push	{r7, lr}
 800c748:	b084      	sub	sp, #16
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	685b      	ldr	r3, [r3, #4]
 800c752:	2b00      	cmp	r3, #0
 800c754:	db16      	blt.n	800c784 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6818      	ldr	r0, [r3, #0]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f103 010c 	add.w	r1, r3, #12
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	685b      	ldr	r3, [r3, #4]
 800c764:	461a      	mov	r2, r3
 800c766:	f107 030c 	add.w	r3, r7, #12
 800c76a:	f7ff fa2e 	bl	800bbca <f_write>
 800c76e:	4603      	mov	r3, r0
 800c770:	2b00      	cmp	r3, #0
 800c772:	d107      	bne.n	800c784 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	68fa      	ldr	r2, [r7, #12]
 800c77a:	4293      	cmp	r3, r2
 800c77c:	d102      	bne.n	800c784 <putc_flush+0x3e>
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	689b      	ldr	r3, [r3, #8]
 800c782:	e001      	b.n	800c788 <putc_flush+0x42>
	return EOF;
 800c784:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3710      	adds	r7, #16
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800c790:	b480      	push	{r7}
 800c792:	b083      	sub	sp, #12
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	683a      	ldr	r2, [r7, #0]
 800c79e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	605a      	str	r2, [r3, #4]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	685a      	ldr	r2, [r3, #4]
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	609a      	str	r2, [r3, #8]
}
 800c7ae:	bf00      	nop
 800c7b0:	370c      	adds	r7, #12
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b8:	4770      	bx	lr

0800c7ba <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800c7ba:	b580      	push	{r7, lr}
 800c7bc:	b096      	sub	sp, #88	; 0x58
 800c7be:	af00      	add	r7, sp, #0
 800c7c0:	6078      	str	r0, [r7, #4]
 800c7c2:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800c7c4:	f107 030c 	add.w	r3, r7, #12
 800c7c8:	6839      	ldr	r1, [r7, #0]
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7ff ffe0 	bl	800c790 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800c7d0:	e009      	b.n	800c7e6 <f_puts+0x2c>
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	1c5a      	adds	r2, r3, #1
 800c7d6:	607a      	str	r2, [r7, #4]
 800c7d8:	781a      	ldrb	r2, [r3, #0]
 800c7da:	f107 030c 	add.w	r3, r7, #12
 800c7de:	4611      	mov	r1, r2
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7ff ff73 	bl	800c6cc <putc_bfd>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d1f1      	bne.n	800c7d2 <f_puts+0x18>
	return putc_flush(&pb);
 800c7ee:	f107 030c 	add.w	r3, r7, #12
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7ff ffa7 	bl	800c746 <putc_flush>
 800c7f8:	4603      	mov	r3, r0
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3758      	adds	r7, #88	; 0x58
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}
	...

0800c804 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800c804:	b40e      	push	{r1, r2, r3}
 800c806:	b580      	push	{r7, lr}
 800c808:	b0a7      	sub	sp, #156	; 0x9c
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800c80e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c812:	6879      	ldr	r1, [r7, #4]
 800c814:	4618      	mov	r0, r3
 800c816:	f7ff ffbb 	bl	800c790 <putc_init>

	va_start(arp, fmt);
 800c81a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800c81e:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800c820:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c824:	1c5a      	adds	r2, r3, #1
 800c826:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800c830:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c834:	2b00      	cmp	r3, #0
 800c836:	f000 81f2 	beq.w	800cc1e <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800c83a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c83e:	2b25      	cmp	r3, #37	; 0x25
 800c840:	d008      	beq.n	800c854 <f_printf+0x50>
			putc_bfd(&pb, c);
 800c842:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800c846:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c84a:	4611      	mov	r1, r2
 800c84c:	4618      	mov	r0, r3
 800c84e:	f7ff ff3d 	bl	800c6cc <putc_bfd>
			continue;
 800c852:	e1e3      	b.n	800cc1c <f_printf+0x418>
		}
		w = f = 0;
 800c854:	2300      	movs	r3, #0
 800c856:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800c85a:	2300      	movs	r3, #0
 800c85c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800c860:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c864:	1c5a      	adds	r2, r3, #1
 800c866:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c86a:	781b      	ldrb	r3, [r3, #0]
 800c86c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800c870:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c874:	2b30      	cmp	r3, #48	; 0x30
 800c876:	d10b      	bne.n	800c890 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800c878:	2301      	movs	r3, #1
 800c87a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800c87e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c882:	1c5a      	adds	r2, r3, #1
 800c884:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800c88e:	e024      	b.n	800c8da <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800c890:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c894:	2b2d      	cmp	r3, #45	; 0x2d
 800c896:	d120      	bne.n	800c8da <f_printf+0xd6>
				f = 2; c = *fmt++;
 800c898:	2302      	movs	r3, #2
 800c89a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800c89e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c8a2:	1c5a      	adds	r2, r3, #1
 800c8a4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800c8ae:	e014      	b.n	800c8da <f_printf+0xd6>
			w = w * 10 + c - '0';
 800c8b0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c8b4:	4613      	mov	r3, r2
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	4413      	add	r3, r2
 800c8ba:	005b      	lsls	r3, r3, #1
 800c8bc:	461a      	mov	r2, r3
 800c8be:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c8c2:	4413      	add	r3, r2
 800c8c4:	3b30      	subs	r3, #48	; 0x30
 800c8c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800c8ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c8ce:	1c5a      	adds	r2, r3, #1
 800c8d0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800c8da:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c8de:	2b2f      	cmp	r3, #47	; 0x2f
 800c8e0:	d903      	bls.n	800c8ea <f_printf+0xe6>
 800c8e2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c8e6:	2b39      	cmp	r3, #57	; 0x39
 800c8e8:	d9e2      	bls.n	800c8b0 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800c8ea:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c8ee:	2b6c      	cmp	r3, #108	; 0x6c
 800c8f0:	d003      	beq.n	800c8fa <f_printf+0xf6>
 800c8f2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c8f6:	2b4c      	cmp	r3, #76	; 0x4c
 800c8f8:	d10d      	bne.n	800c916 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800c8fa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c8fe:	f043 0304 	orr.w	r3, r3, #4
 800c902:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800c906:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c90a:	1c5a      	adds	r2, r3, #1
 800c90c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800c916:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	f000 8181 	beq.w	800cc22 <f_printf+0x41e>
		d = c;
 800c920:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c924:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800c928:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800c92c:	2b60      	cmp	r3, #96	; 0x60
 800c92e:	d908      	bls.n	800c942 <f_printf+0x13e>
 800c930:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800c934:	2b7a      	cmp	r3, #122	; 0x7a
 800c936:	d804      	bhi.n	800c942 <f_printf+0x13e>
 800c938:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800c93c:	3b20      	subs	r3, #32
 800c93e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800c942:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800c946:	3b42      	subs	r3, #66	; 0x42
 800c948:	2b16      	cmp	r3, #22
 800c94a:	f200 8098 	bhi.w	800ca7e <f_printf+0x27a>
 800c94e:	a201      	add	r2, pc, #4	; (adr r2, 800c954 <f_printf+0x150>)
 800c950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c954:	0800ca5f 	.word	0x0800ca5f
 800c958:	0800ca47 	.word	0x0800ca47
 800c95c:	0800ca6f 	.word	0x0800ca6f
 800c960:	0800ca7f 	.word	0x0800ca7f
 800c964:	0800ca7f 	.word	0x0800ca7f
 800c968:	0800ca7f 	.word	0x0800ca7f
 800c96c:	0800ca7f 	.word	0x0800ca7f
 800c970:	0800ca7f 	.word	0x0800ca7f
 800c974:	0800ca7f 	.word	0x0800ca7f
 800c978:	0800ca7f 	.word	0x0800ca7f
 800c97c:	0800ca7f 	.word	0x0800ca7f
 800c980:	0800ca7f 	.word	0x0800ca7f
 800c984:	0800ca7f 	.word	0x0800ca7f
 800c988:	0800ca67 	.word	0x0800ca67
 800c98c:	0800ca7f 	.word	0x0800ca7f
 800c990:	0800ca7f 	.word	0x0800ca7f
 800c994:	0800ca7f 	.word	0x0800ca7f
 800c998:	0800c9b1 	.word	0x0800c9b1
 800c99c:	0800ca7f 	.word	0x0800ca7f
 800c9a0:	0800ca6f 	.word	0x0800ca6f
 800c9a4:	0800ca7f 	.word	0x0800ca7f
 800c9a8:	0800ca7f 	.word	0x0800ca7f
 800c9ac:	0800ca77 	.word	0x0800ca77
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800c9b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9b2:	1d1a      	adds	r2, r3, #4
 800c9b4:	67ba      	str	r2, [r7, #120]	; 0x78
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c9c0:	e004      	b.n	800c9cc <f_printf+0x1c8>
 800c9c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c9cc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c9ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c9d2:	4413      	add	r3, r2
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d1f3      	bne.n	800c9c2 <f_printf+0x1be>
			if (!(f & 2)) {
 800c9da:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800c9de:	f003 0302 	and.w	r3, r3, #2
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d11a      	bne.n	800ca1c <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800c9e6:	e005      	b.n	800c9f4 <f_printf+0x1f0>
 800c9e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c9ec:	2120      	movs	r1, #32
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7ff fe6c 	bl	800c6cc <putc_bfd>
 800c9f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c9f8:	1c5a      	adds	r2, r3, #1
 800c9fa:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c9fe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d8f0      	bhi.n	800c9e8 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800ca06:	e009      	b.n	800ca1c <f_printf+0x218>
 800ca08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ca0a:	1c5a      	adds	r2, r3, #1
 800ca0c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ca0e:	781a      	ldrb	r2, [r3, #0]
 800ca10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ca14:	4611      	mov	r1, r2
 800ca16:	4618      	mov	r0, r3
 800ca18:	f7ff fe58 	bl	800c6cc <putc_bfd>
 800ca1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ca1e:	781b      	ldrb	r3, [r3, #0]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d1f1      	bne.n	800ca08 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800ca24:	e005      	b.n	800ca32 <f_printf+0x22e>
 800ca26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ca2a:	2120      	movs	r1, #32
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f7ff fe4d 	bl	800c6cc <putc_bfd>
 800ca32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ca36:	1c5a      	adds	r2, r3, #1
 800ca38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ca3c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d8f0      	bhi.n	800ca26 <f_printf+0x222>
			continue;
 800ca44:	e0ea      	b.n	800cc1c <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800ca46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca48:	1d1a      	adds	r2, r3, #4
 800ca4a:	67ba      	str	r2, [r7, #120]	; 0x78
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	b2da      	uxtb	r2, r3
 800ca50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ca54:	4611      	mov	r1, r2
 800ca56:	4618      	mov	r0, r3
 800ca58:	f7ff fe38 	bl	800c6cc <putc_bfd>
 800ca5c:	e0de      	b.n	800cc1c <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800ca5e:	2302      	movs	r3, #2
 800ca60:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ca64:	e014      	b.n	800ca90 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800ca66:	2308      	movs	r3, #8
 800ca68:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ca6c:	e010      	b.n	800ca90 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800ca6e:	230a      	movs	r3, #10
 800ca70:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ca74:	e00c      	b.n	800ca90 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800ca76:	2310      	movs	r3, #16
 800ca78:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800ca7c:	e008      	b.n	800ca90 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800ca7e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800ca82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ca86:	4611      	mov	r1, r2
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7ff fe1f 	bl	800c6cc <putc_bfd>
 800ca8e:	e0c5      	b.n	800cc1c <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800ca90:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ca94:	f003 0304 	and.w	r3, r3, #4
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d004      	beq.n	800caa6 <f_printf+0x2a2>
 800ca9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca9e:	1d1a      	adds	r2, r3, #4
 800caa0:	67ba      	str	r2, [r7, #120]	; 0x78
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	e00c      	b.n	800cac0 <f_printf+0x2bc>
 800caa6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800caaa:	2b44      	cmp	r3, #68	; 0x44
 800caac:	d104      	bne.n	800cab8 <f_printf+0x2b4>
 800caae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cab0:	1d1a      	adds	r2, r3, #4
 800cab2:	67ba      	str	r2, [r7, #120]	; 0x78
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	e003      	b.n	800cac0 <f_printf+0x2bc>
 800cab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800caba:	1d1a      	adds	r2, r3, #4
 800cabc:	67ba      	str	r2, [r7, #120]	; 0x78
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800cac4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800cac8:	2b44      	cmp	r3, #68	; 0x44
 800caca:	d10e      	bne.n	800caea <f_printf+0x2e6>
 800cacc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	da0a      	bge.n	800caea <f_printf+0x2e6>
			v = 0 - v;
 800cad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cad8:	425b      	negs	r3, r3
 800cada:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800cade:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800cae2:	f043 0308 	orr.w	r3, r3, #8
 800cae6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800caea:	2300      	movs	r3, #0
 800caec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800caf0:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800caf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800caf8:	fbb3 f1f2 	udiv	r1, r3, r2
 800cafc:	fb01 f202 	mul.w	r2, r1, r2
 800cb00:	1a9b      	subs	r3, r3, r2
 800cb02:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800cb06:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800cb0a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800cb0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800cb16:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800cb1a:	2b09      	cmp	r3, #9
 800cb1c:	d90b      	bls.n	800cb36 <f_printf+0x332>
 800cb1e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800cb22:	2b78      	cmp	r3, #120	; 0x78
 800cb24:	d101      	bne.n	800cb2a <f_printf+0x326>
 800cb26:	2227      	movs	r2, #39	; 0x27
 800cb28:	e000      	b.n	800cb2c <f_printf+0x328>
 800cb2a:	2207      	movs	r2, #7
 800cb2c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800cb30:	4413      	add	r3, r2
 800cb32:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800cb36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cb3a:	1c5a      	adds	r2, r3, #1
 800cb3c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800cb40:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800cb44:	3230      	adds	r2, #48	; 0x30
 800cb46:	b2d2      	uxtb	r2, r2
 800cb48:	3398      	adds	r3, #152	; 0x98
 800cb4a:	443b      	add	r3, r7
 800cb4c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800cb50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d003      	beq.n	800cb60 <f_printf+0x35c>
 800cb58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cb5c:	2b1f      	cmp	r3, #31
 800cb5e:	d9c7      	bls.n	800caf0 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800cb60:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800cb64:	f003 0308 	and.w	r3, r3, #8
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d009      	beq.n	800cb80 <f_printf+0x37c>
 800cb6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cb70:	1c5a      	adds	r2, r3, #1
 800cb72:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800cb76:	3398      	adds	r3, #152	; 0x98
 800cb78:	443b      	add	r3, r7
 800cb7a:	222d      	movs	r2, #45	; 0x2d
 800cb7c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800cb80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cb84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cb88:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800cb8c:	f003 0301 	and.w	r3, r3, #1
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d001      	beq.n	800cb98 <f_printf+0x394>
 800cb94:	2330      	movs	r3, #48	; 0x30
 800cb96:	e000      	b.n	800cb9a <f_printf+0x396>
 800cb98:	2320      	movs	r3, #32
 800cb9a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800cb9e:	e007      	b.n	800cbb0 <f_printf+0x3ac>
 800cba0:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800cba4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cba8:	4611      	mov	r1, r2
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7ff fd8e 	bl	800c6cc <putc_bfd>
 800cbb0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800cbb4:	f003 0302 	and.w	r3, r3, #2
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d108      	bne.n	800cbce <f_printf+0x3ca>
 800cbbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cbc0:	1c5a      	adds	r2, r3, #1
 800cbc2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cbc6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d8e8      	bhi.n	800cba0 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800cbce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cbd2:	3b01      	subs	r3, #1
 800cbd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cbd8:	f107 020c 	add.w	r2, r7, #12
 800cbdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cbe0:	4413      	add	r3, r2
 800cbe2:	781a      	ldrb	r2, [r3, #0]
 800cbe4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cbe8:	4611      	mov	r1, r2
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7ff fd6e 	bl	800c6cc <putc_bfd>
		} while (i);
 800cbf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d1ea      	bne.n	800cbce <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800cbf8:	e007      	b.n	800cc0a <f_printf+0x406>
 800cbfa:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800cbfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cc02:	4611      	mov	r1, r2
 800cc04:	4618      	mov	r0, r3
 800cc06:	f7ff fd61 	bl	800c6cc <putc_bfd>
 800cc0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cc0e:	1c5a      	adds	r2, r3, #1
 800cc10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cc14:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d8ee      	bhi.n	800cbfa <f_printf+0x3f6>
		c = *fmt++;
 800cc1c:	e600      	b.n	800c820 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800cc1e:	bf00      	nop
 800cc20:	e000      	b.n	800cc24 <f_printf+0x420>
		if (!c) break;
 800cc22:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800cc24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f7ff fd8c 	bl	800c746 <putc_flush>
 800cc2e:	4603      	mov	r3, r0
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	379c      	adds	r7, #156	; 0x9c
 800cc34:	46bd      	mov	sp, r7
 800cc36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cc3a:	b003      	add	sp, #12
 800cc3c:	4770      	bx	lr
 800cc3e:	bf00      	nop

0800cc40 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cc40:	b480      	push	{r7}
 800cc42:	b087      	sub	sp, #28
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	60f8      	str	r0, [r7, #12]
 800cc48:	60b9      	str	r1, [r7, #8]
 800cc4a:	4613      	mov	r3, r2
 800cc4c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cc4e:	2301      	movs	r3, #1
 800cc50:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cc52:	2300      	movs	r3, #0
 800cc54:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cc56:	4b1f      	ldr	r3, [pc, #124]	; (800ccd4 <FATFS_LinkDriverEx+0x94>)
 800cc58:	7a5b      	ldrb	r3, [r3, #9]
 800cc5a:	b2db      	uxtb	r3, r3
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d131      	bne.n	800ccc4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cc60:	4b1c      	ldr	r3, [pc, #112]	; (800ccd4 <FATFS_LinkDriverEx+0x94>)
 800cc62:	7a5b      	ldrb	r3, [r3, #9]
 800cc64:	b2db      	uxtb	r3, r3
 800cc66:	461a      	mov	r2, r3
 800cc68:	4b1a      	ldr	r3, [pc, #104]	; (800ccd4 <FATFS_LinkDriverEx+0x94>)
 800cc6a:	2100      	movs	r1, #0
 800cc6c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cc6e:	4b19      	ldr	r3, [pc, #100]	; (800ccd4 <FATFS_LinkDriverEx+0x94>)
 800cc70:	7a5b      	ldrb	r3, [r3, #9]
 800cc72:	b2db      	uxtb	r3, r3
 800cc74:	4a17      	ldr	r2, [pc, #92]	; (800ccd4 <FATFS_LinkDriverEx+0x94>)
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	4413      	add	r3, r2
 800cc7a:	68fa      	ldr	r2, [r7, #12]
 800cc7c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cc7e:	4b15      	ldr	r3, [pc, #84]	; (800ccd4 <FATFS_LinkDriverEx+0x94>)
 800cc80:	7a5b      	ldrb	r3, [r3, #9]
 800cc82:	b2db      	uxtb	r3, r3
 800cc84:	461a      	mov	r2, r3
 800cc86:	4b13      	ldr	r3, [pc, #76]	; (800ccd4 <FATFS_LinkDriverEx+0x94>)
 800cc88:	4413      	add	r3, r2
 800cc8a:	79fa      	ldrb	r2, [r7, #7]
 800cc8c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cc8e:	4b11      	ldr	r3, [pc, #68]	; (800ccd4 <FATFS_LinkDriverEx+0x94>)
 800cc90:	7a5b      	ldrb	r3, [r3, #9]
 800cc92:	b2db      	uxtb	r3, r3
 800cc94:	1c5a      	adds	r2, r3, #1
 800cc96:	b2d1      	uxtb	r1, r2
 800cc98:	4a0e      	ldr	r2, [pc, #56]	; (800ccd4 <FATFS_LinkDriverEx+0x94>)
 800cc9a:	7251      	strb	r1, [r2, #9]
 800cc9c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cc9e:	7dbb      	ldrb	r3, [r7, #22]
 800cca0:	3330      	adds	r3, #48	; 0x30
 800cca2:	b2da      	uxtb	r2, r3
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	223a      	movs	r2, #58	; 0x3a
 800ccae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	3302      	adds	r3, #2
 800ccb4:	222f      	movs	r2, #47	; 0x2f
 800ccb6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	3303      	adds	r3, #3
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ccc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	371c      	adds	r7, #28
 800ccca:	46bd      	mov	sp, r7
 800cccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd0:	4770      	bx	lr
 800ccd2:	bf00      	nop
 800ccd4:	20002358 	.word	0x20002358

0800ccd8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cce2:	2200      	movs	r2, #0
 800cce4:	6839      	ldr	r1, [r7, #0]
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f7ff ffaa 	bl	800cc40 <FATFS_LinkDriverEx>
 800ccec:	4603      	mov	r3, r0
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3708      	adds	r7, #8
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}
	...

0800ccf8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b085      	sub	sp, #20
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	4603      	mov	r3, r0
 800cd00:	6039      	str	r1, [r7, #0]
 800cd02:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800cd04:	88fb      	ldrh	r3, [r7, #6]
 800cd06:	2b7f      	cmp	r3, #127	; 0x7f
 800cd08:	d802      	bhi.n	800cd10 <ff_convert+0x18>
		c = chr;
 800cd0a:	88fb      	ldrh	r3, [r7, #6]
 800cd0c:	81fb      	strh	r3, [r7, #14]
 800cd0e:	e025      	b.n	800cd5c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d00b      	beq.n	800cd2e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800cd16:	88fb      	ldrh	r3, [r7, #6]
 800cd18:	2bff      	cmp	r3, #255	; 0xff
 800cd1a:	d805      	bhi.n	800cd28 <ff_convert+0x30>
 800cd1c:	88fb      	ldrh	r3, [r7, #6]
 800cd1e:	3b80      	subs	r3, #128	; 0x80
 800cd20:	4a12      	ldr	r2, [pc, #72]	; (800cd6c <ff_convert+0x74>)
 800cd22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd26:	e000      	b.n	800cd2a <ff_convert+0x32>
 800cd28:	2300      	movs	r3, #0
 800cd2a:	81fb      	strh	r3, [r7, #14]
 800cd2c:	e016      	b.n	800cd5c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800cd2e:	2300      	movs	r3, #0
 800cd30:	81fb      	strh	r3, [r7, #14]
 800cd32:	e009      	b.n	800cd48 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800cd34:	89fb      	ldrh	r3, [r7, #14]
 800cd36:	4a0d      	ldr	r2, [pc, #52]	; (800cd6c <ff_convert+0x74>)
 800cd38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd3c:	88fa      	ldrh	r2, [r7, #6]
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d006      	beq.n	800cd50 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800cd42:	89fb      	ldrh	r3, [r7, #14]
 800cd44:	3301      	adds	r3, #1
 800cd46:	81fb      	strh	r3, [r7, #14]
 800cd48:	89fb      	ldrh	r3, [r7, #14]
 800cd4a:	2b7f      	cmp	r3, #127	; 0x7f
 800cd4c:	d9f2      	bls.n	800cd34 <ff_convert+0x3c>
 800cd4e:	e000      	b.n	800cd52 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800cd50:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800cd52:	89fb      	ldrh	r3, [r7, #14]
 800cd54:	3380      	adds	r3, #128	; 0x80
 800cd56:	b29b      	uxth	r3, r3
 800cd58:	b2db      	uxtb	r3, r3
 800cd5a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800cd5c:	89fb      	ldrh	r3, [r7, #14]
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3714      	adds	r7, #20
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr
 800cd6a:	bf00      	nop
 800cd6c:	08012494 	.word	0x08012494

0800cd70 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800cd70:	b480      	push	{r7}
 800cd72:	b087      	sub	sp, #28
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	4603      	mov	r3, r0
 800cd78:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800cd7a:	88fb      	ldrh	r3, [r7, #6]
 800cd7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd80:	d201      	bcs.n	800cd86 <ff_wtoupper+0x16>
 800cd82:	4b3e      	ldr	r3, [pc, #248]	; (800ce7c <ff_wtoupper+0x10c>)
 800cd84:	e000      	b.n	800cd88 <ff_wtoupper+0x18>
 800cd86:	4b3e      	ldr	r3, [pc, #248]	; (800ce80 <ff_wtoupper+0x110>)
 800cd88:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	1c9a      	adds	r2, r3, #2
 800cd8e:	617a      	str	r2, [r7, #20]
 800cd90:	881b      	ldrh	r3, [r3, #0]
 800cd92:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800cd94:	8a7b      	ldrh	r3, [r7, #18]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d068      	beq.n	800ce6c <ff_wtoupper+0xfc>
 800cd9a:	88fa      	ldrh	r2, [r7, #6]
 800cd9c:	8a7b      	ldrh	r3, [r7, #18]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d364      	bcc.n	800ce6c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	1c9a      	adds	r2, r3, #2
 800cda6:	617a      	str	r2, [r7, #20]
 800cda8:	881b      	ldrh	r3, [r3, #0]
 800cdaa:	823b      	strh	r3, [r7, #16]
 800cdac:	8a3b      	ldrh	r3, [r7, #16]
 800cdae:	0a1b      	lsrs	r3, r3, #8
 800cdb0:	81fb      	strh	r3, [r7, #14]
 800cdb2:	8a3b      	ldrh	r3, [r7, #16]
 800cdb4:	b2db      	uxtb	r3, r3
 800cdb6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800cdb8:	88fa      	ldrh	r2, [r7, #6]
 800cdba:	8a79      	ldrh	r1, [r7, #18]
 800cdbc:	8a3b      	ldrh	r3, [r7, #16]
 800cdbe:	440b      	add	r3, r1
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	da49      	bge.n	800ce58 <ff_wtoupper+0xe8>
			switch (cmd) {
 800cdc4:	89fb      	ldrh	r3, [r7, #14]
 800cdc6:	2b08      	cmp	r3, #8
 800cdc8:	d84f      	bhi.n	800ce6a <ff_wtoupper+0xfa>
 800cdca:	a201      	add	r2, pc, #4	; (adr r2, 800cdd0 <ff_wtoupper+0x60>)
 800cdcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdd0:	0800cdf5 	.word	0x0800cdf5
 800cdd4:	0800ce07 	.word	0x0800ce07
 800cdd8:	0800ce1d 	.word	0x0800ce1d
 800cddc:	0800ce25 	.word	0x0800ce25
 800cde0:	0800ce2d 	.word	0x0800ce2d
 800cde4:	0800ce35 	.word	0x0800ce35
 800cde8:	0800ce3d 	.word	0x0800ce3d
 800cdec:	0800ce45 	.word	0x0800ce45
 800cdf0:	0800ce4d 	.word	0x0800ce4d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800cdf4:	88fa      	ldrh	r2, [r7, #6]
 800cdf6:	8a7b      	ldrh	r3, [r7, #18]
 800cdf8:	1ad3      	subs	r3, r2, r3
 800cdfa:	005b      	lsls	r3, r3, #1
 800cdfc:	697a      	ldr	r2, [r7, #20]
 800cdfe:	4413      	add	r3, r2
 800ce00:	881b      	ldrh	r3, [r3, #0]
 800ce02:	80fb      	strh	r3, [r7, #6]
 800ce04:	e027      	b.n	800ce56 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ce06:	88fa      	ldrh	r2, [r7, #6]
 800ce08:	8a7b      	ldrh	r3, [r7, #18]
 800ce0a:	1ad3      	subs	r3, r2, r3
 800ce0c:	b29b      	uxth	r3, r3
 800ce0e:	f003 0301 	and.w	r3, r3, #1
 800ce12:	b29b      	uxth	r3, r3
 800ce14:	88fa      	ldrh	r2, [r7, #6]
 800ce16:	1ad3      	subs	r3, r2, r3
 800ce18:	80fb      	strh	r3, [r7, #6]
 800ce1a:	e01c      	b.n	800ce56 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ce1c:	88fb      	ldrh	r3, [r7, #6]
 800ce1e:	3b10      	subs	r3, #16
 800ce20:	80fb      	strh	r3, [r7, #6]
 800ce22:	e018      	b.n	800ce56 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ce24:	88fb      	ldrh	r3, [r7, #6]
 800ce26:	3b20      	subs	r3, #32
 800ce28:	80fb      	strh	r3, [r7, #6]
 800ce2a:	e014      	b.n	800ce56 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ce2c:	88fb      	ldrh	r3, [r7, #6]
 800ce2e:	3b30      	subs	r3, #48	; 0x30
 800ce30:	80fb      	strh	r3, [r7, #6]
 800ce32:	e010      	b.n	800ce56 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ce34:	88fb      	ldrh	r3, [r7, #6]
 800ce36:	3b1a      	subs	r3, #26
 800ce38:	80fb      	strh	r3, [r7, #6]
 800ce3a:	e00c      	b.n	800ce56 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ce3c:	88fb      	ldrh	r3, [r7, #6]
 800ce3e:	3308      	adds	r3, #8
 800ce40:	80fb      	strh	r3, [r7, #6]
 800ce42:	e008      	b.n	800ce56 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ce44:	88fb      	ldrh	r3, [r7, #6]
 800ce46:	3b50      	subs	r3, #80	; 0x50
 800ce48:	80fb      	strh	r3, [r7, #6]
 800ce4a:	e004      	b.n	800ce56 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ce4c:	88fb      	ldrh	r3, [r7, #6]
 800ce4e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800ce52:	80fb      	strh	r3, [r7, #6]
 800ce54:	bf00      	nop
			}
			break;
 800ce56:	e008      	b.n	800ce6a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ce58:	89fb      	ldrh	r3, [r7, #14]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d195      	bne.n	800cd8a <ff_wtoupper+0x1a>
 800ce5e:	8a3b      	ldrh	r3, [r7, #16]
 800ce60:	005b      	lsls	r3, r3, #1
 800ce62:	697a      	ldr	r2, [r7, #20]
 800ce64:	4413      	add	r3, r2
 800ce66:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ce68:	e78f      	b.n	800cd8a <ff_wtoupper+0x1a>
			break;
 800ce6a:	bf00      	nop
	}

	return chr;
 800ce6c:	88fb      	ldrh	r3, [r7, #6]
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	371c      	adds	r7, #28
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr
 800ce7a:	bf00      	nop
 800ce7c:	08012594 	.word	0x08012594
 800ce80:	08012788 	.word	0x08012788

0800ce84 <__NVIC_SetPriority>:
{
 800ce84:	b480      	push	{r7}
 800ce86:	b083      	sub	sp, #12
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	6039      	str	r1, [r7, #0]
 800ce8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ce90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	db0a      	blt.n	800ceae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	b2da      	uxtb	r2, r3
 800ce9c:	490c      	ldr	r1, [pc, #48]	; (800ced0 <__NVIC_SetPriority+0x4c>)
 800ce9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cea2:	0112      	lsls	r2, r2, #4
 800cea4:	b2d2      	uxtb	r2, r2
 800cea6:	440b      	add	r3, r1
 800cea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ceac:	e00a      	b.n	800cec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	b2da      	uxtb	r2, r3
 800ceb2:	4908      	ldr	r1, [pc, #32]	; (800ced4 <__NVIC_SetPriority+0x50>)
 800ceb4:	79fb      	ldrb	r3, [r7, #7]
 800ceb6:	f003 030f 	and.w	r3, r3, #15
 800ceba:	3b04      	subs	r3, #4
 800cebc:	0112      	lsls	r2, r2, #4
 800cebe:	b2d2      	uxtb	r2, r2
 800cec0:	440b      	add	r3, r1
 800cec2:	761a      	strb	r2, [r3, #24]
}
 800cec4:	bf00      	nop
 800cec6:	370c      	adds	r7, #12
 800cec8:	46bd      	mov	sp, r7
 800ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cece:	4770      	bx	lr
 800ced0:	e000e100 	.word	0xe000e100
 800ced4:	e000ed00 	.word	0xe000ed00

0800ced8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ced8:	b580      	push	{r7, lr}
 800ceda:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800cedc:	4b05      	ldr	r3, [pc, #20]	; (800cef4 <SysTick_Handler+0x1c>)
 800cede:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cee0:	f001 ff5a 	bl	800ed98 <xTaskGetSchedulerState>
 800cee4:	4603      	mov	r3, r0
 800cee6:	2b01      	cmp	r3, #1
 800cee8:	d001      	beq.n	800ceee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ceea:	f002 fe3d 	bl	800fb68 <xPortSysTickHandler>
  }
}
 800ceee:	bf00      	nop
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	e000e010 	.word	0xe000e010

0800cef8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cef8:	b580      	push	{r7, lr}
 800cefa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cefc:	2100      	movs	r1, #0
 800cefe:	f06f 0004 	mvn.w	r0, #4
 800cf02:	f7ff ffbf 	bl	800ce84 <__NVIC_SetPriority>
#endif
}
 800cf06:	bf00      	nop
 800cf08:	bd80      	pop	{r7, pc}
	...

0800cf0c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cf0c:	b480      	push	{r7}
 800cf0e:	b083      	sub	sp, #12
 800cf10:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf12:	f3ef 8305 	mrs	r3, IPSR
 800cf16:	603b      	str	r3, [r7, #0]
  return(result);
 800cf18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d003      	beq.n	800cf26 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800cf1e:	f06f 0305 	mvn.w	r3, #5
 800cf22:	607b      	str	r3, [r7, #4]
 800cf24:	e00c      	b.n	800cf40 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cf26:	4b0a      	ldr	r3, [pc, #40]	; (800cf50 <osKernelInitialize+0x44>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d105      	bne.n	800cf3a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cf2e:	4b08      	ldr	r3, [pc, #32]	; (800cf50 <osKernelInitialize+0x44>)
 800cf30:	2201      	movs	r2, #1
 800cf32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cf34:	2300      	movs	r3, #0
 800cf36:	607b      	str	r3, [r7, #4]
 800cf38:	e002      	b.n	800cf40 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cf3a:	f04f 33ff 	mov.w	r3, #4294967295
 800cf3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cf40:	687b      	ldr	r3, [r7, #4]
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	370c      	adds	r7, #12
 800cf46:	46bd      	mov	sp, r7
 800cf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4c:	4770      	bx	lr
 800cf4e:	bf00      	nop
 800cf50:	20002364 	.word	0x20002364

0800cf54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b082      	sub	sp, #8
 800cf58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf5a:	f3ef 8305 	mrs	r3, IPSR
 800cf5e:	603b      	str	r3, [r7, #0]
  return(result);
 800cf60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d003      	beq.n	800cf6e <osKernelStart+0x1a>
    stat = osErrorISR;
 800cf66:	f06f 0305 	mvn.w	r3, #5
 800cf6a:	607b      	str	r3, [r7, #4]
 800cf6c:	e010      	b.n	800cf90 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cf6e:	4b0b      	ldr	r3, [pc, #44]	; (800cf9c <osKernelStart+0x48>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	2b01      	cmp	r3, #1
 800cf74:	d109      	bne.n	800cf8a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cf76:	f7ff ffbf 	bl	800cef8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cf7a:	4b08      	ldr	r3, [pc, #32]	; (800cf9c <osKernelStart+0x48>)
 800cf7c:	2202      	movs	r2, #2
 800cf7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cf80:	f001 faae 	bl	800e4e0 <vTaskStartScheduler>
      stat = osOK;
 800cf84:	2300      	movs	r3, #0
 800cf86:	607b      	str	r3, [r7, #4]
 800cf88:	e002      	b.n	800cf90 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cf8a:	f04f 33ff 	mov.w	r3, #4294967295
 800cf8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cf90:	687b      	ldr	r3, [r7, #4]
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3708      	adds	r7, #8
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}
 800cf9a:	bf00      	nop
 800cf9c:	20002364 	.word	0x20002364

0800cfa0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b08e      	sub	sp, #56	; 0x38
 800cfa4:	af04      	add	r7, sp, #16
 800cfa6:	60f8      	str	r0, [r7, #12]
 800cfa8:	60b9      	str	r1, [r7, #8]
 800cfaa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cfac:	2300      	movs	r3, #0
 800cfae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfb0:	f3ef 8305 	mrs	r3, IPSR
 800cfb4:	617b      	str	r3, [r7, #20]
  return(result);
 800cfb6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d17e      	bne.n	800d0ba <osThreadNew+0x11a>
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d07b      	beq.n	800d0ba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cfc2:	2380      	movs	r3, #128	; 0x80
 800cfc4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cfc6:	2318      	movs	r3, #24
 800cfc8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800cfce:	f04f 33ff 	mov.w	r3, #4294967295
 800cfd2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d045      	beq.n	800d066 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d002      	beq.n	800cfe8 <osThreadNew+0x48>
        name = attr->name;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	699b      	ldr	r3, [r3, #24]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d002      	beq.n	800cff6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	699b      	ldr	r3, [r3, #24]
 800cff4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cff6:	69fb      	ldr	r3, [r7, #28]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d008      	beq.n	800d00e <osThreadNew+0x6e>
 800cffc:	69fb      	ldr	r3, [r7, #28]
 800cffe:	2b38      	cmp	r3, #56	; 0x38
 800d000:	d805      	bhi.n	800d00e <osThreadNew+0x6e>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	685b      	ldr	r3, [r3, #4]
 800d006:	f003 0301 	and.w	r3, r3, #1
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d001      	beq.n	800d012 <osThreadNew+0x72>
        return (NULL);
 800d00e:	2300      	movs	r3, #0
 800d010:	e054      	b.n	800d0bc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	695b      	ldr	r3, [r3, #20]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d003      	beq.n	800d022 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	695b      	ldr	r3, [r3, #20]
 800d01e:	089b      	lsrs	r3, r3, #2
 800d020:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	689b      	ldr	r3, [r3, #8]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d00e      	beq.n	800d048 <osThreadNew+0xa8>
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	68db      	ldr	r3, [r3, #12]
 800d02e:	2bbb      	cmp	r3, #187	; 0xbb
 800d030:	d90a      	bls.n	800d048 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d036:	2b00      	cmp	r3, #0
 800d038:	d006      	beq.n	800d048 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	695b      	ldr	r3, [r3, #20]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d002      	beq.n	800d048 <osThreadNew+0xa8>
        mem = 1;
 800d042:	2301      	movs	r3, #1
 800d044:	61bb      	str	r3, [r7, #24]
 800d046:	e010      	b.n	800d06a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	689b      	ldr	r3, [r3, #8]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d10c      	bne.n	800d06a <osThreadNew+0xca>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	68db      	ldr	r3, [r3, #12]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d108      	bne.n	800d06a <osThreadNew+0xca>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	691b      	ldr	r3, [r3, #16]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d104      	bne.n	800d06a <osThreadNew+0xca>
          mem = 0;
 800d060:	2300      	movs	r3, #0
 800d062:	61bb      	str	r3, [r7, #24]
 800d064:	e001      	b.n	800d06a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d066:	2300      	movs	r3, #0
 800d068:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d06a:	69bb      	ldr	r3, [r7, #24]
 800d06c:	2b01      	cmp	r3, #1
 800d06e:	d110      	bne.n	800d092 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d078:	9202      	str	r2, [sp, #8]
 800d07a:	9301      	str	r3, [sp, #4]
 800d07c:	69fb      	ldr	r3, [r7, #28]
 800d07e:	9300      	str	r3, [sp, #0]
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	6a3a      	ldr	r2, [r7, #32]
 800d084:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d086:	68f8      	ldr	r0, [r7, #12]
 800d088:	f000 ff4e 	bl	800df28 <xTaskCreateStatic>
 800d08c:	4603      	mov	r3, r0
 800d08e:	613b      	str	r3, [r7, #16]
 800d090:	e013      	b.n	800d0ba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d092:	69bb      	ldr	r3, [r7, #24]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d110      	bne.n	800d0ba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d098:	6a3b      	ldr	r3, [r7, #32]
 800d09a:	b29a      	uxth	r2, r3
 800d09c:	f107 0310 	add.w	r3, r7, #16
 800d0a0:	9301      	str	r3, [sp, #4]
 800d0a2:	69fb      	ldr	r3, [r7, #28]
 800d0a4:	9300      	str	r3, [sp, #0]
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d0aa:	68f8      	ldr	r0, [r7, #12]
 800d0ac:	f000 ff99 	bl	800dfe2 <xTaskCreate>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	2b01      	cmp	r3, #1
 800d0b4:	d001      	beq.n	800d0ba <osThreadNew+0x11a>
            hTask = NULL;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d0ba:	693b      	ldr	r3, [r7, #16]
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3728      	adds	r7, #40	; 0x28
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d0c4:	b480      	push	{r7}
 800d0c6:	b085      	sub	sp, #20
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	60f8      	str	r0, [r7, #12]
 800d0cc:	60b9      	str	r1, [r7, #8]
 800d0ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	4a07      	ldr	r2, [pc, #28]	; (800d0f0 <vApplicationGetIdleTaskMemory+0x2c>)
 800d0d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	4a06      	ldr	r2, [pc, #24]	; (800d0f4 <vApplicationGetIdleTaskMemory+0x30>)
 800d0da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2280      	movs	r2, #128	; 0x80
 800d0e0:	601a      	str	r2, [r3, #0]
}
 800d0e2:	bf00      	nop
 800d0e4:	3714      	adds	r7, #20
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ec:	4770      	bx	lr
 800d0ee:	bf00      	nop
 800d0f0:	20002368 	.word	0x20002368
 800d0f4:	20002424 	.word	0x20002424

0800d0f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d0f8:	b480      	push	{r7}
 800d0fa:	b085      	sub	sp, #20
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	60f8      	str	r0, [r7, #12]
 800d100:	60b9      	str	r1, [r7, #8]
 800d102:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	4a07      	ldr	r2, [pc, #28]	; (800d124 <vApplicationGetTimerTaskMemory+0x2c>)
 800d108:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	4a06      	ldr	r2, [pc, #24]	; (800d128 <vApplicationGetTimerTaskMemory+0x30>)
 800d10e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d116:	601a      	str	r2, [r3, #0]
}
 800d118:	bf00      	nop
 800d11a:	3714      	adds	r7, #20
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr
 800d124:	20002624 	.word	0x20002624
 800d128:	200026e0 	.word	0x200026e0

0800d12c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d12c:	b480      	push	{r7}
 800d12e:	b083      	sub	sp, #12
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f103 0208 	add.w	r2, r3, #8
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f04f 32ff 	mov.w	r2, #4294967295
 800d144:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f103 0208 	add.w	r2, r3, #8
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f103 0208 	add.w	r2, r3, #8
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2200      	movs	r2, #0
 800d15e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d160:	bf00      	nop
 800d162:	370c      	adds	r7, #12
 800d164:	46bd      	mov	sp, r7
 800d166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16a:	4770      	bx	lr

0800d16c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d16c:	b480      	push	{r7}
 800d16e:	b083      	sub	sp, #12
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2200      	movs	r2, #0
 800d178:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d17a:	bf00      	nop
 800d17c:	370c      	adds	r7, #12
 800d17e:	46bd      	mov	sp, r7
 800d180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d184:	4770      	bx	lr

0800d186 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d186:	b480      	push	{r7}
 800d188:	b085      	sub	sp, #20
 800d18a:	af00      	add	r7, sp, #0
 800d18c:	6078      	str	r0, [r7, #4]
 800d18e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	685b      	ldr	r3, [r3, #4]
 800d194:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	68fa      	ldr	r2, [r7, #12]
 800d19a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	689a      	ldr	r2, [r3, #8]
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	689b      	ldr	r3, [r3, #8]
 800d1a8:	683a      	ldr	r2, [r7, #0]
 800d1aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	683a      	ldr	r2, [r7, #0]
 800d1b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	687a      	ldr	r2, [r7, #4]
 800d1b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	1c5a      	adds	r2, r3, #1
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	601a      	str	r2, [r3, #0]
}
 800d1c2:	bf00      	nop
 800d1c4:	3714      	adds	r7, #20
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1cc:	4770      	bx	lr

0800d1ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d1ce:	b480      	push	{r7}
 800d1d0:	b085      	sub	sp, #20
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	6078      	str	r0, [r7, #4]
 800d1d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1e4:	d103      	bne.n	800d1ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	691b      	ldr	r3, [r3, #16]
 800d1ea:	60fb      	str	r3, [r7, #12]
 800d1ec:	e00c      	b.n	800d208 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	3308      	adds	r3, #8
 800d1f2:	60fb      	str	r3, [r7, #12]
 800d1f4:	e002      	b.n	800d1fc <vListInsert+0x2e>
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	685b      	ldr	r3, [r3, #4]
 800d1fa:	60fb      	str	r3, [r7, #12]
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	685b      	ldr	r3, [r3, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	68ba      	ldr	r2, [r7, #8]
 800d204:	429a      	cmp	r2, r3
 800d206:	d2f6      	bcs.n	800d1f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	685a      	ldr	r2, [r3, #4]
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	685b      	ldr	r3, [r3, #4]
 800d214:	683a      	ldr	r2, [r7, #0]
 800d216:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	68fa      	ldr	r2, [r7, #12]
 800d21c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	683a      	ldr	r2, [r7, #0]
 800d222:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	687a      	ldr	r2, [r7, #4]
 800d228:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	1c5a      	adds	r2, r3, #1
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	601a      	str	r2, [r3, #0]
}
 800d234:	bf00      	nop
 800d236:	3714      	adds	r7, #20
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr

0800d240 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d240:	b480      	push	{r7}
 800d242:	b085      	sub	sp, #20
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	691b      	ldr	r3, [r3, #16]
 800d24c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	685b      	ldr	r3, [r3, #4]
 800d252:	687a      	ldr	r2, [r7, #4]
 800d254:	6892      	ldr	r2, [r2, #8]
 800d256:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	689b      	ldr	r3, [r3, #8]
 800d25c:	687a      	ldr	r2, [r7, #4]
 800d25e:	6852      	ldr	r2, [r2, #4]
 800d260:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	685b      	ldr	r3, [r3, #4]
 800d266:	687a      	ldr	r2, [r7, #4]
 800d268:	429a      	cmp	r2, r3
 800d26a:	d103      	bne.n	800d274 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	689a      	ldr	r2, [r3, #8]
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2200      	movs	r2, #0
 800d278:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	1e5a      	subs	r2, r3, #1
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	681b      	ldr	r3, [r3, #0]
}
 800d288:	4618      	mov	r0, r3
 800d28a:	3714      	adds	r7, #20
 800d28c:	46bd      	mov	sp, r7
 800d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d292:	4770      	bx	lr

0800d294 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b084      	sub	sp, #16
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d10a      	bne.n	800d2be <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ac:	f383 8811 	msr	BASEPRI, r3
 800d2b0:	f3bf 8f6f 	isb	sy
 800d2b4:	f3bf 8f4f 	dsb	sy
 800d2b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d2ba:	bf00      	nop
 800d2bc:	e7fe      	b.n	800d2bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d2be:	f002 fbc1 	bl	800fa44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	681a      	ldr	r2, [r3, #0]
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2ca:	68f9      	ldr	r1, [r7, #12]
 800d2cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d2ce:	fb01 f303 	mul.w	r3, r1, r3
 800d2d2:	441a      	add	r2, r3
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	681a      	ldr	r2, [r3, #0]
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	681a      	ldr	r2, [r3, #0]
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2ee:	3b01      	subs	r3, #1
 800d2f0:	68f9      	ldr	r1, [r7, #12]
 800d2f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d2f4:	fb01 f303 	mul.w	r3, r1, r3
 800d2f8:	441a      	add	r2, r3
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	22ff      	movs	r2, #255	; 0xff
 800d302:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	22ff      	movs	r2, #255	; 0xff
 800d30a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d114      	bne.n	800d33e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	691b      	ldr	r3, [r3, #16]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d01a      	beq.n	800d352 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	3310      	adds	r3, #16
 800d320:	4618      	mov	r0, r3
 800d322:	f001 fb77 	bl	800ea14 <xTaskRemoveFromEventList>
 800d326:	4603      	mov	r3, r0
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d012      	beq.n	800d352 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d32c:	4b0c      	ldr	r3, [pc, #48]	; (800d360 <xQueueGenericReset+0xcc>)
 800d32e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d332:	601a      	str	r2, [r3, #0]
 800d334:	f3bf 8f4f 	dsb	sy
 800d338:	f3bf 8f6f 	isb	sy
 800d33c:	e009      	b.n	800d352 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	3310      	adds	r3, #16
 800d342:	4618      	mov	r0, r3
 800d344:	f7ff fef2 	bl	800d12c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	3324      	adds	r3, #36	; 0x24
 800d34c:	4618      	mov	r0, r3
 800d34e:	f7ff feed 	bl	800d12c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d352:	f002 fba7 	bl	800faa4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d356:	2301      	movs	r3, #1
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3710      	adds	r7, #16
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}
 800d360:	e000ed04 	.word	0xe000ed04

0800d364 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d364:	b580      	push	{r7, lr}
 800d366:	b08e      	sub	sp, #56	; 0x38
 800d368:	af02      	add	r7, sp, #8
 800d36a:	60f8      	str	r0, [r7, #12]
 800d36c:	60b9      	str	r1, [r7, #8]
 800d36e:	607a      	str	r2, [r7, #4]
 800d370:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d10a      	bne.n	800d38e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d37c:	f383 8811 	msr	BASEPRI, r3
 800d380:	f3bf 8f6f 	isb	sy
 800d384:	f3bf 8f4f 	dsb	sy
 800d388:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d38a:	bf00      	nop
 800d38c:	e7fe      	b.n	800d38c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d10a      	bne.n	800d3aa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d398:	f383 8811 	msr	BASEPRI, r3
 800d39c:	f3bf 8f6f 	isb	sy
 800d3a0:	f3bf 8f4f 	dsb	sy
 800d3a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d3a6:	bf00      	nop
 800d3a8:	e7fe      	b.n	800d3a8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d002      	beq.n	800d3b6 <xQueueGenericCreateStatic+0x52>
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d001      	beq.n	800d3ba <xQueueGenericCreateStatic+0x56>
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	e000      	b.n	800d3bc <xQueueGenericCreateStatic+0x58>
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d10a      	bne.n	800d3d6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c4:	f383 8811 	msr	BASEPRI, r3
 800d3c8:	f3bf 8f6f 	isb	sy
 800d3cc:	f3bf 8f4f 	dsb	sy
 800d3d0:	623b      	str	r3, [r7, #32]
}
 800d3d2:	bf00      	nop
 800d3d4:	e7fe      	b.n	800d3d4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d102      	bne.n	800d3e2 <xQueueGenericCreateStatic+0x7e>
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d101      	bne.n	800d3e6 <xQueueGenericCreateStatic+0x82>
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	e000      	b.n	800d3e8 <xQueueGenericCreateStatic+0x84>
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d10a      	bne.n	800d402 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f0:	f383 8811 	msr	BASEPRI, r3
 800d3f4:	f3bf 8f6f 	isb	sy
 800d3f8:	f3bf 8f4f 	dsb	sy
 800d3fc:	61fb      	str	r3, [r7, #28]
}
 800d3fe:	bf00      	nop
 800d400:	e7fe      	b.n	800d400 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d402:	2350      	movs	r3, #80	; 0x50
 800d404:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	2b50      	cmp	r3, #80	; 0x50
 800d40a:	d00a      	beq.n	800d422 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d410:	f383 8811 	msr	BASEPRI, r3
 800d414:	f3bf 8f6f 	isb	sy
 800d418:	f3bf 8f4f 	dsb	sy
 800d41c:	61bb      	str	r3, [r7, #24]
}
 800d41e:	bf00      	nop
 800d420:	e7fe      	b.n	800d420 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d422:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d00d      	beq.n	800d44a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d430:	2201      	movs	r2, #1
 800d432:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d436:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d43c:	9300      	str	r3, [sp, #0]
 800d43e:	4613      	mov	r3, r2
 800d440:	687a      	ldr	r2, [r7, #4]
 800d442:	68b9      	ldr	r1, [r7, #8]
 800d444:	68f8      	ldr	r0, [r7, #12]
 800d446:	f000 f83f 	bl	800d4c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3730      	adds	r7, #48	; 0x30
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}

0800d454 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d454:	b580      	push	{r7, lr}
 800d456:	b08a      	sub	sp, #40	; 0x28
 800d458:	af02      	add	r7, sp, #8
 800d45a:	60f8      	str	r0, [r7, #12]
 800d45c:	60b9      	str	r1, [r7, #8]
 800d45e:	4613      	mov	r3, r2
 800d460:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d10a      	bne.n	800d47e <xQueueGenericCreate+0x2a>
	__asm volatile
 800d468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d46c:	f383 8811 	msr	BASEPRI, r3
 800d470:	f3bf 8f6f 	isb	sy
 800d474:	f3bf 8f4f 	dsb	sy
 800d478:	613b      	str	r3, [r7, #16]
}
 800d47a:	bf00      	nop
 800d47c:	e7fe      	b.n	800d47c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	68ba      	ldr	r2, [r7, #8]
 800d482:	fb02 f303 	mul.w	r3, r2, r3
 800d486:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d488:	69fb      	ldr	r3, [r7, #28]
 800d48a:	3350      	adds	r3, #80	; 0x50
 800d48c:	4618      	mov	r0, r3
 800d48e:	f002 fbfb 	bl	800fc88 <pvPortMalloc>
 800d492:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d494:	69bb      	ldr	r3, [r7, #24]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d011      	beq.n	800d4be <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d49a:	69bb      	ldr	r3, [r7, #24]
 800d49c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	3350      	adds	r3, #80	; 0x50
 800d4a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d4a4:	69bb      	ldr	r3, [r7, #24]
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d4ac:	79fa      	ldrb	r2, [r7, #7]
 800d4ae:	69bb      	ldr	r3, [r7, #24]
 800d4b0:	9300      	str	r3, [sp, #0]
 800d4b2:	4613      	mov	r3, r2
 800d4b4:	697a      	ldr	r2, [r7, #20]
 800d4b6:	68b9      	ldr	r1, [r7, #8]
 800d4b8:	68f8      	ldr	r0, [r7, #12]
 800d4ba:	f000 f805 	bl	800d4c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d4be:	69bb      	ldr	r3, [r7, #24]
	}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3720      	adds	r7, #32
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}

0800d4c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b084      	sub	sp, #16
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	60f8      	str	r0, [r7, #12]
 800d4d0:	60b9      	str	r1, [r7, #8]
 800d4d2:	607a      	str	r2, [r7, #4]
 800d4d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d103      	bne.n	800d4e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d4dc:	69bb      	ldr	r3, [r7, #24]
 800d4de:	69ba      	ldr	r2, [r7, #24]
 800d4e0:	601a      	str	r2, [r3, #0]
 800d4e2:	e002      	b.n	800d4ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d4e4:	69bb      	ldr	r3, [r7, #24]
 800d4e6:	687a      	ldr	r2, [r7, #4]
 800d4e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d4ea:	69bb      	ldr	r3, [r7, #24]
 800d4ec:	68fa      	ldr	r2, [r7, #12]
 800d4ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d4f0:	69bb      	ldr	r3, [r7, #24]
 800d4f2:	68ba      	ldr	r2, [r7, #8]
 800d4f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d4f6:	2101      	movs	r1, #1
 800d4f8:	69b8      	ldr	r0, [r7, #24]
 800d4fa:	f7ff fecb 	bl	800d294 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d4fe:	69bb      	ldr	r3, [r7, #24]
 800d500:	78fa      	ldrb	r2, [r7, #3]
 800d502:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d506:	bf00      	nop
 800d508:	3710      	adds	r7, #16
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}
	...

0800d510 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b08e      	sub	sp, #56	; 0x38
 800d514:	af00      	add	r7, sp, #0
 800d516:	60f8      	str	r0, [r7, #12]
 800d518:	60b9      	str	r1, [r7, #8]
 800d51a:	607a      	str	r2, [r7, #4]
 800d51c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d51e:	2300      	movs	r3, #0
 800d520:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d10a      	bne.n	800d542 <xQueueGenericSend+0x32>
	__asm volatile
 800d52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d530:	f383 8811 	msr	BASEPRI, r3
 800d534:	f3bf 8f6f 	isb	sy
 800d538:	f3bf 8f4f 	dsb	sy
 800d53c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d53e:	bf00      	nop
 800d540:	e7fe      	b.n	800d540 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d103      	bne.n	800d550 <xQueueGenericSend+0x40>
 800d548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d54a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d101      	bne.n	800d554 <xQueueGenericSend+0x44>
 800d550:	2301      	movs	r3, #1
 800d552:	e000      	b.n	800d556 <xQueueGenericSend+0x46>
 800d554:	2300      	movs	r3, #0
 800d556:	2b00      	cmp	r3, #0
 800d558:	d10a      	bne.n	800d570 <xQueueGenericSend+0x60>
	__asm volatile
 800d55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d55e:	f383 8811 	msr	BASEPRI, r3
 800d562:	f3bf 8f6f 	isb	sy
 800d566:	f3bf 8f4f 	dsb	sy
 800d56a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d56c:	bf00      	nop
 800d56e:	e7fe      	b.n	800d56e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	2b02      	cmp	r3, #2
 800d574:	d103      	bne.n	800d57e <xQueueGenericSend+0x6e>
 800d576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d57a:	2b01      	cmp	r3, #1
 800d57c:	d101      	bne.n	800d582 <xQueueGenericSend+0x72>
 800d57e:	2301      	movs	r3, #1
 800d580:	e000      	b.n	800d584 <xQueueGenericSend+0x74>
 800d582:	2300      	movs	r3, #0
 800d584:	2b00      	cmp	r3, #0
 800d586:	d10a      	bne.n	800d59e <xQueueGenericSend+0x8e>
	__asm volatile
 800d588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d58c:	f383 8811 	msr	BASEPRI, r3
 800d590:	f3bf 8f6f 	isb	sy
 800d594:	f3bf 8f4f 	dsb	sy
 800d598:	623b      	str	r3, [r7, #32]
}
 800d59a:	bf00      	nop
 800d59c:	e7fe      	b.n	800d59c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d59e:	f001 fbfb 	bl	800ed98 <xTaskGetSchedulerState>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d102      	bne.n	800d5ae <xQueueGenericSend+0x9e>
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d101      	bne.n	800d5b2 <xQueueGenericSend+0xa2>
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	e000      	b.n	800d5b4 <xQueueGenericSend+0xa4>
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d10a      	bne.n	800d5ce <xQueueGenericSend+0xbe>
	__asm volatile
 800d5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5bc:	f383 8811 	msr	BASEPRI, r3
 800d5c0:	f3bf 8f6f 	isb	sy
 800d5c4:	f3bf 8f4f 	dsb	sy
 800d5c8:	61fb      	str	r3, [r7, #28]
}
 800d5ca:	bf00      	nop
 800d5cc:	e7fe      	b.n	800d5cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d5ce:	f002 fa39 	bl	800fa44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	d302      	bcc.n	800d5e4 <xQueueGenericSend+0xd4>
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	2b02      	cmp	r3, #2
 800d5e2:	d129      	bne.n	800d638 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d5e4:	683a      	ldr	r2, [r7, #0]
 800d5e6:	68b9      	ldr	r1, [r7, #8]
 800d5e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5ea:	f000 fb2f 	bl	800dc4c <prvCopyDataToQueue>
 800d5ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d010      	beq.n	800d61a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5fa:	3324      	adds	r3, #36	; 0x24
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f001 fa09 	bl	800ea14 <xTaskRemoveFromEventList>
 800d602:	4603      	mov	r3, r0
 800d604:	2b00      	cmp	r3, #0
 800d606:	d013      	beq.n	800d630 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d608:	4b3f      	ldr	r3, [pc, #252]	; (800d708 <xQueueGenericSend+0x1f8>)
 800d60a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d60e:	601a      	str	r2, [r3, #0]
 800d610:	f3bf 8f4f 	dsb	sy
 800d614:	f3bf 8f6f 	isb	sy
 800d618:	e00a      	b.n	800d630 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d007      	beq.n	800d630 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d620:	4b39      	ldr	r3, [pc, #228]	; (800d708 <xQueueGenericSend+0x1f8>)
 800d622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d626:	601a      	str	r2, [r3, #0]
 800d628:	f3bf 8f4f 	dsb	sy
 800d62c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d630:	f002 fa38 	bl	800faa4 <vPortExitCritical>
				return pdPASS;
 800d634:	2301      	movs	r3, #1
 800d636:	e063      	b.n	800d700 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d103      	bne.n	800d646 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d63e:	f002 fa31 	bl	800faa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d642:	2300      	movs	r3, #0
 800d644:	e05c      	b.n	800d700 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d106      	bne.n	800d65a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d64c:	f107 0314 	add.w	r3, r7, #20
 800d650:	4618      	mov	r0, r3
 800d652:	f001 fa43 	bl	800eadc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d656:	2301      	movs	r3, #1
 800d658:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d65a:	f002 fa23 	bl	800faa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d65e:	f000 ffaf 	bl	800e5c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d662:	f002 f9ef 	bl	800fa44 <vPortEnterCritical>
 800d666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d668:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d66c:	b25b      	sxtb	r3, r3
 800d66e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d672:	d103      	bne.n	800d67c <xQueueGenericSend+0x16c>
 800d674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d676:	2200      	movs	r2, #0
 800d678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d67e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d682:	b25b      	sxtb	r3, r3
 800d684:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d688:	d103      	bne.n	800d692 <xQueueGenericSend+0x182>
 800d68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d68c:	2200      	movs	r2, #0
 800d68e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d692:	f002 fa07 	bl	800faa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d696:	1d3a      	adds	r2, r7, #4
 800d698:	f107 0314 	add.w	r3, r7, #20
 800d69c:	4611      	mov	r1, r2
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f001 fa32 	bl	800eb08 <xTaskCheckForTimeOut>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d124      	bne.n	800d6f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d6aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6ac:	f000 fbc6 	bl	800de3c <prvIsQueueFull>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d018      	beq.n	800d6e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6b8:	3310      	adds	r3, #16
 800d6ba:	687a      	ldr	r2, [r7, #4]
 800d6bc:	4611      	mov	r1, r2
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f001 f958 	bl	800e974 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d6c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6c6:	f000 fb51 	bl	800dd6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d6ca:	f000 ff87 	bl	800e5dc <xTaskResumeAll>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	f47f af7c 	bne.w	800d5ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d6d6:	4b0c      	ldr	r3, [pc, #48]	; (800d708 <xQueueGenericSend+0x1f8>)
 800d6d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6dc:	601a      	str	r2, [r3, #0]
 800d6de:	f3bf 8f4f 	dsb	sy
 800d6e2:	f3bf 8f6f 	isb	sy
 800d6e6:	e772      	b.n	800d5ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d6e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6ea:	f000 fb3f 	bl	800dd6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d6ee:	f000 ff75 	bl	800e5dc <xTaskResumeAll>
 800d6f2:	e76c      	b.n	800d5ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d6f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6f6:	f000 fb39 	bl	800dd6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d6fa:	f000 ff6f 	bl	800e5dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d6fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d700:	4618      	mov	r0, r3
 800d702:	3738      	adds	r7, #56	; 0x38
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}
 800d708:	e000ed04 	.word	0xe000ed04

0800d70c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b090      	sub	sp, #64	; 0x40
 800d710:	af00      	add	r7, sp, #0
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	607a      	str	r2, [r7, #4]
 800d718:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d720:	2b00      	cmp	r3, #0
 800d722:	d10a      	bne.n	800d73a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d728:	f383 8811 	msr	BASEPRI, r3
 800d72c:	f3bf 8f6f 	isb	sy
 800d730:	f3bf 8f4f 	dsb	sy
 800d734:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d736:	bf00      	nop
 800d738:	e7fe      	b.n	800d738 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d103      	bne.n	800d748 <xQueueGenericSendFromISR+0x3c>
 800d740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d744:	2b00      	cmp	r3, #0
 800d746:	d101      	bne.n	800d74c <xQueueGenericSendFromISR+0x40>
 800d748:	2301      	movs	r3, #1
 800d74a:	e000      	b.n	800d74e <xQueueGenericSendFromISR+0x42>
 800d74c:	2300      	movs	r3, #0
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d10a      	bne.n	800d768 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d756:	f383 8811 	msr	BASEPRI, r3
 800d75a:	f3bf 8f6f 	isb	sy
 800d75e:	f3bf 8f4f 	dsb	sy
 800d762:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d764:	bf00      	nop
 800d766:	e7fe      	b.n	800d766 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	2b02      	cmp	r3, #2
 800d76c:	d103      	bne.n	800d776 <xQueueGenericSendFromISR+0x6a>
 800d76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d772:	2b01      	cmp	r3, #1
 800d774:	d101      	bne.n	800d77a <xQueueGenericSendFromISR+0x6e>
 800d776:	2301      	movs	r3, #1
 800d778:	e000      	b.n	800d77c <xQueueGenericSendFromISR+0x70>
 800d77a:	2300      	movs	r3, #0
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d10a      	bne.n	800d796 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d784:	f383 8811 	msr	BASEPRI, r3
 800d788:	f3bf 8f6f 	isb	sy
 800d78c:	f3bf 8f4f 	dsb	sy
 800d790:	623b      	str	r3, [r7, #32]
}
 800d792:	bf00      	nop
 800d794:	e7fe      	b.n	800d794 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d796:	f002 fa37 	bl	800fc08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d79a:	f3ef 8211 	mrs	r2, BASEPRI
 800d79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a2:	f383 8811 	msr	BASEPRI, r3
 800d7a6:	f3bf 8f6f 	isb	sy
 800d7aa:	f3bf 8f4f 	dsb	sy
 800d7ae:	61fa      	str	r2, [r7, #28]
 800d7b0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d7b2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d7b4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7be:	429a      	cmp	r2, r3
 800d7c0:	d302      	bcc.n	800d7c8 <xQueueGenericSendFromISR+0xbc>
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	2b02      	cmp	r3, #2
 800d7c6:	d12f      	bne.n	800d828 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d7ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d7d8:	683a      	ldr	r2, [r7, #0]
 800d7da:	68b9      	ldr	r1, [r7, #8]
 800d7dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d7de:	f000 fa35 	bl	800dc4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d7e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d7e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ea:	d112      	bne.n	800d812 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d016      	beq.n	800d822 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7f6:	3324      	adds	r3, #36	; 0x24
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f001 f90b 	bl	800ea14 <xTaskRemoveFromEventList>
 800d7fe:	4603      	mov	r3, r0
 800d800:	2b00      	cmp	r3, #0
 800d802:	d00e      	beq.n	800d822 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d00b      	beq.n	800d822 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2201      	movs	r2, #1
 800d80e:	601a      	str	r2, [r3, #0]
 800d810:	e007      	b.n	800d822 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d812:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d816:	3301      	adds	r3, #1
 800d818:	b2db      	uxtb	r3, r3
 800d81a:	b25a      	sxtb	r2, r3
 800d81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d81e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d822:	2301      	movs	r3, #1
 800d824:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d826:	e001      	b.n	800d82c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d828:	2300      	movs	r3, #0
 800d82a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d82c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d82e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d830:	697b      	ldr	r3, [r7, #20]
 800d832:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d836:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3740      	adds	r7, #64	; 0x40
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}
	...

0800d844 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b08c      	sub	sp, #48	; 0x30
 800d848:	af00      	add	r7, sp, #0
 800d84a:	60f8      	str	r0, [r7, #12]
 800d84c:	60b9      	str	r1, [r7, #8]
 800d84e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d850:	2300      	movs	r3, #0
 800d852:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d10a      	bne.n	800d874 <xQueueReceive+0x30>
	__asm volatile
 800d85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d862:	f383 8811 	msr	BASEPRI, r3
 800d866:	f3bf 8f6f 	isb	sy
 800d86a:	f3bf 8f4f 	dsb	sy
 800d86e:	623b      	str	r3, [r7, #32]
}
 800d870:	bf00      	nop
 800d872:	e7fe      	b.n	800d872 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d103      	bne.n	800d882 <xQueueReceive+0x3e>
 800d87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d87c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d101      	bne.n	800d886 <xQueueReceive+0x42>
 800d882:	2301      	movs	r3, #1
 800d884:	e000      	b.n	800d888 <xQueueReceive+0x44>
 800d886:	2300      	movs	r3, #0
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d10a      	bne.n	800d8a2 <xQueueReceive+0x5e>
	__asm volatile
 800d88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d890:	f383 8811 	msr	BASEPRI, r3
 800d894:	f3bf 8f6f 	isb	sy
 800d898:	f3bf 8f4f 	dsb	sy
 800d89c:	61fb      	str	r3, [r7, #28]
}
 800d89e:	bf00      	nop
 800d8a0:	e7fe      	b.n	800d8a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d8a2:	f001 fa79 	bl	800ed98 <xTaskGetSchedulerState>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d102      	bne.n	800d8b2 <xQueueReceive+0x6e>
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d101      	bne.n	800d8b6 <xQueueReceive+0x72>
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	e000      	b.n	800d8b8 <xQueueReceive+0x74>
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d10a      	bne.n	800d8d2 <xQueueReceive+0x8e>
	__asm volatile
 800d8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8c0:	f383 8811 	msr	BASEPRI, r3
 800d8c4:	f3bf 8f6f 	isb	sy
 800d8c8:	f3bf 8f4f 	dsb	sy
 800d8cc:	61bb      	str	r3, [r7, #24]
}
 800d8ce:	bf00      	nop
 800d8d0:	e7fe      	b.n	800d8d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d8d2:	f002 f8b7 	bl	800fa44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d01f      	beq.n	800d922 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d8e2:	68b9      	ldr	r1, [r7, #8]
 800d8e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8e6:	f000 fa1b 	bl	800dd20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ec:	1e5a      	subs	r2, r3, #1
 800d8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f4:	691b      	ldr	r3, [r3, #16]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d00f      	beq.n	800d91a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8fc:	3310      	adds	r3, #16
 800d8fe:	4618      	mov	r0, r3
 800d900:	f001 f888 	bl	800ea14 <xTaskRemoveFromEventList>
 800d904:	4603      	mov	r3, r0
 800d906:	2b00      	cmp	r3, #0
 800d908:	d007      	beq.n	800d91a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d90a:	4b3d      	ldr	r3, [pc, #244]	; (800da00 <xQueueReceive+0x1bc>)
 800d90c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d910:	601a      	str	r2, [r3, #0]
 800d912:	f3bf 8f4f 	dsb	sy
 800d916:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d91a:	f002 f8c3 	bl	800faa4 <vPortExitCritical>
				return pdPASS;
 800d91e:	2301      	movs	r3, #1
 800d920:	e069      	b.n	800d9f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d103      	bne.n	800d930 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d928:	f002 f8bc 	bl	800faa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d92c:	2300      	movs	r3, #0
 800d92e:	e062      	b.n	800d9f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d932:	2b00      	cmp	r3, #0
 800d934:	d106      	bne.n	800d944 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d936:	f107 0310 	add.w	r3, r7, #16
 800d93a:	4618      	mov	r0, r3
 800d93c:	f001 f8ce 	bl	800eadc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d940:	2301      	movs	r3, #1
 800d942:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d944:	f002 f8ae 	bl	800faa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d948:	f000 fe3a 	bl	800e5c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d94c:	f002 f87a 	bl	800fa44 <vPortEnterCritical>
 800d950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d952:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d956:	b25b      	sxtb	r3, r3
 800d958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d95c:	d103      	bne.n	800d966 <xQueueReceive+0x122>
 800d95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d960:	2200      	movs	r2, #0
 800d962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d968:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d96c:	b25b      	sxtb	r3, r3
 800d96e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d972:	d103      	bne.n	800d97c <xQueueReceive+0x138>
 800d974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d976:	2200      	movs	r2, #0
 800d978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d97c:	f002 f892 	bl	800faa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d980:	1d3a      	adds	r2, r7, #4
 800d982:	f107 0310 	add.w	r3, r7, #16
 800d986:	4611      	mov	r1, r2
 800d988:	4618      	mov	r0, r3
 800d98a:	f001 f8bd 	bl	800eb08 <xTaskCheckForTimeOut>
 800d98e:	4603      	mov	r3, r0
 800d990:	2b00      	cmp	r3, #0
 800d992:	d123      	bne.n	800d9dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d996:	f000 fa3b 	bl	800de10 <prvIsQueueEmpty>
 800d99a:	4603      	mov	r3, r0
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d017      	beq.n	800d9d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a2:	3324      	adds	r3, #36	; 0x24
 800d9a4:	687a      	ldr	r2, [r7, #4]
 800d9a6:	4611      	mov	r1, r2
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f000 ffe3 	bl	800e974 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d9ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9b0:	f000 f9dc 	bl	800dd6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d9b4:	f000 fe12 	bl	800e5dc <xTaskResumeAll>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d189      	bne.n	800d8d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d9be:	4b10      	ldr	r3, [pc, #64]	; (800da00 <xQueueReceive+0x1bc>)
 800d9c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9c4:	601a      	str	r2, [r3, #0]
 800d9c6:	f3bf 8f4f 	dsb	sy
 800d9ca:	f3bf 8f6f 	isb	sy
 800d9ce:	e780      	b.n	800d8d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d9d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9d2:	f000 f9cb 	bl	800dd6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d9d6:	f000 fe01 	bl	800e5dc <xTaskResumeAll>
 800d9da:	e77a      	b.n	800d8d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d9dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9de:	f000 f9c5 	bl	800dd6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d9e2:	f000 fdfb 	bl	800e5dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d9e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9e8:	f000 fa12 	bl	800de10 <prvIsQueueEmpty>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	f43f af6f 	beq.w	800d8d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d9f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3730      	adds	r7, #48	; 0x30
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
 800d9fe:	bf00      	nop
 800da00:	e000ed04 	.word	0xe000ed04

0800da04 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b08e      	sub	sp, #56	; 0x38
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800da0e:	2300      	movs	r3, #0
 800da10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800da16:	2300      	movs	r3, #0
 800da18:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800da1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d10a      	bne.n	800da36 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800da20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da24:	f383 8811 	msr	BASEPRI, r3
 800da28:	f3bf 8f6f 	isb	sy
 800da2c:	f3bf 8f4f 	dsb	sy
 800da30:	623b      	str	r3, [r7, #32]
}
 800da32:	bf00      	nop
 800da34:	e7fe      	b.n	800da34 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800da36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d00a      	beq.n	800da54 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800da3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da42:	f383 8811 	msr	BASEPRI, r3
 800da46:	f3bf 8f6f 	isb	sy
 800da4a:	f3bf 8f4f 	dsb	sy
 800da4e:	61fb      	str	r3, [r7, #28]
}
 800da50:	bf00      	nop
 800da52:	e7fe      	b.n	800da52 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da54:	f001 f9a0 	bl	800ed98 <xTaskGetSchedulerState>
 800da58:	4603      	mov	r3, r0
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d102      	bne.n	800da64 <xQueueSemaphoreTake+0x60>
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d101      	bne.n	800da68 <xQueueSemaphoreTake+0x64>
 800da64:	2301      	movs	r3, #1
 800da66:	e000      	b.n	800da6a <xQueueSemaphoreTake+0x66>
 800da68:	2300      	movs	r3, #0
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d10a      	bne.n	800da84 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800da6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da72:	f383 8811 	msr	BASEPRI, r3
 800da76:	f3bf 8f6f 	isb	sy
 800da7a:	f3bf 8f4f 	dsb	sy
 800da7e:	61bb      	str	r3, [r7, #24]
}
 800da80:	bf00      	nop
 800da82:	e7fe      	b.n	800da82 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800da84:	f001 ffde 	bl	800fa44 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800da88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da8c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800da8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da90:	2b00      	cmp	r3, #0
 800da92:	d024      	beq.n	800dade <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800da94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da96:	1e5a      	subs	r2, r3, #1
 800da98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da9a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800da9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d104      	bne.n	800daae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800daa4:	f001 faee 	bl	800f084 <pvTaskIncrementMutexHeldCount>
 800daa8:	4602      	mov	r2, r0
 800daaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800daae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab0:	691b      	ldr	r3, [r3, #16]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d00f      	beq.n	800dad6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab8:	3310      	adds	r3, #16
 800daba:	4618      	mov	r0, r3
 800dabc:	f000 ffaa 	bl	800ea14 <xTaskRemoveFromEventList>
 800dac0:	4603      	mov	r3, r0
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d007      	beq.n	800dad6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dac6:	4b54      	ldr	r3, [pc, #336]	; (800dc18 <xQueueSemaphoreTake+0x214>)
 800dac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dacc:	601a      	str	r2, [r3, #0]
 800dace:	f3bf 8f4f 	dsb	sy
 800dad2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dad6:	f001 ffe5 	bl	800faa4 <vPortExitCritical>
				return pdPASS;
 800dada:	2301      	movs	r3, #1
 800dadc:	e097      	b.n	800dc0e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d111      	bne.n	800db08 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800dae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d00a      	beq.n	800db00 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800daea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daee:	f383 8811 	msr	BASEPRI, r3
 800daf2:	f3bf 8f6f 	isb	sy
 800daf6:	f3bf 8f4f 	dsb	sy
 800dafa:	617b      	str	r3, [r7, #20]
}
 800dafc:	bf00      	nop
 800dafe:	e7fe      	b.n	800dafe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800db00:	f001 ffd0 	bl	800faa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800db04:	2300      	movs	r3, #0
 800db06:	e082      	b.n	800dc0e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800db08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d106      	bne.n	800db1c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800db0e:	f107 030c 	add.w	r3, r7, #12
 800db12:	4618      	mov	r0, r3
 800db14:	f000 ffe2 	bl	800eadc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800db18:	2301      	movs	r3, #1
 800db1a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800db1c:	f001 ffc2 	bl	800faa4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800db20:	f000 fd4e 	bl	800e5c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800db24:	f001 ff8e 	bl	800fa44 <vPortEnterCritical>
 800db28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db2e:	b25b      	sxtb	r3, r3
 800db30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db34:	d103      	bne.n	800db3e <xQueueSemaphoreTake+0x13a>
 800db36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db38:	2200      	movs	r2, #0
 800db3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800db3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db44:	b25b      	sxtb	r3, r3
 800db46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db4a:	d103      	bne.n	800db54 <xQueueSemaphoreTake+0x150>
 800db4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db4e:	2200      	movs	r2, #0
 800db50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800db54:	f001 ffa6 	bl	800faa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800db58:	463a      	mov	r2, r7
 800db5a:	f107 030c 	add.w	r3, r7, #12
 800db5e:	4611      	mov	r1, r2
 800db60:	4618      	mov	r0, r3
 800db62:	f000 ffd1 	bl	800eb08 <xTaskCheckForTimeOut>
 800db66:	4603      	mov	r3, r0
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d132      	bne.n	800dbd2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800db6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db6e:	f000 f94f 	bl	800de10 <prvIsQueueEmpty>
 800db72:	4603      	mov	r3, r0
 800db74:	2b00      	cmp	r3, #0
 800db76:	d026      	beq.n	800dbc6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800db78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d109      	bne.n	800db94 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800db80:	f001 ff60 	bl	800fa44 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800db84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db86:	689b      	ldr	r3, [r3, #8]
 800db88:	4618      	mov	r0, r3
 800db8a:	f001 f923 	bl	800edd4 <xTaskPriorityInherit>
 800db8e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800db90:	f001 ff88 	bl	800faa4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800db94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db96:	3324      	adds	r3, #36	; 0x24
 800db98:	683a      	ldr	r2, [r7, #0]
 800db9a:	4611      	mov	r1, r2
 800db9c:	4618      	mov	r0, r3
 800db9e:	f000 fee9 	bl	800e974 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dba2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dba4:	f000 f8e2 	bl	800dd6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dba8:	f000 fd18 	bl	800e5dc <xTaskResumeAll>
 800dbac:	4603      	mov	r3, r0
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	f47f af68 	bne.w	800da84 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800dbb4:	4b18      	ldr	r3, [pc, #96]	; (800dc18 <xQueueSemaphoreTake+0x214>)
 800dbb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbba:	601a      	str	r2, [r3, #0]
 800dbbc:	f3bf 8f4f 	dsb	sy
 800dbc0:	f3bf 8f6f 	isb	sy
 800dbc4:	e75e      	b.n	800da84 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800dbc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbc8:	f000 f8d0 	bl	800dd6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dbcc:	f000 fd06 	bl	800e5dc <xTaskResumeAll>
 800dbd0:	e758      	b.n	800da84 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800dbd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbd4:	f000 f8ca 	bl	800dd6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dbd8:	f000 fd00 	bl	800e5dc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dbdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbde:	f000 f917 	bl	800de10 <prvIsQueueEmpty>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	f43f af4d 	beq.w	800da84 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800dbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d00d      	beq.n	800dc0c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800dbf0:	f001 ff28 	bl	800fa44 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800dbf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbf6:	f000 f811 	bl	800dc1c <prvGetDisinheritPriorityAfterTimeout>
 800dbfa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbfe:	689b      	ldr	r3, [r3, #8]
 800dc00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dc02:	4618      	mov	r0, r3
 800dc04:	f001 f9bc 	bl	800ef80 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dc08:	f001 ff4c 	bl	800faa4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dc0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3738      	adds	r7, #56	; 0x38
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
 800dc16:	bf00      	nop
 800dc18:	e000ed04 	.word	0xe000ed04

0800dc1c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800dc1c:	b480      	push	{r7}
 800dc1e:	b085      	sub	sp, #20
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d006      	beq.n	800dc3a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800dc36:	60fb      	str	r3, [r7, #12]
 800dc38:	e001      	b.n	800dc3e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
	}
 800dc40:	4618      	mov	r0, r3
 800dc42:	3714      	adds	r7, #20
 800dc44:	46bd      	mov	sp, r7
 800dc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4a:	4770      	bx	lr

0800dc4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b086      	sub	sp, #24
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	60f8      	str	r0, [r7, #12]
 800dc54:	60b9      	str	r1, [r7, #8]
 800dc56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d10d      	bne.n	800dc86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d14d      	bne.n	800dd0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	689b      	ldr	r3, [r3, #8]
 800dc76:	4618      	mov	r0, r3
 800dc78:	f001 f914 	bl	800eea4 <xTaskPriorityDisinherit>
 800dc7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	2200      	movs	r2, #0
 800dc82:	609a      	str	r2, [r3, #8]
 800dc84:	e043      	b.n	800dd0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d119      	bne.n	800dcc0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	6858      	ldr	r0, [r3, #4]
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc94:	461a      	mov	r2, r3
 800dc96:	68b9      	ldr	r1, [r7, #8]
 800dc98:	f003 f813 	bl	8010cc2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	685a      	ldr	r2, [r3, #4]
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dca4:	441a      	add	r2, r3
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	685a      	ldr	r2, [r3, #4]
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	689b      	ldr	r3, [r3, #8]
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	d32b      	bcc.n	800dd0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	681a      	ldr	r2, [r3, #0]
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	605a      	str	r2, [r3, #4]
 800dcbe:	e026      	b.n	800dd0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	68d8      	ldr	r0, [r3, #12]
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcc8:	461a      	mov	r2, r3
 800dcca:	68b9      	ldr	r1, [r7, #8]
 800dccc:	f002 fff9 	bl	8010cc2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	68da      	ldr	r2, [r3, #12]
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcd8:	425b      	negs	r3, r3
 800dcda:	441a      	add	r2, r3
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	68da      	ldr	r2, [r3, #12]
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	429a      	cmp	r2, r3
 800dcea:	d207      	bcs.n	800dcfc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	689a      	ldr	r2, [r3, #8]
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcf4:	425b      	negs	r3, r3
 800dcf6:	441a      	add	r2, r3
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2b02      	cmp	r3, #2
 800dd00:	d105      	bne.n	800dd0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d002      	beq.n	800dd0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	3b01      	subs	r3, #1
 800dd0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	1c5a      	adds	r2, r3, #1
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800dd16:	697b      	ldr	r3, [r7, #20]
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3718      	adds	r7, #24
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}

0800dd20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b082      	sub	sp, #8
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
 800dd28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d018      	beq.n	800dd64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	68da      	ldr	r2, [r3, #12]
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd3a:	441a      	add	r2, r3
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	68da      	ldr	r2, [r3, #12]
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	689b      	ldr	r3, [r3, #8]
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	d303      	bcc.n	800dd54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681a      	ldr	r2, [r3, #0]
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	68d9      	ldr	r1, [r3, #12]
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd5c:	461a      	mov	r2, r3
 800dd5e:	6838      	ldr	r0, [r7, #0]
 800dd60:	f002 ffaf 	bl	8010cc2 <memcpy>
	}
}
 800dd64:	bf00      	nop
 800dd66:	3708      	adds	r7, #8
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}

0800dd6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b084      	sub	sp, #16
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dd74:	f001 fe66 	bl	800fa44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd80:	e011      	b.n	800dda6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d012      	beq.n	800ddb0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	3324      	adds	r3, #36	; 0x24
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f000 fe40 	bl	800ea14 <xTaskRemoveFromEventList>
 800dd94:	4603      	mov	r3, r0
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d001      	beq.n	800dd9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dd9a:	f000 ff17 	bl	800ebcc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dd9e:	7bfb      	ldrb	r3, [r7, #15]
 800dda0:	3b01      	subs	r3, #1
 800dda2:	b2db      	uxtb	r3, r3
 800dda4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dda6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	dce9      	bgt.n	800dd82 <prvUnlockQueue+0x16>
 800ddae:	e000      	b.n	800ddb2 <prvUnlockQueue+0x46>
					break;
 800ddb0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	22ff      	movs	r2, #255	; 0xff
 800ddb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ddba:	f001 fe73 	bl	800faa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ddbe:	f001 fe41 	bl	800fa44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ddc8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ddca:	e011      	b.n	800ddf0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	691b      	ldr	r3, [r3, #16]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d012      	beq.n	800ddfa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	3310      	adds	r3, #16
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f000 fe1b 	bl	800ea14 <xTaskRemoveFromEventList>
 800ddde:	4603      	mov	r3, r0
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d001      	beq.n	800dde8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dde4:	f000 fef2 	bl	800ebcc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dde8:	7bbb      	ldrb	r3, [r7, #14]
 800ddea:	3b01      	subs	r3, #1
 800ddec:	b2db      	uxtb	r3, r3
 800ddee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ddf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	dce9      	bgt.n	800ddcc <prvUnlockQueue+0x60>
 800ddf8:	e000      	b.n	800ddfc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ddfa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	22ff      	movs	r2, #255	; 0xff
 800de00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800de04:	f001 fe4e 	bl	800faa4 <vPortExitCritical>
}
 800de08:	bf00      	nop
 800de0a:	3710      	adds	r7, #16
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}

0800de10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b084      	sub	sp, #16
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de18:	f001 fe14 	bl	800fa44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de20:	2b00      	cmp	r3, #0
 800de22:	d102      	bne.n	800de2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800de24:	2301      	movs	r3, #1
 800de26:	60fb      	str	r3, [r7, #12]
 800de28:	e001      	b.n	800de2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800de2a:	2300      	movs	r3, #0
 800de2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800de2e:	f001 fe39 	bl	800faa4 <vPortExitCritical>

	return xReturn;
 800de32:	68fb      	ldr	r3, [r7, #12]
}
 800de34:	4618      	mov	r0, r3
 800de36:	3710      	adds	r7, #16
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}

0800de3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b084      	sub	sp, #16
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de44:	f001 fdfe 	bl	800fa44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de50:	429a      	cmp	r2, r3
 800de52:	d102      	bne.n	800de5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800de54:	2301      	movs	r3, #1
 800de56:	60fb      	str	r3, [r7, #12]
 800de58:	e001      	b.n	800de5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800de5a:	2300      	movs	r3, #0
 800de5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800de5e:	f001 fe21 	bl	800faa4 <vPortExitCritical>

	return xReturn;
 800de62:	68fb      	ldr	r3, [r7, #12]
}
 800de64:	4618      	mov	r0, r3
 800de66:	3710      	adds	r7, #16
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}

0800de6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800de6c:	b480      	push	{r7}
 800de6e:	b085      	sub	sp, #20
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
 800de74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de76:	2300      	movs	r3, #0
 800de78:	60fb      	str	r3, [r7, #12]
 800de7a:	e014      	b.n	800dea6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800de7c:	4a0f      	ldr	r2, [pc, #60]	; (800debc <vQueueAddToRegistry+0x50>)
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d10b      	bne.n	800dea0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800de88:	490c      	ldr	r1, [pc, #48]	; (800debc <vQueueAddToRegistry+0x50>)
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	683a      	ldr	r2, [r7, #0]
 800de8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800de92:	4a0a      	ldr	r2, [pc, #40]	; (800debc <vQueueAddToRegistry+0x50>)
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	00db      	lsls	r3, r3, #3
 800de98:	4413      	add	r3, r2
 800de9a:	687a      	ldr	r2, [r7, #4]
 800de9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800de9e:	e006      	b.n	800deae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	3301      	adds	r3, #1
 800dea4:	60fb      	str	r3, [r7, #12]
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2b07      	cmp	r3, #7
 800deaa:	d9e7      	bls.n	800de7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800deac:	bf00      	nop
 800deae:	bf00      	nop
 800deb0:	3714      	adds	r7, #20
 800deb2:	46bd      	mov	sp, r7
 800deb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb8:	4770      	bx	lr
 800deba:	bf00      	nop
 800debc:	20002ae0 	.word	0x20002ae0

0800dec0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b086      	sub	sp, #24
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	60f8      	str	r0, [r7, #12]
 800dec8:	60b9      	str	r1, [r7, #8]
 800deca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ded0:	f001 fdb8 	bl	800fa44 <vPortEnterCritical>
 800ded4:	697b      	ldr	r3, [r7, #20]
 800ded6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800deda:	b25b      	sxtb	r3, r3
 800dedc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dee0:	d103      	bne.n	800deea <vQueueWaitForMessageRestricted+0x2a>
 800dee2:	697b      	ldr	r3, [r7, #20]
 800dee4:	2200      	movs	r2, #0
 800dee6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800deea:	697b      	ldr	r3, [r7, #20]
 800deec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800def0:	b25b      	sxtb	r3, r3
 800def2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800def6:	d103      	bne.n	800df00 <vQueueWaitForMessageRestricted+0x40>
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	2200      	movs	r2, #0
 800defc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800df00:	f001 fdd0 	bl	800faa4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d106      	bne.n	800df1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800df0c:	697b      	ldr	r3, [r7, #20]
 800df0e:	3324      	adds	r3, #36	; 0x24
 800df10:	687a      	ldr	r2, [r7, #4]
 800df12:	68b9      	ldr	r1, [r7, #8]
 800df14:	4618      	mov	r0, r3
 800df16:	f000 fd51 	bl	800e9bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800df1a:	6978      	ldr	r0, [r7, #20]
 800df1c:	f7ff ff26 	bl	800dd6c <prvUnlockQueue>
	}
 800df20:	bf00      	nop
 800df22:	3718      	adds	r7, #24
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}

0800df28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b08e      	sub	sp, #56	; 0x38
 800df2c:	af04      	add	r7, sp, #16
 800df2e:	60f8      	str	r0, [r7, #12]
 800df30:	60b9      	str	r1, [r7, #8]
 800df32:	607a      	str	r2, [r7, #4]
 800df34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800df36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d10a      	bne.n	800df52 <xTaskCreateStatic+0x2a>
	__asm volatile
 800df3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df40:	f383 8811 	msr	BASEPRI, r3
 800df44:	f3bf 8f6f 	isb	sy
 800df48:	f3bf 8f4f 	dsb	sy
 800df4c:	623b      	str	r3, [r7, #32]
}
 800df4e:	bf00      	nop
 800df50:	e7fe      	b.n	800df50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800df52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df54:	2b00      	cmp	r3, #0
 800df56:	d10a      	bne.n	800df6e <xTaskCreateStatic+0x46>
	__asm volatile
 800df58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df5c:	f383 8811 	msr	BASEPRI, r3
 800df60:	f3bf 8f6f 	isb	sy
 800df64:	f3bf 8f4f 	dsb	sy
 800df68:	61fb      	str	r3, [r7, #28]
}
 800df6a:	bf00      	nop
 800df6c:	e7fe      	b.n	800df6c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800df6e:	23bc      	movs	r3, #188	; 0xbc
 800df70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	2bbc      	cmp	r3, #188	; 0xbc
 800df76:	d00a      	beq.n	800df8e <xTaskCreateStatic+0x66>
	__asm volatile
 800df78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df7c:	f383 8811 	msr	BASEPRI, r3
 800df80:	f3bf 8f6f 	isb	sy
 800df84:	f3bf 8f4f 	dsb	sy
 800df88:	61bb      	str	r3, [r7, #24]
}
 800df8a:	bf00      	nop
 800df8c:	e7fe      	b.n	800df8c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800df8e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800df90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df92:	2b00      	cmp	r3, #0
 800df94:	d01e      	beq.n	800dfd4 <xTaskCreateStatic+0xac>
 800df96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d01b      	beq.n	800dfd4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800df9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df9e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dfa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dfa4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dfa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa8:	2202      	movs	r2, #2
 800dfaa:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dfae:	2300      	movs	r3, #0
 800dfb0:	9303      	str	r3, [sp, #12]
 800dfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb4:	9302      	str	r3, [sp, #8]
 800dfb6:	f107 0314 	add.w	r3, r7, #20
 800dfba:	9301      	str	r3, [sp, #4]
 800dfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfbe:	9300      	str	r3, [sp, #0]
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	687a      	ldr	r2, [r7, #4]
 800dfc4:	68b9      	ldr	r1, [r7, #8]
 800dfc6:	68f8      	ldr	r0, [r7, #12]
 800dfc8:	f000 f850 	bl	800e06c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dfcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dfce:	f000 f8f3 	bl	800e1b8 <prvAddNewTaskToReadyList>
 800dfd2:	e001      	b.n	800dfd8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dfd8:	697b      	ldr	r3, [r7, #20]
	}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3728      	adds	r7, #40	; 0x28
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}

0800dfe2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dfe2:	b580      	push	{r7, lr}
 800dfe4:	b08c      	sub	sp, #48	; 0x30
 800dfe6:	af04      	add	r7, sp, #16
 800dfe8:	60f8      	str	r0, [r7, #12]
 800dfea:	60b9      	str	r1, [r7, #8]
 800dfec:	603b      	str	r3, [r7, #0]
 800dfee:	4613      	mov	r3, r2
 800dff0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dff2:	88fb      	ldrh	r3, [r7, #6]
 800dff4:	009b      	lsls	r3, r3, #2
 800dff6:	4618      	mov	r0, r3
 800dff8:	f001 fe46 	bl	800fc88 <pvPortMalloc>
 800dffc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dffe:	697b      	ldr	r3, [r7, #20]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d00e      	beq.n	800e022 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e004:	20bc      	movs	r0, #188	; 0xbc
 800e006:	f001 fe3f 	bl	800fc88 <pvPortMalloc>
 800e00a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e00c:	69fb      	ldr	r3, [r7, #28]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d003      	beq.n	800e01a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e012:	69fb      	ldr	r3, [r7, #28]
 800e014:	697a      	ldr	r2, [r7, #20]
 800e016:	631a      	str	r2, [r3, #48]	; 0x30
 800e018:	e005      	b.n	800e026 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e01a:	6978      	ldr	r0, [r7, #20]
 800e01c:	f001 ff00 	bl	800fe20 <vPortFree>
 800e020:	e001      	b.n	800e026 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e022:	2300      	movs	r3, #0
 800e024:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e026:	69fb      	ldr	r3, [r7, #28]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d017      	beq.n	800e05c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e02c:	69fb      	ldr	r3, [r7, #28]
 800e02e:	2200      	movs	r2, #0
 800e030:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e034:	88fa      	ldrh	r2, [r7, #6]
 800e036:	2300      	movs	r3, #0
 800e038:	9303      	str	r3, [sp, #12]
 800e03a:	69fb      	ldr	r3, [r7, #28]
 800e03c:	9302      	str	r3, [sp, #8]
 800e03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e040:	9301      	str	r3, [sp, #4]
 800e042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e044:	9300      	str	r3, [sp, #0]
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	68b9      	ldr	r1, [r7, #8]
 800e04a:	68f8      	ldr	r0, [r7, #12]
 800e04c:	f000 f80e 	bl	800e06c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e050:	69f8      	ldr	r0, [r7, #28]
 800e052:	f000 f8b1 	bl	800e1b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e056:	2301      	movs	r3, #1
 800e058:	61bb      	str	r3, [r7, #24]
 800e05a:	e002      	b.n	800e062 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e05c:	f04f 33ff 	mov.w	r3, #4294967295
 800e060:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e062:	69bb      	ldr	r3, [r7, #24]
	}
 800e064:	4618      	mov	r0, r3
 800e066:	3720      	adds	r7, #32
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}

0800e06c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b088      	sub	sp, #32
 800e070:	af00      	add	r7, sp, #0
 800e072:	60f8      	str	r0, [r7, #12]
 800e074:	60b9      	str	r1, [r7, #8]
 800e076:	607a      	str	r2, [r7, #4]
 800e078:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e07c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	009b      	lsls	r3, r3, #2
 800e082:	461a      	mov	r2, r3
 800e084:	21a5      	movs	r1, #165	; 0xa5
 800e086:	f002 fe2a 	bl	8010cde <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e08c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e094:	3b01      	subs	r3, #1
 800e096:	009b      	lsls	r3, r3, #2
 800e098:	4413      	add	r3, r2
 800e09a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e09c:	69bb      	ldr	r3, [r7, #24]
 800e09e:	f023 0307 	bic.w	r3, r3, #7
 800e0a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e0a4:	69bb      	ldr	r3, [r7, #24]
 800e0a6:	f003 0307 	and.w	r3, r3, #7
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d00a      	beq.n	800e0c4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b2:	f383 8811 	msr	BASEPRI, r3
 800e0b6:	f3bf 8f6f 	isb	sy
 800e0ba:	f3bf 8f4f 	dsb	sy
 800e0be:	617b      	str	r3, [r7, #20]
}
 800e0c0:	bf00      	nop
 800e0c2:	e7fe      	b.n	800e0c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d01f      	beq.n	800e10a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	61fb      	str	r3, [r7, #28]
 800e0ce:	e012      	b.n	800e0f6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e0d0:	68ba      	ldr	r2, [r7, #8]
 800e0d2:	69fb      	ldr	r3, [r7, #28]
 800e0d4:	4413      	add	r3, r2
 800e0d6:	7819      	ldrb	r1, [r3, #0]
 800e0d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0da:	69fb      	ldr	r3, [r7, #28]
 800e0dc:	4413      	add	r3, r2
 800e0de:	3334      	adds	r3, #52	; 0x34
 800e0e0:	460a      	mov	r2, r1
 800e0e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e0e4:	68ba      	ldr	r2, [r7, #8]
 800e0e6:	69fb      	ldr	r3, [r7, #28]
 800e0e8:	4413      	add	r3, r2
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d006      	beq.n	800e0fe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e0f0:	69fb      	ldr	r3, [r7, #28]
 800e0f2:	3301      	adds	r3, #1
 800e0f4:	61fb      	str	r3, [r7, #28]
 800e0f6:	69fb      	ldr	r3, [r7, #28]
 800e0f8:	2b0f      	cmp	r3, #15
 800e0fa:	d9e9      	bls.n	800e0d0 <prvInitialiseNewTask+0x64>
 800e0fc:	e000      	b.n	800e100 <prvInitialiseNewTask+0x94>
			{
				break;
 800e0fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e102:	2200      	movs	r2, #0
 800e104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e108:	e003      	b.n	800e112 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e10c:	2200      	movs	r2, #0
 800e10e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e114:	2b37      	cmp	r3, #55	; 0x37
 800e116:	d901      	bls.n	800e11c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e118:	2337      	movs	r3, #55	; 0x37
 800e11a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e11e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e120:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e124:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e126:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e12a:	2200      	movs	r2, #0
 800e12c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e130:	3304      	adds	r3, #4
 800e132:	4618      	mov	r0, r3
 800e134:	f7ff f81a 	bl	800d16c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e13a:	3318      	adds	r3, #24
 800e13c:	4618      	mov	r0, r3
 800e13e:	f7ff f815 	bl	800d16c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e146:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e14a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e150:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e156:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e15a:	2200      	movs	r2, #0
 800e15c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e162:	2200      	movs	r2, #0
 800e164:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e16a:	3354      	adds	r3, #84	; 0x54
 800e16c:	2260      	movs	r2, #96	; 0x60
 800e16e:	2100      	movs	r1, #0
 800e170:	4618      	mov	r0, r3
 800e172:	f002 fdb4 	bl	8010cde <memset>
 800e176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e178:	4a0c      	ldr	r2, [pc, #48]	; (800e1ac <prvInitialiseNewTask+0x140>)
 800e17a:	659a      	str	r2, [r3, #88]	; 0x58
 800e17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e17e:	4a0c      	ldr	r2, [pc, #48]	; (800e1b0 <prvInitialiseNewTask+0x144>)
 800e180:	65da      	str	r2, [r3, #92]	; 0x5c
 800e182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e184:	4a0b      	ldr	r2, [pc, #44]	; (800e1b4 <prvInitialiseNewTask+0x148>)
 800e186:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e188:	683a      	ldr	r2, [r7, #0]
 800e18a:	68f9      	ldr	r1, [r7, #12]
 800e18c:	69b8      	ldr	r0, [r7, #24]
 800e18e:	f001 fb2f 	bl	800f7f0 <pxPortInitialiseStack>
 800e192:	4602      	mov	r2, r0
 800e194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e196:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d002      	beq.n	800e1a4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e1a4:	bf00      	nop
 800e1a6:	3720      	adds	r7, #32
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}
 800e1ac:	08012864 	.word	0x08012864
 800e1b0:	08012884 	.word	0x08012884
 800e1b4:	08012844 	.word	0x08012844

0800e1b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b082      	sub	sp, #8
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e1c0:	f001 fc40 	bl	800fa44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e1c4:	4b2d      	ldr	r3, [pc, #180]	; (800e27c <prvAddNewTaskToReadyList+0xc4>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	4a2c      	ldr	r2, [pc, #176]	; (800e27c <prvAddNewTaskToReadyList+0xc4>)
 800e1cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e1ce:	4b2c      	ldr	r3, [pc, #176]	; (800e280 <prvAddNewTaskToReadyList+0xc8>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d109      	bne.n	800e1ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e1d6:	4a2a      	ldr	r2, [pc, #168]	; (800e280 <prvAddNewTaskToReadyList+0xc8>)
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e1dc:	4b27      	ldr	r3, [pc, #156]	; (800e27c <prvAddNewTaskToReadyList+0xc4>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	2b01      	cmp	r3, #1
 800e1e2:	d110      	bne.n	800e206 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e1e4:	f000 fd16 	bl	800ec14 <prvInitialiseTaskLists>
 800e1e8:	e00d      	b.n	800e206 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e1ea:	4b26      	ldr	r3, [pc, #152]	; (800e284 <prvAddNewTaskToReadyList+0xcc>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d109      	bne.n	800e206 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e1f2:	4b23      	ldr	r3, [pc, #140]	; (800e280 <prvAddNewTaskToReadyList+0xc8>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d802      	bhi.n	800e206 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e200:	4a1f      	ldr	r2, [pc, #124]	; (800e280 <prvAddNewTaskToReadyList+0xc8>)
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e206:	4b20      	ldr	r3, [pc, #128]	; (800e288 <prvAddNewTaskToReadyList+0xd0>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	3301      	adds	r3, #1
 800e20c:	4a1e      	ldr	r2, [pc, #120]	; (800e288 <prvAddNewTaskToReadyList+0xd0>)
 800e20e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e210:	4b1d      	ldr	r3, [pc, #116]	; (800e288 <prvAddNewTaskToReadyList+0xd0>)
 800e212:	681a      	ldr	r2, [r3, #0]
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e21c:	4b1b      	ldr	r3, [pc, #108]	; (800e28c <prvAddNewTaskToReadyList+0xd4>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	429a      	cmp	r2, r3
 800e222:	d903      	bls.n	800e22c <prvAddNewTaskToReadyList+0x74>
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e228:	4a18      	ldr	r2, [pc, #96]	; (800e28c <prvAddNewTaskToReadyList+0xd4>)
 800e22a:	6013      	str	r3, [r2, #0]
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e230:	4613      	mov	r3, r2
 800e232:	009b      	lsls	r3, r3, #2
 800e234:	4413      	add	r3, r2
 800e236:	009b      	lsls	r3, r3, #2
 800e238:	4a15      	ldr	r2, [pc, #84]	; (800e290 <prvAddNewTaskToReadyList+0xd8>)
 800e23a:	441a      	add	r2, r3
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	3304      	adds	r3, #4
 800e240:	4619      	mov	r1, r3
 800e242:	4610      	mov	r0, r2
 800e244:	f7fe ff9f 	bl	800d186 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e248:	f001 fc2c 	bl	800faa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e24c:	4b0d      	ldr	r3, [pc, #52]	; (800e284 <prvAddNewTaskToReadyList+0xcc>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d00e      	beq.n	800e272 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e254:	4b0a      	ldr	r3, [pc, #40]	; (800e280 <prvAddNewTaskToReadyList+0xc8>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e25e:	429a      	cmp	r2, r3
 800e260:	d207      	bcs.n	800e272 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e262:	4b0c      	ldr	r3, [pc, #48]	; (800e294 <prvAddNewTaskToReadyList+0xdc>)
 800e264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e268:	601a      	str	r2, [r3, #0]
 800e26a:	f3bf 8f4f 	dsb	sy
 800e26e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e272:	bf00      	nop
 800e274:	3708      	adds	r7, #8
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}
 800e27a:	bf00      	nop
 800e27c:	20002ff4 	.word	0x20002ff4
 800e280:	20002b20 	.word	0x20002b20
 800e284:	20003000 	.word	0x20003000
 800e288:	20003010 	.word	0x20003010
 800e28c:	20002ffc 	.word	0x20002ffc
 800e290:	20002b24 	.word	0x20002b24
 800e294:	e000ed04 	.word	0xe000ed04

0800e298 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b084      	sub	sp, #16
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800e2a0:	f001 fbd0 	bl	800fa44 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d102      	bne.n	800e2b0 <vTaskDelete+0x18>
 800e2aa:	4b2c      	ldr	r3, [pc, #176]	; (800e35c <vTaskDelete+0xc4>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	e000      	b.n	800e2b2 <vTaskDelete+0x1a>
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	3304      	adds	r3, #4
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f7fe ffc1 	bl	800d240 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d004      	beq.n	800e2d0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	3318      	adds	r3, #24
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f7fe ffb8 	bl	800d240 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800e2d0:	4b23      	ldr	r3, [pc, #140]	; (800e360 <vTaskDelete+0xc8>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	3301      	adds	r3, #1
 800e2d6:	4a22      	ldr	r2, [pc, #136]	; (800e360 <vTaskDelete+0xc8>)
 800e2d8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800e2da:	4b20      	ldr	r3, [pc, #128]	; (800e35c <vTaskDelete+0xc4>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	68fa      	ldr	r2, [r7, #12]
 800e2e0:	429a      	cmp	r2, r3
 800e2e2:	d10b      	bne.n	800e2fc <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	3304      	adds	r3, #4
 800e2e8:	4619      	mov	r1, r3
 800e2ea:	481e      	ldr	r0, [pc, #120]	; (800e364 <vTaskDelete+0xcc>)
 800e2ec:	f7fe ff4b 	bl	800d186 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800e2f0:	4b1d      	ldr	r3, [pc, #116]	; (800e368 <vTaskDelete+0xd0>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	3301      	adds	r3, #1
 800e2f6:	4a1c      	ldr	r2, [pc, #112]	; (800e368 <vTaskDelete+0xd0>)
 800e2f8:	6013      	str	r3, [r2, #0]
 800e2fa:	e009      	b.n	800e310 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800e2fc:	4b1b      	ldr	r3, [pc, #108]	; (800e36c <vTaskDelete+0xd4>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	3b01      	subs	r3, #1
 800e302:	4a1a      	ldr	r2, [pc, #104]	; (800e36c <vTaskDelete+0xd4>)
 800e304:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800e306:	68f8      	ldr	r0, [r7, #12]
 800e308:	f000 fcf2 	bl	800ecf0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800e30c:	f000 fd24 	bl	800ed58 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800e310:	f001 fbc8 	bl	800faa4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800e314:	4b16      	ldr	r3, [pc, #88]	; (800e370 <vTaskDelete+0xd8>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d01b      	beq.n	800e354 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800e31c:	4b0f      	ldr	r3, [pc, #60]	; (800e35c <vTaskDelete+0xc4>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	68fa      	ldr	r2, [r7, #12]
 800e322:	429a      	cmp	r2, r3
 800e324:	d116      	bne.n	800e354 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800e326:	4b13      	ldr	r3, [pc, #76]	; (800e374 <vTaskDelete+0xdc>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d00a      	beq.n	800e344 <vTaskDelete+0xac>
	__asm volatile
 800e32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e332:	f383 8811 	msr	BASEPRI, r3
 800e336:	f3bf 8f6f 	isb	sy
 800e33a:	f3bf 8f4f 	dsb	sy
 800e33e:	60bb      	str	r3, [r7, #8]
}
 800e340:	bf00      	nop
 800e342:	e7fe      	b.n	800e342 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800e344:	4b0c      	ldr	r3, [pc, #48]	; (800e378 <vTaskDelete+0xe0>)
 800e346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e34a:	601a      	str	r2, [r3, #0]
 800e34c:	f3bf 8f4f 	dsb	sy
 800e350:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e354:	bf00      	nop
 800e356:	3710      	adds	r7, #16
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	20002b20 	.word	0x20002b20
 800e360:	20003010 	.word	0x20003010
 800e364:	20002fc8 	.word	0x20002fc8
 800e368:	20002fdc 	.word	0x20002fdc
 800e36c:	20002ff4 	.word	0x20002ff4
 800e370:	20003000 	.word	0x20003000
 800e374:	2000301c 	.word	0x2000301c
 800e378:	e000ed04 	.word	0xe000ed04

0800e37c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b08a      	sub	sp, #40	; 0x28
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
 800e384:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800e386:	2300      	movs	r3, #0
 800e388:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d10a      	bne.n	800e3a6 <vTaskDelayUntil+0x2a>
	__asm volatile
 800e390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e394:	f383 8811 	msr	BASEPRI, r3
 800e398:	f3bf 8f6f 	isb	sy
 800e39c:	f3bf 8f4f 	dsb	sy
 800e3a0:	617b      	str	r3, [r7, #20]
}
 800e3a2:	bf00      	nop
 800e3a4:	e7fe      	b.n	800e3a4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d10a      	bne.n	800e3c2 <vTaskDelayUntil+0x46>
	__asm volatile
 800e3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b0:	f383 8811 	msr	BASEPRI, r3
 800e3b4:	f3bf 8f6f 	isb	sy
 800e3b8:	f3bf 8f4f 	dsb	sy
 800e3bc:	613b      	str	r3, [r7, #16]
}
 800e3be:	bf00      	nop
 800e3c0:	e7fe      	b.n	800e3c0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800e3c2:	4b2a      	ldr	r3, [pc, #168]	; (800e46c <vTaskDelayUntil+0xf0>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d00a      	beq.n	800e3e0 <vTaskDelayUntil+0x64>
	__asm volatile
 800e3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ce:	f383 8811 	msr	BASEPRI, r3
 800e3d2:	f3bf 8f6f 	isb	sy
 800e3d6:	f3bf 8f4f 	dsb	sy
 800e3da:	60fb      	str	r3, [r7, #12]
}
 800e3dc:	bf00      	nop
 800e3de:	e7fe      	b.n	800e3de <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800e3e0:	f000 f8ee 	bl	800e5c0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800e3e4:	4b22      	ldr	r3, [pc, #136]	; (800e470 <vTaskDelayUntil+0xf4>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	683a      	ldr	r2, [r7, #0]
 800e3f0:	4413      	add	r3, r2
 800e3f2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	6a3a      	ldr	r2, [r7, #32]
 800e3fa:	429a      	cmp	r2, r3
 800e3fc:	d20b      	bcs.n	800e416 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	69fa      	ldr	r2, [r7, #28]
 800e404:	429a      	cmp	r2, r3
 800e406:	d211      	bcs.n	800e42c <vTaskDelayUntil+0xb0>
 800e408:	69fa      	ldr	r2, [r7, #28]
 800e40a:	6a3b      	ldr	r3, [r7, #32]
 800e40c:	429a      	cmp	r2, r3
 800e40e:	d90d      	bls.n	800e42c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e410:	2301      	movs	r3, #1
 800e412:	627b      	str	r3, [r7, #36]	; 0x24
 800e414:	e00a      	b.n	800e42c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	69fa      	ldr	r2, [r7, #28]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d303      	bcc.n	800e428 <vTaskDelayUntil+0xac>
 800e420:	69fa      	ldr	r2, [r7, #28]
 800e422:	6a3b      	ldr	r3, [r7, #32]
 800e424:	429a      	cmp	r2, r3
 800e426:	d901      	bls.n	800e42c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e428:	2301      	movs	r3, #1
 800e42a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	69fa      	ldr	r2, [r7, #28]
 800e430:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800e432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e434:	2b00      	cmp	r3, #0
 800e436:	d006      	beq.n	800e446 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800e438:	69fa      	ldr	r2, [r7, #28]
 800e43a:	6a3b      	ldr	r3, [r7, #32]
 800e43c:	1ad3      	subs	r3, r2, r3
 800e43e:	2100      	movs	r1, #0
 800e440:	4618      	mov	r0, r3
 800e442:	f000 fe33 	bl	800f0ac <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800e446:	f000 f8c9 	bl	800e5dc <xTaskResumeAll>
 800e44a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e44c:	69bb      	ldr	r3, [r7, #24]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d107      	bne.n	800e462 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800e452:	4b08      	ldr	r3, [pc, #32]	; (800e474 <vTaskDelayUntil+0xf8>)
 800e454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e458:	601a      	str	r2, [r3, #0]
 800e45a:	f3bf 8f4f 	dsb	sy
 800e45e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e462:	bf00      	nop
 800e464:	3728      	adds	r7, #40	; 0x28
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
 800e46a:	bf00      	nop
 800e46c:	2000301c 	.word	0x2000301c
 800e470:	20002ff8 	.word	0x20002ff8
 800e474:	e000ed04 	.word	0xe000ed04

0800e478 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b084      	sub	sp, #16
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e480:	2300      	movs	r3, #0
 800e482:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d017      	beq.n	800e4ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e48a:	4b13      	ldr	r3, [pc, #76]	; (800e4d8 <vTaskDelay+0x60>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d00a      	beq.n	800e4a8 <vTaskDelay+0x30>
	__asm volatile
 800e492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e496:	f383 8811 	msr	BASEPRI, r3
 800e49a:	f3bf 8f6f 	isb	sy
 800e49e:	f3bf 8f4f 	dsb	sy
 800e4a2:	60bb      	str	r3, [r7, #8]
}
 800e4a4:	bf00      	nop
 800e4a6:	e7fe      	b.n	800e4a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e4a8:	f000 f88a 	bl	800e5c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e4ac:	2100      	movs	r1, #0
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	f000 fdfc 	bl	800f0ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e4b4:	f000 f892 	bl	800e5dc <xTaskResumeAll>
 800e4b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d107      	bne.n	800e4d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e4c0:	4b06      	ldr	r3, [pc, #24]	; (800e4dc <vTaskDelay+0x64>)
 800e4c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4c6:	601a      	str	r2, [r3, #0]
 800e4c8:	f3bf 8f4f 	dsb	sy
 800e4cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e4d0:	bf00      	nop
 800e4d2:	3710      	adds	r7, #16
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}
 800e4d8:	2000301c 	.word	0x2000301c
 800e4dc:	e000ed04 	.word	0xe000ed04

0800e4e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b08a      	sub	sp, #40	; 0x28
 800e4e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e4ee:	463a      	mov	r2, r7
 800e4f0:	1d39      	adds	r1, r7, #4
 800e4f2:	f107 0308 	add.w	r3, r7, #8
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f7fe fde4 	bl	800d0c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e4fc:	6839      	ldr	r1, [r7, #0]
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	68ba      	ldr	r2, [r7, #8]
 800e502:	9202      	str	r2, [sp, #8]
 800e504:	9301      	str	r3, [sp, #4]
 800e506:	2300      	movs	r3, #0
 800e508:	9300      	str	r3, [sp, #0]
 800e50a:	2300      	movs	r3, #0
 800e50c:	460a      	mov	r2, r1
 800e50e:	4924      	ldr	r1, [pc, #144]	; (800e5a0 <vTaskStartScheduler+0xc0>)
 800e510:	4824      	ldr	r0, [pc, #144]	; (800e5a4 <vTaskStartScheduler+0xc4>)
 800e512:	f7ff fd09 	bl	800df28 <xTaskCreateStatic>
 800e516:	4603      	mov	r3, r0
 800e518:	4a23      	ldr	r2, [pc, #140]	; (800e5a8 <vTaskStartScheduler+0xc8>)
 800e51a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e51c:	4b22      	ldr	r3, [pc, #136]	; (800e5a8 <vTaskStartScheduler+0xc8>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d002      	beq.n	800e52a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e524:	2301      	movs	r3, #1
 800e526:	617b      	str	r3, [r7, #20]
 800e528:	e001      	b.n	800e52e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e52a:	2300      	movs	r3, #0
 800e52c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e52e:	697b      	ldr	r3, [r7, #20]
 800e530:	2b01      	cmp	r3, #1
 800e532:	d102      	bne.n	800e53a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e534:	f000 fe0e 	bl	800f154 <xTimerCreateTimerTask>
 800e538:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	2b01      	cmp	r3, #1
 800e53e:	d11b      	bne.n	800e578 <vTaskStartScheduler+0x98>
	__asm volatile
 800e540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e544:	f383 8811 	msr	BASEPRI, r3
 800e548:	f3bf 8f6f 	isb	sy
 800e54c:	f3bf 8f4f 	dsb	sy
 800e550:	613b      	str	r3, [r7, #16]
}
 800e552:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e554:	4b15      	ldr	r3, [pc, #84]	; (800e5ac <vTaskStartScheduler+0xcc>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	3354      	adds	r3, #84	; 0x54
 800e55a:	4a15      	ldr	r2, [pc, #84]	; (800e5b0 <vTaskStartScheduler+0xd0>)
 800e55c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e55e:	4b15      	ldr	r3, [pc, #84]	; (800e5b4 <vTaskStartScheduler+0xd4>)
 800e560:	f04f 32ff 	mov.w	r2, #4294967295
 800e564:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e566:	4b14      	ldr	r3, [pc, #80]	; (800e5b8 <vTaskStartScheduler+0xd8>)
 800e568:	2201      	movs	r2, #1
 800e56a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e56c:	4b13      	ldr	r3, [pc, #76]	; (800e5bc <vTaskStartScheduler+0xdc>)
 800e56e:	2200      	movs	r2, #0
 800e570:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e572:	f001 f9c5 	bl	800f900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e576:	e00e      	b.n	800e596 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e57e:	d10a      	bne.n	800e596 <vTaskStartScheduler+0xb6>
	__asm volatile
 800e580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e584:	f383 8811 	msr	BASEPRI, r3
 800e588:	f3bf 8f6f 	isb	sy
 800e58c:	f3bf 8f4f 	dsb	sy
 800e590:	60fb      	str	r3, [r7, #12]
}
 800e592:	bf00      	nop
 800e594:	e7fe      	b.n	800e594 <vTaskStartScheduler+0xb4>
}
 800e596:	bf00      	nop
 800e598:	3718      	adds	r7, #24
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}
 800e59e:	bf00      	nop
 800e5a0:	08012350 	.word	0x08012350
 800e5a4:	0800ebe5 	.word	0x0800ebe5
 800e5a8:	20003018 	.word	0x20003018
 800e5ac:	20002b20 	.word	0x20002b20
 800e5b0:	20000118 	.word	0x20000118
 800e5b4:	20003014 	.word	0x20003014
 800e5b8:	20003000 	.word	0x20003000
 800e5bc:	20002ff8 	.word	0x20002ff8

0800e5c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e5c4:	4b04      	ldr	r3, [pc, #16]	; (800e5d8 <vTaskSuspendAll+0x18>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	3301      	adds	r3, #1
 800e5ca:	4a03      	ldr	r2, [pc, #12]	; (800e5d8 <vTaskSuspendAll+0x18>)
 800e5cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e5ce:	bf00      	nop
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d6:	4770      	bx	lr
 800e5d8:	2000301c 	.word	0x2000301c

0800e5dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b084      	sub	sp, #16
 800e5e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e5ea:	4b42      	ldr	r3, [pc, #264]	; (800e6f4 <xTaskResumeAll+0x118>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d10a      	bne.n	800e608 <xTaskResumeAll+0x2c>
	__asm volatile
 800e5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f6:	f383 8811 	msr	BASEPRI, r3
 800e5fa:	f3bf 8f6f 	isb	sy
 800e5fe:	f3bf 8f4f 	dsb	sy
 800e602:	603b      	str	r3, [r7, #0]
}
 800e604:	bf00      	nop
 800e606:	e7fe      	b.n	800e606 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e608:	f001 fa1c 	bl	800fa44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e60c:	4b39      	ldr	r3, [pc, #228]	; (800e6f4 <xTaskResumeAll+0x118>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	3b01      	subs	r3, #1
 800e612:	4a38      	ldr	r2, [pc, #224]	; (800e6f4 <xTaskResumeAll+0x118>)
 800e614:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e616:	4b37      	ldr	r3, [pc, #220]	; (800e6f4 <xTaskResumeAll+0x118>)
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d162      	bne.n	800e6e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e61e:	4b36      	ldr	r3, [pc, #216]	; (800e6f8 <xTaskResumeAll+0x11c>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d05e      	beq.n	800e6e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e626:	e02f      	b.n	800e688 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e628:	4b34      	ldr	r3, [pc, #208]	; (800e6fc <xTaskResumeAll+0x120>)
 800e62a:	68db      	ldr	r3, [r3, #12]
 800e62c:	68db      	ldr	r3, [r3, #12]
 800e62e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	3318      	adds	r3, #24
 800e634:	4618      	mov	r0, r3
 800e636:	f7fe fe03 	bl	800d240 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	3304      	adds	r3, #4
 800e63e:	4618      	mov	r0, r3
 800e640:	f7fe fdfe 	bl	800d240 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e648:	4b2d      	ldr	r3, [pc, #180]	; (800e700 <xTaskResumeAll+0x124>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	429a      	cmp	r2, r3
 800e64e:	d903      	bls.n	800e658 <xTaskResumeAll+0x7c>
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e654:	4a2a      	ldr	r2, [pc, #168]	; (800e700 <xTaskResumeAll+0x124>)
 800e656:	6013      	str	r3, [r2, #0]
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e65c:	4613      	mov	r3, r2
 800e65e:	009b      	lsls	r3, r3, #2
 800e660:	4413      	add	r3, r2
 800e662:	009b      	lsls	r3, r3, #2
 800e664:	4a27      	ldr	r2, [pc, #156]	; (800e704 <xTaskResumeAll+0x128>)
 800e666:	441a      	add	r2, r3
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	3304      	adds	r3, #4
 800e66c:	4619      	mov	r1, r3
 800e66e:	4610      	mov	r0, r2
 800e670:	f7fe fd89 	bl	800d186 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e678:	4b23      	ldr	r3, [pc, #140]	; (800e708 <xTaskResumeAll+0x12c>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e67e:	429a      	cmp	r2, r3
 800e680:	d302      	bcc.n	800e688 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e682:	4b22      	ldr	r3, [pc, #136]	; (800e70c <xTaskResumeAll+0x130>)
 800e684:	2201      	movs	r2, #1
 800e686:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e688:	4b1c      	ldr	r3, [pc, #112]	; (800e6fc <xTaskResumeAll+0x120>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d1cb      	bne.n	800e628 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d001      	beq.n	800e69a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e696:	f000 fb5f 	bl	800ed58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e69a:	4b1d      	ldr	r3, [pc, #116]	; (800e710 <xTaskResumeAll+0x134>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d010      	beq.n	800e6c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e6a6:	f000 f847 	bl	800e738 <xTaskIncrementTick>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d002      	beq.n	800e6b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e6b0:	4b16      	ldr	r3, [pc, #88]	; (800e70c <xTaskResumeAll+0x130>)
 800e6b2:	2201      	movs	r2, #1
 800e6b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	3b01      	subs	r3, #1
 800e6ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d1f1      	bne.n	800e6a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e6c2:	4b13      	ldr	r3, [pc, #76]	; (800e710 <xTaskResumeAll+0x134>)
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e6c8:	4b10      	ldr	r3, [pc, #64]	; (800e70c <xTaskResumeAll+0x130>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d009      	beq.n	800e6e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e6d4:	4b0f      	ldr	r3, [pc, #60]	; (800e714 <xTaskResumeAll+0x138>)
 800e6d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6da:	601a      	str	r2, [r3, #0]
 800e6dc:	f3bf 8f4f 	dsb	sy
 800e6e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e6e4:	f001 f9de 	bl	800faa4 <vPortExitCritical>

	return xAlreadyYielded;
 800e6e8:	68bb      	ldr	r3, [r7, #8]
}
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3710      	adds	r7, #16
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}
 800e6f2:	bf00      	nop
 800e6f4:	2000301c 	.word	0x2000301c
 800e6f8:	20002ff4 	.word	0x20002ff4
 800e6fc:	20002fb4 	.word	0x20002fb4
 800e700:	20002ffc 	.word	0x20002ffc
 800e704:	20002b24 	.word	0x20002b24
 800e708:	20002b20 	.word	0x20002b20
 800e70c:	20003008 	.word	0x20003008
 800e710:	20003004 	.word	0x20003004
 800e714:	e000ed04 	.word	0xe000ed04

0800e718 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e718:	b480      	push	{r7}
 800e71a:	b083      	sub	sp, #12
 800e71c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e71e:	4b05      	ldr	r3, [pc, #20]	; (800e734 <xTaskGetTickCount+0x1c>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e724:	687b      	ldr	r3, [r7, #4]
}
 800e726:	4618      	mov	r0, r3
 800e728:	370c      	adds	r7, #12
 800e72a:	46bd      	mov	sp, r7
 800e72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e730:	4770      	bx	lr
 800e732:	bf00      	nop
 800e734:	20002ff8 	.word	0x20002ff8

0800e738 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b086      	sub	sp, #24
 800e73c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e73e:	2300      	movs	r3, #0
 800e740:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e742:	4b4f      	ldr	r3, [pc, #316]	; (800e880 <xTaskIncrementTick+0x148>)
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	2b00      	cmp	r3, #0
 800e748:	f040 808f 	bne.w	800e86a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e74c:	4b4d      	ldr	r3, [pc, #308]	; (800e884 <xTaskIncrementTick+0x14c>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	3301      	adds	r3, #1
 800e752:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e754:	4a4b      	ldr	r2, [pc, #300]	; (800e884 <xTaskIncrementTick+0x14c>)
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d120      	bne.n	800e7a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e760:	4b49      	ldr	r3, [pc, #292]	; (800e888 <xTaskIncrementTick+0x150>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d00a      	beq.n	800e780 <xTaskIncrementTick+0x48>
	__asm volatile
 800e76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e76e:	f383 8811 	msr	BASEPRI, r3
 800e772:	f3bf 8f6f 	isb	sy
 800e776:	f3bf 8f4f 	dsb	sy
 800e77a:	603b      	str	r3, [r7, #0]
}
 800e77c:	bf00      	nop
 800e77e:	e7fe      	b.n	800e77e <xTaskIncrementTick+0x46>
 800e780:	4b41      	ldr	r3, [pc, #260]	; (800e888 <xTaskIncrementTick+0x150>)
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	60fb      	str	r3, [r7, #12]
 800e786:	4b41      	ldr	r3, [pc, #260]	; (800e88c <xTaskIncrementTick+0x154>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	4a3f      	ldr	r2, [pc, #252]	; (800e888 <xTaskIncrementTick+0x150>)
 800e78c:	6013      	str	r3, [r2, #0]
 800e78e:	4a3f      	ldr	r2, [pc, #252]	; (800e88c <xTaskIncrementTick+0x154>)
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	6013      	str	r3, [r2, #0]
 800e794:	4b3e      	ldr	r3, [pc, #248]	; (800e890 <xTaskIncrementTick+0x158>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	3301      	adds	r3, #1
 800e79a:	4a3d      	ldr	r2, [pc, #244]	; (800e890 <xTaskIncrementTick+0x158>)
 800e79c:	6013      	str	r3, [r2, #0]
 800e79e:	f000 fadb 	bl	800ed58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e7a2:	4b3c      	ldr	r3, [pc, #240]	; (800e894 <xTaskIncrementTick+0x15c>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	693a      	ldr	r2, [r7, #16]
 800e7a8:	429a      	cmp	r2, r3
 800e7aa:	d349      	bcc.n	800e840 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e7ac:	4b36      	ldr	r3, [pc, #216]	; (800e888 <xTaskIncrementTick+0x150>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d104      	bne.n	800e7c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7b6:	4b37      	ldr	r3, [pc, #220]	; (800e894 <xTaskIncrementTick+0x15c>)
 800e7b8:	f04f 32ff 	mov.w	r2, #4294967295
 800e7bc:	601a      	str	r2, [r3, #0]
					break;
 800e7be:	e03f      	b.n	800e840 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7c0:	4b31      	ldr	r3, [pc, #196]	; (800e888 <xTaskIncrementTick+0x150>)
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	68db      	ldr	r3, [r3, #12]
 800e7c6:	68db      	ldr	r3, [r3, #12]
 800e7c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	685b      	ldr	r3, [r3, #4]
 800e7ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e7d0:	693a      	ldr	r2, [r7, #16]
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	d203      	bcs.n	800e7e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e7d8:	4a2e      	ldr	r2, [pc, #184]	; (800e894 <xTaskIncrementTick+0x15c>)
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e7de:	e02f      	b.n	800e840 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e7e0:	68bb      	ldr	r3, [r7, #8]
 800e7e2:	3304      	adds	r3, #4
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f7fe fd2b 	bl	800d240 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d004      	beq.n	800e7fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	3318      	adds	r3, #24
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f7fe fd22 	bl	800d240 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e800:	4b25      	ldr	r3, [pc, #148]	; (800e898 <xTaskIncrementTick+0x160>)
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	429a      	cmp	r2, r3
 800e806:	d903      	bls.n	800e810 <xTaskIncrementTick+0xd8>
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e80c:	4a22      	ldr	r2, [pc, #136]	; (800e898 <xTaskIncrementTick+0x160>)
 800e80e:	6013      	str	r3, [r2, #0]
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e814:	4613      	mov	r3, r2
 800e816:	009b      	lsls	r3, r3, #2
 800e818:	4413      	add	r3, r2
 800e81a:	009b      	lsls	r3, r3, #2
 800e81c:	4a1f      	ldr	r2, [pc, #124]	; (800e89c <xTaskIncrementTick+0x164>)
 800e81e:	441a      	add	r2, r3
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	3304      	adds	r3, #4
 800e824:	4619      	mov	r1, r3
 800e826:	4610      	mov	r0, r2
 800e828:	f7fe fcad 	bl	800d186 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e830:	4b1b      	ldr	r3, [pc, #108]	; (800e8a0 <xTaskIncrementTick+0x168>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e836:	429a      	cmp	r2, r3
 800e838:	d3b8      	bcc.n	800e7ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e83a:	2301      	movs	r3, #1
 800e83c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e83e:	e7b5      	b.n	800e7ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e840:	4b17      	ldr	r3, [pc, #92]	; (800e8a0 <xTaskIncrementTick+0x168>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e846:	4915      	ldr	r1, [pc, #84]	; (800e89c <xTaskIncrementTick+0x164>)
 800e848:	4613      	mov	r3, r2
 800e84a:	009b      	lsls	r3, r3, #2
 800e84c:	4413      	add	r3, r2
 800e84e:	009b      	lsls	r3, r3, #2
 800e850:	440b      	add	r3, r1
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	2b01      	cmp	r3, #1
 800e856:	d901      	bls.n	800e85c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e858:	2301      	movs	r3, #1
 800e85a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e85c:	4b11      	ldr	r3, [pc, #68]	; (800e8a4 <xTaskIncrementTick+0x16c>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d007      	beq.n	800e874 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e864:	2301      	movs	r3, #1
 800e866:	617b      	str	r3, [r7, #20]
 800e868:	e004      	b.n	800e874 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e86a:	4b0f      	ldr	r3, [pc, #60]	; (800e8a8 <xTaskIncrementTick+0x170>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	3301      	adds	r3, #1
 800e870:	4a0d      	ldr	r2, [pc, #52]	; (800e8a8 <xTaskIncrementTick+0x170>)
 800e872:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e874:	697b      	ldr	r3, [r7, #20]
}
 800e876:	4618      	mov	r0, r3
 800e878:	3718      	adds	r7, #24
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}
 800e87e:	bf00      	nop
 800e880:	2000301c 	.word	0x2000301c
 800e884:	20002ff8 	.word	0x20002ff8
 800e888:	20002fac 	.word	0x20002fac
 800e88c:	20002fb0 	.word	0x20002fb0
 800e890:	2000300c 	.word	0x2000300c
 800e894:	20003014 	.word	0x20003014
 800e898:	20002ffc 	.word	0x20002ffc
 800e89c:	20002b24 	.word	0x20002b24
 800e8a0:	20002b20 	.word	0x20002b20
 800e8a4:	20003008 	.word	0x20003008
 800e8a8:	20003004 	.word	0x20003004

0800e8ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e8ac:	b480      	push	{r7}
 800e8ae:	b085      	sub	sp, #20
 800e8b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e8b2:	4b2a      	ldr	r3, [pc, #168]	; (800e95c <vTaskSwitchContext+0xb0>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d003      	beq.n	800e8c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e8ba:	4b29      	ldr	r3, [pc, #164]	; (800e960 <vTaskSwitchContext+0xb4>)
 800e8bc:	2201      	movs	r2, #1
 800e8be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e8c0:	e046      	b.n	800e950 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800e8c2:	4b27      	ldr	r3, [pc, #156]	; (800e960 <vTaskSwitchContext+0xb4>)
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8c8:	4b26      	ldr	r3, [pc, #152]	; (800e964 <vTaskSwitchContext+0xb8>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	60fb      	str	r3, [r7, #12]
 800e8ce:	e010      	b.n	800e8f2 <vTaskSwitchContext+0x46>
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d10a      	bne.n	800e8ec <vTaskSwitchContext+0x40>
	__asm volatile
 800e8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8da:	f383 8811 	msr	BASEPRI, r3
 800e8de:	f3bf 8f6f 	isb	sy
 800e8e2:	f3bf 8f4f 	dsb	sy
 800e8e6:	607b      	str	r3, [r7, #4]
}
 800e8e8:	bf00      	nop
 800e8ea:	e7fe      	b.n	800e8ea <vTaskSwitchContext+0x3e>
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	3b01      	subs	r3, #1
 800e8f0:	60fb      	str	r3, [r7, #12]
 800e8f2:	491d      	ldr	r1, [pc, #116]	; (800e968 <vTaskSwitchContext+0xbc>)
 800e8f4:	68fa      	ldr	r2, [r7, #12]
 800e8f6:	4613      	mov	r3, r2
 800e8f8:	009b      	lsls	r3, r3, #2
 800e8fa:	4413      	add	r3, r2
 800e8fc:	009b      	lsls	r3, r3, #2
 800e8fe:	440b      	add	r3, r1
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d0e4      	beq.n	800e8d0 <vTaskSwitchContext+0x24>
 800e906:	68fa      	ldr	r2, [r7, #12]
 800e908:	4613      	mov	r3, r2
 800e90a:	009b      	lsls	r3, r3, #2
 800e90c:	4413      	add	r3, r2
 800e90e:	009b      	lsls	r3, r3, #2
 800e910:	4a15      	ldr	r2, [pc, #84]	; (800e968 <vTaskSwitchContext+0xbc>)
 800e912:	4413      	add	r3, r2
 800e914:	60bb      	str	r3, [r7, #8]
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	685b      	ldr	r3, [r3, #4]
 800e91a:	685a      	ldr	r2, [r3, #4]
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	605a      	str	r2, [r3, #4]
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	685a      	ldr	r2, [r3, #4]
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	3308      	adds	r3, #8
 800e928:	429a      	cmp	r2, r3
 800e92a:	d104      	bne.n	800e936 <vTaskSwitchContext+0x8a>
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	685b      	ldr	r3, [r3, #4]
 800e930:	685a      	ldr	r2, [r3, #4]
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	605a      	str	r2, [r3, #4]
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	685b      	ldr	r3, [r3, #4]
 800e93a:	68db      	ldr	r3, [r3, #12]
 800e93c:	4a0b      	ldr	r2, [pc, #44]	; (800e96c <vTaskSwitchContext+0xc0>)
 800e93e:	6013      	str	r3, [r2, #0]
 800e940:	4a08      	ldr	r2, [pc, #32]	; (800e964 <vTaskSwitchContext+0xb8>)
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e946:	4b09      	ldr	r3, [pc, #36]	; (800e96c <vTaskSwitchContext+0xc0>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	3354      	adds	r3, #84	; 0x54
 800e94c:	4a08      	ldr	r2, [pc, #32]	; (800e970 <vTaskSwitchContext+0xc4>)
 800e94e:	6013      	str	r3, [r2, #0]
}
 800e950:	bf00      	nop
 800e952:	3714      	adds	r7, #20
 800e954:	46bd      	mov	sp, r7
 800e956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95a:	4770      	bx	lr
 800e95c:	2000301c 	.word	0x2000301c
 800e960:	20003008 	.word	0x20003008
 800e964:	20002ffc 	.word	0x20002ffc
 800e968:	20002b24 	.word	0x20002b24
 800e96c:	20002b20 	.word	0x20002b20
 800e970:	20000118 	.word	0x20000118

0800e974 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b084      	sub	sp, #16
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
 800e97c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d10a      	bne.n	800e99a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e988:	f383 8811 	msr	BASEPRI, r3
 800e98c:	f3bf 8f6f 	isb	sy
 800e990:	f3bf 8f4f 	dsb	sy
 800e994:	60fb      	str	r3, [r7, #12]
}
 800e996:	bf00      	nop
 800e998:	e7fe      	b.n	800e998 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e99a:	4b07      	ldr	r3, [pc, #28]	; (800e9b8 <vTaskPlaceOnEventList+0x44>)
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	3318      	adds	r3, #24
 800e9a0:	4619      	mov	r1, r3
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f7fe fc13 	bl	800d1ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e9a8:	2101      	movs	r1, #1
 800e9aa:	6838      	ldr	r0, [r7, #0]
 800e9ac:	f000 fb7e 	bl	800f0ac <prvAddCurrentTaskToDelayedList>
}
 800e9b0:	bf00      	nop
 800e9b2:	3710      	adds	r7, #16
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}
 800e9b8:	20002b20 	.word	0x20002b20

0800e9bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b086      	sub	sp, #24
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	60f8      	str	r0, [r7, #12]
 800e9c4:	60b9      	str	r1, [r7, #8]
 800e9c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d10a      	bne.n	800e9e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d2:	f383 8811 	msr	BASEPRI, r3
 800e9d6:	f3bf 8f6f 	isb	sy
 800e9da:	f3bf 8f4f 	dsb	sy
 800e9de:	617b      	str	r3, [r7, #20]
}
 800e9e0:	bf00      	nop
 800e9e2:	e7fe      	b.n	800e9e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e9e4:	4b0a      	ldr	r3, [pc, #40]	; (800ea10 <vTaskPlaceOnEventListRestricted+0x54>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	3318      	adds	r3, #24
 800e9ea:	4619      	mov	r1, r3
 800e9ec:	68f8      	ldr	r0, [r7, #12]
 800e9ee:	f7fe fbca 	bl	800d186 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d002      	beq.n	800e9fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e9f8:	f04f 33ff 	mov.w	r3, #4294967295
 800e9fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e9fe:	6879      	ldr	r1, [r7, #4]
 800ea00:	68b8      	ldr	r0, [r7, #8]
 800ea02:	f000 fb53 	bl	800f0ac <prvAddCurrentTaskToDelayedList>
	}
 800ea06:	bf00      	nop
 800ea08:	3718      	adds	r7, #24
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}
 800ea0e:	bf00      	nop
 800ea10:	20002b20 	.word	0x20002b20

0800ea14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b086      	sub	sp, #24
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	68db      	ldr	r3, [r3, #12]
 800ea20:	68db      	ldr	r3, [r3, #12]
 800ea22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ea24:	693b      	ldr	r3, [r7, #16]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d10a      	bne.n	800ea40 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ea2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea2e:	f383 8811 	msr	BASEPRI, r3
 800ea32:	f3bf 8f6f 	isb	sy
 800ea36:	f3bf 8f4f 	dsb	sy
 800ea3a:	60fb      	str	r3, [r7, #12]
}
 800ea3c:	bf00      	nop
 800ea3e:	e7fe      	b.n	800ea3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ea40:	693b      	ldr	r3, [r7, #16]
 800ea42:	3318      	adds	r3, #24
 800ea44:	4618      	mov	r0, r3
 800ea46:	f7fe fbfb 	bl	800d240 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ea4a:	4b1e      	ldr	r3, [pc, #120]	; (800eac4 <xTaskRemoveFromEventList+0xb0>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d11d      	bne.n	800ea8e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ea52:	693b      	ldr	r3, [r7, #16]
 800ea54:	3304      	adds	r3, #4
 800ea56:	4618      	mov	r0, r3
 800ea58:	f7fe fbf2 	bl	800d240 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ea5c:	693b      	ldr	r3, [r7, #16]
 800ea5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea60:	4b19      	ldr	r3, [pc, #100]	; (800eac8 <xTaskRemoveFromEventList+0xb4>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	429a      	cmp	r2, r3
 800ea66:	d903      	bls.n	800ea70 <xTaskRemoveFromEventList+0x5c>
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea6c:	4a16      	ldr	r2, [pc, #88]	; (800eac8 <xTaskRemoveFromEventList+0xb4>)
 800ea6e:	6013      	str	r3, [r2, #0]
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea74:	4613      	mov	r3, r2
 800ea76:	009b      	lsls	r3, r3, #2
 800ea78:	4413      	add	r3, r2
 800ea7a:	009b      	lsls	r3, r3, #2
 800ea7c:	4a13      	ldr	r2, [pc, #76]	; (800eacc <xTaskRemoveFromEventList+0xb8>)
 800ea7e:	441a      	add	r2, r3
 800ea80:	693b      	ldr	r3, [r7, #16]
 800ea82:	3304      	adds	r3, #4
 800ea84:	4619      	mov	r1, r3
 800ea86:	4610      	mov	r0, r2
 800ea88:	f7fe fb7d 	bl	800d186 <vListInsertEnd>
 800ea8c:	e005      	b.n	800ea9a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ea8e:	693b      	ldr	r3, [r7, #16]
 800ea90:	3318      	adds	r3, #24
 800ea92:	4619      	mov	r1, r3
 800ea94:	480e      	ldr	r0, [pc, #56]	; (800ead0 <xTaskRemoveFromEventList+0xbc>)
 800ea96:	f7fe fb76 	bl	800d186 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ea9a:	693b      	ldr	r3, [r7, #16]
 800ea9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea9e:	4b0d      	ldr	r3, [pc, #52]	; (800ead4 <xTaskRemoveFromEventList+0xc0>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaa4:	429a      	cmp	r2, r3
 800eaa6:	d905      	bls.n	800eab4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800eaac:	4b0a      	ldr	r3, [pc, #40]	; (800ead8 <xTaskRemoveFromEventList+0xc4>)
 800eaae:	2201      	movs	r2, #1
 800eab0:	601a      	str	r2, [r3, #0]
 800eab2:	e001      	b.n	800eab8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800eab4:	2300      	movs	r3, #0
 800eab6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800eab8:	697b      	ldr	r3, [r7, #20]
}
 800eaba:	4618      	mov	r0, r3
 800eabc:	3718      	adds	r7, #24
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}
 800eac2:	bf00      	nop
 800eac4:	2000301c 	.word	0x2000301c
 800eac8:	20002ffc 	.word	0x20002ffc
 800eacc:	20002b24 	.word	0x20002b24
 800ead0:	20002fb4 	.word	0x20002fb4
 800ead4:	20002b20 	.word	0x20002b20
 800ead8:	20003008 	.word	0x20003008

0800eadc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800eadc:	b480      	push	{r7}
 800eade:	b083      	sub	sp, #12
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800eae4:	4b06      	ldr	r3, [pc, #24]	; (800eb00 <vTaskInternalSetTimeOutState+0x24>)
 800eae6:	681a      	ldr	r2, [r3, #0]
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800eaec:	4b05      	ldr	r3, [pc, #20]	; (800eb04 <vTaskInternalSetTimeOutState+0x28>)
 800eaee:	681a      	ldr	r2, [r3, #0]
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	605a      	str	r2, [r3, #4]
}
 800eaf4:	bf00      	nop
 800eaf6:	370c      	adds	r7, #12
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafe:	4770      	bx	lr
 800eb00:	2000300c 	.word	0x2000300c
 800eb04:	20002ff8 	.word	0x20002ff8

0800eb08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b088      	sub	sp, #32
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d10a      	bne.n	800eb2e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800eb18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb1c:	f383 8811 	msr	BASEPRI, r3
 800eb20:	f3bf 8f6f 	isb	sy
 800eb24:	f3bf 8f4f 	dsb	sy
 800eb28:	613b      	str	r3, [r7, #16]
}
 800eb2a:	bf00      	nop
 800eb2c:	e7fe      	b.n	800eb2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d10a      	bne.n	800eb4a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800eb34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb38:	f383 8811 	msr	BASEPRI, r3
 800eb3c:	f3bf 8f6f 	isb	sy
 800eb40:	f3bf 8f4f 	dsb	sy
 800eb44:	60fb      	str	r3, [r7, #12]
}
 800eb46:	bf00      	nop
 800eb48:	e7fe      	b.n	800eb48 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800eb4a:	f000 ff7b 	bl	800fa44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800eb4e:	4b1d      	ldr	r3, [pc, #116]	; (800ebc4 <xTaskCheckForTimeOut+0xbc>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	685b      	ldr	r3, [r3, #4]
 800eb58:	69ba      	ldr	r2, [r7, #24]
 800eb5a:	1ad3      	subs	r3, r2, r3
 800eb5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb66:	d102      	bne.n	800eb6e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	61fb      	str	r3, [r7, #28]
 800eb6c:	e023      	b.n	800ebb6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681a      	ldr	r2, [r3, #0]
 800eb72:	4b15      	ldr	r3, [pc, #84]	; (800ebc8 <xTaskCheckForTimeOut+0xc0>)
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	429a      	cmp	r2, r3
 800eb78:	d007      	beq.n	800eb8a <xTaskCheckForTimeOut+0x82>
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	685b      	ldr	r3, [r3, #4]
 800eb7e:	69ba      	ldr	r2, [r7, #24]
 800eb80:	429a      	cmp	r2, r3
 800eb82:	d302      	bcc.n	800eb8a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800eb84:	2301      	movs	r3, #1
 800eb86:	61fb      	str	r3, [r7, #28]
 800eb88:	e015      	b.n	800ebb6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	697a      	ldr	r2, [r7, #20]
 800eb90:	429a      	cmp	r2, r3
 800eb92:	d20b      	bcs.n	800ebac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	681a      	ldr	r2, [r3, #0]
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	1ad2      	subs	r2, r2, r3
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eba0:	6878      	ldr	r0, [r7, #4]
 800eba2:	f7ff ff9b 	bl	800eadc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800eba6:	2300      	movs	r3, #0
 800eba8:	61fb      	str	r3, [r7, #28]
 800ebaa:	e004      	b.n	800ebb6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	2200      	movs	r2, #0
 800ebb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ebb2:	2301      	movs	r3, #1
 800ebb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ebb6:	f000 ff75 	bl	800faa4 <vPortExitCritical>

	return xReturn;
 800ebba:	69fb      	ldr	r3, [r7, #28]
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	3720      	adds	r7, #32
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}
 800ebc4:	20002ff8 	.word	0x20002ff8
 800ebc8:	2000300c 	.word	0x2000300c

0800ebcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ebcc:	b480      	push	{r7}
 800ebce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ebd0:	4b03      	ldr	r3, [pc, #12]	; (800ebe0 <vTaskMissedYield+0x14>)
 800ebd2:	2201      	movs	r2, #1
 800ebd4:	601a      	str	r2, [r3, #0]
}
 800ebd6:	bf00      	nop
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebde:	4770      	bx	lr
 800ebe0:	20003008 	.word	0x20003008

0800ebe4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b082      	sub	sp, #8
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ebec:	f000 f852 	bl	800ec94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ebf0:	4b06      	ldr	r3, [pc, #24]	; (800ec0c <prvIdleTask+0x28>)
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	2b01      	cmp	r3, #1
 800ebf6:	d9f9      	bls.n	800ebec <prvIdleTask+0x8>
			{
				taskYIELD();
 800ebf8:	4b05      	ldr	r3, [pc, #20]	; (800ec10 <prvIdleTask+0x2c>)
 800ebfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebfe:	601a      	str	r2, [r3, #0]
 800ec00:	f3bf 8f4f 	dsb	sy
 800ec04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ec08:	e7f0      	b.n	800ebec <prvIdleTask+0x8>
 800ec0a:	bf00      	nop
 800ec0c:	20002b24 	.word	0x20002b24
 800ec10:	e000ed04 	.word	0xe000ed04

0800ec14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b082      	sub	sp, #8
 800ec18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	607b      	str	r3, [r7, #4]
 800ec1e:	e00c      	b.n	800ec3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ec20:	687a      	ldr	r2, [r7, #4]
 800ec22:	4613      	mov	r3, r2
 800ec24:	009b      	lsls	r3, r3, #2
 800ec26:	4413      	add	r3, r2
 800ec28:	009b      	lsls	r3, r3, #2
 800ec2a:	4a12      	ldr	r2, [pc, #72]	; (800ec74 <prvInitialiseTaskLists+0x60>)
 800ec2c:	4413      	add	r3, r2
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7fe fa7c 	bl	800d12c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	3301      	adds	r3, #1
 800ec38:	607b      	str	r3, [r7, #4]
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2b37      	cmp	r3, #55	; 0x37
 800ec3e:	d9ef      	bls.n	800ec20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ec40:	480d      	ldr	r0, [pc, #52]	; (800ec78 <prvInitialiseTaskLists+0x64>)
 800ec42:	f7fe fa73 	bl	800d12c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ec46:	480d      	ldr	r0, [pc, #52]	; (800ec7c <prvInitialiseTaskLists+0x68>)
 800ec48:	f7fe fa70 	bl	800d12c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ec4c:	480c      	ldr	r0, [pc, #48]	; (800ec80 <prvInitialiseTaskLists+0x6c>)
 800ec4e:	f7fe fa6d 	bl	800d12c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ec52:	480c      	ldr	r0, [pc, #48]	; (800ec84 <prvInitialiseTaskLists+0x70>)
 800ec54:	f7fe fa6a 	bl	800d12c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ec58:	480b      	ldr	r0, [pc, #44]	; (800ec88 <prvInitialiseTaskLists+0x74>)
 800ec5a:	f7fe fa67 	bl	800d12c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ec5e:	4b0b      	ldr	r3, [pc, #44]	; (800ec8c <prvInitialiseTaskLists+0x78>)
 800ec60:	4a05      	ldr	r2, [pc, #20]	; (800ec78 <prvInitialiseTaskLists+0x64>)
 800ec62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ec64:	4b0a      	ldr	r3, [pc, #40]	; (800ec90 <prvInitialiseTaskLists+0x7c>)
 800ec66:	4a05      	ldr	r2, [pc, #20]	; (800ec7c <prvInitialiseTaskLists+0x68>)
 800ec68:	601a      	str	r2, [r3, #0]
}
 800ec6a:	bf00      	nop
 800ec6c:	3708      	adds	r7, #8
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}
 800ec72:	bf00      	nop
 800ec74:	20002b24 	.word	0x20002b24
 800ec78:	20002f84 	.word	0x20002f84
 800ec7c:	20002f98 	.word	0x20002f98
 800ec80:	20002fb4 	.word	0x20002fb4
 800ec84:	20002fc8 	.word	0x20002fc8
 800ec88:	20002fe0 	.word	0x20002fe0
 800ec8c:	20002fac 	.word	0x20002fac
 800ec90:	20002fb0 	.word	0x20002fb0

0800ec94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b082      	sub	sp, #8
 800ec98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ec9a:	e019      	b.n	800ecd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ec9c:	f000 fed2 	bl	800fa44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eca0:	4b10      	ldr	r3, [pc, #64]	; (800ece4 <prvCheckTasksWaitingTermination+0x50>)
 800eca2:	68db      	ldr	r3, [r3, #12]
 800eca4:	68db      	ldr	r3, [r3, #12]
 800eca6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	3304      	adds	r3, #4
 800ecac:	4618      	mov	r0, r3
 800ecae:	f7fe fac7 	bl	800d240 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ecb2:	4b0d      	ldr	r3, [pc, #52]	; (800ece8 <prvCheckTasksWaitingTermination+0x54>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	3b01      	subs	r3, #1
 800ecb8:	4a0b      	ldr	r2, [pc, #44]	; (800ece8 <prvCheckTasksWaitingTermination+0x54>)
 800ecba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ecbc:	4b0b      	ldr	r3, [pc, #44]	; (800ecec <prvCheckTasksWaitingTermination+0x58>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	3b01      	subs	r3, #1
 800ecc2:	4a0a      	ldr	r2, [pc, #40]	; (800ecec <prvCheckTasksWaitingTermination+0x58>)
 800ecc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ecc6:	f000 feed 	bl	800faa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f000 f810 	bl	800ecf0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ecd0:	4b06      	ldr	r3, [pc, #24]	; (800ecec <prvCheckTasksWaitingTermination+0x58>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d1e1      	bne.n	800ec9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ecd8:	bf00      	nop
 800ecda:	bf00      	nop
 800ecdc:	3708      	adds	r7, #8
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}
 800ece2:	bf00      	nop
 800ece4:	20002fc8 	.word	0x20002fc8
 800ece8:	20002ff4 	.word	0x20002ff4
 800ecec:	20002fdc 	.word	0x20002fdc

0800ecf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b084      	sub	sp, #16
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	3354      	adds	r3, #84	; 0x54
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	f002 f905 	bl	8010f0c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d108      	bne.n	800ed1e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed10:	4618      	mov	r0, r3
 800ed12:	f001 f885 	bl	800fe20 <vPortFree>
				vPortFree( pxTCB );
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	f001 f882 	bl	800fe20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ed1c:	e018      	b.n	800ed50 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ed24:	2b01      	cmp	r3, #1
 800ed26:	d103      	bne.n	800ed30 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ed28:	6878      	ldr	r0, [r7, #4]
 800ed2a:	f001 f879 	bl	800fe20 <vPortFree>
	}
 800ed2e:	e00f      	b.n	800ed50 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ed36:	2b02      	cmp	r3, #2
 800ed38:	d00a      	beq.n	800ed50 <prvDeleteTCB+0x60>
	__asm volatile
 800ed3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed3e:	f383 8811 	msr	BASEPRI, r3
 800ed42:	f3bf 8f6f 	isb	sy
 800ed46:	f3bf 8f4f 	dsb	sy
 800ed4a:	60fb      	str	r3, [r7, #12]
}
 800ed4c:	bf00      	nop
 800ed4e:	e7fe      	b.n	800ed4e <prvDeleteTCB+0x5e>
	}
 800ed50:	bf00      	nop
 800ed52:	3710      	adds	r7, #16
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}

0800ed58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ed58:	b480      	push	{r7}
 800ed5a:	b083      	sub	sp, #12
 800ed5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ed5e:	4b0c      	ldr	r3, [pc, #48]	; (800ed90 <prvResetNextTaskUnblockTime+0x38>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d104      	bne.n	800ed72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ed68:	4b0a      	ldr	r3, [pc, #40]	; (800ed94 <prvResetNextTaskUnblockTime+0x3c>)
 800ed6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ed6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ed70:	e008      	b.n	800ed84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed72:	4b07      	ldr	r3, [pc, #28]	; (800ed90 <prvResetNextTaskUnblockTime+0x38>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	68db      	ldr	r3, [r3, #12]
 800ed78:	68db      	ldr	r3, [r3, #12]
 800ed7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	685b      	ldr	r3, [r3, #4]
 800ed80:	4a04      	ldr	r2, [pc, #16]	; (800ed94 <prvResetNextTaskUnblockTime+0x3c>)
 800ed82:	6013      	str	r3, [r2, #0]
}
 800ed84:	bf00      	nop
 800ed86:	370c      	adds	r7, #12
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8e:	4770      	bx	lr
 800ed90:	20002fac 	.word	0x20002fac
 800ed94:	20003014 	.word	0x20003014

0800ed98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ed98:	b480      	push	{r7}
 800ed9a:	b083      	sub	sp, #12
 800ed9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ed9e:	4b0b      	ldr	r3, [pc, #44]	; (800edcc <xTaskGetSchedulerState+0x34>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d102      	bne.n	800edac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eda6:	2301      	movs	r3, #1
 800eda8:	607b      	str	r3, [r7, #4]
 800edaa:	e008      	b.n	800edbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800edac:	4b08      	ldr	r3, [pc, #32]	; (800edd0 <xTaskGetSchedulerState+0x38>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d102      	bne.n	800edba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800edb4:	2302      	movs	r3, #2
 800edb6:	607b      	str	r3, [r7, #4]
 800edb8:	e001      	b.n	800edbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800edba:	2300      	movs	r3, #0
 800edbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800edbe:	687b      	ldr	r3, [r7, #4]
	}
 800edc0:	4618      	mov	r0, r3
 800edc2:	370c      	adds	r7, #12
 800edc4:	46bd      	mov	sp, r7
 800edc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edca:	4770      	bx	lr
 800edcc:	20003000 	.word	0x20003000
 800edd0:	2000301c 	.word	0x2000301c

0800edd4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b084      	sub	sp, #16
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ede0:	2300      	movs	r3, #0
 800ede2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d051      	beq.n	800ee8e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800edea:	68bb      	ldr	r3, [r7, #8]
 800edec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edee:	4b2a      	ldr	r3, [pc, #168]	; (800ee98 <xTaskPriorityInherit+0xc4>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edf4:	429a      	cmp	r2, r3
 800edf6:	d241      	bcs.n	800ee7c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	699b      	ldr	r3, [r3, #24]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	db06      	blt.n	800ee0e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee00:	4b25      	ldr	r3, [pc, #148]	; (800ee98 <xTaskPriorityInherit+0xc4>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ee0e:	68bb      	ldr	r3, [r7, #8]
 800ee10:	6959      	ldr	r1, [r3, #20]
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee16:	4613      	mov	r3, r2
 800ee18:	009b      	lsls	r3, r3, #2
 800ee1a:	4413      	add	r3, r2
 800ee1c:	009b      	lsls	r3, r3, #2
 800ee1e:	4a1f      	ldr	r2, [pc, #124]	; (800ee9c <xTaskPriorityInherit+0xc8>)
 800ee20:	4413      	add	r3, r2
 800ee22:	4299      	cmp	r1, r3
 800ee24:	d122      	bne.n	800ee6c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee26:	68bb      	ldr	r3, [r7, #8]
 800ee28:	3304      	adds	r3, #4
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f7fe fa08 	bl	800d240 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ee30:	4b19      	ldr	r3, [pc, #100]	; (800ee98 <xTaskPriorityInherit+0xc4>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee36:	68bb      	ldr	r3, [r7, #8]
 800ee38:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ee3a:	68bb      	ldr	r3, [r7, #8]
 800ee3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee3e:	4b18      	ldr	r3, [pc, #96]	; (800eea0 <xTaskPriorityInherit+0xcc>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	429a      	cmp	r2, r3
 800ee44:	d903      	bls.n	800ee4e <xTaskPriorityInherit+0x7a>
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee4a:	4a15      	ldr	r2, [pc, #84]	; (800eea0 <xTaskPriorityInherit+0xcc>)
 800ee4c:	6013      	str	r3, [r2, #0]
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee52:	4613      	mov	r3, r2
 800ee54:	009b      	lsls	r3, r3, #2
 800ee56:	4413      	add	r3, r2
 800ee58:	009b      	lsls	r3, r3, #2
 800ee5a:	4a10      	ldr	r2, [pc, #64]	; (800ee9c <xTaskPriorityInherit+0xc8>)
 800ee5c:	441a      	add	r2, r3
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	3304      	adds	r3, #4
 800ee62:	4619      	mov	r1, r3
 800ee64:	4610      	mov	r0, r2
 800ee66:	f7fe f98e 	bl	800d186 <vListInsertEnd>
 800ee6a:	e004      	b.n	800ee76 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ee6c:	4b0a      	ldr	r3, [pc, #40]	; (800ee98 <xTaskPriorityInherit+0xc4>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ee76:	2301      	movs	r3, #1
 800ee78:	60fb      	str	r3, [r7, #12]
 800ee7a:	e008      	b.n	800ee8e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ee80:	4b05      	ldr	r3, [pc, #20]	; (800ee98 <xTaskPriorityInherit+0xc4>)
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d201      	bcs.n	800ee8e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ee8e:	68fb      	ldr	r3, [r7, #12]
	}
 800ee90:	4618      	mov	r0, r3
 800ee92:	3710      	adds	r7, #16
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}
 800ee98:	20002b20 	.word	0x20002b20
 800ee9c:	20002b24 	.word	0x20002b24
 800eea0:	20002ffc 	.word	0x20002ffc

0800eea4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b086      	sub	sp, #24
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d056      	beq.n	800ef68 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800eeba:	4b2e      	ldr	r3, [pc, #184]	; (800ef74 <xTaskPriorityDisinherit+0xd0>)
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	693a      	ldr	r2, [r7, #16]
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d00a      	beq.n	800eeda <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800eec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eec8:	f383 8811 	msr	BASEPRI, r3
 800eecc:	f3bf 8f6f 	isb	sy
 800eed0:	f3bf 8f4f 	dsb	sy
 800eed4:	60fb      	str	r3, [r7, #12]
}
 800eed6:	bf00      	nop
 800eed8:	e7fe      	b.n	800eed8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800eeda:	693b      	ldr	r3, [r7, #16]
 800eedc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d10a      	bne.n	800eef8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800eee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee6:	f383 8811 	msr	BASEPRI, r3
 800eeea:	f3bf 8f6f 	isb	sy
 800eeee:	f3bf 8f4f 	dsb	sy
 800eef2:	60bb      	str	r3, [r7, #8]
}
 800eef4:	bf00      	nop
 800eef6:	e7fe      	b.n	800eef6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800eef8:	693b      	ldr	r3, [r7, #16]
 800eefa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eefc:	1e5a      	subs	r2, r3, #1
 800eefe:	693b      	ldr	r3, [r7, #16]
 800ef00:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ef02:	693b      	ldr	r3, [r7, #16]
 800ef04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef06:	693b      	ldr	r3, [r7, #16]
 800ef08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef0a:	429a      	cmp	r2, r3
 800ef0c:	d02c      	beq.n	800ef68 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ef0e:	693b      	ldr	r3, [r7, #16]
 800ef10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d128      	bne.n	800ef68 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef16:	693b      	ldr	r3, [r7, #16]
 800ef18:	3304      	adds	r3, #4
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f7fe f990 	bl	800d240 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ef20:	693b      	ldr	r3, [r7, #16]
 800ef22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ef24:	693b      	ldr	r3, [r7, #16]
 800ef26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef28:	693b      	ldr	r3, [r7, #16]
 800ef2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef2c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ef30:	693b      	ldr	r3, [r7, #16]
 800ef32:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef38:	4b0f      	ldr	r3, [pc, #60]	; (800ef78 <xTaskPriorityDisinherit+0xd4>)
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	429a      	cmp	r2, r3
 800ef3e:	d903      	bls.n	800ef48 <xTaskPriorityDisinherit+0xa4>
 800ef40:	693b      	ldr	r3, [r7, #16]
 800ef42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef44:	4a0c      	ldr	r2, [pc, #48]	; (800ef78 <xTaskPriorityDisinherit+0xd4>)
 800ef46:	6013      	str	r3, [r2, #0]
 800ef48:	693b      	ldr	r3, [r7, #16]
 800ef4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef4c:	4613      	mov	r3, r2
 800ef4e:	009b      	lsls	r3, r3, #2
 800ef50:	4413      	add	r3, r2
 800ef52:	009b      	lsls	r3, r3, #2
 800ef54:	4a09      	ldr	r2, [pc, #36]	; (800ef7c <xTaskPriorityDisinherit+0xd8>)
 800ef56:	441a      	add	r2, r3
 800ef58:	693b      	ldr	r3, [r7, #16]
 800ef5a:	3304      	adds	r3, #4
 800ef5c:	4619      	mov	r1, r3
 800ef5e:	4610      	mov	r0, r2
 800ef60:	f7fe f911 	bl	800d186 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ef64:	2301      	movs	r3, #1
 800ef66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ef68:	697b      	ldr	r3, [r7, #20]
	}
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	3718      	adds	r7, #24
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}
 800ef72:	bf00      	nop
 800ef74:	20002b20 	.word	0x20002b20
 800ef78:	20002ffc 	.word	0x20002ffc
 800ef7c:	20002b24 	.word	0x20002b24

0800ef80 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b088      	sub	sp, #32
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
 800ef88:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ef8e:	2301      	movs	r3, #1
 800ef90:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d06a      	beq.n	800f06e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ef98:	69bb      	ldr	r3, [r7, #24]
 800ef9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d10a      	bne.n	800efb6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800efa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efa4:	f383 8811 	msr	BASEPRI, r3
 800efa8:	f3bf 8f6f 	isb	sy
 800efac:	f3bf 8f4f 	dsb	sy
 800efb0:	60fb      	str	r3, [r7, #12]
}
 800efb2:	bf00      	nop
 800efb4:	e7fe      	b.n	800efb4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800efb6:	69bb      	ldr	r3, [r7, #24]
 800efb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800efba:	683a      	ldr	r2, [r7, #0]
 800efbc:	429a      	cmp	r2, r3
 800efbe:	d902      	bls.n	800efc6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	61fb      	str	r3, [r7, #28]
 800efc4:	e002      	b.n	800efcc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800efc6:	69bb      	ldr	r3, [r7, #24]
 800efc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800efca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800efcc:	69bb      	ldr	r3, [r7, #24]
 800efce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efd0:	69fa      	ldr	r2, [r7, #28]
 800efd2:	429a      	cmp	r2, r3
 800efd4:	d04b      	beq.n	800f06e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800efd6:	69bb      	ldr	r3, [r7, #24]
 800efd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800efda:	697a      	ldr	r2, [r7, #20]
 800efdc:	429a      	cmp	r2, r3
 800efde:	d146      	bne.n	800f06e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800efe0:	4b25      	ldr	r3, [pc, #148]	; (800f078 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	69ba      	ldr	r2, [r7, #24]
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d10a      	bne.n	800f000 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800efea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efee:	f383 8811 	msr	BASEPRI, r3
 800eff2:	f3bf 8f6f 	isb	sy
 800eff6:	f3bf 8f4f 	dsb	sy
 800effa:	60bb      	str	r3, [r7, #8]
}
 800effc:	bf00      	nop
 800effe:	e7fe      	b.n	800effe <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f000:	69bb      	ldr	r3, [r7, #24]
 800f002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f004:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f006:	69bb      	ldr	r3, [r7, #24]
 800f008:	69fa      	ldr	r2, [r7, #28]
 800f00a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f00c:	69bb      	ldr	r3, [r7, #24]
 800f00e:	699b      	ldr	r3, [r3, #24]
 800f010:	2b00      	cmp	r3, #0
 800f012:	db04      	blt.n	800f01e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f014:	69fb      	ldr	r3, [r7, #28]
 800f016:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f01a:	69bb      	ldr	r3, [r7, #24]
 800f01c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f01e:	69bb      	ldr	r3, [r7, #24]
 800f020:	6959      	ldr	r1, [r3, #20]
 800f022:	693a      	ldr	r2, [r7, #16]
 800f024:	4613      	mov	r3, r2
 800f026:	009b      	lsls	r3, r3, #2
 800f028:	4413      	add	r3, r2
 800f02a:	009b      	lsls	r3, r3, #2
 800f02c:	4a13      	ldr	r2, [pc, #76]	; (800f07c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f02e:	4413      	add	r3, r2
 800f030:	4299      	cmp	r1, r3
 800f032:	d11c      	bne.n	800f06e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f034:	69bb      	ldr	r3, [r7, #24]
 800f036:	3304      	adds	r3, #4
 800f038:	4618      	mov	r0, r3
 800f03a:	f7fe f901 	bl	800d240 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f03e:	69bb      	ldr	r3, [r7, #24]
 800f040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f042:	4b0f      	ldr	r3, [pc, #60]	; (800f080 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	429a      	cmp	r2, r3
 800f048:	d903      	bls.n	800f052 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800f04a:	69bb      	ldr	r3, [r7, #24]
 800f04c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f04e:	4a0c      	ldr	r2, [pc, #48]	; (800f080 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f050:	6013      	str	r3, [r2, #0]
 800f052:	69bb      	ldr	r3, [r7, #24]
 800f054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f056:	4613      	mov	r3, r2
 800f058:	009b      	lsls	r3, r3, #2
 800f05a:	4413      	add	r3, r2
 800f05c:	009b      	lsls	r3, r3, #2
 800f05e:	4a07      	ldr	r2, [pc, #28]	; (800f07c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f060:	441a      	add	r2, r3
 800f062:	69bb      	ldr	r3, [r7, #24]
 800f064:	3304      	adds	r3, #4
 800f066:	4619      	mov	r1, r3
 800f068:	4610      	mov	r0, r2
 800f06a:	f7fe f88c 	bl	800d186 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f06e:	bf00      	nop
 800f070:	3720      	adds	r7, #32
 800f072:	46bd      	mov	sp, r7
 800f074:	bd80      	pop	{r7, pc}
 800f076:	bf00      	nop
 800f078:	20002b20 	.word	0x20002b20
 800f07c:	20002b24 	.word	0x20002b24
 800f080:	20002ffc 	.word	0x20002ffc

0800f084 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f084:	b480      	push	{r7}
 800f086:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f088:	4b07      	ldr	r3, [pc, #28]	; (800f0a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d004      	beq.n	800f09a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f090:	4b05      	ldr	r3, [pc, #20]	; (800f0a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f096:	3201      	adds	r2, #1
 800f098:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800f09a:	4b03      	ldr	r3, [pc, #12]	; (800f0a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800f09c:	681b      	ldr	r3, [r3, #0]
	}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a6:	4770      	bx	lr
 800f0a8:	20002b20 	.word	0x20002b20

0800f0ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
 800f0b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f0b6:	4b21      	ldr	r3, [pc, #132]	; (800f13c <prvAddCurrentTaskToDelayedList+0x90>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f0bc:	4b20      	ldr	r3, [pc, #128]	; (800f140 <prvAddCurrentTaskToDelayedList+0x94>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	3304      	adds	r3, #4
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7fe f8bc 	bl	800d240 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0ce:	d10a      	bne.n	800f0e6 <prvAddCurrentTaskToDelayedList+0x3a>
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d007      	beq.n	800f0e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f0d6:	4b1a      	ldr	r3, [pc, #104]	; (800f140 <prvAddCurrentTaskToDelayedList+0x94>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	3304      	adds	r3, #4
 800f0dc:	4619      	mov	r1, r3
 800f0de:	4819      	ldr	r0, [pc, #100]	; (800f144 <prvAddCurrentTaskToDelayedList+0x98>)
 800f0e0:	f7fe f851 	bl	800d186 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f0e4:	e026      	b.n	800f134 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f0e6:	68fa      	ldr	r2, [r7, #12]
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	4413      	add	r3, r2
 800f0ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f0ee:	4b14      	ldr	r3, [pc, #80]	; (800f140 <prvAddCurrentTaskToDelayedList+0x94>)
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	68ba      	ldr	r2, [r7, #8]
 800f0f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f0f6:	68ba      	ldr	r2, [r7, #8]
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	d209      	bcs.n	800f112 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f0fe:	4b12      	ldr	r3, [pc, #72]	; (800f148 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f100:	681a      	ldr	r2, [r3, #0]
 800f102:	4b0f      	ldr	r3, [pc, #60]	; (800f140 <prvAddCurrentTaskToDelayedList+0x94>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	3304      	adds	r3, #4
 800f108:	4619      	mov	r1, r3
 800f10a:	4610      	mov	r0, r2
 800f10c:	f7fe f85f 	bl	800d1ce <vListInsert>
}
 800f110:	e010      	b.n	800f134 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f112:	4b0e      	ldr	r3, [pc, #56]	; (800f14c <prvAddCurrentTaskToDelayedList+0xa0>)
 800f114:	681a      	ldr	r2, [r3, #0]
 800f116:	4b0a      	ldr	r3, [pc, #40]	; (800f140 <prvAddCurrentTaskToDelayedList+0x94>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	3304      	adds	r3, #4
 800f11c:	4619      	mov	r1, r3
 800f11e:	4610      	mov	r0, r2
 800f120:	f7fe f855 	bl	800d1ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f124:	4b0a      	ldr	r3, [pc, #40]	; (800f150 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	68ba      	ldr	r2, [r7, #8]
 800f12a:	429a      	cmp	r2, r3
 800f12c:	d202      	bcs.n	800f134 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f12e:	4a08      	ldr	r2, [pc, #32]	; (800f150 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	6013      	str	r3, [r2, #0]
}
 800f134:	bf00      	nop
 800f136:	3710      	adds	r7, #16
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}
 800f13c:	20002ff8 	.word	0x20002ff8
 800f140:	20002b20 	.word	0x20002b20
 800f144:	20002fe0 	.word	0x20002fe0
 800f148:	20002fb0 	.word	0x20002fb0
 800f14c:	20002fac 	.word	0x20002fac
 800f150:	20003014 	.word	0x20003014

0800f154 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b08a      	sub	sp, #40	; 0x28
 800f158:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f15a:	2300      	movs	r3, #0
 800f15c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f15e:	f000 fb07 	bl	800f770 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f162:	4b1c      	ldr	r3, [pc, #112]	; (800f1d4 <xTimerCreateTimerTask+0x80>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d021      	beq.n	800f1ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f16a:	2300      	movs	r3, #0
 800f16c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f16e:	2300      	movs	r3, #0
 800f170:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f172:	1d3a      	adds	r2, r7, #4
 800f174:	f107 0108 	add.w	r1, r7, #8
 800f178:	f107 030c 	add.w	r3, r7, #12
 800f17c:	4618      	mov	r0, r3
 800f17e:	f7fd ffbb 	bl	800d0f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f182:	6879      	ldr	r1, [r7, #4]
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	68fa      	ldr	r2, [r7, #12]
 800f188:	9202      	str	r2, [sp, #8]
 800f18a:	9301      	str	r3, [sp, #4]
 800f18c:	2302      	movs	r3, #2
 800f18e:	9300      	str	r3, [sp, #0]
 800f190:	2300      	movs	r3, #0
 800f192:	460a      	mov	r2, r1
 800f194:	4910      	ldr	r1, [pc, #64]	; (800f1d8 <xTimerCreateTimerTask+0x84>)
 800f196:	4811      	ldr	r0, [pc, #68]	; (800f1dc <xTimerCreateTimerTask+0x88>)
 800f198:	f7fe fec6 	bl	800df28 <xTaskCreateStatic>
 800f19c:	4603      	mov	r3, r0
 800f19e:	4a10      	ldr	r2, [pc, #64]	; (800f1e0 <xTimerCreateTimerTask+0x8c>)
 800f1a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f1a2:	4b0f      	ldr	r3, [pc, #60]	; (800f1e0 <xTimerCreateTimerTask+0x8c>)
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d001      	beq.n	800f1ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f1aa:	2301      	movs	r3, #1
 800f1ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f1ae:	697b      	ldr	r3, [r7, #20]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d10a      	bne.n	800f1ca <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b8:	f383 8811 	msr	BASEPRI, r3
 800f1bc:	f3bf 8f6f 	isb	sy
 800f1c0:	f3bf 8f4f 	dsb	sy
 800f1c4:	613b      	str	r3, [r7, #16]
}
 800f1c6:	bf00      	nop
 800f1c8:	e7fe      	b.n	800f1c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f1ca:	697b      	ldr	r3, [r7, #20]
}
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	3718      	adds	r7, #24
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}
 800f1d4:	20003050 	.word	0x20003050
 800f1d8:	08012358 	.word	0x08012358
 800f1dc:	0800f319 	.word	0x0800f319
 800f1e0:	20003054 	.word	0x20003054

0800f1e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b08a      	sub	sp, #40	; 0x28
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	60f8      	str	r0, [r7, #12]
 800f1ec:	60b9      	str	r1, [r7, #8]
 800f1ee:	607a      	str	r2, [r7, #4]
 800f1f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d10a      	bne.n	800f212 <xTimerGenericCommand+0x2e>
	__asm volatile
 800f1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f200:	f383 8811 	msr	BASEPRI, r3
 800f204:	f3bf 8f6f 	isb	sy
 800f208:	f3bf 8f4f 	dsb	sy
 800f20c:	623b      	str	r3, [r7, #32]
}
 800f20e:	bf00      	nop
 800f210:	e7fe      	b.n	800f210 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f212:	4b1a      	ldr	r3, [pc, #104]	; (800f27c <xTimerGenericCommand+0x98>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d02a      	beq.n	800f270 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	2b05      	cmp	r3, #5
 800f22a:	dc18      	bgt.n	800f25e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f22c:	f7ff fdb4 	bl	800ed98 <xTaskGetSchedulerState>
 800f230:	4603      	mov	r3, r0
 800f232:	2b02      	cmp	r3, #2
 800f234:	d109      	bne.n	800f24a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f236:	4b11      	ldr	r3, [pc, #68]	; (800f27c <xTimerGenericCommand+0x98>)
 800f238:	6818      	ldr	r0, [r3, #0]
 800f23a:	f107 0110 	add.w	r1, r7, #16
 800f23e:	2300      	movs	r3, #0
 800f240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f242:	f7fe f965 	bl	800d510 <xQueueGenericSend>
 800f246:	6278      	str	r0, [r7, #36]	; 0x24
 800f248:	e012      	b.n	800f270 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f24a:	4b0c      	ldr	r3, [pc, #48]	; (800f27c <xTimerGenericCommand+0x98>)
 800f24c:	6818      	ldr	r0, [r3, #0]
 800f24e:	f107 0110 	add.w	r1, r7, #16
 800f252:	2300      	movs	r3, #0
 800f254:	2200      	movs	r2, #0
 800f256:	f7fe f95b 	bl	800d510 <xQueueGenericSend>
 800f25a:	6278      	str	r0, [r7, #36]	; 0x24
 800f25c:	e008      	b.n	800f270 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f25e:	4b07      	ldr	r3, [pc, #28]	; (800f27c <xTimerGenericCommand+0x98>)
 800f260:	6818      	ldr	r0, [r3, #0]
 800f262:	f107 0110 	add.w	r1, r7, #16
 800f266:	2300      	movs	r3, #0
 800f268:	683a      	ldr	r2, [r7, #0]
 800f26a:	f7fe fa4f 	bl	800d70c <xQueueGenericSendFromISR>
 800f26e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f272:	4618      	mov	r0, r3
 800f274:	3728      	adds	r7, #40	; 0x28
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}
 800f27a:	bf00      	nop
 800f27c:	20003050 	.word	0x20003050

0800f280 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b088      	sub	sp, #32
 800f284:	af02      	add	r7, sp, #8
 800f286:	6078      	str	r0, [r7, #4]
 800f288:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f28a:	4b22      	ldr	r3, [pc, #136]	; (800f314 <prvProcessExpiredTimer+0x94>)
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	68db      	ldr	r3, [r3, #12]
 800f290:	68db      	ldr	r3, [r3, #12]
 800f292:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f294:	697b      	ldr	r3, [r7, #20]
 800f296:	3304      	adds	r3, #4
 800f298:	4618      	mov	r0, r3
 800f29a:	f7fd ffd1 	bl	800d240 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2a4:	f003 0304 	and.w	r3, r3, #4
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d022      	beq.n	800f2f2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	699a      	ldr	r2, [r3, #24]
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	18d1      	adds	r1, r2, r3
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	683a      	ldr	r2, [r7, #0]
 800f2b8:	6978      	ldr	r0, [r7, #20]
 800f2ba:	f000 f8d1 	bl	800f460 <prvInsertTimerInActiveList>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d01f      	beq.n	800f304 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	9300      	str	r3, [sp, #0]
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	687a      	ldr	r2, [r7, #4]
 800f2cc:	2100      	movs	r1, #0
 800f2ce:	6978      	ldr	r0, [r7, #20]
 800f2d0:	f7ff ff88 	bl	800f1e4 <xTimerGenericCommand>
 800f2d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f2d6:	693b      	ldr	r3, [r7, #16]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d113      	bne.n	800f304 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2e0:	f383 8811 	msr	BASEPRI, r3
 800f2e4:	f3bf 8f6f 	isb	sy
 800f2e8:	f3bf 8f4f 	dsb	sy
 800f2ec:	60fb      	str	r3, [r7, #12]
}
 800f2ee:	bf00      	nop
 800f2f0:	e7fe      	b.n	800f2f0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f2f8:	f023 0301 	bic.w	r3, r3, #1
 800f2fc:	b2da      	uxtb	r2, r3
 800f2fe:	697b      	ldr	r3, [r7, #20]
 800f300:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	6a1b      	ldr	r3, [r3, #32]
 800f308:	6978      	ldr	r0, [r7, #20]
 800f30a:	4798      	blx	r3
}
 800f30c:	bf00      	nop
 800f30e:	3718      	adds	r7, #24
 800f310:	46bd      	mov	sp, r7
 800f312:	bd80      	pop	{r7, pc}
 800f314:	20003048 	.word	0x20003048

0800f318 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b084      	sub	sp, #16
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f320:	f107 0308 	add.w	r3, r7, #8
 800f324:	4618      	mov	r0, r3
 800f326:	f000 f857 	bl	800f3d8 <prvGetNextExpireTime>
 800f32a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	4619      	mov	r1, r3
 800f330:	68f8      	ldr	r0, [r7, #12]
 800f332:	f000 f803 	bl	800f33c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f336:	f000 f8d5 	bl	800f4e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f33a:	e7f1      	b.n	800f320 <prvTimerTask+0x8>

0800f33c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b084      	sub	sp, #16
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
 800f344:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f346:	f7ff f93b 	bl	800e5c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f34a:	f107 0308 	add.w	r3, r7, #8
 800f34e:	4618      	mov	r0, r3
 800f350:	f000 f866 	bl	800f420 <prvSampleTimeNow>
 800f354:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d130      	bne.n	800f3be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d10a      	bne.n	800f378 <prvProcessTimerOrBlockTask+0x3c>
 800f362:	687a      	ldr	r2, [r7, #4]
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	429a      	cmp	r2, r3
 800f368:	d806      	bhi.n	800f378 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f36a:	f7ff f937 	bl	800e5dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f36e:	68f9      	ldr	r1, [r7, #12]
 800f370:	6878      	ldr	r0, [r7, #4]
 800f372:	f7ff ff85 	bl	800f280 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f376:	e024      	b.n	800f3c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d008      	beq.n	800f390 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f37e:	4b13      	ldr	r3, [pc, #76]	; (800f3cc <prvProcessTimerOrBlockTask+0x90>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d101      	bne.n	800f38c <prvProcessTimerOrBlockTask+0x50>
 800f388:	2301      	movs	r3, #1
 800f38a:	e000      	b.n	800f38e <prvProcessTimerOrBlockTask+0x52>
 800f38c:	2300      	movs	r3, #0
 800f38e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f390:	4b0f      	ldr	r3, [pc, #60]	; (800f3d0 <prvProcessTimerOrBlockTask+0x94>)
 800f392:	6818      	ldr	r0, [r3, #0]
 800f394:	687a      	ldr	r2, [r7, #4]
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	1ad3      	subs	r3, r2, r3
 800f39a:	683a      	ldr	r2, [r7, #0]
 800f39c:	4619      	mov	r1, r3
 800f39e:	f7fe fd8f 	bl	800dec0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f3a2:	f7ff f91b 	bl	800e5dc <xTaskResumeAll>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d10a      	bne.n	800f3c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f3ac:	4b09      	ldr	r3, [pc, #36]	; (800f3d4 <prvProcessTimerOrBlockTask+0x98>)
 800f3ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3b2:	601a      	str	r2, [r3, #0]
 800f3b4:	f3bf 8f4f 	dsb	sy
 800f3b8:	f3bf 8f6f 	isb	sy
}
 800f3bc:	e001      	b.n	800f3c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f3be:	f7ff f90d 	bl	800e5dc <xTaskResumeAll>
}
 800f3c2:	bf00      	nop
 800f3c4:	3710      	adds	r7, #16
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd80      	pop	{r7, pc}
 800f3ca:	bf00      	nop
 800f3cc:	2000304c 	.word	0x2000304c
 800f3d0:	20003050 	.word	0x20003050
 800f3d4:	e000ed04 	.word	0xe000ed04

0800f3d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f3d8:	b480      	push	{r7}
 800f3da:	b085      	sub	sp, #20
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f3e0:	4b0e      	ldr	r3, [pc, #56]	; (800f41c <prvGetNextExpireTime+0x44>)
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d101      	bne.n	800f3ee <prvGetNextExpireTime+0x16>
 800f3ea:	2201      	movs	r2, #1
 800f3ec:	e000      	b.n	800f3f0 <prvGetNextExpireTime+0x18>
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d105      	bne.n	800f408 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f3fc:	4b07      	ldr	r3, [pc, #28]	; (800f41c <prvGetNextExpireTime+0x44>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	68db      	ldr	r3, [r3, #12]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	60fb      	str	r3, [r7, #12]
 800f406:	e001      	b.n	800f40c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f408:	2300      	movs	r3, #0
 800f40a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f40c:	68fb      	ldr	r3, [r7, #12]
}
 800f40e:	4618      	mov	r0, r3
 800f410:	3714      	adds	r7, #20
 800f412:	46bd      	mov	sp, r7
 800f414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f418:	4770      	bx	lr
 800f41a:	bf00      	nop
 800f41c:	20003048 	.word	0x20003048

0800f420 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b084      	sub	sp, #16
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f428:	f7ff f976 	bl	800e718 <xTaskGetTickCount>
 800f42c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f42e:	4b0b      	ldr	r3, [pc, #44]	; (800f45c <prvSampleTimeNow+0x3c>)
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	68fa      	ldr	r2, [r7, #12]
 800f434:	429a      	cmp	r2, r3
 800f436:	d205      	bcs.n	800f444 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f438:	f000 f936 	bl	800f6a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2201      	movs	r2, #1
 800f440:	601a      	str	r2, [r3, #0]
 800f442:	e002      	b.n	800f44a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2200      	movs	r2, #0
 800f448:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f44a:	4a04      	ldr	r2, [pc, #16]	; (800f45c <prvSampleTimeNow+0x3c>)
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f450:	68fb      	ldr	r3, [r7, #12]
}
 800f452:	4618      	mov	r0, r3
 800f454:	3710      	adds	r7, #16
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}
 800f45a:	bf00      	nop
 800f45c:	20003058 	.word	0x20003058

0800f460 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b086      	sub	sp, #24
 800f464:	af00      	add	r7, sp, #0
 800f466:	60f8      	str	r0, [r7, #12]
 800f468:	60b9      	str	r1, [r7, #8]
 800f46a:	607a      	str	r2, [r7, #4]
 800f46c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f46e:	2300      	movs	r3, #0
 800f470:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	68ba      	ldr	r2, [r7, #8]
 800f476:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	68fa      	ldr	r2, [r7, #12]
 800f47c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f47e:	68ba      	ldr	r2, [r7, #8]
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	429a      	cmp	r2, r3
 800f484:	d812      	bhi.n	800f4ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f486:	687a      	ldr	r2, [r7, #4]
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	1ad2      	subs	r2, r2, r3
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	699b      	ldr	r3, [r3, #24]
 800f490:	429a      	cmp	r2, r3
 800f492:	d302      	bcc.n	800f49a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f494:	2301      	movs	r3, #1
 800f496:	617b      	str	r3, [r7, #20]
 800f498:	e01b      	b.n	800f4d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f49a:	4b10      	ldr	r3, [pc, #64]	; (800f4dc <prvInsertTimerInActiveList+0x7c>)
 800f49c:	681a      	ldr	r2, [r3, #0]
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	3304      	adds	r3, #4
 800f4a2:	4619      	mov	r1, r3
 800f4a4:	4610      	mov	r0, r2
 800f4a6:	f7fd fe92 	bl	800d1ce <vListInsert>
 800f4aa:	e012      	b.n	800f4d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f4ac:	687a      	ldr	r2, [r7, #4]
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	429a      	cmp	r2, r3
 800f4b2:	d206      	bcs.n	800f4c2 <prvInsertTimerInActiveList+0x62>
 800f4b4:	68ba      	ldr	r2, [r7, #8]
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	d302      	bcc.n	800f4c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f4bc:	2301      	movs	r3, #1
 800f4be:	617b      	str	r3, [r7, #20]
 800f4c0:	e007      	b.n	800f4d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f4c2:	4b07      	ldr	r3, [pc, #28]	; (800f4e0 <prvInsertTimerInActiveList+0x80>)
 800f4c4:	681a      	ldr	r2, [r3, #0]
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	3304      	adds	r3, #4
 800f4ca:	4619      	mov	r1, r3
 800f4cc:	4610      	mov	r0, r2
 800f4ce:	f7fd fe7e 	bl	800d1ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f4d2:	697b      	ldr	r3, [r7, #20]
}
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	3718      	adds	r7, #24
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd80      	pop	{r7, pc}
 800f4dc:	2000304c 	.word	0x2000304c
 800f4e0:	20003048 	.word	0x20003048

0800f4e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b08e      	sub	sp, #56	; 0x38
 800f4e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f4ea:	e0ca      	b.n	800f682 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	da18      	bge.n	800f524 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f4f2:	1d3b      	adds	r3, r7, #4
 800f4f4:	3304      	adds	r3, #4
 800f4f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d10a      	bne.n	800f514 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f502:	f383 8811 	msr	BASEPRI, r3
 800f506:	f3bf 8f6f 	isb	sy
 800f50a:	f3bf 8f4f 	dsb	sy
 800f50e:	61fb      	str	r3, [r7, #28]
}
 800f510:	bf00      	nop
 800f512:	e7fe      	b.n	800f512 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f51a:	6850      	ldr	r0, [r2, #4]
 800f51c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f51e:	6892      	ldr	r2, [r2, #8]
 800f520:	4611      	mov	r1, r2
 800f522:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	2b00      	cmp	r3, #0
 800f528:	f2c0 80aa 	blt.w	800f680 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f532:	695b      	ldr	r3, [r3, #20]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d004      	beq.n	800f542 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f53a:	3304      	adds	r3, #4
 800f53c:	4618      	mov	r0, r3
 800f53e:	f7fd fe7f 	bl	800d240 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f542:	463b      	mov	r3, r7
 800f544:	4618      	mov	r0, r3
 800f546:	f7ff ff6b 	bl	800f420 <prvSampleTimeNow>
 800f54a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2b09      	cmp	r3, #9
 800f550:	f200 8097 	bhi.w	800f682 <prvProcessReceivedCommands+0x19e>
 800f554:	a201      	add	r2, pc, #4	; (adr r2, 800f55c <prvProcessReceivedCommands+0x78>)
 800f556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f55a:	bf00      	nop
 800f55c:	0800f585 	.word	0x0800f585
 800f560:	0800f585 	.word	0x0800f585
 800f564:	0800f585 	.word	0x0800f585
 800f568:	0800f5f9 	.word	0x0800f5f9
 800f56c:	0800f60d 	.word	0x0800f60d
 800f570:	0800f657 	.word	0x0800f657
 800f574:	0800f585 	.word	0x0800f585
 800f578:	0800f585 	.word	0x0800f585
 800f57c:	0800f5f9 	.word	0x0800f5f9
 800f580:	0800f60d 	.word	0x0800f60d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f586:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f58a:	f043 0301 	orr.w	r3, r3, #1
 800f58e:	b2da      	uxtb	r2, r3
 800f590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f592:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f596:	68ba      	ldr	r2, [r7, #8]
 800f598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f59a:	699b      	ldr	r3, [r3, #24]
 800f59c:	18d1      	adds	r1, r2, r3
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5a4:	f7ff ff5c 	bl	800f460 <prvInsertTimerInActiveList>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d069      	beq.n	800f682 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5b0:	6a1b      	ldr	r3, [r3, #32]
 800f5b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f5bc:	f003 0304 	and.w	r3, r3, #4
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d05e      	beq.n	800f682 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f5c4:	68ba      	ldr	r2, [r7, #8]
 800f5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5c8:	699b      	ldr	r3, [r3, #24]
 800f5ca:	441a      	add	r2, r3
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	9300      	str	r3, [sp, #0]
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	2100      	movs	r1, #0
 800f5d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5d6:	f7ff fe05 	bl	800f1e4 <xTimerGenericCommand>
 800f5da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f5dc:	6a3b      	ldr	r3, [r7, #32]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d14f      	bne.n	800f682 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5e6:	f383 8811 	msr	BASEPRI, r3
 800f5ea:	f3bf 8f6f 	isb	sy
 800f5ee:	f3bf 8f4f 	dsb	sy
 800f5f2:	61bb      	str	r3, [r7, #24]
}
 800f5f4:	bf00      	nop
 800f5f6:	e7fe      	b.n	800f5f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f5fe:	f023 0301 	bic.w	r3, r3, #1
 800f602:	b2da      	uxtb	r2, r3
 800f604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f606:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f60a:	e03a      	b.n	800f682 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f60e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f612:	f043 0301 	orr.w	r3, r3, #1
 800f616:	b2da      	uxtb	r2, r3
 800f618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f61a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f61e:	68ba      	ldr	r2, [r7, #8]
 800f620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f622:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f626:	699b      	ldr	r3, [r3, #24]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d10a      	bne.n	800f642 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f630:	f383 8811 	msr	BASEPRI, r3
 800f634:	f3bf 8f6f 	isb	sy
 800f638:	f3bf 8f4f 	dsb	sy
 800f63c:	617b      	str	r3, [r7, #20]
}
 800f63e:	bf00      	nop
 800f640:	e7fe      	b.n	800f640 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f644:	699a      	ldr	r2, [r3, #24]
 800f646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f648:	18d1      	adds	r1, r2, r3
 800f64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f64c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f64e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f650:	f7ff ff06 	bl	800f460 <prvInsertTimerInActiveList>
					break;
 800f654:	e015      	b.n	800f682 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f658:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f65c:	f003 0302 	and.w	r3, r3, #2
 800f660:	2b00      	cmp	r3, #0
 800f662:	d103      	bne.n	800f66c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f666:	f000 fbdb 	bl	800fe20 <vPortFree>
 800f66a:	e00a      	b.n	800f682 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f66e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f672:	f023 0301 	bic.w	r3, r3, #1
 800f676:	b2da      	uxtb	r2, r3
 800f678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f67a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f67e:	e000      	b.n	800f682 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f680:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f682:	4b08      	ldr	r3, [pc, #32]	; (800f6a4 <prvProcessReceivedCommands+0x1c0>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	1d39      	adds	r1, r7, #4
 800f688:	2200      	movs	r2, #0
 800f68a:	4618      	mov	r0, r3
 800f68c:	f7fe f8da 	bl	800d844 <xQueueReceive>
 800f690:	4603      	mov	r3, r0
 800f692:	2b00      	cmp	r3, #0
 800f694:	f47f af2a 	bne.w	800f4ec <prvProcessReceivedCommands+0x8>
	}
}
 800f698:	bf00      	nop
 800f69a:	bf00      	nop
 800f69c:	3730      	adds	r7, #48	; 0x30
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}
 800f6a2:	bf00      	nop
 800f6a4:	20003050 	.word	0x20003050

0800f6a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b088      	sub	sp, #32
 800f6ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f6ae:	e048      	b.n	800f742 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f6b0:	4b2d      	ldr	r3, [pc, #180]	; (800f768 <prvSwitchTimerLists+0xc0>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	68db      	ldr	r3, [r3, #12]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6ba:	4b2b      	ldr	r3, [pc, #172]	; (800f768 <prvSwitchTimerLists+0xc0>)
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	68db      	ldr	r3, [r3, #12]
 800f6c0:	68db      	ldr	r3, [r3, #12]
 800f6c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	3304      	adds	r3, #4
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f7fd fdb9 	bl	800d240 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	6a1b      	ldr	r3, [r3, #32]
 800f6d2:	68f8      	ldr	r0, [r7, #12]
 800f6d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f6dc:	f003 0304 	and.w	r3, r3, #4
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d02e      	beq.n	800f742 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	699b      	ldr	r3, [r3, #24]
 800f6e8:	693a      	ldr	r2, [r7, #16]
 800f6ea:	4413      	add	r3, r2
 800f6ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f6ee:	68ba      	ldr	r2, [r7, #8]
 800f6f0:	693b      	ldr	r3, [r7, #16]
 800f6f2:	429a      	cmp	r2, r3
 800f6f4:	d90e      	bls.n	800f714 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	68ba      	ldr	r2, [r7, #8]
 800f6fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	68fa      	ldr	r2, [r7, #12]
 800f700:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f702:	4b19      	ldr	r3, [pc, #100]	; (800f768 <prvSwitchTimerLists+0xc0>)
 800f704:	681a      	ldr	r2, [r3, #0]
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	3304      	adds	r3, #4
 800f70a:	4619      	mov	r1, r3
 800f70c:	4610      	mov	r0, r2
 800f70e:	f7fd fd5e 	bl	800d1ce <vListInsert>
 800f712:	e016      	b.n	800f742 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f714:	2300      	movs	r3, #0
 800f716:	9300      	str	r3, [sp, #0]
 800f718:	2300      	movs	r3, #0
 800f71a:	693a      	ldr	r2, [r7, #16]
 800f71c:	2100      	movs	r1, #0
 800f71e:	68f8      	ldr	r0, [r7, #12]
 800f720:	f7ff fd60 	bl	800f1e4 <xTimerGenericCommand>
 800f724:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d10a      	bne.n	800f742 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f730:	f383 8811 	msr	BASEPRI, r3
 800f734:	f3bf 8f6f 	isb	sy
 800f738:	f3bf 8f4f 	dsb	sy
 800f73c:	603b      	str	r3, [r7, #0]
}
 800f73e:	bf00      	nop
 800f740:	e7fe      	b.n	800f740 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f742:	4b09      	ldr	r3, [pc, #36]	; (800f768 <prvSwitchTimerLists+0xc0>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d1b1      	bne.n	800f6b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f74c:	4b06      	ldr	r3, [pc, #24]	; (800f768 <prvSwitchTimerLists+0xc0>)
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f752:	4b06      	ldr	r3, [pc, #24]	; (800f76c <prvSwitchTimerLists+0xc4>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	4a04      	ldr	r2, [pc, #16]	; (800f768 <prvSwitchTimerLists+0xc0>)
 800f758:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f75a:	4a04      	ldr	r2, [pc, #16]	; (800f76c <prvSwitchTimerLists+0xc4>)
 800f75c:	697b      	ldr	r3, [r7, #20]
 800f75e:	6013      	str	r3, [r2, #0]
}
 800f760:	bf00      	nop
 800f762:	3718      	adds	r7, #24
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}
 800f768:	20003048 	.word	0x20003048
 800f76c:	2000304c 	.word	0x2000304c

0800f770 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b082      	sub	sp, #8
 800f774:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f776:	f000 f965 	bl	800fa44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f77a:	4b15      	ldr	r3, [pc, #84]	; (800f7d0 <prvCheckForValidListAndQueue+0x60>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d120      	bne.n	800f7c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f782:	4814      	ldr	r0, [pc, #80]	; (800f7d4 <prvCheckForValidListAndQueue+0x64>)
 800f784:	f7fd fcd2 	bl	800d12c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f788:	4813      	ldr	r0, [pc, #76]	; (800f7d8 <prvCheckForValidListAndQueue+0x68>)
 800f78a:	f7fd fccf 	bl	800d12c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f78e:	4b13      	ldr	r3, [pc, #76]	; (800f7dc <prvCheckForValidListAndQueue+0x6c>)
 800f790:	4a10      	ldr	r2, [pc, #64]	; (800f7d4 <prvCheckForValidListAndQueue+0x64>)
 800f792:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f794:	4b12      	ldr	r3, [pc, #72]	; (800f7e0 <prvCheckForValidListAndQueue+0x70>)
 800f796:	4a10      	ldr	r2, [pc, #64]	; (800f7d8 <prvCheckForValidListAndQueue+0x68>)
 800f798:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f79a:	2300      	movs	r3, #0
 800f79c:	9300      	str	r3, [sp, #0]
 800f79e:	4b11      	ldr	r3, [pc, #68]	; (800f7e4 <prvCheckForValidListAndQueue+0x74>)
 800f7a0:	4a11      	ldr	r2, [pc, #68]	; (800f7e8 <prvCheckForValidListAndQueue+0x78>)
 800f7a2:	2110      	movs	r1, #16
 800f7a4:	200a      	movs	r0, #10
 800f7a6:	f7fd fddd 	bl	800d364 <xQueueGenericCreateStatic>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	4a08      	ldr	r2, [pc, #32]	; (800f7d0 <prvCheckForValidListAndQueue+0x60>)
 800f7ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f7b0:	4b07      	ldr	r3, [pc, #28]	; (800f7d0 <prvCheckForValidListAndQueue+0x60>)
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d005      	beq.n	800f7c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f7b8:	4b05      	ldr	r3, [pc, #20]	; (800f7d0 <prvCheckForValidListAndQueue+0x60>)
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	490b      	ldr	r1, [pc, #44]	; (800f7ec <prvCheckForValidListAndQueue+0x7c>)
 800f7be:	4618      	mov	r0, r3
 800f7c0:	f7fe fb54 	bl	800de6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f7c4:	f000 f96e 	bl	800faa4 <vPortExitCritical>
}
 800f7c8:	bf00      	nop
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}
 800f7ce:	bf00      	nop
 800f7d0:	20003050 	.word	0x20003050
 800f7d4:	20003020 	.word	0x20003020
 800f7d8:	20003034 	.word	0x20003034
 800f7dc:	20003048 	.word	0x20003048
 800f7e0:	2000304c 	.word	0x2000304c
 800f7e4:	200030fc 	.word	0x200030fc
 800f7e8:	2000305c 	.word	0x2000305c
 800f7ec:	08012360 	.word	0x08012360

0800f7f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f7f0:	b480      	push	{r7}
 800f7f2:	b085      	sub	sp, #20
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	60f8      	str	r0, [r7, #12]
 800f7f8:	60b9      	str	r1, [r7, #8]
 800f7fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	3b04      	subs	r3, #4
 800f800:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f808:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	3b04      	subs	r3, #4
 800f80e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	f023 0201 	bic.w	r2, r3, #1
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	3b04      	subs	r3, #4
 800f81e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f820:	4a0c      	ldr	r2, [pc, #48]	; (800f854 <pxPortInitialiseStack+0x64>)
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	3b14      	subs	r3, #20
 800f82a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f82c:	687a      	ldr	r2, [r7, #4]
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	3b04      	subs	r3, #4
 800f836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	f06f 0202 	mvn.w	r2, #2
 800f83e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	3b20      	subs	r3, #32
 800f844:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f846:	68fb      	ldr	r3, [r7, #12]
}
 800f848:	4618      	mov	r0, r3
 800f84a:	3714      	adds	r7, #20
 800f84c:	46bd      	mov	sp, r7
 800f84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f852:	4770      	bx	lr
 800f854:	0800f859 	.word	0x0800f859

0800f858 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f858:	b480      	push	{r7}
 800f85a:	b085      	sub	sp, #20
 800f85c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f85e:	2300      	movs	r3, #0
 800f860:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f862:	4b12      	ldr	r3, [pc, #72]	; (800f8ac <prvTaskExitError+0x54>)
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f86a:	d00a      	beq.n	800f882 <prvTaskExitError+0x2a>
	__asm volatile
 800f86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f870:	f383 8811 	msr	BASEPRI, r3
 800f874:	f3bf 8f6f 	isb	sy
 800f878:	f3bf 8f4f 	dsb	sy
 800f87c:	60fb      	str	r3, [r7, #12]
}
 800f87e:	bf00      	nop
 800f880:	e7fe      	b.n	800f880 <prvTaskExitError+0x28>
	__asm volatile
 800f882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f886:	f383 8811 	msr	BASEPRI, r3
 800f88a:	f3bf 8f6f 	isb	sy
 800f88e:	f3bf 8f4f 	dsb	sy
 800f892:	60bb      	str	r3, [r7, #8]
}
 800f894:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f896:	bf00      	nop
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d0fc      	beq.n	800f898 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f89e:	bf00      	nop
 800f8a0:	bf00      	nop
 800f8a2:	3714      	adds	r7, #20
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8aa:	4770      	bx	lr
 800f8ac:	200000b0 	.word	0x200000b0

0800f8b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f8b0:	4b07      	ldr	r3, [pc, #28]	; (800f8d0 <pxCurrentTCBConst2>)
 800f8b2:	6819      	ldr	r1, [r3, #0]
 800f8b4:	6808      	ldr	r0, [r1, #0]
 800f8b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8ba:	f380 8809 	msr	PSP, r0
 800f8be:	f3bf 8f6f 	isb	sy
 800f8c2:	f04f 0000 	mov.w	r0, #0
 800f8c6:	f380 8811 	msr	BASEPRI, r0
 800f8ca:	4770      	bx	lr
 800f8cc:	f3af 8000 	nop.w

0800f8d0 <pxCurrentTCBConst2>:
 800f8d0:	20002b20 	.word	0x20002b20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f8d4:	bf00      	nop
 800f8d6:	bf00      	nop

0800f8d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f8d8:	4808      	ldr	r0, [pc, #32]	; (800f8fc <prvPortStartFirstTask+0x24>)
 800f8da:	6800      	ldr	r0, [r0, #0]
 800f8dc:	6800      	ldr	r0, [r0, #0]
 800f8de:	f380 8808 	msr	MSP, r0
 800f8e2:	f04f 0000 	mov.w	r0, #0
 800f8e6:	f380 8814 	msr	CONTROL, r0
 800f8ea:	b662      	cpsie	i
 800f8ec:	b661      	cpsie	f
 800f8ee:	f3bf 8f4f 	dsb	sy
 800f8f2:	f3bf 8f6f 	isb	sy
 800f8f6:	df00      	svc	0
 800f8f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f8fa:	bf00      	nop
 800f8fc:	e000ed08 	.word	0xe000ed08

0800f900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b086      	sub	sp, #24
 800f904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f906:	4b46      	ldr	r3, [pc, #280]	; (800fa20 <xPortStartScheduler+0x120>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	4a46      	ldr	r2, [pc, #280]	; (800fa24 <xPortStartScheduler+0x124>)
 800f90c:	4293      	cmp	r3, r2
 800f90e:	d10a      	bne.n	800f926 <xPortStartScheduler+0x26>
	__asm volatile
 800f910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f914:	f383 8811 	msr	BASEPRI, r3
 800f918:	f3bf 8f6f 	isb	sy
 800f91c:	f3bf 8f4f 	dsb	sy
 800f920:	613b      	str	r3, [r7, #16]
}
 800f922:	bf00      	nop
 800f924:	e7fe      	b.n	800f924 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f926:	4b3e      	ldr	r3, [pc, #248]	; (800fa20 <xPortStartScheduler+0x120>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	4a3f      	ldr	r2, [pc, #252]	; (800fa28 <xPortStartScheduler+0x128>)
 800f92c:	4293      	cmp	r3, r2
 800f92e:	d10a      	bne.n	800f946 <xPortStartScheduler+0x46>
	__asm volatile
 800f930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f934:	f383 8811 	msr	BASEPRI, r3
 800f938:	f3bf 8f6f 	isb	sy
 800f93c:	f3bf 8f4f 	dsb	sy
 800f940:	60fb      	str	r3, [r7, #12]
}
 800f942:	bf00      	nop
 800f944:	e7fe      	b.n	800f944 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f946:	4b39      	ldr	r3, [pc, #228]	; (800fa2c <xPortStartScheduler+0x12c>)
 800f948:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	781b      	ldrb	r3, [r3, #0]
 800f94e:	b2db      	uxtb	r3, r3
 800f950:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f952:	697b      	ldr	r3, [r7, #20]
 800f954:	22ff      	movs	r2, #255	; 0xff
 800f956:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f958:	697b      	ldr	r3, [r7, #20]
 800f95a:	781b      	ldrb	r3, [r3, #0]
 800f95c:	b2db      	uxtb	r3, r3
 800f95e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f960:	78fb      	ldrb	r3, [r7, #3]
 800f962:	b2db      	uxtb	r3, r3
 800f964:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f968:	b2da      	uxtb	r2, r3
 800f96a:	4b31      	ldr	r3, [pc, #196]	; (800fa30 <xPortStartScheduler+0x130>)
 800f96c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f96e:	4b31      	ldr	r3, [pc, #196]	; (800fa34 <xPortStartScheduler+0x134>)
 800f970:	2207      	movs	r2, #7
 800f972:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f974:	e009      	b.n	800f98a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f976:	4b2f      	ldr	r3, [pc, #188]	; (800fa34 <xPortStartScheduler+0x134>)
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	3b01      	subs	r3, #1
 800f97c:	4a2d      	ldr	r2, [pc, #180]	; (800fa34 <xPortStartScheduler+0x134>)
 800f97e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f980:	78fb      	ldrb	r3, [r7, #3]
 800f982:	b2db      	uxtb	r3, r3
 800f984:	005b      	lsls	r3, r3, #1
 800f986:	b2db      	uxtb	r3, r3
 800f988:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f98a:	78fb      	ldrb	r3, [r7, #3]
 800f98c:	b2db      	uxtb	r3, r3
 800f98e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f992:	2b80      	cmp	r3, #128	; 0x80
 800f994:	d0ef      	beq.n	800f976 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f996:	4b27      	ldr	r3, [pc, #156]	; (800fa34 <xPortStartScheduler+0x134>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	f1c3 0307 	rsb	r3, r3, #7
 800f99e:	2b04      	cmp	r3, #4
 800f9a0:	d00a      	beq.n	800f9b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800f9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9a6:	f383 8811 	msr	BASEPRI, r3
 800f9aa:	f3bf 8f6f 	isb	sy
 800f9ae:	f3bf 8f4f 	dsb	sy
 800f9b2:	60bb      	str	r3, [r7, #8]
}
 800f9b4:	bf00      	nop
 800f9b6:	e7fe      	b.n	800f9b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f9b8:	4b1e      	ldr	r3, [pc, #120]	; (800fa34 <xPortStartScheduler+0x134>)
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	021b      	lsls	r3, r3, #8
 800f9be:	4a1d      	ldr	r2, [pc, #116]	; (800fa34 <xPortStartScheduler+0x134>)
 800f9c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f9c2:	4b1c      	ldr	r3, [pc, #112]	; (800fa34 <xPortStartScheduler+0x134>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f9ca:	4a1a      	ldr	r2, [pc, #104]	; (800fa34 <xPortStartScheduler+0x134>)
 800f9cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	b2da      	uxtb	r2, r3
 800f9d2:	697b      	ldr	r3, [r7, #20]
 800f9d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f9d6:	4b18      	ldr	r3, [pc, #96]	; (800fa38 <xPortStartScheduler+0x138>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	4a17      	ldr	r2, [pc, #92]	; (800fa38 <xPortStartScheduler+0x138>)
 800f9dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f9e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f9e2:	4b15      	ldr	r3, [pc, #84]	; (800fa38 <xPortStartScheduler+0x138>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	4a14      	ldr	r2, [pc, #80]	; (800fa38 <xPortStartScheduler+0x138>)
 800f9e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f9ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f9ee:	f000 f8dd 	bl	800fbac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f9f2:	4b12      	ldr	r3, [pc, #72]	; (800fa3c <xPortStartScheduler+0x13c>)
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f9f8:	f000 f8fc 	bl	800fbf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f9fc:	4b10      	ldr	r3, [pc, #64]	; (800fa40 <xPortStartScheduler+0x140>)
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	4a0f      	ldr	r2, [pc, #60]	; (800fa40 <xPortStartScheduler+0x140>)
 800fa02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fa06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fa08:	f7ff ff66 	bl	800f8d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fa0c:	f7fe ff4e 	bl	800e8ac <vTaskSwitchContext>
	prvTaskExitError();
 800fa10:	f7ff ff22 	bl	800f858 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fa14:	2300      	movs	r3, #0
}
 800fa16:	4618      	mov	r0, r3
 800fa18:	3718      	adds	r7, #24
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}
 800fa1e:	bf00      	nop
 800fa20:	e000ed00 	.word	0xe000ed00
 800fa24:	410fc271 	.word	0x410fc271
 800fa28:	410fc270 	.word	0x410fc270
 800fa2c:	e000e400 	.word	0xe000e400
 800fa30:	2000314c 	.word	0x2000314c
 800fa34:	20003150 	.word	0x20003150
 800fa38:	e000ed20 	.word	0xe000ed20
 800fa3c:	200000b0 	.word	0x200000b0
 800fa40:	e000ef34 	.word	0xe000ef34

0800fa44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fa44:	b480      	push	{r7}
 800fa46:	b083      	sub	sp, #12
 800fa48:	af00      	add	r7, sp, #0
	__asm volatile
 800fa4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa4e:	f383 8811 	msr	BASEPRI, r3
 800fa52:	f3bf 8f6f 	isb	sy
 800fa56:	f3bf 8f4f 	dsb	sy
 800fa5a:	607b      	str	r3, [r7, #4]
}
 800fa5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fa5e:	4b0f      	ldr	r3, [pc, #60]	; (800fa9c <vPortEnterCritical+0x58>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	3301      	adds	r3, #1
 800fa64:	4a0d      	ldr	r2, [pc, #52]	; (800fa9c <vPortEnterCritical+0x58>)
 800fa66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fa68:	4b0c      	ldr	r3, [pc, #48]	; (800fa9c <vPortEnterCritical+0x58>)
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	2b01      	cmp	r3, #1
 800fa6e:	d10f      	bne.n	800fa90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fa70:	4b0b      	ldr	r3, [pc, #44]	; (800faa0 <vPortEnterCritical+0x5c>)
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	b2db      	uxtb	r3, r3
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d00a      	beq.n	800fa90 <vPortEnterCritical+0x4c>
	__asm volatile
 800fa7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa7e:	f383 8811 	msr	BASEPRI, r3
 800fa82:	f3bf 8f6f 	isb	sy
 800fa86:	f3bf 8f4f 	dsb	sy
 800fa8a:	603b      	str	r3, [r7, #0]
}
 800fa8c:	bf00      	nop
 800fa8e:	e7fe      	b.n	800fa8e <vPortEnterCritical+0x4a>
	}
}
 800fa90:	bf00      	nop
 800fa92:	370c      	adds	r7, #12
 800fa94:	46bd      	mov	sp, r7
 800fa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9a:	4770      	bx	lr
 800fa9c:	200000b0 	.word	0x200000b0
 800faa0:	e000ed04 	.word	0xe000ed04

0800faa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800faa4:	b480      	push	{r7}
 800faa6:	b083      	sub	sp, #12
 800faa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800faaa:	4b12      	ldr	r3, [pc, #72]	; (800faf4 <vPortExitCritical+0x50>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d10a      	bne.n	800fac8 <vPortExitCritical+0x24>
	__asm volatile
 800fab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fab6:	f383 8811 	msr	BASEPRI, r3
 800faba:	f3bf 8f6f 	isb	sy
 800fabe:	f3bf 8f4f 	dsb	sy
 800fac2:	607b      	str	r3, [r7, #4]
}
 800fac4:	bf00      	nop
 800fac6:	e7fe      	b.n	800fac6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fac8:	4b0a      	ldr	r3, [pc, #40]	; (800faf4 <vPortExitCritical+0x50>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	3b01      	subs	r3, #1
 800face:	4a09      	ldr	r2, [pc, #36]	; (800faf4 <vPortExitCritical+0x50>)
 800fad0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fad2:	4b08      	ldr	r3, [pc, #32]	; (800faf4 <vPortExitCritical+0x50>)
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d105      	bne.n	800fae6 <vPortExitCritical+0x42>
 800fada:	2300      	movs	r3, #0
 800fadc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fade:	683b      	ldr	r3, [r7, #0]
 800fae0:	f383 8811 	msr	BASEPRI, r3
}
 800fae4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fae6:	bf00      	nop
 800fae8:	370c      	adds	r7, #12
 800faea:	46bd      	mov	sp, r7
 800faec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf0:	4770      	bx	lr
 800faf2:	bf00      	nop
 800faf4:	200000b0 	.word	0x200000b0
	...

0800fb00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fb00:	f3ef 8009 	mrs	r0, PSP
 800fb04:	f3bf 8f6f 	isb	sy
 800fb08:	4b15      	ldr	r3, [pc, #84]	; (800fb60 <pxCurrentTCBConst>)
 800fb0a:	681a      	ldr	r2, [r3, #0]
 800fb0c:	f01e 0f10 	tst.w	lr, #16
 800fb10:	bf08      	it	eq
 800fb12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fb16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb1a:	6010      	str	r0, [r2, #0]
 800fb1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fb20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fb24:	f380 8811 	msr	BASEPRI, r0
 800fb28:	f3bf 8f4f 	dsb	sy
 800fb2c:	f3bf 8f6f 	isb	sy
 800fb30:	f7fe febc 	bl	800e8ac <vTaskSwitchContext>
 800fb34:	f04f 0000 	mov.w	r0, #0
 800fb38:	f380 8811 	msr	BASEPRI, r0
 800fb3c:	bc09      	pop	{r0, r3}
 800fb3e:	6819      	ldr	r1, [r3, #0]
 800fb40:	6808      	ldr	r0, [r1, #0]
 800fb42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb46:	f01e 0f10 	tst.w	lr, #16
 800fb4a:	bf08      	it	eq
 800fb4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fb50:	f380 8809 	msr	PSP, r0
 800fb54:	f3bf 8f6f 	isb	sy
 800fb58:	4770      	bx	lr
 800fb5a:	bf00      	nop
 800fb5c:	f3af 8000 	nop.w

0800fb60 <pxCurrentTCBConst>:
 800fb60:	20002b20 	.word	0x20002b20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fb64:	bf00      	nop
 800fb66:	bf00      	nop

0800fb68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b082      	sub	sp, #8
 800fb6c:	af00      	add	r7, sp, #0
	__asm volatile
 800fb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb72:	f383 8811 	msr	BASEPRI, r3
 800fb76:	f3bf 8f6f 	isb	sy
 800fb7a:	f3bf 8f4f 	dsb	sy
 800fb7e:	607b      	str	r3, [r7, #4]
}
 800fb80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fb82:	f7fe fdd9 	bl	800e738 <xTaskIncrementTick>
 800fb86:	4603      	mov	r3, r0
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d003      	beq.n	800fb94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fb8c:	4b06      	ldr	r3, [pc, #24]	; (800fba8 <xPortSysTickHandler+0x40>)
 800fb8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb92:	601a      	str	r2, [r3, #0]
 800fb94:	2300      	movs	r3, #0
 800fb96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	f383 8811 	msr	BASEPRI, r3
}
 800fb9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fba0:	bf00      	nop
 800fba2:	3708      	adds	r7, #8
 800fba4:	46bd      	mov	sp, r7
 800fba6:	bd80      	pop	{r7, pc}
 800fba8:	e000ed04 	.word	0xe000ed04

0800fbac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fbac:	b480      	push	{r7}
 800fbae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fbb0:	4b0b      	ldr	r3, [pc, #44]	; (800fbe0 <vPortSetupTimerInterrupt+0x34>)
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fbb6:	4b0b      	ldr	r3, [pc, #44]	; (800fbe4 <vPortSetupTimerInterrupt+0x38>)
 800fbb8:	2200      	movs	r2, #0
 800fbba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fbbc:	4b0a      	ldr	r3, [pc, #40]	; (800fbe8 <vPortSetupTimerInterrupt+0x3c>)
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	4a0a      	ldr	r2, [pc, #40]	; (800fbec <vPortSetupTimerInterrupt+0x40>)
 800fbc2:	fba2 2303 	umull	r2, r3, r2, r3
 800fbc6:	099b      	lsrs	r3, r3, #6
 800fbc8:	4a09      	ldr	r2, [pc, #36]	; (800fbf0 <vPortSetupTimerInterrupt+0x44>)
 800fbca:	3b01      	subs	r3, #1
 800fbcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fbce:	4b04      	ldr	r3, [pc, #16]	; (800fbe0 <vPortSetupTimerInterrupt+0x34>)
 800fbd0:	2207      	movs	r2, #7
 800fbd2:	601a      	str	r2, [r3, #0]
}
 800fbd4:	bf00      	nop
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbdc:	4770      	bx	lr
 800fbde:	bf00      	nop
 800fbe0:	e000e010 	.word	0xe000e010
 800fbe4:	e000e018 	.word	0xe000e018
 800fbe8:	20000004 	.word	0x20000004
 800fbec:	10624dd3 	.word	0x10624dd3
 800fbf0:	e000e014 	.word	0xe000e014

0800fbf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fbf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fc04 <vPortEnableVFP+0x10>
 800fbf8:	6801      	ldr	r1, [r0, #0]
 800fbfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fbfe:	6001      	str	r1, [r0, #0]
 800fc00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fc02:	bf00      	nop
 800fc04:	e000ed88 	.word	0xe000ed88

0800fc08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fc08:	b480      	push	{r7}
 800fc0a:	b085      	sub	sp, #20
 800fc0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fc0e:	f3ef 8305 	mrs	r3, IPSR
 800fc12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	2b0f      	cmp	r3, #15
 800fc18:	d914      	bls.n	800fc44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fc1a:	4a17      	ldr	r2, [pc, #92]	; (800fc78 <vPortValidateInterruptPriority+0x70>)
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	4413      	add	r3, r2
 800fc20:	781b      	ldrb	r3, [r3, #0]
 800fc22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fc24:	4b15      	ldr	r3, [pc, #84]	; (800fc7c <vPortValidateInterruptPriority+0x74>)
 800fc26:	781b      	ldrb	r3, [r3, #0]
 800fc28:	7afa      	ldrb	r2, [r7, #11]
 800fc2a:	429a      	cmp	r2, r3
 800fc2c:	d20a      	bcs.n	800fc44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800fc2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc32:	f383 8811 	msr	BASEPRI, r3
 800fc36:	f3bf 8f6f 	isb	sy
 800fc3a:	f3bf 8f4f 	dsb	sy
 800fc3e:	607b      	str	r3, [r7, #4]
}
 800fc40:	bf00      	nop
 800fc42:	e7fe      	b.n	800fc42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fc44:	4b0e      	ldr	r3, [pc, #56]	; (800fc80 <vPortValidateInterruptPriority+0x78>)
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fc4c:	4b0d      	ldr	r3, [pc, #52]	; (800fc84 <vPortValidateInterruptPriority+0x7c>)
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	429a      	cmp	r2, r3
 800fc52:	d90a      	bls.n	800fc6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc58:	f383 8811 	msr	BASEPRI, r3
 800fc5c:	f3bf 8f6f 	isb	sy
 800fc60:	f3bf 8f4f 	dsb	sy
 800fc64:	603b      	str	r3, [r7, #0]
}
 800fc66:	bf00      	nop
 800fc68:	e7fe      	b.n	800fc68 <vPortValidateInterruptPriority+0x60>
	}
 800fc6a:	bf00      	nop
 800fc6c:	3714      	adds	r7, #20
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc74:	4770      	bx	lr
 800fc76:	bf00      	nop
 800fc78:	e000e3f0 	.word	0xe000e3f0
 800fc7c:	2000314c 	.word	0x2000314c
 800fc80:	e000ed0c 	.word	0xe000ed0c
 800fc84:	20003150 	.word	0x20003150

0800fc88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b08a      	sub	sp, #40	; 0x28
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fc90:	2300      	movs	r3, #0
 800fc92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fc94:	f7fe fc94 	bl	800e5c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fc98:	4b5b      	ldr	r3, [pc, #364]	; (800fe08 <pvPortMalloc+0x180>)
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d101      	bne.n	800fca4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fca0:	f000 f920 	bl	800fee4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fca4:	4b59      	ldr	r3, [pc, #356]	; (800fe0c <pvPortMalloc+0x184>)
 800fca6:	681a      	ldr	r2, [r3, #0]
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	4013      	ands	r3, r2
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	f040 8093 	bne.w	800fdd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d01d      	beq.n	800fcf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fcb8:	2208      	movs	r2, #8
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	4413      	add	r3, r2
 800fcbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f003 0307 	and.w	r3, r3, #7
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d014      	beq.n	800fcf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	f023 0307 	bic.w	r3, r3, #7
 800fcd0:	3308      	adds	r3, #8
 800fcd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f003 0307 	and.w	r3, r3, #7
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d00a      	beq.n	800fcf4 <pvPortMalloc+0x6c>
	__asm volatile
 800fcde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fce2:	f383 8811 	msr	BASEPRI, r3
 800fce6:	f3bf 8f6f 	isb	sy
 800fcea:	f3bf 8f4f 	dsb	sy
 800fcee:	617b      	str	r3, [r7, #20]
}
 800fcf0:	bf00      	nop
 800fcf2:	e7fe      	b.n	800fcf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d06e      	beq.n	800fdd8 <pvPortMalloc+0x150>
 800fcfa:	4b45      	ldr	r3, [pc, #276]	; (800fe10 <pvPortMalloc+0x188>)
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	687a      	ldr	r2, [r7, #4]
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d869      	bhi.n	800fdd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fd04:	4b43      	ldr	r3, [pc, #268]	; (800fe14 <pvPortMalloc+0x18c>)
 800fd06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fd08:	4b42      	ldr	r3, [pc, #264]	; (800fe14 <pvPortMalloc+0x18c>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fd0e:	e004      	b.n	800fd1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd1c:	685b      	ldr	r3, [r3, #4]
 800fd1e:	687a      	ldr	r2, [r7, #4]
 800fd20:	429a      	cmp	r2, r3
 800fd22:	d903      	bls.n	800fd2c <pvPortMalloc+0xa4>
 800fd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d1f1      	bne.n	800fd10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fd2c:	4b36      	ldr	r3, [pc, #216]	; (800fe08 <pvPortMalloc+0x180>)
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d050      	beq.n	800fdd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fd36:	6a3b      	ldr	r3, [r7, #32]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	2208      	movs	r2, #8
 800fd3c:	4413      	add	r3, r2
 800fd3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd42:	681a      	ldr	r2, [r3, #0]
 800fd44:	6a3b      	ldr	r3, [r7, #32]
 800fd46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd4a:	685a      	ldr	r2, [r3, #4]
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	1ad2      	subs	r2, r2, r3
 800fd50:	2308      	movs	r3, #8
 800fd52:	005b      	lsls	r3, r3, #1
 800fd54:	429a      	cmp	r2, r3
 800fd56:	d91f      	bls.n	800fd98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fd58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	4413      	add	r3, r2
 800fd5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd60:	69bb      	ldr	r3, [r7, #24]
 800fd62:	f003 0307 	and.w	r3, r3, #7
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d00a      	beq.n	800fd80 <pvPortMalloc+0xf8>
	__asm volatile
 800fd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd6e:	f383 8811 	msr	BASEPRI, r3
 800fd72:	f3bf 8f6f 	isb	sy
 800fd76:	f3bf 8f4f 	dsb	sy
 800fd7a:	613b      	str	r3, [r7, #16]
}
 800fd7c:	bf00      	nop
 800fd7e:	e7fe      	b.n	800fd7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd82:	685a      	ldr	r2, [r3, #4]
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	1ad2      	subs	r2, r2, r3
 800fd88:	69bb      	ldr	r3, [r7, #24]
 800fd8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd8e:	687a      	ldr	r2, [r7, #4]
 800fd90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fd92:	69b8      	ldr	r0, [r7, #24]
 800fd94:	f000 f908 	bl	800ffa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fd98:	4b1d      	ldr	r3, [pc, #116]	; (800fe10 <pvPortMalloc+0x188>)
 800fd9a:	681a      	ldr	r2, [r3, #0]
 800fd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd9e:	685b      	ldr	r3, [r3, #4]
 800fda0:	1ad3      	subs	r3, r2, r3
 800fda2:	4a1b      	ldr	r2, [pc, #108]	; (800fe10 <pvPortMalloc+0x188>)
 800fda4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fda6:	4b1a      	ldr	r3, [pc, #104]	; (800fe10 <pvPortMalloc+0x188>)
 800fda8:	681a      	ldr	r2, [r3, #0]
 800fdaa:	4b1b      	ldr	r3, [pc, #108]	; (800fe18 <pvPortMalloc+0x190>)
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	429a      	cmp	r2, r3
 800fdb0:	d203      	bcs.n	800fdba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fdb2:	4b17      	ldr	r3, [pc, #92]	; (800fe10 <pvPortMalloc+0x188>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	4a18      	ldr	r2, [pc, #96]	; (800fe18 <pvPortMalloc+0x190>)
 800fdb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdbc:	685a      	ldr	r2, [r3, #4]
 800fdbe:	4b13      	ldr	r3, [pc, #76]	; (800fe0c <pvPortMalloc+0x184>)
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	431a      	orrs	r2, r3
 800fdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdca:	2200      	movs	r2, #0
 800fdcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fdce:	4b13      	ldr	r3, [pc, #76]	; (800fe1c <pvPortMalloc+0x194>)
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	3301      	adds	r3, #1
 800fdd4:	4a11      	ldr	r2, [pc, #68]	; (800fe1c <pvPortMalloc+0x194>)
 800fdd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fdd8:	f7fe fc00 	bl	800e5dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fddc:	69fb      	ldr	r3, [r7, #28]
 800fdde:	f003 0307 	and.w	r3, r3, #7
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d00a      	beq.n	800fdfc <pvPortMalloc+0x174>
	__asm volatile
 800fde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdea:	f383 8811 	msr	BASEPRI, r3
 800fdee:	f3bf 8f6f 	isb	sy
 800fdf2:	f3bf 8f4f 	dsb	sy
 800fdf6:	60fb      	str	r3, [r7, #12]
}
 800fdf8:	bf00      	nop
 800fdfa:	e7fe      	b.n	800fdfa <pvPortMalloc+0x172>
	return pvReturn;
 800fdfc:	69fb      	ldr	r3, [r7, #28]
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3728      	adds	r7, #40	; 0x28
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}
 800fe06:	bf00      	nop
 800fe08:	2000a95c 	.word	0x2000a95c
 800fe0c:	2000a970 	.word	0x2000a970
 800fe10:	2000a960 	.word	0x2000a960
 800fe14:	2000a954 	.word	0x2000a954
 800fe18:	2000a964 	.word	0x2000a964
 800fe1c:	2000a968 	.word	0x2000a968

0800fe20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b086      	sub	sp, #24
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d04d      	beq.n	800fece <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fe32:	2308      	movs	r3, #8
 800fe34:	425b      	negs	r3, r3
 800fe36:	697a      	ldr	r2, [r7, #20]
 800fe38:	4413      	add	r3, r2
 800fe3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fe40:	693b      	ldr	r3, [r7, #16]
 800fe42:	685a      	ldr	r2, [r3, #4]
 800fe44:	4b24      	ldr	r3, [pc, #144]	; (800fed8 <vPortFree+0xb8>)
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	4013      	ands	r3, r2
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d10a      	bne.n	800fe64 <vPortFree+0x44>
	__asm volatile
 800fe4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe52:	f383 8811 	msr	BASEPRI, r3
 800fe56:	f3bf 8f6f 	isb	sy
 800fe5a:	f3bf 8f4f 	dsb	sy
 800fe5e:	60fb      	str	r3, [r7, #12]
}
 800fe60:	bf00      	nop
 800fe62:	e7fe      	b.n	800fe62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fe64:	693b      	ldr	r3, [r7, #16]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d00a      	beq.n	800fe82 <vPortFree+0x62>
	__asm volatile
 800fe6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe70:	f383 8811 	msr	BASEPRI, r3
 800fe74:	f3bf 8f6f 	isb	sy
 800fe78:	f3bf 8f4f 	dsb	sy
 800fe7c:	60bb      	str	r3, [r7, #8]
}
 800fe7e:	bf00      	nop
 800fe80:	e7fe      	b.n	800fe80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fe82:	693b      	ldr	r3, [r7, #16]
 800fe84:	685a      	ldr	r2, [r3, #4]
 800fe86:	4b14      	ldr	r3, [pc, #80]	; (800fed8 <vPortFree+0xb8>)
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	4013      	ands	r3, r2
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d01e      	beq.n	800fece <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fe90:	693b      	ldr	r3, [r7, #16]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d11a      	bne.n	800fece <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fe98:	693b      	ldr	r3, [r7, #16]
 800fe9a:	685a      	ldr	r2, [r3, #4]
 800fe9c:	4b0e      	ldr	r3, [pc, #56]	; (800fed8 <vPortFree+0xb8>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	43db      	mvns	r3, r3
 800fea2:	401a      	ands	r2, r3
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fea8:	f7fe fb8a 	bl	800e5c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800feac:	693b      	ldr	r3, [r7, #16]
 800feae:	685a      	ldr	r2, [r3, #4]
 800feb0:	4b0a      	ldr	r3, [pc, #40]	; (800fedc <vPortFree+0xbc>)
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	4413      	add	r3, r2
 800feb6:	4a09      	ldr	r2, [pc, #36]	; (800fedc <vPortFree+0xbc>)
 800feb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800feba:	6938      	ldr	r0, [r7, #16]
 800febc:	f000 f874 	bl	800ffa8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fec0:	4b07      	ldr	r3, [pc, #28]	; (800fee0 <vPortFree+0xc0>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	3301      	adds	r3, #1
 800fec6:	4a06      	ldr	r2, [pc, #24]	; (800fee0 <vPortFree+0xc0>)
 800fec8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800feca:	f7fe fb87 	bl	800e5dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fece:	bf00      	nop
 800fed0:	3718      	adds	r7, #24
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bd80      	pop	{r7, pc}
 800fed6:	bf00      	nop
 800fed8:	2000a970 	.word	0x2000a970
 800fedc:	2000a960 	.word	0x2000a960
 800fee0:	2000a96c 	.word	0x2000a96c

0800fee4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fee4:	b480      	push	{r7}
 800fee6:	b085      	sub	sp, #20
 800fee8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800feea:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800feee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fef0:	4b27      	ldr	r3, [pc, #156]	; (800ff90 <prvHeapInit+0xac>)
 800fef2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	f003 0307 	and.w	r3, r3, #7
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d00c      	beq.n	800ff18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	3307      	adds	r3, #7
 800ff02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	f023 0307 	bic.w	r3, r3, #7
 800ff0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ff0c:	68ba      	ldr	r2, [r7, #8]
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	1ad3      	subs	r3, r2, r3
 800ff12:	4a1f      	ldr	r2, [pc, #124]	; (800ff90 <prvHeapInit+0xac>)
 800ff14:	4413      	add	r3, r2
 800ff16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ff1c:	4a1d      	ldr	r2, [pc, #116]	; (800ff94 <prvHeapInit+0xb0>)
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ff22:	4b1c      	ldr	r3, [pc, #112]	; (800ff94 <prvHeapInit+0xb0>)
 800ff24:	2200      	movs	r2, #0
 800ff26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	68ba      	ldr	r2, [r7, #8]
 800ff2c:	4413      	add	r3, r2
 800ff2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ff30:	2208      	movs	r2, #8
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	1a9b      	subs	r3, r3, r2
 800ff36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	f023 0307 	bic.w	r3, r3, #7
 800ff3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	4a15      	ldr	r2, [pc, #84]	; (800ff98 <prvHeapInit+0xb4>)
 800ff44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ff46:	4b14      	ldr	r3, [pc, #80]	; (800ff98 <prvHeapInit+0xb4>)
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ff4e:	4b12      	ldr	r3, [pc, #72]	; (800ff98 <prvHeapInit+0xb4>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	2200      	movs	r2, #0
 800ff54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	68fa      	ldr	r2, [r7, #12]
 800ff5e:	1ad2      	subs	r2, r2, r3
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ff64:	4b0c      	ldr	r3, [pc, #48]	; (800ff98 <prvHeapInit+0xb4>)
 800ff66:	681a      	ldr	r2, [r3, #0]
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	685b      	ldr	r3, [r3, #4]
 800ff70:	4a0a      	ldr	r2, [pc, #40]	; (800ff9c <prvHeapInit+0xb8>)
 800ff72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ff74:	683b      	ldr	r3, [r7, #0]
 800ff76:	685b      	ldr	r3, [r3, #4]
 800ff78:	4a09      	ldr	r2, [pc, #36]	; (800ffa0 <prvHeapInit+0xbc>)
 800ff7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ff7c:	4b09      	ldr	r3, [pc, #36]	; (800ffa4 <prvHeapInit+0xc0>)
 800ff7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ff82:	601a      	str	r2, [r3, #0]
}
 800ff84:	bf00      	nop
 800ff86:	3714      	adds	r7, #20
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8e:	4770      	bx	lr
 800ff90:	20003154 	.word	0x20003154
 800ff94:	2000a954 	.word	0x2000a954
 800ff98:	2000a95c 	.word	0x2000a95c
 800ff9c:	2000a964 	.word	0x2000a964
 800ffa0:	2000a960 	.word	0x2000a960
 800ffa4:	2000a970 	.word	0x2000a970

0800ffa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ffa8:	b480      	push	{r7}
 800ffaa:	b085      	sub	sp, #20
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ffb0:	4b28      	ldr	r3, [pc, #160]	; (8010054 <prvInsertBlockIntoFreeList+0xac>)
 800ffb2:	60fb      	str	r3, [r7, #12]
 800ffb4:	e002      	b.n	800ffbc <prvInsertBlockIntoFreeList+0x14>
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	60fb      	str	r3, [r7, #12]
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	687a      	ldr	r2, [r7, #4]
 800ffc2:	429a      	cmp	r2, r3
 800ffc4:	d8f7      	bhi.n	800ffb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	685b      	ldr	r3, [r3, #4]
 800ffce:	68ba      	ldr	r2, [r7, #8]
 800ffd0:	4413      	add	r3, r2
 800ffd2:	687a      	ldr	r2, [r7, #4]
 800ffd4:	429a      	cmp	r2, r3
 800ffd6:	d108      	bne.n	800ffea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	685a      	ldr	r2, [r3, #4]
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	685b      	ldr	r3, [r3, #4]
 800ffe0:	441a      	add	r2, r3
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	685b      	ldr	r3, [r3, #4]
 800fff2:	68ba      	ldr	r2, [r7, #8]
 800fff4:	441a      	add	r2, r3
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	429a      	cmp	r2, r3
 800fffc:	d118      	bne.n	8010030 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	681a      	ldr	r2, [r3, #0]
 8010002:	4b15      	ldr	r3, [pc, #84]	; (8010058 <prvInsertBlockIntoFreeList+0xb0>)
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	429a      	cmp	r2, r3
 8010008:	d00d      	beq.n	8010026 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	685a      	ldr	r2, [r3, #4]
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	685b      	ldr	r3, [r3, #4]
 8010014:	441a      	add	r2, r3
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	681a      	ldr	r2, [r3, #0]
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	601a      	str	r2, [r3, #0]
 8010024:	e008      	b.n	8010038 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010026:	4b0c      	ldr	r3, [pc, #48]	; (8010058 <prvInsertBlockIntoFreeList+0xb0>)
 8010028:	681a      	ldr	r2, [r3, #0]
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	601a      	str	r2, [r3, #0]
 801002e:	e003      	b.n	8010038 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	681a      	ldr	r2, [r3, #0]
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010038:	68fa      	ldr	r2, [r7, #12]
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	429a      	cmp	r2, r3
 801003e:	d002      	beq.n	8010046 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	687a      	ldr	r2, [r7, #4]
 8010044:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010046:	bf00      	nop
 8010048:	3714      	adds	r7, #20
 801004a:	46bd      	mov	sp, r7
 801004c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010050:	4770      	bx	lr
 8010052:	bf00      	nop
 8010054:	2000a954 	.word	0x2000a954
 8010058:	2000a95c 	.word	0x2000a95c

0801005c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801005c:	b580      	push	{r7, lr}
 801005e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010060:	2200      	movs	r2, #0
 8010062:	4912      	ldr	r1, [pc, #72]	; (80100ac <MX_USB_DEVICE_Init+0x50>)
 8010064:	4812      	ldr	r0, [pc, #72]	; (80100b0 <MX_USB_DEVICE_Init+0x54>)
 8010066:	f7f7 fb41 	bl	80076ec <USBD_Init>
 801006a:	4603      	mov	r3, r0
 801006c:	2b00      	cmp	r3, #0
 801006e:	d001      	beq.n	8010074 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010070:	f7f1 fece 	bl	8001e10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010074:	490f      	ldr	r1, [pc, #60]	; (80100b4 <MX_USB_DEVICE_Init+0x58>)
 8010076:	480e      	ldr	r0, [pc, #56]	; (80100b0 <MX_USB_DEVICE_Init+0x54>)
 8010078:	f7f7 fb68 	bl	800774c <USBD_RegisterClass>
 801007c:	4603      	mov	r3, r0
 801007e:	2b00      	cmp	r3, #0
 8010080:	d001      	beq.n	8010086 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010082:	f7f1 fec5 	bl	8001e10 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010086:	490c      	ldr	r1, [pc, #48]	; (80100b8 <MX_USB_DEVICE_Init+0x5c>)
 8010088:	4809      	ldr	r0, [pc, #36]	; (80100b0 <MX_USB_DEVICE_Init+0x54>)
 801008a:	f7f7 fa59 	bl	8007540 <USBD_CDC_RegisterInterface>
 801008e:	4603      	mov	r3, r0
 8010090:	2b00      	cmp	r3, #0
 8010092:	d001      	beq.n	8010098 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010094:	f7f1 febc 	bl	8001e10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010098:	4805      	ldr	r0, [pc, #20]	; (80100b0 <MX_USB_DEVICE_Init+0x54>)
 801009a:	f7f7 fb8d 	bl	80077b8 <USBD_Start>
 801009e:	4603      	mov	r3, r0
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d001      	beq.n	80100a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80100a4:	f7f1 feb4 	bl	8001e10 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80100a8:	bf00      	nop
 80100aa:	bd80      	pop	{r7, pc}
 80100ac:	200000c8 	.word	0x200000c8
 80100b0:	2000a974 	.word	0x2000a974
 80100b4:	20000030 	.word	0x20000030
 80100b8:	200000b4 	.word	0x200000b4

080100bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80100c0:	2200      	movs	r2, #0
 80100c2:	4905      	ldr	r1, [pc, #20]	; (80100d8 <CDC_Init_FS+0x1c>)
 80100c4:	4805      	ldr	r0, [pc, #20]	; (80100dc <CDC_Init_FS+0x20>)
 80100c6:	f7f7 fa55 	bl	8007574 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80100ca:	4905      	ldr	r1, [pc, #20]	; (80100e0 <CDC_Init_FS+0x24>)
 80100cc:	4803      	ldr	r0, [pc, #12]	; (80100dc <CDC_Init_FS+0x20>)
 80100ce:	f7f7 fa73 	bl	80075b8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80100d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80100d4:	4618      	mov	r0, r3
 80100d6:	bd80      	pop	{r7, pc}
 80100d8:	2000b038 	.word	0x2000b038
 80100dc:	2000a974 	.word	0x2000a974
 80100e0:	2000ac50 	.word	0x2000ac50

080100e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80100e4:	b480      	push	{r7}
 80100e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80100e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80100ea:	4618      	mov	r0, r3
 80100ec:	46bd      	mov	sp, r7
 80100ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f2:	4770      	bx	lr

080100f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80100f4:	b480      	push	{r7}
 80100f6:	b083      	sub	sp, #12
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	4603      	mov	r3, r0
 80100fc:	6039      	str	r1, [r7, #0]
 80100fe:	71fb      	strb	r3, [r7, #7]
 8010100:	4613      	mov	r3, r2
 8010102:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010104:	79fb      	ldrb	r3, [r7, #7]
 8010106:	2b23      	cmp	r3, #35	; 0x23
 8010108:	d84a      	bhi.n	80101a0 <CDC_Control_FS+0xac>
 801010a:	a201      	add	r2, pc, #4	; (adr r2, 8010110 <CDC_Control_FS+0x1c>)
 801010c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010110:	080101a1 	.word	0x080101a1
 8010114:	080101a1 	.word	0x080101a1
 8010118:	080101a1 	.word	0x080101a1
 801011c:	080101a1 	.word	0x080101a1
 8010120:	080101a1 	.word	0x080101a1
 8010124:	080101a1 	.word	0x080101a1
 8010128:	080101a1 	.word	0x080101a1
 801012c:	080101a1 	.word	0x080101a1
 8010130:	080101a1 	.word	0x080101a1
 8010134:	080101a1 	.word	0x080101a1
 8010138:	080101a1 	.word	0x080101a1
 801013c:	080101a1 	.word	0x080101a1
 8010140:	080101a1 	.word	0x080101a1
 8010144:	080101a1 	.word	0x080101a1
 8010148:	080101a1 	.word	0x080101a1
 801014c:	080101a1 	.word	0x080101a1
 8010150:	080101a1 	.word	0x080101a1
 8010154:	080101a1 	.word	0x080101a1
 8010158:	080101a1 	.word	0x080101a1
 801015c:	080101a1 	.word	0x080101a1
 8010160:	080101a1 	.word	0x080101a1
 8010164:	080101a1 	.word	0x080101a1
 8010168:	080101a1 	.word	0x080101a1
 801016c:	080101a1 	.word	0x080101a1
 8010170:	080101a1 	.word	0x080101a1
 8010174:	080101a1 	.word	0x080101a1
 8010178:	080101a1 	.word	0x080101a1
 801017c:	080101a1 	.word	0x080101a1
 8010180:	080101a1 	.word	0x080101a1
 8010184:	080101a1 	.word	0x080101a1
 8010188:	080101a1 	.word	0x080101a1
 801018c:	080101a1 	.word	0x080101a1
 8010190:	080101a1 	.word	0x080101a1
 8010194:	080101a1 	.word	0x080101a1
 8010198:	080101a1 	.word	0x080101a1
 801019c:	080101a1 	.word	0x080101a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80101a0:	bf00      	nop
  }

  return (USBD_OK);
 80101a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80101a4:	4618      	mov	r0, r3
 80101a6:	370c      	adds	r7, #12
 80101a8:	46bd      	mov	sp, r7
 80101aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ae:	4770      	bx	lr

080101b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b082      	sub	sp, #8
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
 80101b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80101ba:	6879      	ldr	r1, [r7, #4]
 80101bc:	4805      	ldr	r0, [pc, #20]	; (80101d4 <CDC_Receive_FS+0x24>)
 80101be:	f7f7 f9fb 	bl	80075b8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80101c2:	4804      	ldr	r0, [pc, #16]	; (80101d4 <CDC_Receive_FS+0x24>)
 80101c4:	f7f7 fa5c 	bl	8007680 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80101c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80101ca:	4618      	mov	r0, r3
 80101cc:	3708      	adds	r7, #8
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd80      	pop	{r7, pc}
 80101d2:	bf00      	nop
 80101d4:	2000a974 	.word	0x2000a974

080101d8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b084      	sub	sp, #16
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
 80101e0:	460b      	mov	r3, r1
 80101e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80101e4:	2300      	movs	r3, #0
 80101e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80101e8:	4b0d      	ldr	r3, [pc, #52]	; (8010220 <CDC_Transmit_FS+0x48>)
 80101ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80101ee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80101f0:	68bb      	ldr	r3, [r7, #8]
 80101f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d001      	beq.n	80101fe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80101fa:	2301      	movs	r3, #1
 80101fc:	e00b      	b.n	8010216 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80101fe:	887b      	ldrh	r3, [r7, #2]
 8010200:	461a      	mov	r2, r3
 8010202:	6879      	ldr	r1, [r7, #4]
 8010204:	4806      	ldr	r0, [pc, #24]	; (8010220 <CDC_Transmit_FS+0x48>)
 8010206:	f7f7 f9b5 	bl	8007574 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801020a:	4805      	ldr	r0, [pc, #20]	; (8010220 <CDC_Transmit_FS+0x48>)
 801020c:	f7f7 f9f2 	bl	80075f4 <USBD_CDC_TransmitPacket>
 8010210:	4603      	mov	r3, r0
 8010212:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010214:	7bfb      	ldrb	r3, [r7, #15]
}
 8010216:	4618      	mov	r0, r3
 8010218:	3710      	adds	r7, #16
 801021a:	46bd      	mov	sp, r7
 801021c:	bd80      	pop	{r7, pc}
 801021e:	bf00      	nop
 8010220:	2000a974 	.word	0x2000a974

08010224 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010224:	b480      	push	{r7}
 8010226:	b087      	sub	sp, #28
 8010228:	af00      	add	r7, sp, #0
 801022a:	60f8      	str	r0, [r7, #12]
 801022c:	60b9      	str	r1, [r7, #8]
 801022e:	4613      	mov	r3, r2
 8010230:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010232:	2300      	movs	r3, #0
 8010234:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010236:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801023a:	4618      	mov	r0, r3
 801023c:	371c      	adds	r7, #28
 801023e:	46bd      	mov	sp, r7
 8010240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010244:	4770      	bx	lr
	...

08010248 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010248:	b480      	push	{r7}
 801024a:	b083      	sub	sp, #12
 801024c:	af00      	add	r7, sp, #0
 801024e:	4603      	mov	r3, r0
 8010250:	6039      	str	r1, [r7, #0]
 8010252:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	2212      	movs	r2, #18
 8010258:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801025a:	4b03      	ldr	r3, [pc, #12]	; (8010268 <USBD_FS_DeviceDescriptor+0x20>)
}
 801025c:	4618      	mov	r0, r3
 801025e:	370c      	adds	r7, #12
 8010260:	46bd      	mov	sp, r7
 8010262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010266:	4770      	bx	lr
 8010268:	200000e4 	.word	0x200000e4

0801026c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801026c:	b480      	push	{r7}
 801026e:	b083      	sub	sp, #12
 8010270:	af00      	add	r7, sp, #0
 8010272:	4603      	mov	r3, r0
 8010274:	6039      	str	r1, [r7, #0]
 8010276:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	2204      	movs	r2, #4
 801027c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801027e:	4b03      	ldr	r3, [pc, #12]	; (801028c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010280:	4618      	mov	r0, r3
 8010282:	370c      	adds	r7, #12
 8010284:	46bd      	mov	sp, r7
 8010286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028a:	4770      	bx	lr
 801028c:	200000f8 	.word	0x200000f8

08010290 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b082      	sub	sp, #8
 8010294:	af00      	add	r7, sp, #0
 8010296:	4603      	mov	r3, r0
 8010298:	6039      	str	r1, [r7, #0]
 801029a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801029c:	79fb      	ldrb	r3, [r7, #7]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d105      	bne.n	80102ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80102a2:	683a      	ldr	r2, [r7, #0]
 80102a4:	4907      	ldr	r1, [pc, #28]	; (80102c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80102a6:	4808      	ldr	r0, [pc, #32]	; (80102c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80102a8:	f7f8 fc32 	bl	8008b10 <USBD_GetString>
 80102ac:	e004      	b.n	80102b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80102ae:	683a      	ldr	r2, [r7, #0]
 80102b0:	4904      	ldr	r1, [pc, #16]	; (80102c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80102b2:	4805      	ldr	r0, [pc, #20]	; (80102c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80102b4:	f7f8 fc2c 	bl	8008b10 <USBD_GetString>
  }
  return USBD_StrDesc;
 80102b8:	4b02      	ldr	r3, [pc, #8]	; (80102c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80102ba:	4618      	mov	r0, r3
 80102bc:	3708      	adds	r7, #8
 80102be:	46bd      	mov	sp, r7
 80102c0:	bd80      	pop	{r7, pc}
 80102c2:	bf00      	nop
 80102c4:	2000b420 	.word	0x2000b420
 80102c8:	08012368 	.word	0x08012368

080102cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b082      	sub	sp, #8
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	4603      	mov	r3, r0
 80102d4:	6039      	str	r1, [r7, #0]
 80102d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80102d8:	683a      	ldr	r2, [r7, #0]
 80102da:	4904      	ldr	r1, [pc, #16]	; (80102ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80102dc:	4804      	ldr	r0, [pc, #16]	; (80102f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80102de:	f7f8 fc17 	bl	8008b10 <USBD_GetString>
  return USBD_StrDesc;
 80102e2:	4b02      	ldr	r3, [pc, #8]	; (80102ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	3708      	adds	r7, #8
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bd80      	pop	{r7, pc}
 80102ec:	2000b420 	.word	0x2000b420
 80102f0:	08012380 	.word	0x08012380

080102f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b082      	sub	sp, #8
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	4603      	mov	r3, r0
 80102fc:	6039      	str	r1, [r7, #0]
 80102fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010300:	683b      	ldr	r3, [r7, #0]
 8010302:	221a      	movs	r2, #26
 8010304:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010306:	f000 f843 	bl	8010390 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801030a:	4b02      	ldr	r3, [pc, #8]	; (8010314 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801030c:	4618      	mov	r0, r3
 801030e:	3708      	adds	r7, #8
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}
 8010314:	200000fc 	.word	0x200000fc

08010318 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010318:	b580      	push	{r7, lr}
 801031a:	b082      	sub	sp, #8
 801031c:	af00      	add	r7, sp, #0
 801031e:	4603      	mov	r3, r0
 8010320:	6039      	str	r1, [r7, #0]
 8010322:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010324:	79fb      	ldrb	r3, [r7, #7]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d105      	bne.n	8010336 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801032a:	683a      	ldr	r2, [r7, #0]
 801032c:	4907      	ldr	r1, [pc, #28]	; (801034c <USBD_FS_ConfigStrDescriptor+0x34>)
 801032e:	4808      	ldr	r0, [pc, #32]	; (8010350 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010330:	f7f8 fbee 	bl	8008b10 <USBD_GetString>
 8010334:	e004      	b.n	8010340 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010336:	683a      	ldr	r2, [r7, #0]
 8010338:	4904      	ldr	r1, [pc, #16]	; (801034c <USBD_FS_ConfigStrDescriptor+0x34>)
 801033a:	4805      	ldr	r0, [pc, #20]	; (8010350 <USBD_FS_ConfigStrDescriptor+0x38>)
 801033c:	f7f8 fbe8 	bl	8008b10 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010340:	4b02      	ldr	r3, [pc, #8]	; (801034c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010342:	4618      	mov	r0, r3
 8010344:	3708      	adds	r7, #8
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}
 801034a:	bf00      	nop
 801034c:	2000b420 	.word	0x2000b420
 8010350:	08012394 	.word	0x08012394

08010354 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010354:	b580      	push	{r7, lr}
 8010356:	b082      	sub	sp, #8
 8010358:	af00      	add	r7, sp, #0
 801035a:	4603      	mov	r3, r0
 801035c:	6039      	str	r1, [r7, #0]
 801035e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010360:	79fb      	ldrb	r3, [r7, #7]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d105      	bne.n	8010372 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010366:	683a      	ldr	r2, [r7, #0]
 8010368:	4907      	ldr	r1, [pc, #28]	; (8010388 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801036a:	4808      	ldr	r0, [pc, #32]	; (801038c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801036c:	f7f8 fbd0 	bl	8008b10 <USBD_GetString>
 8010370:	e004      	b.n	801037c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010372:	683a      	ldr	r2, [r7, #0]
 8010374:	4904      	ldr	r1, [pc, #16]	; (8010388 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010376:	4805      	ldr	r0, [pc, #20]	; (801038c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010378:	f7f8 fbca 	bl	8008b10 <USBD_GetString>
  }
  return USBD_StrDesc;
 801037c:	4b02      	ldr	r3, [pc, #8]	; (8010388 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801037e:	4618      	mov	r0, r3
 8010380:	3708      	adds	r7, #8
 8010382:	46bd      	mov	sp, r7
 8010384:	bd80      	pop	{r7, pc}
 8010386:	bf00      	nop
 8010388:	2000b420 	.word	0x2000b420
 801038c:	080123a0 	.word	0x080123a0

08010390 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b084      	sub	sp, #16
 8010394:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010396:	4b0f      	ldr	r3, [pc, #60]	; (80103d4 <Get_SerialNum+0x44>)
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801039c:	4b0e      	ldr	r3, [pc, #56]	; (80103d8 <Get_SerialNum+0x48>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80103a2:	4b0e      	ldr	r3, [pc, #56]	; (80103dc <Get_SerialNum+0x4c>)
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80103a8:	68fa      	ldr	r2, [r7, #12]
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	4413      	add	r3, r2
 80103ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d009      	beq.n	80103ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80103b6:	2208      	movs	r2, #8
 80103b8:	4909      	ldr	r1, [pc, #36]	; (80103e0 <Get_SerialNum+0x50>)
 80103ba:	68f8      	ldr	r0, [r7, #12]
 80103bc:	f000 f814 	bl	80103e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80103c0:	2204      	movs	r2, #4
 80103c2:	4908      	ldr	r1, [pc, #32]	; (80103e4 <Get_SerialNum+0x54>)
 80103c4:	68b8      	ldr	r0, [r7, #8]
 80103c6:	f000 f80f 	bl	80103e8 <IntToUnicode>
  }
}
 80103ca:	bf00      	nop
 80103cc:	3710      	adds	r7, #16
 80103ce:	46bd      	mov	sp, r7
 80103d0:	bd80      	pop	{r7, pc}
 80103d2:	bf00      	nop
 80103d4:	1fff7a10 	.word	0x1fff7a10
 80103d8:	1fff7a14 	.word	0x1fff7a14
 80103dc:	1fff7a18 	.word	0x1fff7a18
 80103e0:	200000fe 	.word	0x200000fe
 80103e4:	2000010e 	.word	0x2000010e

080103e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80103e8:	b480      	push	{r7}
 80103ea:	b087      	sub	sp, #28
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	60f8      	str	r0, [r7, #12]
 80103f0:	60b9      	str	r1, [r7, #8]
 80103f2:	4613      	mov	r3, r2
 80103f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80103f6:	2300      	movs	r3, #0
 80103f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80103fa:	2300      	movs	r3, #0
 80103fc:	75fb      	strb	r3, [r7, #23]
 80103fe:	e027      	b.n	8010450 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	0f1b      	lsrs	r3, r3, #28
 8010404:	2b09      	cmp	r3, #9
 8010406:	d80b      	bhi.n	8010420 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	0f1b      	lsrs	r3, r3, #28
 801040c:	b2da      	uxtb	r2, r3
 801040e:	7dfb      	ldrb	r3, [r7, #23]
 8010410:	005b      	lsls	r3, r3, #1
 8010412:	4619      	mov	r1, r3
 8010414:	68bb      	ldr	r3, [r7, #8]
 8010416:	440b      	add	r3, r1
 8010418:	3230      	adds	r2, #48	; 0x30
 801041a:	b2d2      	uxtb	r2, r2
 801041c:	701a      	strb	r2, [r3, #0]
 801041e:	e00a      	b.n	8010436 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	0f1b      	lsrs	r3, r3, #28
 8010424:	b2da      	uxtb	r2, r3
 8010426:	7dfb      	ldrb	r3, [r7, #23]
 8010428:	005b      	lsls	r3, r3, #1
 801042a:	4619      	mov	r1, r3
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	440b      	add	r3, r1
 8010430:	3237      	adds	r2, #55	; 0x37
 8010432:	b2d2      	uxtb	r2, r2
 8010434:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	011b      	lsls	r3, r3, #4
 801043a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801043c:	7dfb      	ldrb	r3, [r7, #23]
 801043e:	005b      	lsls	r3, r3, #1
 8010440:	3301      	adds	r3, #1
 8010442:	68ba      	ldr	r2, [r7, #8]
 8010444:	4413      	add	r3, r2
 8010446:	2200      	movs	r2, #0
 8010448:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801044a:	7dfb      	ldrb	r3, [r7, #23]
 801044c:	3301      	adds	r3, #1
 801044e:	75fb      	strb	r3, [r7, #23]
 8010450:	7dfa      	ldrb	r2, [r7, #23]
 8010452:	79fb      	ldrb	r3, [r7, #7]
 8010454:	429a      	cmp	r2, r3
 8010456:	d3d3      	bcc.n	8010400 <IntToUnicode+0x18>
  }
}
 8010458:	bf00      	nop
 801045a:	bf00      	nop
 801045c:	371c      	adds	r7, #28
 801045e:	46bd      	mov	sp, r7
 8010460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010464:	4770      	bx	lr
	...

08010468 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b08a      	sub	sp, #40	; 0x28
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010470:	f107 0314 	add.w	r3, r7, #20
 8010474:	2200      	movs	r2, #0
 8010476:	601a      	str	r2, [r3, #0]
 8010478:	605a      	str	r2, [r3, #4]
 801047a:	609a      	str	r2, [r3, #8]
 801047c:	60da      	str	r2, [r3, #12]
 801047e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010488:	d13a      	bne.n	8010500 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801048a:	2300      	movs	r3, #0
 801048c:	613b      	str	r3, [r7, #16]
 801048e:	4b1e      	ldr	r3, [pc, #120]	; (8010508 <HAL_PCD_MspInit+0xa0>)
 8010490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010492:	4a1d      	ldr	r2, [pc, #116]	; (8010508 <HAL_PCD_MspInit+0xa0>)
 8010494:	f043 0301 	orr.w	r3, r3, #1
 8010498:	6313      	str	r3, [r2, #48]	; 0x30
 801049a:	4b1b      	ldr	r3, [pc, #108]	; (8010508 <HAL_PCD_MspInit+0xa0>)
 801049c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801049e:	f003 0301 	and.w	r3, r3, #1
 80104a2:	613b      	str	r3, [r7, #16]
 80104a4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80104a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80104aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80104ac:	2302      	movs	r3, #2
 80104ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80104b0:	2300      	movs	r3, #0
 80104b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80104b4:	2303      	movs	r3, #3
 80104b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80104b8:	230a      	movs	r3, #10
 80104ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80104bc:	f107 0314 	add.w	r3, r7, #20
 80104c0:	4619      	mov	r1, r3
 80104c2:	4812      	ldr	r0, [pc, #72]	; (801050c <HAL_PCD_MspInit+0xa4>)
 80104c4:	f7f2 f838 	bl	8002538 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80104c8:	4b0f      	ldr	r3, [pc, #60]	; (8010508 <HAL_PCD_MspInit+0xa0>)
 80104ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104cc:	4a0e      	ldr	r2, [pc, #56]	; (8010508 <HAL_PCD_MspInit+0xa0>)
 80104ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104d2:	6353      	str	r3, [r2, #52]	; 0x34
 80104d4:	2300      	movs	r3, #0
 80104d6:	60fb      	str	r3, [r7, #12]
 80104d8:	4b0b      	ldr	r3, [pc, #44]	; (8010508 <HAL_PCD_MspInit+0xa0>)
 80104da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104dc:	4a0a      	ldr	r2, [pc, #40]	; (8010508 <HAL_PCD_MspInit+0xa0>)
 80104de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80104e2:	6453      	str	r3, [r2, #68]	; 0x44
 80104e4:	4b08      	ldr	r3, [pc, #32]	; (8010508 <HAL_PCD_MspInit+0xa0>)
 80104e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80104ec:	60fb      	str	r3, [r7, #12]
 80104ee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80104f0:	2200      	movs	r2, #0
 80104f2:	2105      	movs	r1, #5
 80104f4:	2043      	movs	r0, #67	; 0x43
 80104f6:	f7f1 fff5 	bl	80024e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80104fa:	2043      	movs	r0, #67	; 0x43
 80104fc:	f7f2 f80e 	bl	800251c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010500:	bf00      	nop
 8010502:	3728      	adds	r7, #40	; 0x28
 8010504:	46bd      	mov	sp, r7
 8010506:	bd80      	pop	{r7, pc}
 8010508:	40023800 	.word	0x40023800
 801050c:	40020000 	.word	0x40020000

08010510 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b082      	sub	sp, #8
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010524:	4619      	mov	r1, r3
 8010526:	4610      	mov	r0, r2
 8010528:	f7f7 f993 	bl	8007852 <USBD_LL_SetupStage>
}
 801052c:	bf00      	nop
 801052e:	3708      	adds	r7, #8
 8010530:	46bd      	mov	sp, r7
 8010532:	bd80      	pop	{r7, pc}

08010534 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b082      	sub	sp, #8
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
 801053c:	460b      	mov	r3, r1
 801053e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010546:	78fa      	ldrb	r2, [r7, #3]
 8010548:	6879      	ldr	r1, [r7, #4]
 801054a:	4613      	mov	r3, r2
 801054c:	00db      	lsls	r3, r3, #3
 801054e:	4413      	add	r3, r2
 8010550:	009b      	lsls	r3, r3, #2
 8010552:	440b      	add	r3, r1
 8010554:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010558:	681a      	ldr	r2, [r3, #0]
 801055a:	78fb      	ldrb	r3, [r7, #3]
 801055c:	4619      	mov	r1, r3
 801055e:	f7f7 f9cd 	bl	80078fc <USBD_LL_DataOutStage>
}
 8010562:	bf00      	nop
 8010564:	3708      	adds	r7, #8
 8010566:	46bd      	mov	sp, r7
 8010568:	bd80      	pop	{r7, pc}

0801056a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801056a:	b580      	push	{r7, lr}
 801056c:	b082      	sub	sp, #8
 801056e:	af00      	add	r7, sp, #0
 8010570:	6078      	str	r0, [r7, #4]
 8010572:	460b      	mov	r3, r1
 8010574:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801057c:	78fa      	ldrb	r2, [r7, #3]
 801057e:	6879      	ldr	r1, [r7, #4]
 8010580:	4613      	mov	r3, r2
 8010582:	00db      	lsls	r3, r3, #3
 8010584:	4413      	add	r3, r2
 8010586:	009b      	lsls	r3, r3, #2
 8010588:	440b      	add	r3, r1
 801058a:	334c      	adds	r3, #76	; 0x4c
 801058c:	681a      	ldr	r2, [r3, #0]
 801058e:	78fb      	ldrb	r3, [r7, #3]
 8010590:	4619      	mov	r1, r3
 8010592:	f7f7 fa66 	bl	8007a62 <USBD_LL_DataInStage>
}
 8010596:	bf00      	nop
 8010598:	3708      	adds	r7, #8
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}

0801059e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801059e:	b580      	push	{r7, lr}
 80105a0:	b082      	sub	sp, #8
 80105a2:	af00      	add	r7, sp, #0
 80105a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80105ac:	4618      	mov	r0, r3
 80105ae:	f7f7 fb9a 	bl	8007ce6 <USBD_LL_SOF>
}
 80105b2:	bf00      	nop
 80105b4:	3708      	adds	r7, #8
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}

080105ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105ba:	b580      	push	{r7, lr}
 80105bc:	b084      	sub	sp, #16
 80105be:	af00      	add	r7, sp, #0
 80105c0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80105c2:	2301      	movs	r3, #1
 80105c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	68db      	ldr	r3, [r3, #12]
 80105ca:	2b02      	cmp	r3, #2
 80105cc:	d001      	beq.n	80105d2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80105ce:	f7f1 fc1f 	bl	8001e10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80105d8:	7bfa      	ldrb	r2, [r7, #15]
 80105da:	4611      	mov	r1, r2
 80105dc:	4618      	mov	r0, r3
 80105de:	f7f7 fb44 	bl	8007c6a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80105e8:	4618      	mov	r0, r3
 80105ea:	f7f7 faec 	bl	8007bc6 <USBD_LL_Reset>
}
 80105ee:	bf00      	nop
 80105f0:	3710      	adds	r7, #16
 80105f2:	46bd      	mov	sp, r7
 80105f4:	bd80      	pop	{r7, pc}
	...

080105f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b082      	sub	sp, #8
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010606:	4618      	mov	r0, r3
 8010608:	f7f7 fb3f 	bl	8007c8a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	687a      	ldr	r2, [r7, #4]
 8010618:	6812      	ldr	r2, [r2, #0]
 801061a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801061e:	f043 0301 	orr.w	r3, r3, #1
 8010622:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	6a1b      	ldr	r3, [r3, #32]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d005      	beq.n	8010638 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801062c:	4b04      	ldr	r3, [pc, #16]	; (8010640 <HAL_PCD_SuspendCallback+0x48>)
 801062e:	691b      	ldr	r3, [r3, #16]
 8010630:	4a03      	ldr	r2, [pc, #12]	; (8010640 <HAL_PCD_SuspendCallback+0x48>)
 8010632:	f043 0306 	orr.w	r3, r3, #6
 8010636:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010638:	bf00      	nop
 801063a:	3708      	adds	r7, #8
 801063c:	46bd      	mov	sp, r7
 801063e:	bd80      	pop	{r7, pc}
 8010640:	e000ed00 	.word	0xe000ed00

08010644 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b082      	sub	sp, #8
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010652:	4618      	mov	r0, r3
 8010654:	f7f7 fb2f 	bl	8007cb6 <USBD_LL_Resume>
}
 8010658:	bf00      	nop
 801065a:	3708      	adds	r7, #8
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}

08010660 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b082      	sub	sp, #8
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
 8010668:	460b      	mov	r3, r1
 801066a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010672:	78fa      	ldrb	r2, [r7, #3]
 8010674:	4611      	mov	r1, r2
 8010676:	4618      	mov	r0, r3
 8010678:	f7f7 fb87 	bl	8007d8a <USBD_LL_IsoOUTIncomplete>
}
 801067c:	bf00      	nop
 801067e:	3708      	adds	r7, #8
 8010680:	46bd      	mov	sp, r7
 8010682:	bd80      	pop	{r7, pc}

08010684 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b082      	sub	sp, #8
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
 801068c:	460b      	mov	r3, r1
 801068e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010696:	78fa      	ldrb	r2, [r7, #3]
 8010698:	4611      	mov	r1, r2
 801069a:	4618      	mov	r0, r3
 801069c:	f7f7 fb43 	bl	8007d26 <USBD_LL_IsoINIncomplete>
}
 80106a0:	bf00      	nop
 80106a2:	3708      	adds	r7, #8
 80106a4:	46bd      	mov	sp, r7
 80106a6:	bd80      	pop	{r7, pc}

080106a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b082      	sub	sp, #8
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80106b6:	4618      	mov	r0, r3
 80106b8:	f7f7 fb99 	bl	8007dee <USBD_LL_DevConnected>
}
 80106bc:	bf00      	nop
 80106be:	3708      	adds	r7, #8
 80106c0:	46bd      	mov	sp, r7
 80106c2:	bd80      	pop	{r7, pc}

080106c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b082      	sub	sp, #8
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80106d2:	4618      	mov	r0, r3
 80106d4:	f7f7 fb96 	bl	8007e04 <USBD_LL_DevDisconnected>
}
 80106d8:	bf00      	nop
 80106da:	3708      	adds	r7, #8
 80106dc:	46bd      	mov	sp, r7
 80106de:	bd80      	pop	{r7, pc}

080106e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b082      	sub	sp, #8
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	781b      	ldrb	r3, [r3, #0]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d13c      	bne.n	801076a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80106f0:	4a20      	ldr	r2, [pc, #128]	; (8010774 <USBD_LL_Init+0x94>)
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	4a1e      	ldr	r2, [pc, #120]	; (8010774 <USBD_LL_Init+0x94>)
 80106fc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010700:	4b1c      	ldr	r3, [pc, #112]	; (8010774 <USBD_LL_Init+0x94>)
 8010702:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010706:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010708:	4b1a      	ldr	r3, [pc, #104]	; (8010774 <USBD_LL_Init+0x94>)
 801070a:	2204      	movs	r2, #4
 801070c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801070e:	4b19      	ldr	r3, [pc, #100]	; (8010774 <USBD_LL_Init+0x94>)
 8010710:	2202      	movs	r2, #2
 8010712:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010714:	4b17      	ldr	r3, [pc, #92]	; (8010774 <USBD_LL_Init+0x94>)
 8010716:	2200      	movs	r2, #0
 8010718:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801071a:	4b16      	ldr	r3, [pc, #88]	; (8010774 <USBD_LL_Init+0x94>)
 801071c:	2202      	movs	r2, #2
 801071e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010720:	4b14      	ldr	r3, [pc, #80]	; (8010774 <USBD_LL_Init+0x94>)
 8010722:	2200      	movs	r2, #0
 8010724:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010726:	4b13      	ldr	r3, [pc, #76]	; (8010774 <USBD_LL_Init+0x94>)
 8010728:	2200      	movs	r2, #0
 801072a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801072c:	4b11      	ldr	r3, [pc, #68]	; (8010774 <USBD_LL_Init+0x94>)
 801072e:	2200      	movs	r2, #0
 8010730:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010732:	4b10      	ldr	r3, [pc, #64]	; (8010774 <USBD_LL_Init+0x94>)
 8010734:	2200      	movs	r2, #0
 8010736:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010738:	4b0e      	ldr	r3, [pc, #56]	; (8010774 <USBD_LL_Init+0x94>)
 801073a:	2200      	movs	r2, #0
 801073c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801073e:	480d      	ldr	r0, [pc, #52]	; (8010774 <USBD_LL_Init+0x94>)
 8010740:	f7f2 f897 	bl	8002872 <HAL_PCD_Init>
 8010744:	4603      	mov	r3, r0
 8010746:	2b00      	cmp	r3, #0
 8010748:	d001      	beq.n	801074e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801074a:	f7f1 fb61 	bl	8001e10 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801074e:	2180      	movs	r1, #128	; 0x80
 8010750:	4808      	ldr	r0, [pc, #32]	; (8010774 <USBD_LL_Init+0x94>)
 8010752:	f7f3 faee 	bl	8003d32 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010756:	2240      	movs	r2, #64	; 0x40
 8010758:	2100      	movs	r1, #0
 801075a:	4806      	ldr	r0, [pc, #24]	; (8010774 <USBD_LL_Init+0x94>)
 801075c:	f7f3 faa2 	bl	8003ca4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010760:	2280      	movs	r2, #128	; 0x80
 8010762:	2101      	movs	r1, #1
 8010764:	4803      	ldr	r0, [pc, #12]	; (8010774 <USBD_LL_Init+0x94>)
 8010766:	f7f3 fa9d 	bl	8003ca4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801076a:	2300      	movs	r3, #0
}
 801076c:	4618      	mov	r0, r3
 801076e:	3708      	adds	r7, #8
 8010770:	46bd      	mov	sp, r7
 8010772:	bd80      	pop	{r7, pc}
 8010774:	2000b620 	.word	0x2000b620

08010778 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b084      	sub	sp, #16
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010780:	2300      	movs	r3, #0
 8010782:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010784:	2300      	movs	r3, #0
 8010786:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801078e:	4618      	mov	r0, r3
 8010790:	f7f2 f98c 	bl	8002aac <HAL_PCD_Start>
 8010794:	4603      	mov	r3, r0
 8010796:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010798:	7bfb      	ldrb	r3, [r7, #15]
 801079a:	4618      	mov	r0, r3
 801079c:	f000 f942 	bl	8010a24 <USBD_Get_USB_Status>
 80107a0:	4603      	mov	r3, r0
 80107a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80107a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80107a6:	4618      	mov	r0, r3
 80107a8:	3710      	adds	r7, #16
 80107aa:	46bd      	mov	sp, r7
 80107ac:	bd80      	pop	{r7, pc}

080107ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80107ae:	b580      	push	{r7, lr}
 80107b0:	b084      	sub	sp, #16
 80107b2:	af00      	add	r7, sp, #0
 80107b4:	6078      	str	r0, [r7, #4]
 80107b6:	4608      	mov	r0, r1
 80107b8:	4611      	mov	r1, r2
 80107ba:	461a      	mov	r2, r3
 80107bc:	4603      	mov	r3, r0
 80107be:	70fb      	strb	r3, [r7, #3]
 80107c0:	460b      	mov	r3, r1
 80107c2:	70bb      	strb	r3, [r7, #2]
 80107c4:	4613      	mov	r3, r2
 80107c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107c8:	2300      	movs	r3, #0
 80107ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107cc:	2300      	movs	r3, #0
 80107ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80107d6:	78bb      	ldrb	r3, [r7, #2]
 80107d8:	883a      	ldrh	r2, [r7, #0]
 80107da:	78f9      	ldrb	r1, [r7, #3]
 80107dc:	f7f2 fe5d 	bl	800349a <HAL_PCD_EP_Open>
 80107e0:	4603      	mov	r3, r0
 80107e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80107e4:	7bfb      	ldrb	r3, [r7, #15]
 80107e6:	4618      	mov	r0, r3
 80107e8:	f000 f91c 	bl	8010a24 <USBD_Get_USB_Status>
 80107ec:	4603      	mov	r3, r0
 80107ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80107f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80107f2:	4618      	mov	r0, r3
 80107f4:	3710      	adds	r7, #16
 80107f6:	46bd      	mov	sp, r7
 80107f8:	bd80      	pop	{r7, pc}

080107fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80107fa:	b580      	push	{r7, lr}
 80107fc:	b084      	sub	sp, #16
 80107fe:	af00      	add	r7, sp, #0
 8010800:	6078      	str	r0, [r7, #4]
 8010802:	460b      	mov	r3, r1
 8010804:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010806:	2300      	movs	r3, #0
 8010808:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801080a:	2300      	movs	r3, #0
 801080c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010814:	78fa      	ldrb	r2, [r7, #3]
 8010816:	4611      	mov	r1, r2
 8010818:	4618      	mov	r0, r3
 801081a:	f7f2 fea6 	bl	800356a <HAL_PCD_EP_Close>
 801081e:	4603      	mov	r3, r0
 8010820:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010822:	7bfb      	ldrb	r3, [r7, #15]
 8010824:	4618      	mov	r0, r3
 8010826:	f000 f8fd 	bl	8010a24 <USBD_Get_USB_Status>
 801082a:	4603      	mov	r3, r0
 801082c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801082e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010830:	4618      	mov	r0, r3
 8010832:	3710      	adds	r7, #16
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}

08010838 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b084      	sub	sp, #16
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
 8010840:	460b      	mov	r3, r1
 8010842:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010844:	2300      	movs	r3, #0
 8010846:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010848:	2300      	movs	r3, #0
 801084a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010852:	78fa      	ldrb	r2, [r7, #3]
 8010854:	4611      	mov	r1, r2
 8010856:	4618      	mov	r0, r3
 8010858:	f7f2 ff7e 	bl	8003758 <HAL_PCD_EP_SetStall>
 801085c:	4603      	mov	r3, r0
 801085e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010860:	7bfb      	ldrb	r3, [r7, #15]
 8010862:	4618      	mov	r0, r3
 8010864:	f000 f8de 	bl	8010a24 <USBD_Get_USB_Status>
 8010868:	4603      	mov	r3, r0
 801086a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801086c:	7bbb      	ldrb	r3, [r7, #14]
}
 801086e:	4618      	mov	r0, r3
 8010870:	3710      	adds	r7, #16
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}

08010876 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010876:	b580      	push	{r7, lr}
 8010878:	b084      	sub	sp, #16
 801087a:	af00      	add	r7, sp, #0
 801087c:	6078      	str	r0, [r7, #4]
 801087e:	460b      	mov	r3, r1
 8010880:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010882:	2300      	movs	r3, #0
 8010884:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010886:	2300      	movs	r3, #0
 8010888:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010890:	78fa      	ldrb	r2, [r7, #3]
 8010892:	4611      	mov	r1, r2
 8010894:	4618      	mov	r0, r3
 8010896:	f7f2 ffc3 	bl	8003820 <HAL_PCD_EP_ClrStall>
 801089a:	4603      	mov	r3, r0
 801089c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801089e:	7bfb      	ldrb	r3, [r7, #15]
 80108a0:	4618      	mov	r0, r3
 80108a2:	f000 f8bf 	bl	8010a24 <USBD_Get_USB_Status>
 80108a6:	4603      	mov	r3, r0
 80108a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80108aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80108ac:	4618      	mov	r0, r3
 80108ae:	3710      	adds	r7, #16
 80108b0:	46bd      	mov	sp, r7
 80108b2:	bd80      	pop	{r7, pc}

080108b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80108b4:	b480      	push	{r7}
 80108b6:	b085      	sub	sp, #20
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
 80108bc:	460b      	mov	r3, r1
 80108be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80108c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80108c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	da0b      	bge.n	80108e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80108d0:	78fb      	ldrb	r3, [r7, #3]
 80108d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80108d6:	68f9      	ldr	r1, [r7, #12]
 80108d8:	4613      	mov	r3, r2
 80108da:	00db      	lsls	r3, r3, #3
 80108dc:	4413      	add	r3, r2
 80108de:	009b      	lsls	r3, r3, #2
 80108e0:	440b      	add	r3, r1
 80108e2:	333e      	adds	r3, #62	; 0x3e
 80108e4:	781b      	ldrb	r3, [r3, #0]
 80108e6:	e00b      	b.n	8010900 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80108e8:	78fb      	ldrb	r3, [r7, #3]
 80108ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80108ee:	68f9      	ldr	r1, [r7, #12]
 80108f0:	4613      	mov	r3, r2
 80108f2:	00db      	lsls	r3, r3, #3
 80108f4:	4413      	add	r3, r2
 80108f6:	009b      	lsls	r3, r3, #2
 80108f8:	440b      	add	r3, r1
 80108fa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80108fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010900:	4618      	mov	r0, r3
 8010902:	3714      	adds	r7, #20
 8010904:	46bd      	mov	sp, r7
 8010906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090a:	4770      	bx	lr

0801090c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801090c:	b580      	push	{r7, lr}
 801090e:	b084      	sub	sp, #16
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
 8010914:	460b      	mov	r3, r1
 8010916:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010918:	2300      	movs	r3, #0
 801091a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801091c:	2300      	movs	r3, #0
 801091e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010926:	78fa      	ldrb	r2, [r7, #3]
 8010928:	4611      	mov	r1, r2
 801092a:	4618      	mov	r0, r3
 801092c:	f7f2 fd90 	bl	8003450 <HAL_PCD_SetAddress>
 8010930:	4603      	mov	r3, r0
 8010932:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010934:	7bfb      	ldrb	r3, [r7, #15]
 8010936:	4618      	mov	r0, r3
 8010938:	f000 f874 	bl	8010a24 <USBD_Get_USB_Status>
 801093c:	4603      	mov	r3, r0
 801093e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010940:	7bbb      	ldrb	r3, [r7, #14]
}
 8010942:	4618      	mov	r0, r3
 8010944:	3710      	adds	r7, #16
 8010946:	46bd      	mov	sp, r7
 8010948:	bd80      	pop	{r7, pc}

0801094a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801094a:	b580      	push	{r7, lr}
 801094c:	b086      	sub	sp, #24
 801094e:	af00      	add	r7, sp, #0
 8010950:	60f8      	str	r0, [r7, #12]
 8010952:	607a      	str	r2, [r7, #4]
 8010954:	603b      	str	r3, [r7, #0]
 8010956:	460b      	mov	r3, r1
 8010958:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801095a:	2300      	movs	r3, #0
 801095c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801095e:	2300      	movs	r3, #0
 8010960:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010968:	7af9      	ldrb	r1, [r7, #11]
 801096a:	683b      	ldr	r3, [r7, #0]
 801096c:	687a      	ldr	r2, [r7, #4]
 801096e:	f7f2 fea9 	bl	80036c4 <HAL_PCD_EP_Transmit>
 8010972:	4603      	mov	r3, r0
 8010974:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010976:	7dfb      	ldrb	r3, [r7, #23]
 8010978:	4618      	mov	r0, r3
 801097a:	f000 f853 	bl	8010a24 <USBD_Get_USB_Status>
 801097e:	4603      	mov	r3, r0
 8010980:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010982:	7dbb      	ldrb	r3, [r7, #22]
}
 8010984:	4618      	mov	r0, r3
 8010986:	3718      	adds	r7, #24
 8010988:	46bd      	mov	sp, r7
 801098a:	bd80      	pop	{r7, pc}

0801098c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b086      	sub	sp, #24
 8010990:	af00      	add	r7, sp, #0
 8010992:	60f8      	str	r0, [r7, #12]
 8010994:	607a      	str	r2, [r7, #4]
 8010996:	603b      	str	r3, [r7, #0]
 8010998:	460b      	mov	r3, r1
 801099a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801099c:	2300      	movs	r3, #0
 801099e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80109a0:	2300      	movs	r3, #0
 80109a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80109aa:	7af9      	ldrb	r1, [r7, #11]
 80109ac:	683b      	ldr	r3, [r7, #0]
 80109ae:	687a      	ldr	r2, [r7, #4]
 80109b0:	f7f2 fe25 	bl	80035fe <HAL_PCD_EP_Receive>
 80109b4:	4603      	mov	r3, r0
 80109b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80109b8:	7dfb      	ldrb	r3, [r7, #23]
 80109ba:	4618      	mov	r0, r3
 80109bc:	f000 f832 	bl	8010a24 <USBD_Get_USB_Status>
 80109c0:	4603      	mov	r3, r0
 80109c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80109c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80109c6:	4618      	mov	r0, r3
 80109c8:	3718      	adds	r7, #24
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bd80      	pop	{r7, pc}

080109ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80109ce:	b580      	push	{r7, lr}
 80109d0:	b082      	sub	sp, #8
 80109d2:	af00      	add	r7, sp, #0
 80109d4:	6078      	str	r0, [r7, #4]
 80109d6:	460b      	mov	r3, r1
 80109d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80109e0:	78fa      	ldrb	r2, [r7, #3]
 80109e2:	4611      	mov	r1, r2
 80109e4:	4618      	mov	r0, r3
 80109e6:	f7f2 fe55 	bl	8003694 <HAL_PCD_EP_GetRxCount>
 80109ea:	4603      	mov	r3, r0
}
 80109ec:	4618      	mov	r0, r3
 80109ee:	3708      	adds	r7, #8
 80109f0:	46bd      	mov	sp, r7
 80109f2:	bd80      	pop	{r7, pc}

080109f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80109f4:	b480      	push	{r7}
 80109f6:	b083      	sub	sp, #12
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80109fc:	4b03      	ldr	r3, [pc, #12]	; (8010a0c <USBD_static_malloc+0x18>)
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	370c      	adds	r7, #12
 8010a02:	46bd      	mov	sp, r7
 8010a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a08:	4770      	bx	lr
 8010a0a:	bf00      	nop
 8010a0c:	2000bb2c 	.word	0x2000bb2c

08010a10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010a10:	b480      	push	{r7}
 8010a12:	b083      	sub	sp, #12
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]

}
 8010a18:	bf00      	nop
 8010a1a:	370c      	adds	r7, #12
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a22:	4770      	bx	lr

08010a24 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010a24:	b480      	push	{r7}
 8010a26:	b085      	sub	sp, #20
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a2e:	2300      	movs	r3, #0
 8010a30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010a32:	79fb      	ldrb	r3, [r7, #7]
 8010a34:	2b03      	cmp	r3, #3
 8010a36:	d817      	bhi.n	8010a68 <USBD_Get_USB_Status+0x44>
 8010a38:	a201      	add	r2, pc, #4	; (adr r2, 8010a40 <USBD_Get_USB_Status+0x1c>)
 8010a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a3e:	bf00      	nop
 8010a40:	08010a51 	.word	0x08010a51
 8010a44:	08010a57 	.word	0x08010a57
 8010a48:	08010a5d 	.word	0x08010a5d
 8010a4c:	08010a63 	.word	0x08010a63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010a50:	2300      	movs	r3, #0
 8010a52:	73fb      	strb	r3, [r7, #15]
    break;
 8010a54:	e00b      	b.n	8010a6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010a56:	2303      	movs	r3, #3
 8010a58:	73fb      	strb	r3, [r7, #15]
    break;
 8010a5a:	e008      	b.n	8010a6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010a5c:	2301      	movs	r3, #1
 8010a5e:	73fb      	strb	r3, [r7, #15]
    break;
 8010a60:	e005      	b.n	8010a6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010a62:	2303      	movs	r3, #3
 8010a64:	73fb      	strb	r3, [r7, #15]
    break;
 8010a66:	e002      	b.n	8010a6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010a68:	2303      	movs	r3, #3
 8010a6a:	73fb      	strb	r3, [r7, #15]
    break;
 8010a6c:	bf00      	nop
  }
  return usb_status;
 8010a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a70:	4618      	mov	r0, r3
 8010a72:	3714      	adds	r7, #20
 8010a74:	46bd      	mov	sp, r7
 8010a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7a:	4770      	bx	lr

08010a7c <__errno>:
 8010a7c:	4b01      	ldr	r3, [pc, #4]	; (8010a84 <__errno+0x8>)
 8010a7e:	6818      	ldr	r0, [r3, #0]
 8010a80:	4770      	bx	lr
 8010a82:	bf00      	nop
 8010a84:	20000118 	.word	0x20000118

08010a88 <std>:
 8010a88:	2300      	movs	r3, #0
 8010a8a:	b510      	push	{r4, lr}
 8010a8c:	4604      	mov	r4, r0
 8010a8e:	e9c0 3300 	strd	r3, r3, [r0]
 8010a92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010a96:	6083      	str	r3, [r0, #8]
 8010a98:	8181      	strh	r1, [r0, #12]
 8010a9a:	6643      	str	r3, [r0, #100]	; 0x64
 8010a9c:	81c2      	strh	r2, [r0, #14]
 8010a9e:	6183      	str	r3, [r0, #24]
 8010aa0:	4619      	mov	r1, r3
 8010aa2:	2208      	movs	r2, #8
 8010aa4:	305c      	adds	r0, #92	; 0x5c
 8010aa6:	f000 f91a 	bl	8010cde <memset>
 8010aaa:	4b05      	ldr	r3, [pc, #20]	; (8010ac0 <std+0x38>)
 8010aac:	6263      	str	r3, [r4, #36]	; 0x24
 8010aae:	4b05      	ldr	r3, [pc, #20]	; (8010ac4 <std+0x3c>)
 8010ab0:	62a3      	str	r3, [r4, #40]	; 0x28
 8010ab2:	4b05      	ldr	r3, [pc, #20]	; (8010ac8 <std+0x40>)
 8010ab4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010ab6:	4b05      	ldr	r3, [pc, #20]	; (8010acc <std+0x44>)
 8010ab8:	6224      	str	r4, [r4, #32]
 8010aba:	6323      	str	r3, [r4, #48]	; 0x30
 8010abc:	bd10      	pop	{r4, pc}
 8010abe:	bf00      	nop
 8010ac0:	08011025 	.word	0x08011025
 8010ac4:	08011047 	.word	0x08011047
 8010ac8:	0801107f 	.word	0x0801107f
 8010acc:	080110a3 	.word	0x080110a3

08010ad0 <_cleanup_r>:
 8010ad0:	4901      	ldr	r1, [pc, #4]	; (8010ad8 <_cleanup_r+0x8>)
 8010ad2:	f000 b8af 	b.w	8010c34 <_fwalk_reent>
 8010ad6:	bf00      	nop
 8010ad8:	08011239 	.word	0x08011239

08010adc <__sfmoreglue>:
 8010adc:	b570      	push	{r4, r5, r6, lr}
 8010ade:	2268      	movs	r2, #104	; 0x68
 8010ae0:	1e4d      	subs	r5, r1, #1
 8010ae2:	4355      	muls	r5, r2
 8010ae4:	460e      	mov	r6, r1
 8010ae6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010aea:	f000 f921 	bl	8010d30 <_malloc_r>
 8010aee:	4604      	mov	r4, r0
 8010af0:	b140      	cbz	r0, 8010b04 <__sfmoreglue+0x28>
 8010af2:	2100      	movs	r1, #0
 8010af4:	e9c0 1600 	strd	r1, r6, [r0]
 8010af8:	300c      	adds	r0, #12
 8010afa:	60a0      	str	r0, [r4, #8]
 8010afc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010b00:	f000 f8ed 	bl	8010cde <memset>
 8010b04:	4620      	mov	r0, r4
 8010b06:	bd70      	pop	{r4, r5, r6, pc}

08010b08 <__sfp_lock_acquire>:
 8010b08:	4801      	ldr	r0, [pc, #4]	; (8010b10 <__sfp_lock_acquire+0x8>)
 8010b0a:	f000 b8d8 	b.w	8010cbe <__retarget_lock_acquire_recursive>
 8010b0e:	bf00      	nop
 8010b10:	2000bd4d 	.word	0x2000bd4d

08010b14 <__sfp_lock_release>:
 8010b14:	4801      	ldr	r0, [pc, #4]	; (8010b1c <__sfp_lock_release+0x8>)
 8010b16:	f000 b8d3 	b.w	8010cc0 <__retarget_lock_release_recursive>
 8010b1a:	bf00      	nop
 8010b1c:	2000bd4d 	.word	0x2000bd4d

08010b20 <__sinit_lock_acquire>:
 8010b20:	4801      	ldr	r0, [pc, #4]	; (8010b28 <__sinit_lock_acquire+0x8>)
 8010b22:	f000 b8cc 	b.w	8010cbe <__retarget_lock_acquire_recursive>
 8010b26:	bf00      	nop
 8010b28:	2000bd4e 	.word	0x2000bd4e

08010b2c <__sinit_lock_release>:
 8010b2c:	4801      	ldr	r0, [pc, #4]	; (8010b34 <__sinit_lock_release+0x8>)
 8010b2e:	f000 b8c7 	b.w	8010cc0 <__retarget_lock_release_recursive>
 8010b32:	bf00      	nop
 8010b34:	2000bd4e 	.word	0x2000bd4e

08010b38 <__sinit>:
 8010b38:	b510      	push	{r4, lr}
 8010b3a:	4604      	mov	r4, r0
 8010b3c:	f7ff fff0 	bl	8010b20 <__sinit_lock_acquire>
 8010b40:	69a3      	ldr	r3, [r4, #24]
 8010b42:	b11b      	cbz	r3, 8010b4c <__sinit+0x14>
 8010b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b48:	f7ff bff0 	b.w	8010b2c <__sinit_lock_release>
 8010b4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010b50:	6523      	str	r3, [r4, #80]	; 0x50
 8010b52:	4b13      	ldr	r3, [pc, #76]	; (8010ba0 <__sinit+0x68>)
 8010b54:	4a13      	ldr	r2, [pc, #76]	; (8010ba4 <__sinit+0x6c>)
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	62a2      	str	r2, [r4, #40]	; 0x28
 8010b5a:	42a3      	cmp	r3, r4
 8010b5c:	bf04      	itt	eq
 8010b5e:	2301      	moveq	r3, #1
 8010b60:	61a3      	streq	r3, [r4, #24]
 8010b62:	4620      	mov	r0, r4
 8010b64:	f000 f820 	bl	8010ba8 <__sfp>
 8010b68:	6060      	str	r0, [r4, #4]
 8010b6a:	4620      	mov	r0, r4
 8010b6c:	f000 f81c 	bl	8010ba8 <__sfp>
 8010b70:	60a0      	str	r0, [r4, #8]
 8010b72:	4620      	mov	r0, r4
 8010b74:	f000 f818 	bl	8010ba8 <__sfp>
 8010b78:	2200      	movs	r2, #0
 8010b7a:	60e0      	str	r0, [r4, #12]
 8010b7c:	2104      	movs	r1, #4
 8010b7e:	6860      	ldr	r0, [r4, #4]
 8010b80:	f7ff ff82 	bl	8010a88 <std>
 8010b84:	68a0      	ldr	r0, [r4, #8]
 8010b86:	2201      	movs	r2, #1
 8010b88:	2109      	movs	r1, #9
 8010b8a:	f7ff ff7d 	bl	8010a88 <std>
 8010b8e:	68e0      	ldr	r0, [r4, #12]
 8010b90:	2202      	movs	r2, #2
 8010b92:	2112      	movs	r1, #18
 8010b94:	f7ff ff78 	bl	8010a88 <std>
 8010b98:	2301      	movs	r3, #1
 8010b9a:	61a3      	str	r3, [r4, #24]
 8010b9c:	e7d2      	b.n	8010b44 <__sinit+0xc>
 8010b9e:	bf00      	nop
 8010ba0:	080128a4 	.word	0x080128a4
 8010ba4:	08010ad1 	.word	0x08010ad1

08010ba8 <__sfp>:
 8010ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010baa:	4607      	mov	r7, r0
 8010bac:	f7ff ffac 	bl	8010b08 <__sfp_lock_acquire>
 8010bb0:	4b1e      	ldr	r3, [pc, #120]	; (8010c2c <__sfp+0x84>)
 8010bb2:	681e      	ldr	r6, [r3, #0]
 8010bb4:	69b3      	ldr	r3, [r6, #24]
 8010bb6:	b913      	cbnz	r3, 8010bbe <__sfp+0x16>
 8010bb8:	4630      	mov	r0, r6
 8010bba:	f7ff ffbd 	bl	8010b38 <__sinit>
 8010bbe:	3648      	adds	r6, #72	; 0x48
 8010bc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010bc4:	3b01      	subs	r3, #1
 8010bc6:	d503      	bpl.n	8010bd0 <__sfp+0x28>
 8010bc8:	6833      	ldr	r3, [r6, #0]
 8010bca:	b30b      	cbz	r3, 8010c10 <__sfp+0x68>
 8010bcc:	6836      	ldr	r6, [r6, #0]
 8010bce:	e7f7      	b.n	8010bc0 <__sfp+0x18>
 8010bd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010bd4:	b9d5      	cbnz	r5, 8010c0c <__sfp+0x64>
 8010bd6:	4b16      	ldr	r3, [pc, #88]	; (8010c30 <__sfp+0x88>)
 8010bd8:	60e3      	str	r3, [r4, #12]
 8010bda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010bde:	6665      	str	r5, [r4, #100]	; 0x64
 8010be0:	f000 f86c 	bl	8010cbc <__retarget_lock_init_recursive>
 8010be4:	f7ff ff96 	bl	8010b14 <__sfp_lock_release>
 8010be8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010bec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010bf0:	6025      	str	r5, [r4, #0]
 8010bf2:	61a5      	str	r5, [r4, #24]
 8010bf4:	2208      	movs	r2, #8
 8010bf6:	4629      	mov	r1, r5
 8010bf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010bfc:	f000 f86f 	bl	8010cde <memset>
 8010c00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010c04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010c08:	4620      	mov	r0, r4
 8010c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c0c:	3468      	adds	r4, #104	; 0x68
 8010c0e:	e7d9      	b.n	8010bc4 <__sfp+0x1c>
 8010c10:	2104      	movs	r1, #4
 8010c12:	4638      	mov	r0, r7
 8010c14:	f7ff ff62 	bl	8010adc <__sfmoreglue>
 8010c18:	4604      	mov	r4, r0
 8010c1a:	6030      	str	r0, [r6, #0]
 8010c1c:	2800      	cmp	r0, #0
 8010c1e:	d1d5      	bne.n	8010bcc <__sfp+0x24>
 8010c20:	f7ff ff78 	bl	8010b14 <__sfp_lock_release>
 8010c24:	230c      	movs	r3, #12
 8010c26:	603b      	str	r3, [r7, #0]
 8010c28:	e7ee      	b.n	8010c08 <__sfp+0x60>
 8010c2a:	bf00      	nop
 8010c2c:	080128a4 	.word	0x080128a4
 8010c30:	ffff0001 	.word	0xffff0001

08010c34 <_fwalk_reent>:
 8010c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c38:	4606      	mov	r6, r0
 8010c3a:	4688      	mov	r8, r1
 8010c3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010c40:	2700      	movs	r7, #0
 8010c42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010c46:	f1b9 0901 	subs.w	r9, r9, #1
 8010c4a:	d505      	bpl.n	8010c58 <_fwalk_reent+0x24>
 8010c4c:	6824      	ldr	r4, [r4, #0]
 8010c4e:	2c00      	cmp	r4, #0
 8010c50:	d1f7      	bne.n	8010c42 <_fwalk_reent+0xe>
 8010c52:	4638      	mov	r0, r7
 8010c54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c58:	89ab      	ldrh	r3, [r5, #12]
 8010c5a:	2b01      	cmp	r3, #1
 8010c5c:	d907      	bls.n	8010c6e <_fwalk_reent+0x3a>
 8010c5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010c62:	3301      	adds	r3, #1
 8010c64:	d003      	beq.n	8010c6e <_fwalk_reent+0x3a>
 8010c66:	4629      	mov	r1, r5
 8010c68:	4630      	mov	r0, r6
 8010c6a:	47c0      	blx	r8
 8010c6c:	4307      	orrs	r7, r0
 8010c6e:	3568      	adds	r5, #104	; 0x68
 8010c70:	e7e9      	b.n	8010c46 <_fwalk_reent+0x12>
	...

08010c74 <__libc_init_array>:
 8010c74:	b570      	push	{r4, r5, r6, lr}
 8010c76:	4d0d      	ldr	r5, [pc, #52]	; (8010cac <__libc_init_array+0x38>)
 8010c78:	4c0d      	ldr	r4, [pc, #52]	; (8010cb0 <__libc_init_array+0x3c>)
 8010c7a:	1b64      	subs	r4, r4, r5
 8010c7c:	10a4      	asrs	r4, r4, #2
 8010c7e:	2600      	movs	r6, #0
 8010c80:	42a6      	cmp	r6, r4
 8010c82:	d109      	bne.n	8010c98 <__libc_init_array+0x24>
 8010c84:	4d0b      	ldr	r5, [pc, #44]	; (8010cb4 <__libc_init_array+0x40>)
 8010c86:	4c0c      	ldr	r4, [pc, #48]	; (8010cb8 <__libc_init_array+0x44>)
 8010c88:	f001 f9d6 	bl	8012038 <_init>
 8010c8c:	1b64      	subs	r4, r4, r5
 8010c8e:	10a4      	asrs	r4, r4, #2
 8010c90:	2600      	movs	r6, #0
 8010c92:	42a6      	cmp	r6, r4
 8010c94:	d105      	bne.n	8010ca2 <__libc_init_array+0x2e>
 8010c96:	bd70      	pop	{r4, r5, r6, pc}
 8010c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8010c9c:	4798      	blx	r3
 8010c9e:	3601      	adds	r6, #1
 8010ca0:	e7ee      	b.n	8010c80 <__libc_init_array+0xc>
 8010ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ca6:	4798      	blx	r3
 8010ca8:	3601      	adds	r6, #1
 8010caa:	e7f2      	b.n	8010c92 <__libc_init_array+0x1e>
 8010cac:	08012994 	.word	0x08012994
 8010cb0:	08012994 	.word	0x08012994
 8010cb4:	08012994 	.word	0x08012994
 8010cb8:	08012998 	.word	0x08012998

08010cbc <__retarget_lock_init_recursive>:
 8010cbc:	4770      	bx	lr

08010cbe <__retarget_lock_acquire_recursive>:
 8010cbe:	4770      	bx	lr

08010cc0 <__retarget_lock_release_recursive>:
 8010cc0:	4770      	bx	lr

08010cc2 <memcpy>:
 8010cc2:	440a      	add	r2, r1
 8010cc4:	4291      	cmp	r1, r2
 8010cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8010cca:	d100      	bne.n	8010cce <memcpy+0xc>
 8010ccc:	4770      	bx	lr
 8010cce:	b510      	push	{r4, lr}
 8010cd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010cd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010cd8:	4291      	cmp	r1, r2
 8010cda:	d1f9      	bne.n	8010cd0 <memcpy+0xe>
 8010cdc:	bd10      	pop	{r4, pc}

08010cde <memset>:
 8010cde:	4402      	add	r2, r0
 8010ce0:	4603      	mov	r3, r0
 8010ce2:	4293      	cmp	r3, r2
 8010ce4:	d100      	bne.n	8010ce8 <memset+0xa>
 8010ce6:	4770      	bx	lr
 8010ce8:	f803 1b01 	strb.w	r1, [r3], #1
 8010cec:	e7f9      	b.n	8010ce2 <memset+0x4>
	...

08010cf0 <sbrk_aligned>:
 8010cf0:	b570      	push	{r4, r5, r6, lr}
 8010cf2:	4e0e      	ldr	r6, [pc, #56]	; (8010d2c <sbrk_aligned+0x3c>)
 8010cf4:	460c      	mov	r4, r1
 8010cf6:	6831      	ldr	r1, [r6, #0]
 8010cf8:	4605      	mov	r5, r0
 8010cfa:	b911      	cbnz	r1, 8010d02 <sbrk_aligned+0x12>
 8010cfc:	f000 f962 	bl	8010fc4 <_sbrk_r>
 8010d00:	6030      	str	r0, [r6, #0]
 8010d02:	4621      	mov	r1, r4
 8010d04:	4628      	mov	r0, r5
 8010d06:	f000 f95d 	bl	8010fc4 <_sbrk_r>
 8010d0a:	1c43      	adds	r3, r0, #1
 8010d0c:	d00a      	beq.n	8010d24 <sbrk_aligned+0x34>
 8010d0e:	1cc4      	adds	r4, r0, #3
 8010d10:	f024 0403 	bic.w	r4, r4, #3
 8010d14:	42a0      	cmp	r0, r4
 8010d16:	d007      	beq.n	8010d28 <sbrk_aligned+0x38>
 8010d18:	1a21      	subs	r1, r4, r0
 8010d1a:	4628      	mov	r0, r5
 8010d1c:	f000 f952 	bl	8010fc4 <_sbrk_r>
 8010d20:	3001      	adds	r0, #1
 8010d22:	d101      	bne.n	8010d28 <sbrk_aligned+0x38>
 8010d24:	f04f 34ff 	mov.w	r4, #4294967295
 8010d28:	4620      	mov	r0, r4
 8010d2a:	bd70      	pop	{r4, r5, r6, pc}
 8010d2c:	2000bd54 	.word	0x2000bd54

08010d30 <_malloc_r>:
 8010d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d34:	1ccd      	adds	r5, r1, #3
 8010d36:	f025 0503 	bic.w	r5, r5, #3
 8010d3a:	3508      	adds	r5, #8
 8010d3c:	2d0c      	cmp	r5, #12
 8010d3e:	bf38      	it	cc
 8010d40:	250c      	movcc	r5, #12
 8010d42:	2d00      	cmp	r5, #0
 8010d44:	4607      	mov	r7, r0
 8010d46:	db01      	blt.n	8010d4c <_malloc_r+0x1c>
 8010d48:	42a9      	cmp	r1, r5
 8010d4a:	d905      	bls.n	8010d58 <_malloc_r+0x28>
 8010d4c:	230c      	movs	r3, #12
 8010d4e:	603b      	str	r3, [r7, #0]
 8010d50:	2600      	movs	r6, #0
 8010d52:	4630      	mov	r0, r6
 8010d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d58:	4e2e      	ldr	r6, [pc, #184]	; (8010e14 <_malloc_r+0xe4>)
 8010d5a:	f000 fad5 	bl	8011308 <__malloc_lock>
 8010d5e:	6833      	ldr	r3, [r6, #0]
 8010d60:	461c      	mov	r4, r3
 8010d62:	bb34      	cbnz	r4, 8010db2 <_malloc_r+0x82>
 8010d64:	4629      	mov	r1, r5
 8010d66:	4638      	mov	r0, r7
 8010d68:	f7ff ffc2 	bl	8010cf0 <sbrk_aligned>
 8010d6c:	1c43      	adds	r3, r0, #1
 8010d6e:	4604      	mov	r4, r0
 8010d70:	d14d      	bne.n	8010e0e <_malloc_r+0xde>
 8010d72:	6834      	ldr	r4, [r6, #0]
 8010d74:	4626      	mov	r6, r4
 8010d76:	2e00      	cmp	r6, #0
 8010d78:	d140      	bne.n	8010dfc <_malloc_r+0xcc>
 8010d7a:	6823      	ldr	r3, [r4, #0]
 8010d7c:	4631      	mov	r1, r6
 8010d7e:	4638      	mov	r0, r7
 8010d80:	eb04 0803 	add.w	r8, r4, r3
 8010d84:	f000 f91e 	bl	8010fc4 <_sbrk_r>
 8010d88:	4580      	cmp	r8, r0
 8010d8a:	d13a      	bne.n	8010e02 <_malloc_r+0xd2>
 8010d8c:	6821      	ldr	r1, [r4, #0]
 8010d8e:	3503      	adds	r5, #3
 8010d90:	1a6d      	subs	r5, r5, r1
 8010d92:	f025 0503 	bic.w	r5, r5, #3
 8010d96:	3508      	adds	r5, #8
 8010d98:	2d0c      	cmp	r5, #12
 8010d9a:	bf38      	it	cc
 8010d9c:	250c      	movcc	r5, #12
 8010d9e:	4629      	mov	r1, r5
 8010da0:	4638      	mov	r0, r7
 8010da2:	f7ff ffa5 	bl	8010cf0 <sbrk_aligned>
 8010da6:	3001      	adds	r0, #1
 8010da8:	d02b      	beq.n	8010e02 <_malloc_r+0xd2>
 8010daa:	6823      	ldr	r3, [r4, #0]
 8010dac:	442b      	add	r3, r5
 8010dae:	6023      	str	r3, [r4, #0]
 8010db0:	e00e      	b.n	8010dd0 <_malloc_r+0xa0>
 8010db2:	6822      	ldr	r2, [r4, #0]
 8010db4:	1b52      	subs	r2, r2, r5
 8010db6:	d41e      	bmi.n	8010df6 <_malloc_r+0xc6>
 8010db8:	2a0b      	cmp	r2, #11
 8010dba:	d916      	bls.n	8010dea <_malloc_r+0xba>
 8010dbc:	1961      	adds	r1, r4, r5
 8010dbe:	42a3      	cmp	r3, r4
 8010dc0:	6025      	str	r5, [r4, #0]
 8010dc2:	bf18      	it	ne
 8010dc4:	6059      	strne	r1, [r3, #4]
 8010dc6:	6863      	ldr	r3, [r4, #4]
 8010dc8:	bf08      	it	eq
 8010dca:	6031      	streq	r1, [r6, #0]
 8010dcc:	5162      	str	r2, [r4, r5]
 8010dce:	604b      	str	r3, [r1, #4]
 8010dd0:	4638      	mov	r0, r7
 8010dd2:	f104 060b 	add.w	r6, r4, #11
 8010dd6:	f000 fa9d 	bl	8011314 <__malloc_unlock>
 8010dda:	f026 0607 	bic.w	r6, r6, #7
 8010dde:	1d23      	adds	r3, r4, #4
 8010de0:	1af2      	subs	r2, r6, r3
 8010de2:	d0b6      	beq.n	8010d52 <_malloc_r+0x22>
 8010de4:	1b9b      	subs	r3, r3, r6
 8010de6:	50a3      	str	r3, [r4, r2]
 8010de8:	e7b3      	b.n	8010d52 <_malloc_r+0x22>
 8010dea:	6862      	ldr	r2, [r4, #4]
 8010dec:	42a3      	cmp	r3, r4
 8010dee:	bf0c      	ite	eq
 8010df0:	6032      	streq	r2, [r6, #0]
 8010df2:	605a      	strne	r2, [r3, #4]
 8010df4:	e7ec      	b.n	8010dd0 <_malloc_r+0xa0>
 8010df6:	4623      	mov	r3, r4
 8010df8:	6864      	ldr	r4, [r4, #4]
 8010dfa:	e7b2      	b.n	8010d62 <_malloc_r+0x32>
 8010dfc:	4634      	mov	r4, r6
 8010dfe:	6876      	ldr	r6, [r6, #4]
 8010e00:	e7b9      	b.n	8010d76 <_malloc_r+0x46>
 8010e02:	230c      	movs	r3, #12
 8010e04:	603b      	str	r3, [r7, #0]
 8010e06:	4638      	mov	r0, r7
 8010e08:	f000 fa84 	bl	8011314 <__malloc_unlock>
 8010e0c:	e7a1      	b.n	8010d52 <_malloc_r+0x22>
 8010e0e:	6025      	str	r5, [r4, #0]
 8010e10:	e7de      	b.n	8010dd0 <_malloc_r+0xa0>
 8010e12:	bf00      	nop
 8010e14:	2000bd50 	.word	0x2000bd50

08010e18 <srand>:
 8010e18:	b538      	push	{r3, r4, r5, lr}
 8010e1a:	4b10      	ldr	r3, [pc, #64]	; (8010e5c <srand+0x44>)
 8010e1c:	681d      	ldr	r5, [r3, #0]
 8010e1e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8010e20:	4604      	mov	r4, r0
 8010e22:	b9b3      	cbnz	r3, 8010e52 <srand+0x3a>
 8010e24:	2018      	movs	r0, #24
 8010e26:	f000 fa67 	bl	80112f8 <malloc>
 8010e2a:	4602      	mov	r2, r0
 8010e2c:	63a8      	str	r0, [r5, #56]	; 0x38
 8010e2e:	b920      	cbnz	r0, 8010e3a <srand+0x22>
 8010e30:	4b0b      	ldr	r3, [pc, #44]	; (8010e60 <srand+0x48>)
 8010e32:	480c      	ldr	r0, [pc, #48]	; (8010e64 <srand+0x4c>)
 8010e34:	2142      	movs	r1, #66	; 0x42
 8010e36:	f000 f94b 	bl	80110d0 <__assert_func>
 8010e3a:	490b      	ldr	r1, [pc, #44]	; (8010e68 <srand+0x50>)
 8010e3c:	4b0b      	ldr	r3, [pc, #44]	; (8010e6c <srand+0x54>)
 8010e3e:	e9c0 1300 	strd	r1, r3, [r0]
 8010e42:	4b0b      	ldr	r3, [pc, #44]	; (8010e70 <srand+0x58>)
 8010e44:	6083      	str	r3, [r0, #8]
 8010e46:	230b      	movs	r3, #11
 8010e48:	8183      	strh	r3, [r0, #12]
 8010e4a:	2100      	movs	r1, #0
 8010e4c:	2001      	movs	r0, #1
 8010e4e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010e52:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8010e54:	2200      	movs	r2, #0
 8010e56:	611c      	str	r4, [r3, #16]
 8010e58:	615a      	str	r2, [r3, #20]
 8010e5a:	bd38      	pop	{r3, r4, r5, pc}
 8010e5c:	20000118 	.word	0x20000118
 8010e60:	080128a8 	.word	0x080128a8
 8010e64:	080128bf 	.word	0x080128bf
 8010e68:	abcd330e 	.word	0xabcd330e
 8010e6c:	e66d1234 	.word	0xe66d1234
 8010e70:	0005deec 	.word	0x0005deec

08010e74 <rand>:
 8010e74:	4b16      	ldr	r3, [pc, #88]	; (8010ed0 <rand+0x5c>)
 8010e76:	b510      	push	{r4, lr}
 8010e78:	681c      	ldr	r4, [r3, #0]
 8010e7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010e7c:	b9b3      	cbnz	r3, 8010eac <rand+0x38>
 8010e7e:	2018      	movs	r0, #24
 8010e80:	f000 fa3a 	bl	80112f8 <malloc>
 8010e84:	63a0      	str	r0, [r4, #56]	; 0x38
 8010e86:	b928      	cbnz	r0, 8010e94 <rand+0x20>
 8010e88:	4602      	mov	r2, r0
 8010e8a:	4b12      	ldr	r3, [pc, #72]	; (8010ed4 <rand+0x60>)
 8010e8c:	4812      	ldr	r0, [pc, #72]	; (8010ed8 <rand+0x64>)
 8010e8e:	214e      	movs	r1, #78	; 0x4e
 8010e90:	f000 f91e 	bl	80110d0 <__assert_func>
 8010e94:	4a11      	ldr	r2, [pc, #68]	; (8010edc <rand+0x68>)
 8010e96:	4b12      	ldr	r3, [pc, #72]	; (8010ee0 <rand+0x6c>)
 8010e98:	e9c0 2300 	strd	r2, r3, [r0]
 8010e9c:	4b11      	ldr	r3, [pc, #68]	; (8010ee4 <rand+0x70>)
 8010e9e:	6083      	str	r3, [r0, #8]
 8010ea0:	230b      	movs	r3, #11
 8010ea2:	8183      	strh	r3, [r0, #12]
 8010ea4:	2201      	movs	r2, #1
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8010eac:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8010eae:	4a0e      	ldr	r2, [pc, #56]	; (8010ee8 <rand+0x74>)
 8010eb0:	6920      	ldr	r0, [r4, #16]
 8010eb2:	6963      	ldr	r3, [r4, #20]
 8010eb4:	490d      	ldr	r1, [pc, #52]	; (8010eec <rand+0x78>)
 8010eb6:	4342      	muls	r2, r0
 8010eb8:	fb01 2203 	mla	r2, r1, r3, r2
 8010ebc:	fba0 0101 	umull	r0, r1, r0, r1
 8010ec0:	1c43      	adds	r3, r0, #1
 8010ec2:	eb42 0001 	adc.w	r0, r2, r1
 8010ec6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8010eca:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010ece:	bd10      	pop	{r4, pc}
 8010ed0:	20000118 	.word	0x20000118
 8010ed4:	080128a8 	.word	0x080128a8
 8010ed8:	080128bf 	.word	0x080128bf
 8010edc:	abcd330e 	.word	0xabcd330e
 8010ee0:	e66d1234 	.word	0xe66d1234
 8010ee4:	0005deec 	.word	0x0005deec
 8010ee8:	5851f42d 	.word	0x5851f42d
 8010eec:	4c957f2d 	.word	0x4c957f2d

08010ef0 <cleanup_glue>:
 8010ef0:	b538      	push	{r3, r4, r5, lr}
 8010ef2:	460c      	mov	r4, r1
 8010ef4:	6809      	ldr	r1, [r1, #0]
 8010ef6:	4605      	mov	r5, r0
 8010ef8:	b109      	cbz	r1, 8010efe <cleanup_glue+0xe>
 8010efa:	f7ff fff9 	bl	8010ef0 <cleanup_glue>
 8010efe:	4621      	mov	r1, r4
 8010f00:	4628      	mov	r0, r5
 8010f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f06:	f000 ba0b 	b.w	8011320 <_free_r>
	...

08010f0c <_reclaim_reent>:
 8010f0c:	4b2c      	ldr	r3, [pc, #176]	; (8010fc0 <_reclaim_reent+0xb4>)
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	4283      	cmp	r3, r0
 8010f12:	b570      	push	{r4, r5, r6, lr}
 8010f14:	4604      	mov	r4, r0
 8010f16:	d051      	beq.n	8010fbc <_reclaim_reent+0xb0>
 8010f18:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010f1a:	b143      	cbz	r3, 8010f2e <_reclaim_reent+0x22>
 8010f1c:	68db      	ldr	r3, [r3, #12]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d14a      	bne.n	8010fb8 <_reclaim_reent+0xac>
 8010f22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f24:	6819      	ldr	r1, [r3, #0]
 8010f26:	b111      	cbz	r1, 8010f2e <_reclaim_reent+0x22>
 8010f28:	4620      	mov	r0, r4
 8010f2a:	f000 f9f9 	bl	8011320 <_free_r>
 8010f2e:	6961      	ldr	r1, [r4, #20]
 8010f30:	b111      	cbz	r1, 8010f38 <_reclaim_reent+0x2c>
 8010f32:	4620      	mov	r0, r4
 8010f34:	f000 f9f4 	bl	8011320 <_free_r>
 8010f38:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010f3a:	b111      	cbz	r1, 8010f42 <_reclaim_reent+0x36>
 8010f3c:	4620      	mov	r0, r4
 8010f3e:	f000 f9ef 	bl	8011320 <_free_r>
 8010f42:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010f44:	b111      	cbz	r1, 8010f4c <_reclaim_reent+0x40>
 8010f46:	4620      	mov	r0, r4
 8010f48:	f000 f9ea 	bl	8011320 <_free_r>
 8010f4c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8010f4e:	b111      	cbz	r1, 8010f56 <_reclaim_reent+0x4a>
 8010f50:	4620      	mov	r0, r4
 8010f52:	f000 f9e5 	bl	8011320 <_free_r>
 8010f56:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010f58:	b111      	cbz	r1, 8010f60 <_reclaim_reent+0x54>
 8010f5a:	4620      	mov	r0, r4
 8010f5c:	f000 f9e0 	bl	8011320 <_free_r>
 8010f60:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8010f62:	b111      	cbz	r1, 8010f6a <_reclaim_reent+0x5e>
 8010f64:	4620      	mov	r0, r4
 8010f66:	f000 f9db 	bl	8011320 <_free_r>
 8010f6a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8010f6c:	b111      	cbz	r1, 8010f74 <_reclaim_reent+0x68>
 8010f6e:	4620      	mov	r0, r4
 8010f70:	f000 f9d6 	bl	8011320 <_free_r>
 8010f74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f76:	b111      	cbz	r1, 8010f7e <_reclaim_reent+0x72>
 8010f78:	4620      	mov	r0, r4
 8010f7a:	f000 f9d1 	bl	8011320 <_free_r>
 8010f7e:	69a3      	ldr	r3, [r4, #24]
 8010f80:	b1e3      	cbz	r3, 8010fbc <_reclaim_reent+0xb0>
 8010f82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010f84:	4620      	mov	r0, r4
 8010f86:	4798      	blx	r3
 8010f88:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010f8a:	b1b9      	cbz	r1, 8010fbc <_reclaim_reent+0xb0>
 8010f8c:	4620      	mov	r0, r4
 8010f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f92:	f7ff bfad 	b.w	8010ef0 <cleanup_glue>
 8010f96:	5949      	ldr	r1, [r1, r5]
 8010f98:	b941      	cbnz	r1, 8010fac <_reclaim_reent+0xa0>
 8010f9a:	3504      	adds	r5, #4
 8010f9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f9e:	2d80      	cmp	r5, #128	; 0x80
 8010fa0:	68d9      	ldr	r1, [r3, #12]
 8010fa2:	d1f8      	bne.n	8010f96 <_reclaim_reent+0x8a>
 8010fa4:	4620      	mov	r0, r4
 8010fa6:	f000 f9bb 	bl	8011320 <_free_r>
 8010faa:	e7ba      	b.n	8010f22 <_reclaim_reent+0x16>
 8010fac:	680e      	ldr	r6, [r1, #0]
 8010fae:	4620      	mov	r0, r4
 8010fb0:	f000 f9b6 	bl	8011320 <_free_r>
 8010fb4:	4631      	mov	r1, r6
 8010fb6:	e7ef      	b.n	8010f98 <_reclaim_reent+0x8c>
 8010fb8:	2500      	movs	r5, #0
 8010fba:	e7ef      	b.n	8010f9c <_reclaim_reent+0x90>
 8010fbc:	bd70      	pop	{r4, r5, r6, pc}
 8010fbe:	bf00      	nop
 8010fc0:	20000118 	.word	0x20000118

08010fc4 <_sbrk_r>:
 8010fc4:	b538      	push	{r3, r4, r5, lr}
 8010fc6:	4d06      	ldr	r5, [pc, #24]	; (8010fe0 <_sbrk_r+0x1c>)
 8010fc8:	2300      	movs	r3, #0
 8010fca:	4604      	mov	r4, r0
 8010fcc:	4608      	mov	r0, r1
 8010fce:	602b      	str	r3, [r5, #0]
 8010fd0:	f7f1 f8f8 	bl	80021c4 <_sbrk>
 8010fd4:	1c43      	adds	r3, r0, #1
 8010fd6:	d102      	bne.n	8010fde <_sbrk_r+0x1a>
 8010fd8:	682b      	ldr	r3, [r5, #0]
 8010fda:	b103      	cbz	r3, 8010fde <_sbrk_r+0x1a>
 8010fdc:	6023      	str	r3, [r4, #0]
 8010fde:	bd38      	pop	{r3, r4, r5, pc}
 8010fe0:	2000bd58 	.word	0x2000bd58

08010fe4 <siprintf>:
 8010fe4:	b40e      	push	{r1, r2, r3}
 8010fe6:	b500      	push	{lr}
 8010fe8:	b09c      	sub	sp, #112	; 0x70
 8010fea:	ab1d      	add	r3, sp, #116	; 0x74
 8010fec:	9002      	str	r0, [sp, #8]
 8010fee:	9006      	str	r0, [sp, #24]
 8010ff0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010ff4:	4809      	ldr	r0, [pc, #36]	; (801101c <siprintf+0x38>)
 8010ff6:	9107      	str	r1, [sp, #28]
 8010ff8:	9104      	str	r1, [sp, #16]
 8010ffa:	4909      	ldr	r1, [pc, #36]	; (8011020 <siprintf+0x3c>)
 8010ffc:	f853 2b04 	ldr.w	r2, [r3], #4
 8011000:	9105      	str	r1, [sp, #20]
 8011002:	6800      	ldr	r0, [r0, #0]
 8011004:	9301      	str	r3, [sp, #4]
 8011006:	a902      	add	r1, sp, #8
 8011008:	f000 fa32 	bl	8011470 <_svfiprintf_r>
 801100c:	9b02      	ldr	r3, [sp, #8]
 801100e:	2200      	movs	r2, #0
 8011010:	701a      	strb	r2, [r3, #0]
 8011012:	b01c      	add	sp, #112	; 0x70
 8011014:	f85d eb04 	ldr.w	lr, [sp], #4
 8011018:	b003      	add	sp, #12
 801101a:	4770      	bx	lr
 801101c:	20000118 	.word	0x20000118
 8011020:	ffff0208 	.word	0xffff0208

08011024 <__sread>:
 8011024:	b510      	push	{r4, lr}
 8011026:	460c      	mov	r4, r1
 8011028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801102c:	f000 fe0e 	bl	8011c4c <_read_r>
 8011030:	2800      	cmp	r0, #0
 8011032:	bfab      	itete	ge
 8011034:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011036:	89a3      	ldrhlt	r3, [r4, #12]
 8011038:	181b      	addge	r3, r3, r0
 801103a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801103e:	bfac      	ite	ge
 8011040:	6563      	strge	r3, [r4, #84]	; 0x54
 8011042:	81a3      	strhlt	r3, [r4, #12]
 8011044:	bd10      	pop	{r4, pc}

08011046 <__swrite>:
 8011046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801104a:	461f      	mov	r7, r3
 801104c:	898b      	ldrh	r3, [r1, #12]
 801104e:	05db      	lsls	r3, r3, #23
 8011050:	4605      	mov	r5, r0
 8011052:	460c      	mov	r4, r1
 8011054:	4616      	mov	r6, r2
 8011056:	d505      	bpl.n	8011064 <__swrite+0x1e>
 8011058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801105c:	2302      	movs	r3, #2
 801105e:	2200      	movs	r2, #0
 8011060:	f000 f938 	bl	80112d4 <_lseek_r>
 8011064:	89a3      	ldrh	r3, [r4, #12]
 8011066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801106a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801106e:	81a3      	strh	r3, [r4, #12]
 8011070:	4632      	mov	r2, r6
 8011072:	463b      	mov	r3, r7
 8011074:	4628      	mov	r0, r5
 8011076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801107a:	f000 b817 	b.w	80110ac <_write_r>

0801107e <__sseek>:
 801107e:	b510      	push	{r4, lr}
 8011080:	460c      	mov	r4, r1
 8011082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011086:	f000 f925 	bl	80112d4 <_lseek_r>
 801108a:	1c43      	adds	r3, r0, #1
 801108c:	89a3      	ldrh	r3, [r4, #12]
 801108e:	bf15      	itete	ne
 8011090:	6560      	strne	r0, [r4, #84]	; 0x54
 8011092:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011096:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801109a:	81a3      	strheq	r3, [r4, #12]
 801109c:	bf18      	it	ne
 801109e:	81a3      	strhne	r3, [r4, #12]
 80110a0:	bd10      	pop	{r4, pc}

080110a2 <__sclose>:
 80110a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80110a6:	f000 b831 	b.w	801110c <_close_r>
	...

080110ac <_write_r>:
 80110ac:	b538      	push	{r3, r4, r5, lr}
 80110ae:	4d07      	ldr	r5, [pc, #28]	; (80110cc <_write_r+0x20>)
 80110b0:	4604      	mov	r4, r0
 80110b2:	4608      	mov	r0, r1
 80110b4:	4611      	mov	r1, r2
 80110b6:	2200      	movs	r2, #0
 80110b8:	602a      	str	r2, [r5, #0]
 80110ba:	461a      	mov	r2, r3
 80110bc:	f7f1 f831 	bl	8002122 <_write>
 80110c0:	1c43      	adds	r3, r0, #1
 80110c2:	d102      	bne.n	80110ca <_write_r+0x1e>
 80110c4:	682b      	ldr	r3, [r5, #0]
 80110c6:	b103      	cbz	r3, 80110ca <_write_r+0x1e>
 80110c8:	6023      	str	r3, [r4, #0]
 80110ca:	bd38      	pop	{r3, r4, r5, pc}
 80110cc:	2000bd58 	.word	0x2000bd58

080110d0 <__assert_func>:
 80110d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80110d2:	4614      	mov	r4, r2
 80110d4:	461a      	mov	r2, r3
 80110d6:	4b09      	ldr	r3, [pc, #36]	; (80110fc <__assert_func+0x2c>)
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	4605      	mov	r5, r0
 80110dc:	68d8      	ldr	r0, [r3, #12]
 80110de:	b14c      	cbz	r4, 80110f4 <__assert_func+0x24>
 80110e0:	4b07      	ldr	r3, [pc, #28]	; (8011100 <__assert_func+0x30>)
 80110e2:	9100      	str	r1, [sp, #0]
 80110e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80110e8:	4906      	ldr	r1, [pc, #24]	; (8011104 <__assert_func+0x34>)
 80110ea:	462b      	mov	r3, r5
 80110ec:	f000 f8e0 	bl	80112b0 <fiprintf>
 80110f0:	f000 fe7e 	bl	8011df0 <abort>
 80110f4:	4b04      	ldr	r3, [pc, #16]	; (8011108 <__assert_func+0x38>)
 80110f6:	461c      	mov	r4, r3
 80110f8:	e7f3      	b.n	80110e2 <__assert_func+0x12>
 80110fa:	bf00      	nop
 80110fc:	20000118 	.word	0x20000118
 8011100:	0801291a 	.word	0x0801291a
 8011104:	08012927 	.word	0x08012927
 8011108:	08012955 	.word	0x08012955

0801110c <_close_r>:
 801110c:	b538      	push	{r3, r4, r5, lr}
 801110e:	4d06      	ldr	r5, [pc, #24]	; (8011128 <_close_r+0x1c>)
 8011110:	2300      	movs	r3, #0
 8011112:	4604      	mov	r4, r0
 8011114:	4608      	mov	r0, r1
 8011116:	602b      	str	r3, [r5, #0]
 8011118:	f7f1 f81f 	bl	800215a <_close>
 801111c:	1c43      	adds	r3, r0, #1
 801111e:	d102      	bne.n	8011126 <_close_r+0x1a>
 8011120:	682b      	ldr	r3, [r5, #0]
 8011122:	b103      	cbz	r3, 8011126 <_close_r+0x1a>
 8011124:	6023      	str	r3, [r4, #0]
 8011126:	bd38      	pop	{r3, r4, r5, pc}
 8011128:	2000bd58 	.word	0x2000bd58

0801112c <__sflush_r>:
 801112c:	898a      	ldrh	r2, [r1, #12]
 801112e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011132:	4605      	mov	r5, r0
 8011134:	0710      	lsls	r0, r2, #28
 8011136:	460c      	mov	r4, r1
 8011138:	d458      	bmi.n	80111ec <__sflush_r+0xc0>
 801113a:	684b      	ldr	r3, [r1, #4]
 801113c:	2b00      	cmp	r3, #0
 801113e:	dc05      	bgt.n	801114c <__sflush_r+0x20>
 8011140:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011142:	2b00      	cmp	r3, #0
 8011144:	dc02      	bgt.n	801114c <__sflush_r+0x20>
 8011146:	2000      	movs	r0, #0
 8011148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801114c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801114e:	2e00      	cmp	r6, #0
 8011150:	d0f9      	beq.n	8011146 <__sflush_r+0x1a>
 8011152:	2300      	movs	r3, #0
 8011154:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011158:	682f      	ldr	r7, [r5, #0]
 801115a:	602b      	str	r3, [r5, #0]
 801115c:	d032      	beq.n	80111c4 <__sflush_r+0x98>
 801115e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011160:	89a3      	ldrh	r3, [r4, #12]
 8011162:	075a      	lsls	r2, r3, #29
 8011164:	d505      	bpl.n	8011172 <__sflush_r+0x46>
 8011166:	6863      	ldr	r3, [r4, #4]
 8011168:	1ac0      	subs	r0, r0, r3
 801116a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801116c:	b10b      	cbz	r3, 8011172 <__sflush_r+0x46>
 801116e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011170:	1ac0      	subs	r0, r0, r3
 8011172:	2300      	movs	r3, #0
 8011174:	4602      	mov	r2, r0
 8011176:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011178:	6a21      	ldr	r1, [r4, #32]
 801117a:	4628      	mov	r0, r5
 801117c:	47b0      	blx	r6
 801117e:	1c43      	adds	r3, r0, #1
 8011180:	89a3      	ldrh	r3, [r4, #12]
 8011182:	d106      	bne.n	8011192 <__sflush_r+0x66>
 8011184:	6829      	ldr	r1, [r5, #0]
 8011186:	291d      	cmp	r1, #29
 8011188:	d82c      	bhi.n	80111e4 <__sflush_r+0xb8>
 801118a:	4a2a      	ldr	r2, [pc, #168]	; (8011234 <__sflush_r+0x108>)
 801118c:	40ca      	lsrs	r2, r1
 801118e:	07d6      	lsls	r6, r2, #31
 8011190:	d528      	bpl.n	80111e4 <__sflush_r+0xb8>
 8011192:	2200      	movs	r2, #0
 8011194:	6062      	str	r2, [r4, #4]
 8011196:	04d9      	lsls	r1, r3, #19
 8011198:	6922      	ldr	r2, [r4, #16]
 801119a:	6022      	str	r2, [r4, #0]
 801119c:	d504      	bpl.n	80111a8 <__sflush_r+0x7c>
 801119e:	1c42      	adds	r2, r0, #1
 80111a0:	d101      	bne.n	80111a6 <__sflush_r+0x7a>
 80111a2:	682b      	ldr	r3, [r5, #0]
 80111a4:	b903      	cbnz	r3, 80111a8 <__sflush_r+0x7c>
 80111a6:	6560      	str	r0, [r4, #84]	; 0x54
 80111a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80111aa:	602f      	str	r7, [r5, #0]
 80111ac:	2900      	cmp	r1, #0
 80111ae:	d0ca      	beq.n	8011146 <__sflush_r+0x1a>
 80111b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80111b4:	4299      	cmp	r1, r3
 80111b6:	d002      	beq.n	80111be <__sflush_r+0x92>
 80111b8:	4628      	mov	r0, r5
 80111ba:	f000 f8b1 	bl	8011320 <_free_r>
 80111be:	2000      	movs	r0, #0
 80111c0:	6360      	str	r0, [r4, #52]	; 0x34
 80111c2:	e7c1      	b.n	8011148 <__sflush_r+0x1c>
 80111c4:	6a21      	ldr	r1, [r4, #32]
 80111c6:	2301      	movs	r3, #1
 80111c8:	4628      	mov	r0, r5
 80111ca:	47b0      	blx	r6
 80111cc:	1c41      	adds	r1, r0, #1
 80111ce:	d1c7      	bne.n	8011160 <__sflush_r+0x34>
 80111d0:	682b      	ldr	r3, [r5, #0]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d0c4      	beq.n	8011160 <__sflush_r+0x34>
 80111d6:	2b1d      	cmp	r3, #29
 80111d8:	d001      	beq.n	80111de <__sflush_r+0xb2>
 80111da:	2b16      	cmp	r3, #22
 80111dc:	d101      	bne.n	80111e2 <__sflush_r+0xb6>
 80111de:	602f      	str	r7, [r5, #0]
 80111e0:	e7b1      	b.n	8011146 <__sflush_r+0x1a>
 80111e2:	89a3      	ldrh	r3, [r4, #12]
 80111e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111e8:	81a3      	strh	r3, [r4, #12]
 80111ea:	e7ad      	b.n	8011148 <__sflush_r+0x1c>
 80111ec:	690f      	ldr	r7, [r1, #16]
 80111ee:	2f00      	cmp	r7, #0
 80111f0:	d0a9      	beq.n	8011146 <__sflush_r+0x1a>
 80111f2:	0793      	lsls	r3, r2, #30
 80111f4:	680e      	ldr	r6, [r1, #0]
 80111f6:	bf08      	it	eq
 80111f8:	694b      	ldreq	r3, [r1, #20]
 80111fa:	600f      	str	r7, [r1, #0]
 80111fc:	bf18      	it	ne
 80111fe:	2300      	movne	r3, #0
 8011200:	eba6 0807 	sub.w	r8, r6, r7
 8011204:	608b      	str	r3, [r1, #8]
 8011206:	f1b8 0f00 	cmp.w	r8, #0
 801120a:	dd9c      	ble.n	8011146 <__sflush_r+0x1a>
 801120c:	6a21      	ldr	r1, [r4, #32]
 801120e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011210:	4643      	mov	r3, r8
 8011212:	463a      	mov	r2, r7
 8011214:	4628      	mov	r0, r5
 8011216:	47b0      	blx	r6
 8011218:	2800      	cmp	r0, #0
 801121a:	dc06      	bgt.n	801122a <__sflush_r+0xfe>
 801121c:	89a3      	ldrh	r3, [r4, #12]
 801121e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011222:	81a3      	strh	r3, [r4, #12]
 8011224:	f04f 30ff 	mov.w	r0, #4294967295
 8011228:	e78e      	b.n	8011148 <__sflush_r+0x1c>
 801122a:	4407      	add	r7, r0
 801122c:	eba8 0800 	sub.w	r8, r8, r0
 8011230:	e7e9      	b.n	8011206 <__sflush_r+0xda>
 8011232:	bf00      	nop
 8011234:	20400001 	.word	0x20400001

08011238 <_fflush_r>:
 8011238:	b538      	push	{r3, r4, r5, lr}
 801123a:	690b      	ldr	r3, [r1, #16]
 801123c:	4605      	mov	r5, r0
 801123e:	460c      	mov	r4, r1
 8011240:	b913      	cbnz	r3, 8011248 <_fflush_r+0x10>
 8011242:	2500      	movs	r5, #0
 8011244:	4628      	mov	r0, r5
 8011246:	bd38      	pop	{r3, r4, r5, pc}
 8011248:	b118      	cbz	r0, 8011252 <_fflush_r+0x1a>
 801124a:	6983      	ldr	r3, [r0, #24]
 801124c:	b90b      	cbnz	r3, 8011252 <_fflush_r+0x1a>
 801124e:	f7ff fc73 	bl	8010b38 <__sinit>
 8011252:	4b14      	ldr	r3, [pc, #80]	; (80112a4 <_fflush_r+0x6c>)
 8011254:	429c      	cmp	r4, r3
 8011256:	d11b      	bne.n	8011290 <_fflush_r+0x58>
 8011258:	686c      	ldr	r4, [r5, #4]
 801125a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d0ef      	beq.n	8011242 <_fflush_r+0xa>
 8011262:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011264:	07d0      	lsls	r0, r2, #31
 8011266:	d404      	bmi.n	8011272 <_fflush_r+0x3a>
 8011268:	0599      	lsls	r1, r3, #22
 801126a:	d402      	bmi.n	8011272 <_fflush_r+0x3a>
 801126c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801126e:	f7ff fd26 	bl	8010cbe <__retarget_lock_acquire_recursive>
 8011272:	4628      	mov	r0, r5
 8011274:	4621      	mov	r1, r4
 8011276:	f7ff ff59 	bl	801112c <__sflush_r>
 801127a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801127c:	07da      	lsls	r2, r3, #31
 801127e:	4605      	mov	r5, r0
 8011280:	d4e0      	bmi.n	8011244 <_fflush_r+0xc>
 8011282:	89a3      	ldrh	r3, [r4, #12]
 8011284:	059b      	lsls	r3, r3, #22
 8011286:	d4dd      	bmi.n	8011244 <_fflush_r+0xc>
 8011288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801128a:	f7ff fd19 	bl	8010cc0 <__retarget_lock_release_recursive>
 801128e:	e7d9      	b.n	8011244 <_fflush_r+0xc>
 8011290:	4b05      	ldr	r3, [pc, #20]	; (80112a8 <_fflush_r+0x70>)
 8011292:	429c      	cmp	r4, r3
 8011294:	d101      	bne.n	801129a <_fflush_r+0x62>
 8011296:	68ac      	ldr	r4, [r5, #8]
 8011298:	e7df      	b.n	801125a <_fflush_r+0x22>
 801129a:	4b04      	ldr	r3, [pc, #16]	; (80112ac <_fflush_r+0x74>)
 801129c:	429c      	cmp	r4, r3
 801129e:	bf08      	it	eq
 80112a0:	68ec      	ldreq	r4, [r5, #12]
 80112a2:	e7da      	b.n	801125a <_fflush_r+0x22>
 80112a4:	08012864 	.word	0x08012864
 80112a8:	08012884 	.word	0x08012884
 80112ac:	08012844 	.word	0x08012844

080112b0 <fiprintf>:
 80112b0:	b40e      	push	{r1, r2, r3}
 80112b2:	b503      	push	{r0, r1, lr}
 80112b4:	4601      	mov	r1, r0
 80112b6:	ab03      	add	r3, sp, #12
 80112b8:	4805      	ldr	r0, [pc, #20]	; (80112d0 <fiprintf+0x20>)
 80112ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80112be:	6800      	ldr	r0, [r0, #0]
 80112c0:	9301      	str	r3, [sp, #4]
 80112c2:	f000 f9ff 	bl	80116c4 <_vfiprintf_r>
 80112c6:	b002      	add	sp, #8
 80112c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80112cc:	b003      	add	sp, #12
 80112ce:	4770      	bx	lr
 80112d0:	20000118 	.word	0x20000118

080112d4 <_lseek_r>:
 80112d4:	b538      	push	{r3, r4, r5, lr}
 80112d6:	4d07      	ldr	r5, [pc, #28]	; (80112f4 <_lseek_r+0x20>)
 80112d8:	4604      	mov	r4, r0
 80112da:	4608      	mov	r0, r1
 80112dc:	4611      	mov	r1, r2
 80112de:	2200      	movs	r2, #0
 80112e0:	602a      	str	r2, [r5, #0]
 80112e2:	461a      	mov	r2, r3
 80112e4:	f7f0 ff60 	bl	80021a8 <_lseek>
 80112e8:	1c43      	adds	r3, r0, #1
 80112ea:	d102      	bne.n	80112f2 <_lseek_r+0x1e>
 80112ec:	682b      	ldr	r3, [r5, #0]
 80112ee:	b103      	cbz	r3, 80112f2 <_lseek_r+0x1e>
 80112f0:	6023      	str	r3, [r4, #0]
 80112f2:	bd38      	pop	{r3, r4, r5, pc}
 80112f4:	2000bd58 	.word	0x2000bd58

080112f8 <malloc>:
 80112f8:	4b02      	ldr	r3, [pc, #8]	; (8011304 <malloc+0xc>)
 80112fa:	4601      	mov	r1, r0
 80112fc:	6818      	ldr	r0, [r3, #0]
 80112fe:	f7ff bd17 	b.w	8010d30 <_malloc_r>
 8011302:	bf00      	nop
 8011304:	20000118 	.word	0x20000118

08011308 <__malloc_lock>:
 8011308:	4801      	ldr	r0, [pc, #4]	; (8011310 <__malloc_lock+0x8>)
 801130a:	f7ff bcd8 	b.w	8010cbe <__retarget_lock_acquire_recursive>
 801130e:	bf00      	nop
 8011310:	2000bd4c 	.word	0x2000bd4c

08011314 <__malloc_unlock>:
 8011314:	4801      	ldr	r0, [pc, #4]	; (801131c <__malloc_unlock+0x8>)
 8011316:	f7ff bcd3 	b.w	8010cc0 <__retarget_lock_release_recursive>
 801131a:	bf00      	nop
 801131c:	2000bd4c 	.word	0x2000bd4c

08011320 <_free_r>:
 8011320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011322:	2900      	cmp	r1, #0
 8011324:	d044      	beq.n	80113b0 <_free_r+0x90>
 8011326:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801132a:	9001      	str	r0, [sp, #4]
 801132c:	2b00      	cmp	r3, #0
 801132e:	f1a1 0404 	sub.w	r4, r1, #4
 8011332:	bfb8      	it	lt
 8011334:	18e4      	addlt	r4, r4, r3
 8011336:	f7ff ffe7 	bl	8011308 <__malloc_lock>
 801133a:	4a1e      	ldr	r2, [pc, #120]	; (80113b4 <_free_r+0x94>)
 801133c:	9801      	ldr	r0, [sp, #4]
 801133e:	6813      	ldr	r3, [r2, #0]
 8011340:	b933      	cbnz	r3, 8011350 <_free_r+0x30>
 8011342:	6063      	str	r3, [r4, #4]
 8011344:	6014      	str	r4, [r2, #0]
 8011346:	b003      	add	sp, #12
 8011348:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801134c:	f7ff bfe2 	b.w	8011314 <__malloc_unlock>
 8011350:	42a3      	cmp	r3, r4
 8011352:	d908      	bls.n	8011366 <_free_r+0x46>
 8011354:	6825      	ldr	r5, [r4, #0]
 8011356:	1961      	adds	r1, r4, r5
 8011358:	428b      	cmp	r3, r1
 801135a:	bf01      	itttt	eq
 801135c:	6819      	ldreq	r1, [r3, #0]
 801135e:	685b      	ldreq	r3, [r3, #4]
 8011360:	1949      	addeq	r1, r1, r5
 8011362:	6021      	streq	r1, [r4, #0]
 8011364:	e7ed      	b.n	8011342 <_free_r+0x22>
 8011366:	461a      	mov	r2, r3
 8011368:	685b      	ldr	r3, [r3, #4]
 801136a:	b10b      	cbz	r3, 8011370 <_free_r+0x50>
 801136c:	42a3      	cmp	r3, r4
 801136e:	d9fa      	bls.n	8011366 <_free_r+0x46>
 8011370:	6811      	ldr	r1, [r2, #0]
 8011372:	1855      	adds	r5, r2, r1
 8011374:	42a5      	cmp	r5, r4
 8011376:	d10b      	bne.n	8011390 <_free_r+0x70>
 8011378:	6824      	ldr	r4, [r4, #0]
 801137a:	4421      	add	r1, r4
 801137c:	1854      	adds	r4, r2, r1
 801137e:	42a3      	cmp	r3, r4
 8011380:	6011      	str	r1, [r2, #0]
 8011382:	d1e0      	bne.n	8011346 <_free_r+0x26>
 8011384:	681c      	ldr	r4, [r3, #0]
 8011386:	685b      	ldr	r3, [r3, #4]
 8011388:	6053      	str	r3, [r2, #4]
 801138a:	4421      	add	r1, r4
 801138c:	6011      	str	r1, [r2, #0]
 801138e:	e7da      	b.n	8011346 <_free_r+0x26>
 8011390:	d902      	bls.n	8011398 <_free_r+0x78>
 8011392:	230c      	movs	r3, #12
 8011394:	6003      	str	r3, [r0, #0]
 8011396:	e7d6      	b.n	8011346 <_free_r+0x26>
 8011398:	6825      	ldr	r5, [r4, #0]
 801139a:	1961      	adds	r1, r4, r5
 801139c:	428b      	cmp	r3, r1
 801139e:	bf04      	itt	eq
 80113a0:	6819      	ldreq	r1, [r3, #0]
 80113a2:	685b      	ldreq	r3, [r3, #4]
 80113a4:	6063      	str	r3, [r4, #4]
 80113a6:	bf04      	itt	eq
 80113a8:	1949      	addeq	r1, r1, r5
 80113aa:	6021      	streq	r1, [r4, #0]
 80113ac:	6054      	str	r4, [r2, #4]
 80113ae:	e7ca      	b.n	8011346 <_free_r+0x26>
 80113b0:	b003      	add	sp, #12
 80113b2:	bd30      	pop	{r4, r5, pc}
 80113b4:	2000bd50 	.word	0x2000bd50

080113b8 <__ssputs_r>:
 80113b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113bc:	688e      	ldr	r6, [r1, #8]
 80113be:	429e      	cmp	r6, r3
 80113c0:	4682      	mov	sl, r0
 80113c2:	460c      	mov	r4, r1
 80113c4:	4690      	mov	r8, r2
 80113c6:	461f      	mov	r7, r3
 80113c8:	d838      	bhi.n	801143c <__ssputs_r+0x84>
 80113ca:	898a      	ldrh	r2, [r1, #12]
 80113cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80113d0:	d032      	beq.n	8011438 <__ssputs_r+0x80>
 80113d2:	6825      	ldr	r5, [r4, #0]
 80113d4:	6909      	ldr	r1, [r1, #16]
 80113d6:	eba5 0901 	sub.w	r9, r5, r1
 80113da:	6965      	ldr	r5, [r4, #20]
 80113dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80113e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80113e4:	3301      	adds	r3, #1
 80113e6:	444b      	add	r3, r9
 80113e8:	106d      	asrs	r5, r5, #1
 80113ea:	429d      	cmp	r5, r3
 80113ec:	bf38      	it	cc
 80113ee:	461d      	movcc	r5, r3
 80113f0:	0553      	lsls	r3, r2, #21
 80113f2:	d531      	bpl.n	8011458 <__ssputs_r+0xa0>
 80113f4:	4629      	mov	r1, r5
 80113f6:	f7ff fc9b 	bl	8010d30 <_malloc_r>
 80113fa:	4606      	mov	r6, r0
 80113fc:	b950      	cbnz	r0, 8011414 <__ssputs_r+0x5c>
 80113fe:	230c      	movs	r3, #12
 8011400:	f8ca 3000 	str.w	r3, [sl]
 8011404:	89a3      	ldrh	r3, [r4, #12]
 8011406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801140a:	81a3      	strh	r3, [r4, #12]
 801140c:	f04f 30ff 	mov.w	r0, #4294967295
 8011410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011414:	6921      	ldr	r1, [r4, #16]
 8011416:	464a      	mov	r2, r9
 8011418:	f7ff fc53 	bl	8010cc2 <memcpy>
 801141c:	89a3      	ldrh	r3, [r4, #12]
 801141e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011426:	81a3      	strh	r3, [r4, #12]
 8011428:	6126      	str	r6, [r4, #16]
 801142a:	6165      	str	r5, [r4, #20]
 801142c:	444e      	add	r6, r9
 801142e:	eba5 0509 	sub.w	r5, r5, r9
 8011432:	6026      	str	r6, [r4, #0]
 8011434:	60a5      	str	r5, [r4, #8]
 8011436:	463e      	mov	r6, r7
 8011438:	42be      	cmp	r6, r7
 801143a:	d900      	bls.n	801143e <__ssputs_r+0x86>
 801143c:	463e      	mov	r6, r7
 801143e:	6820      	ldr	r0, [r4, #0]
 8011440:	4632      	mov	r2, r6
 8011442:	4641      	mov	r1, r8
 8011444:	f000 fd40 	bl	8011ec8 <memmove>
 8011448:	68a3      	ldr	r3, [r4, #8]
 801144a:	1b9b      	subs	r3, r3, r6
 801144c:	60a3      	str	r3, [r4, #8]
 801144e:	6823      	ldr	r3, [r4, #0]
 8011450:	4433      	add	r3, r6
 8011452:	6023      	str	r3, [r4, #0]
 8011454:	2000      	movs	r0, #0
 8011456:	e7db      	b.n	8011410 <__ssputs_r+0x58>
 8011458:	462a      	mov	r2, r5
 801145a:	f000 fd4f 	bl	8011efc <_realloc_r>
 801145e:	4606      	mov	r6, r0
 8011460:	2800      	cmp	r0, #0
 8011462:	d1e1      	bne.n	8011428 <__ssputs_r+0x70>
 8011464:	6921      	ldr	r1, [r4, #16]
 8011466:	4650      	mov	r0, sl
 8011468:	f7ff ff5a 	bl	8011320 <_free_r>
 801146c:	e7c7      	b.n	80113fe <__ssputs_r+0x46>
	...

08011470 <_svfiprintf_r>:
 8011470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011474:	4698      	mov	r8, r3
 8011476:	898b      	ldrh	r3, [r1, #12]
 8011478:	061b      	lsls	r3, r3, #24
 801147a:	b09d      	sub	sp, #116	; 0x74
 801147c:	4607      	mov	r7, r0
 801147e:	460d      	mov	r5, r1
 8011480:	4614      	mov	r4, r2
 8011482:	d50e      	bpl.n	80114a2 <_svfiprintf_r+0x32>
 8011484:	690b      	ldr	r3, [r1, #16]
 8011486:	b963      	cbnz	r3, 80114a2 <_svfiprintf_r+0x32>
 8011488:	2140      	movs	r1, #64	; 0x40
 801148a:	f7ff fc51 	bl	8010d30 <_malloc_r>
 801148e:	6028      	str	r0, [r5, #0]
 8011490:	6128      	str	r0, [r5, #16]
 8011492:	b920      	cbnz	r0, 801149e <_svfiprintf_r+0x2e>
 8011494:	230c      	movs	r3, #12
 8011496:	603b      	str	r3, [r7, #0]
 8011498:	f04f 30ff 	mov.w	r0, #4294967295
 801149c:	e0d1      	b.n	8011642 <_svfiprintf_r+0x1d2>
 801149e:	2340      	movs	r3, #64	; 0x40
 80114a0:	616b      	str	r3, [r5, #20]
 80114a2:	2300      	movs	r3, #0
 80114a4:	9309      	str	r3, [sp, #36]	; 0x24
 80114a6:	2320      	movs	r3, #32
 80114a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80114ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80114b0:	2330      	movs	r3, #48	; 0x30
 80114b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801165c <_svfiprintf_r+0x1ec>
 80114b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80114ba:	f04f 0901 	mov.w	r9, #1
 80114be:	4623      	mov	r3, r4
 80114c0:	469a      	mov	sl, r3
 80114c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80114c6:	b10a      	cbz	r2, 80114cc <_svfiprintf_r+0x5c>
 80114c8:	2a25      	cmp	r2, #37	; 0x25
 80114ca:	d1f9      	bne.n	80114c0 <_svfiprintf_r+0x50>
 80114cc:	ebba 0b04 	subs.w	fp, sl, r4
 80114d0:	d00b      	beq.n	80114ea <_svfiprintf_r+0x7a>
 80114d2:	465b      	mov	r3, fp
 80114d4:	4622      	mov	r2, r4
 80114d6:	4629      	mov	r1, r5
 80114d8:	4638      	mov	r0, r7
 80114da:	f7ff ff6d 	bl	80113b8 <__ssputs_r>
 80114de:	3001      	adds	r0, #1
 80114e0:	f000 80aa 	beq.w	8011638 <_svfiprintf_r+0x1c8>
 80114e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80114e6:	445a      	add	r2, fp
 80114e8:	9209      	str	r2, [sp, #36]	; 0x24
 80114ea:	f89a 3000 	ldrb.w	r3, [sl]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	f000 80a2 	beq.w	8011638 <_svfiprintf_r+0x1c8>
 80114f4:	2300      	movs	r3, #0
 80114f6:	f04f 32ff 	mov.w	r2, #4294967295
 80114fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80114fe:	f10a 0a01 	add.w	sl, sl, #1
 8011502:	9304      	str	r3, [sp, #16]
 8011504:	9307      	str	r3, [sp, #28]
 8011506:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801150a:	931a      	str	r3, [sp, #104]	; 0x68
 801150c:	4654      	mov	r4, sl
 801150e:	2205      	movs	r2, #5
 8011510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011514:	4851      	ldr	r0, [pc, #324]	; (801165c <_svfiprintf_r+0x1ec>)
 8011516:	f7ee fe6b 	bl	80001f0 <memchr>
 801151a:	9a04      	ldr	r2, [sp, #16]
 801151c:	b9d8      	cbnz	r0, 8011556 <_svfiprintf_r+0xe6>
 801151e:	06d0      	lsls	r0, r2, #27
 8011520:	bf44      	itt	mi
 8011522:	2320      	movmi	r3, #32
 8011524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011528:	0711      	lsls	r1, r2, #28
 801152a:	bf44      	itt	mi
 801152c:	232b      	movmi	r3, #43	; 0x2b
 801152e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011532:	f89a 3000 	ldrb.w	r3, [sl]
 8011536:	2b2a      	cmp	r3, #42	; 0x2a
 8011538:	d015      	beq.n	8011566 <_svfiprintf_r+0xf6>
 801153a:	9a07      	ldr	r2, [sp, #28]
 801153c:	4654      	mov	r4, sl
 801153e:	2000      	movs	r0, #0
 8011540:	f04f 0c0a 	mov.w	ip, #10
 8011544:	4621      	mov	r1, r4
 8011546:	f811 3b01 	ldrb.w	r3, [r1], #1
 801154a:	3b30      	subs	r3, #48	; 0x30
 801154c:	2b09      	cmp	r3, #9
 801154e:	d94e      	bls.n	80115ee <_svfiprintf_r+0x17e>
 8011550:	b1b0      	cbz	r0, 8011580 <_svfiprintf_r+0x110>
 8011552:	9207      	str	r2, [sp, #28]
 8011554:	e014      	b.n	8011580 <_svfiprintf_r+0x110>
 8011556:	eba0 0308 	sub.w	r3, r0, r8
 801155a:	fa09 f303 	lsl.w	r3, r9, r3
 801155e:	4313      	orrs	r3, r2
 8011560:	9304      	str	r3, [sp, #16]
 8011562:	46a2      	mov	sl, r4
 8011564:	e7d2      	b.n	801150c <_svfiprintf_r+0x9c>
 8011566:	9b03      	ldr	r3, [sp, #12]
 8011568:	1d19      	adds	r1, r3, #4
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	9103      	str	r1, [sp, #12]
 801156e:	2b00      	cmp	r3, #0
 8011570:	bfbb      	ittet	lt
 8011572:	425b      	neglt	r3, r3
 8011574:	f042 0202 	orrlt.w	r2, r2, #2
 8011578:	9307      	strge	r3, [sp, #28]
 801157a:	9307      	strlt	r3, [sp, #28]
 801157c:	bfb8      	it	lt
 801157e:	9204      	strlt	r2, [sp, #16]
 8011580:	7823      	ldrb	r3, [r4, #0]
 8011582:	2b2e      	cmp	r3, #46	; 0x2e
 8011584:	d10c      	bne.n	80115a0 <_svfiprintf_r+0x130>
 8011586:	7863      	ldrb	r3, [r4, #1]
 8011588:	2b2a      	cmp	r3, #42	; 0x2a
 801158a:	d135      	bne.n	80115f8 <_svfiprintf_r+0x188>
 801158c:	9b03      	ldr	r3, [sp, #12]
 801158e:	1d1a      	adds	r2, r3, #4
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	9203      	str	r2, [sp, #12]
 8011594:	2b00      	cmp	r3, #0
 8011596:	bfb8      	it	lt
 8011598:	f04f 33ff 	movlt.w	r3, #4294967295
 801159c:	3402      	adds	r4, #2
 801159e:	9305      	str	r3, [sp, #20]
 80115a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801166c <_svfiprintf_r+0x1fc>
 80115a4:	7821      	ldrb	r1, [r4, #0]
 80115a6:	2203      	movs	r2, #3
 80115a8:	4650      	mov	r0, sl
 80115aa:	f7ee fe21 	bl	80001f0 <memchr>
 80115ae:	b140      	cbz	r0, 80115c2 <_svfiprintf_r+0x152>
 80115b0:	2340      	movs	r3, #64	; 0x40
 80115b2:	eba0 000a 	sub.w	r0, r0, sl
 80115b6:	fa03 f000 	lsl.w	r0, r3, r0
 80115ba:	9b04      	ldr	r3, [sp, #16]
 80115bc:	4303      	orrs	r3, r0
 80115be:	3401      	adds	r4, #1
 80115c0:	9304      	str	r3, [sp, #16]
 80115c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115c6:	4826      	ldr	r0, [pc, #152]	; (8011660 <_svfiprintf_r+0x1f0>)
 80115c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80115cc:	2206      	movs	r2, #6
 80115ce:	f7ee fe0f 	bl	80001f0 <memchr>
 80115d2:	2800      	cmp	r0, #0
 80115d4:	d038      	beq.n	8011648 <_svfiprintf_r+0x1d8>
 80115d6:	4b23      	ldr	r3, [pc, #140]	; (8011664 <_svfiprintf_r+0x1f4>)
 80115d8:	bb1b      	cbnz	r3, 8011622 <_svfiprintf_r+0x1b2>
 80115da:	9b03      	ldr	r3, [sp, #12]
 80115dc:	3307      	adds	r3, #7
 80115de:	f023 0307 	bic.w	r3, r3, #7
 80115e2:	3308      	adds	r3, #8
 80115e4:	9303      	str	r3, [sp, #12]
 80115e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115e8:	4433      	add	r3, r6
 80115ea:	9309      	str	r3, [sp, #36]	; 0x24
 80115ec:	e767      	b.n	80114be <_svfiprintf_r+0x4e>
 80115ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80115f2:	460c      	mov	r4, r1
 80115f4:	2001      	movs	r0, #1
 80115f6:	e7a5      	b.n	8011544 <_svfiprintf_r+0xd4>
 80115f8:	2300      	movs	r3, #0
 80115fa:	3401      	adds	r4, #1
 80115fc:	9305      	str	r3, [sp, #20]
 80115fe:	4619      	mov	r1, r3
 8011600:	f04f 0c0a 	mov.w	ip, #10
 8011604:	4620      	mov	r0, r4
 8011606:	f810 2b01 	ldrb.w	r2, [r0], #1
 801160a:	3a30      	subs	r2, #48	; 0x30
 801160c:	2a09      	cmp	r2, #9
 801160e:	d903      	bls.n	8011618 <_svfiprintf_r+0x1a8>
 8011610:	2b00      	cmp	r3, #0
 8011612:	d0c5      	beq.n	80115a0 <_svfiprintf_r+0x130>
 8011614:	9105      	str	r1, [sp, #20]
 8011616:	e7c3      	b.n	80115a0 <_svfiprintf_r+0x130>
 8011618:	fb0c 2101 	mla	r1, ip, r1, r2
 801161c:	4604      	mov	r4, r0
 801161e:	2301      	movs	r3, #1
 8011620:	e7f0      	b.n	8011604 <_svfiprintf_r+0x194>
 8011622:	ab03      	add	r3, sp, #12
 8011624:	9300      	str	r3, [sp, #0]
 8011626:	462a      	mov	r2, r5
 8011628:	4b0f      	ldr	r3, [pc, #60]	; (8011668 <_svfiprintf_r+0x1f8>)
 801162a:	a904      	add	r1, sp, #16
 801162c:	4638      	mov	r0, r7
 801162e:	f3af 8000 	nop.w
 8011632:	1c42      	adds	r2, r0, #1
 8011634:	4606      	mov	r6, r0
 8011636:	d1d6      	bne.n	80115e6 <_svfiprintf_r+0x176>
 8011638:	89ab      	ldrh	r3, [r5, #12]
 801163a:	065b      	lsls	r3, r3, #25
 801163c:	f53f af2c 	bmi.w	8011498 <_svfiprintf_r+0x28>
 8011640:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011642:	b01d      	add	sp, #116	; 0x74
 8011644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011648:	ab03      	add	r3, sp, #12
 801164a:	9300      	str	r3, [sp, #0]
 801164c:	462a      	mov	r2, r5
 801164e:	4b06      	ldr	r3, [pc, #24]	; (8011668 <_svfiprintf_r+0x1f8>)
 8011650:	a904      	add	r1, sp, #16
 8011652:	4638      	mov	r0, r7
 8011654:	f000 f9d4 	bl	8011a00 <_printf_i>
 8011658:	e7eb      	b.n	8011632 <_svfiprintf_r+0x1c2>
 801165a:	bf00      	nop
 801165c:	08012956 	.word	0x08012956
 8011660:	08012960 	.word	0x08012960
 8011664:	00000000 	.word	0x00000000
 8011668:	080113b9 	.word	0x080113b9
 801166c:	0801295c 	.word	0x0801295c

08011670 <__sfputc_r>:
 8011670:	6893      	ldr	r3, [r2, #8]
 8011672:	3b01      	subs	r3, #1
 8011674:	2b00      	cmp	r3, #0
 8011676:	b410      	push	{r4}
 8011678:	6093      	str	r3, [r2, #8]
 801167a:	da08      	bge.n	801168e <__sfputc_r+0x1e>
 801167c:	6994      	ldr	r4, [r2, #24]
 801167e:	42a3      	cmp	r3, r4
 8011680:	db01      	blt.n	8011686 <__sfputc_r+0x16>
 8011682:	290a      	cmp	r1, #10
 8011684:	d103      	bne.n	801168e <__sfputc_r+0x1e>
 8011686:	f85d 4b04 	ldr.w	r4, [sp], #4
 801168a:	f000 baf1 	b.w	8011c70 <__swbuf_r>
 801168e:	6813      	ldr	r3, [r2, #0]
 8011690:	1c58      	adds	r0, r3, #1
 8011692:	6010      	str	r0, [r2, #0]
 8011694:	7019      	strb	r1, [r3, #0]
 8011696:	4608      	mov	r0, r1
 8011698:	f85d 4b04 	ldr.w	r4, [sp], #4
 801169c:	4770      	bx	lr

0801169e <__sfputs_r>:
 801169e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116a0:	4606      	mov	r6, r0
 80116a2:	460f      	mov	r7, r1
 80116a4:	4614      	mov	r4, r2
 80116a6:	18d5      	adds	r5, r2, r3
 80116a8:	42ac      	cmp	r4, r5
 80116aa:	d101      	bne.n	80116b0 <__sfputs_r+0x12>
 80116ac:	2000      	movs	r0, #0
 80116ae:	e007      	b.n	80116c0 <__sfputs_r+0x22>
 80116b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116b4:	463a      	mov	r2, r7
 80116b6:	4630      	mov	r0, r6
 80116b8:	f7ff ffda 	bl	8011670 <__sfputc_r>
 80116bc:	1c43      	adds	r3, r0, #1
 80116be:	d1f3      	bne.n	80116a8 <__sfputs_r+0xa>
 80116c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080116c4 <_vfiprintf_r>:
 80116c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116c8:	460d      	mov	r5, r1
 80116ca:	b09d      	sub	sp, #116	; 0x74
 80116cc:	4614      	mov	r4, r2
 80116ce:	4698      	mov	r8, r3
 80116d0:	4606      	mov	r6, r0
 80116d2:	b118      	cbz	r0, 80116dc <_vfiprintf_r+0x18>
 80116d4:	6983      	ldr	r3, [r0, #24]
 80116d6:	b90b      	cbnz	r3, 80116dc <_vfiprintf_r+0x18>
 80116d8:	f7ff fa2e 	bl	8010b38 <__sinit>
 80116dc:	4b89      	ldr	r3, [pc, #548]	; (8011904 <_vfiprintf_r+0x240>)
 80116de:	429d      	cmp	r5, r3
 80116e0:	d11b      	bne.n	801171a <_vfiprintf_r+0x56>
 80116e2:	6875      	ldr	r5, [r6, #4]
 80116e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80116e6:	07d9      	lsls	r1, r3, #31
 80116e8:	d405      	bmi.n	80116f6 <_vfiprintf_r+0x32>
 80116ea:	89ab      	ldrh	r3, [r5, #12]
 80116ec:	059a      	lsls	r2, r3, #22
 80116ee:	d402      	bmi.n	80116f6 <_vfiprintf_r+0x32>
 80116f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80116f2:	f7ff fae4 	bl	8010cbe <__retarget_lock_acquire_recursive>
 80116f6:	89ab      	ldrh	r3, [r5, #12]
 80116f8:	071b      	lsls	r3, r3, #28
 80116fa:	d501      	bpl.n	8011700 <_vfiprintf_r+0x3c>
 80116fc:	692b      	ldr	r3, [r5, #16]
 80116fe:	b9eb      	cbnz	r3, 801173c <_vfiprintf_r+0x78>
 8011700:	4629      	mov	r1, r5
 8011702:	4630      	mov	r0, r6
 8011704:	f000 fb06 	bl	8011d14 <__swsetup_r>
 8011708:	b1c0      	cbz	r0, 801173c <_vfiprintf_r+0x78>
 801170a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801170c:	07dc      	lsls	r4, r3, #31
 801170e:	d50e      	bpl.n	801172e <_vfiprintf_r+0x6a>
 8011710:	f04f 30ff 	mov.w	r0, #4294967295
 8011714:	b01d      	add	sp, #116	; 0x74
 8011716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801171a:	4b7b      	ldr	r3, [pc, #492]	; (8011908 <_vfiprintf_r+0x244>)
 801171c:	429d      	cmp	r5, r3
 801171e:	d101      	bne.n	8011724 <_vfiprintf_r+0x60>
 8011720:	68b5      	ldr	r5, [r6, #8]
 8011722:	e7df      	b.n	80116e4 <_vfiprintf_r+0x20>
 8011724:	4b79      	ldr	r3, [pc, #484]	; (801190c <_vfiprintf_r+0x248>)
 8011726:	429d      	cmp	r5, r3
 8011728:	bf08      	it	eq
 801172a:	68f5      	ldreq	r5, [r6, #12]
 801172c:	e7da      	b.n	80116e4 <_vfiprintf_r+0x20>
 801172e:	89ab      	ldrh	r3, [r5, #12]
 8011730:	0598      	lsls	r0, r3, #22
 8011732:	d4ed      	bmi.n	8011710 <_vfiprintf_r+0x4c>
 8011734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011736:	f7ff fac3 	bl	8010cc0 <__retarget_lock_release_recursive>
 801173a:	e7e9      	b.n	8011710 <_vfiprintf_r+0x4c>
 801173c:	2300      	movs	r3, #0
 801173e:	9309      	str	r3, [sp, #36]	; 0x24
 8011740:	2320      	movs	r3, #32
 8011742:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011746:	f8cd 800c 	str.w	r8, [sp, #12]
 801174a:	2330      	movs	r3, #48	; 0x30
 801174c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011910 <_vfiprintf_r+0x24c>
 8011750:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011754:	f04f 0901 	mov.w	r9, #1
 8011758:	4623      	mov	r3, r4
 801175a:	469a      	mov	sl, r3
 801175c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011760:	b10a      	cbz	r2, 8011766 <_vfiprintf_r+0xa2>
 8011762:	2a25      	cmp	r2, #37	; 0x25
 8011764:	d1f9      	bne.n	801175a <_vfiprintf_r+0x96>
 8011766:	ebba 0b04 	subs.w	fp, sl, r4
 801176a:	d00b      	beq.n	8011784 <_vfiprintf_r+0xc0>
 801176c:	465b      	mov	r3, fp
 801176e:	4622      	mov	r2, r4
 8011770:	4629      	mov	r1, r5
 8011772:	4630      	mov	r0, r6
 8011774:	f7ff ff93 	bl	801169e <__sfputs_r>
 8011778:	3001      	adds	r0, #1
 801177a:	f000 80aa 	beq.w	80118d2 <_vfiprintf_r+0x20e>
 801177e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011780:	445a      	add	r2, fp
 8011782:	9209      	str	r2, [sp, #36]	; 0x24
 8011784:	f89a 3000 	ldrb.w	r3, [sl]
 8011788:	2b00      	cmp	r3, #0
 801178a:	f000 80a2 	beq.w	80118d2 <_vfiprintf_r+0x20e>
 801178e:	2300      	movs	r3, #0
 8011790:	f04f 32ff 	mov.w	r2, #4294967295
 8011794:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011798:	f10a 0a01 	add.w	sl, sl, #1
 801179c:	9304      	str	r3, [sp, #16]
 801179e:	9307      	str	r3, [sp, #28]
 80117a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80117a4:	931a      	str	r3, [sp, #104]	; 0x68
 80117a6:	4654      	mov	r4, sl
 80117a8:	2205      	movs	r2, #5
 80117aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117ae:	4858      	ldr	r0, [pc, #352]	; (8011910 <_vfiprintf_r+0x24c>)
 80117b0:	f7ee fd1e 	bl	80001f0 <memchr>
 80117b4:	9a04      	ldr	r2, [sp, #16]
 80117b6:	b9d8      	cbnz	r0, 80117f0 <_vfiprintf_r+0x12c>
 80117b8:	06d1      	lsls	r1, r2, #27
 80117ba:	bf44      	itt	mi
 80117bc:	2320      	movmi	r3, #32
 80117be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80117c2:	0713      	lsls	r3, r2, #28
 80117c4:	bf44      	itt	mi
 80117c6:	232b      	movmi	r3, #43	; 0x2b
 80117c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80117cc:	f89a 3000 	ldrb.w	r3, [sl]
 80117d0:	2b2a      	cmp	r3, #42	; 0x2a
 80117d2:	d015      	beq.n	8011800 <_vfiprintf_r+0x13c>
 80117d4:	9a07      	ldr	r2, [sp, #28]
 80117d6:	4654      	mov	r4, sl
 80117d8:	2000      	movs	r0, #0
 80117da:	f04f 0c0a 	mov.w	ip, #10
 80117de:	4621      	mov	r1, r4
 80117e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80117e4:	3b30      	subs	r3, #48	; 0x30
 80117e6:	2b09      	cmp	r3, #9
 80117e8:	d94e      	bls.n	8011888 <_vfiprintf_r+0x1c4>
 80117ea:	b1b0      	cbz	r0, 801181a <_vfiprintf_r+0x156>
 80117ec:	9207      	str	r2, [sp, #28]
 80117ee:	e014      	b.n	801181a <_vfiprintf_r+0x156>
 80117f0:	eba0 0308 	sub.w	r3, r0, r8
 80117f4:	fa09 f303 	lsl.w	r3, r9, r3
 80117f8:	4313      	orrs	r3, r2
 80117fa:	9304      	str	r3, [sp, #16]
 80117fc:	46a2      	mov	sl, r4
 80117fe:	e7d2      	b.n	80117a6 <_vfiprintf_r+0xe2>
 8011800:	9b03      	ldr	r3, [sp, #12]
 8011802:	1d19      	adds	r1, r3, #4
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	9103      	str	r1, [sp, #12]
 8011808:	2b00      	cmp	r3, #0
 801180a:	bfbb      	ittet	lt
 801180c:	425b      	neglt	r3, r3
 801180e:	f042 0202 	orrlt.w	r2, r2, #2
 8011812:	9307      	strge	r3, [sp, #28]
 8011814:	9307      	strlt	r3, [sp, #28]
 8011816:	bfb8      	it	lt
 8011818:	9204      	strlt	r2, [sp, #16]
 801181a:	7823      	ldrb	r3, [r4, #0]
 801181c:	2b2e      	cmp	r3, #46	; 0x2e
 801181e:	d10c      	bne.n	801183a <_vfiprintf_r+0x176>
 8011820:	7863      	ldrb	r3, [r4, #1]
 8011822:	2b2a      	cmp	r3, #42	; 0x2a
 8011824:	d135      	bne.n	8011892 <_vfiprintf_r+0x1ce>
 8011826:	9b03      	ldr	r3, [sp, #12]
 8011828:	1d1a      	adds	r2, r3, #4
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	9203      	str	r2, [sp, #12]
 801182e:	2b00      	cmp	r3, #0
 8011830:	bfb8      	it	lt
 8011832:	f04f 33ff 	movlt.w	r3, #4294967295
 8011836:	3402      	adds	r4, #2
 8011838:	9305      	str	r3, [sp, #20]
 801183a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011920 <_vfiprintf_r+0x25c>
 801183e:	7821      	ldrb	r1, [r4, #0]
 8011840:	2203      	movs	r2, #3
 8011842:	4650      	mov	r0, sl
 8011844:	f7ee fcd4 	bl	80001f0 <memchr>
 8011848:	b140      	cbz	r0, 801185c <_vfiprintf_r+0x198>
 801184a:	2340      	movs	r3, #64	; 0x40
 801184c:	eba0 000a 	sub.w	r0, r0, sl
 8011850:	fa03 f000 	lsl.w	r0, r3, r0
 8011854:	9b04      	ldr	r3, [sp, #16]
 8011856:	4303      	orrs	r3, r0
 8011858:	3401      	adds	r4, #1
 801185a:	9304      	str	r3, [sp, #16]
 801185c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011860:	482c      	ldr	r0, [pc, #176]	; (8011914 <_vfiprintf_r+0x250>)
 8011862:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011866:	2206      	movs	r2, #6
 8011868:	f7ee fcc2 	bl	80001f0 <memchr>
 801186c:	2800      	cmp	r0, #0
 801186e:	d03f      	beq.n	80118f0 <_vfiprintf_r+0x22c>
 8011870:	4b29      	ldr	r3, [pc, #164]	; (8011918 <_vfiprintf_r+0x254>)
 8011872:	bb1b      	cbnz	r3, 80118bc <_vfiprintf_r+0x1f8>
 8011874:	9b03      	ldr	r3, [sp, #12]
 8011876:	3307      	adds	r3, #7
 8011878:	f023 0307 	bic.w	r3, r3, #7
 801187c:	3308      	adds	r3, #8
 801187e:	9303      	str	r3, [sp, #12]
 8011880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011882:	443b      	add	r3, r7
 8011884:	9309      	str	r3, [sp, #36]	; 0x24
 8011886:	e767      	b.n	8011758 <_vfiprintf_r+0x94>
 8011888:	fb0c 3202 	mla	r2, ip, r2, r3
 801188c:	460c      	mov	r4, r1
 801188e:	2001      	movs	r0, #1
 8011890:	e7a5      	b.n	80117de <_vfiprintf_r+0x11a>
 8011892:	2300      	movs	r3, #0
 8011894:	3401      	adds	r4, #1
 8011896:	9305      	str	r3, [sp, #20]
 8011898:	4619      	mov	r1, r3
 801189a:	f04f 0c0a 	mov.w	ip, #10
 801189e:	4620      	mov	r0, r4
 80118a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80118a4:	3a30      	subs	r2, #48	; 0x30
 80118a6:	2a09      	cmp	r2, #9
 80118a8:	d903      	bls.n	80118b2 <_vfiprintf_r+0x1ee>
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d0c5      	beq.n	801183a <_vfiprintf_r+0x176>
 80118ae:	9105      	str	r1, [sp, #20]
 80118b0:	e7c3      	b.n	801183a <_vfiprintf_r+0x176>
 80118b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80118b6:	4604      	mov	r4, r0
 80118b8:	2301      	movs	r3, #1
 80118ba:	e7f0      	b.n	801189e <_vfiprintf_r+0x1da>
 80118bc:	ab03      	add	r3, sp, #12
 80118be:	9300      	str	r3, [sp, #0]
 80118c0:	462a      	mov	r2, r5
 80118c2:	4b16      	ldr	r3, [pc, #88]	; (801191c <_vfiprintf_r+0x258>)
 80118c4:	a904      	add	r1, sp, #16
 80118c6:	4630      	mov	r0, r6
 80118c8:	f3af 8000 	nop.w
 80118cc:	4607      	mov	r7, r0
 80118ce:	1c78      	adds	r0, r7, #1
 80118d0:	d1d6      	bne.n	8011880 <_vfiprintf_r+0x1bc>
 80118d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80118d4:	07d9      	lsls	r1, r3, #31
 80118d6:	d405      	bmi.n	80118e4 <_vfiprintf_r+0x220>
 80118d8:	89ab      	ldrh	r3, [r5, #12]
 80118da:	059a      	lsls	r2, r3, #22
 80118dc:	d402      	bmi.n	80118e4 <_vfiprintf_r+0x220>
 80118de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80118e0:	f7ff f9ee 	bl	8010cc0 <__retarget_lock_release_recursive>
 80118e4:	89ab      	ldrh	r3, [r5, #12]
 80118e6:	065b      	lsls	r3, r3, #25
 80118e8:	f53f af12 	bmi.w	8011710 <_vfiprintf_r+0x4c>
 80118ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80118ee:	e711      	b.n	8011714 <_vfiprintf_r+0x50>
 80118f0:	ab03      	add	r3, sp, #12
 80118f2:	9300      	str	r3, [sp, #0]
 80118f4:	462a      	mov	r2, r5
 80118f6:	4b09      	ldr	r3, [pc, #36]	; (801191c <_vfiprintf_r+0x258>)
 80118f8:	a904      	add	r1, sp, #16
 80118fa:	4630      	mov	r0, r6
 80118fc:	f000 f880 	bl	8011a00 <_printf_i>
 8011900:	e7e4      	b.n	80118cc <_vfiprintf_r+0x208>
 8011902:	bf00      	nop
 8011904:	08012864 	.word	0x08012864
 8011908:	08012884 	.word	0x08012884
 801190c:	08012844 	.word	0x08012844
 8011910:	08012956 	.word	0x08012956
 8011914:	08012960 	.word	0x08012960
 8011918:	00000000 	.word	0x00000000
 801191c:	0801169f 	.word	0x0801169f
 8011920:	0801295c 	.word	0x0801295c

08011924 <_printf_common>:
 8011924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011928:	4616      	mov	r6, r2
 801192a:	4699      	mov	r9, r3
 801192c:	688a      	ldr	r2, [r1, #8]
 801192e:	690b      	ldr	r3, [r1, #16]
 8011930:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011934:	4293      	cmp	r3, r2
 8011936:	bfb8      	it	lt
 8011938:	4613      	movlt	r3, r2
 801193a:	6033      	str	r3, [r6, #0]
 801193c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011940:	4607      	mov	r7, r0
 8011942:	460c      	mov	r4, r1
 8011944:	b10a      	cbz	r2, 801194a <_printf_common+0x26>
 8011946:	3301      	adds	r3, #1
 8011948:	6033      	str	r3, [r6, #0]
 801194a:	6823      	ldr	r3, [r4, #0]
 801194c:	0699      	lsls	r1, r3, #26
 801194e:	bf42      	ittt	mi
 8011950:	6833      	ldrmi	r3, [r6, #0]
 8011952:	3302      	addmi	r3, #2
 8011954:	6033      	strmi	r3, [r6, #0]
 8011956:	6825      	ldr	r5, [r4, #0]
 8011958:	f015 0506 	ands.w	r5, r5, #6
 801195c:	d106      	bne.n	801196c <_printf_common+0x48>
 801195e:	f104 0a19 	add.w	sl, r4, #25
 8011962:	68e3      	ldr	r3, [r4, #12]
 8011964:	6832      	ldr	r2, [r6, #0]
 8011966:	1a9b      	subs	r3, r3, r2
 8011968:	42ab      	cmp	r3, r5
 801196a:	dc26      	bgt.n	80119ba <_printf_common+0x96>
 801196c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011970:	1e13      	subs	r3, r2, #0
 8011972:	6822      	ldr	r2, [r4, #0]
 8011974:	bf18      	it	ne
 8011976:	2301      	movne	r3, #1
 8011978:	0692      	lsls	r2, r2, #26
 801197a:	d42b      	bmi.n	80119d4 <_printf_common+0xb0>
 801197c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011980:	4649      	mov	r1, r9
 8011982:	4638      	mov	r0, r7
 8011984:	47c0      	blx	r8
 8011986:	3001      	adds	r0, #1
 8011988:	d01e      	beq.n	80119c8 <_printf_common+0xa4>
 801198a:	6823      	ldr	r3, [r4, #0]
 801198c:	68e5      	ldr	r5, [r4, #12]
 801198e:	6832      	ldr	r2, [r6, #0]
 8011990:	f003 0306 	and.w	r3, r3, #6
 8011994:	2b04      	cmp	r3, #4
 8011996:	bf08      	it	eq
 8011998:	1aad      	subeq	r5, r5, r2
 801199a:	68a3      	ldr	r3, [r4, #8]
 801199c:	6922      	ldr	r2, [r4, #16]
 801199e:	bf0c      	ite	eq
 80119a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80119a4:	2500      	movne	r5, #0
 80119a6:	4293      	cmp	r3, r2
 80119a8:	bfc4      	itt	gt
 80119aa:	1a9b      	subgt	r3, r3, r2
 80119ac:	18ed      	addgt	r5, r5, r3
 80119ae:	2600      	movs	r6, #0
 80119b0:	341a      	adds	r4, #26
 80119b2:	42b5      	cmp	r5, r6
 80119b4:	d11a      	bne.n	80119ec <_printf_common+0xc8>
 80119b6:	2000      	movs	r0, #0
 80119b8:	e008      	b.n	80119cc <_printf_common+0xa8>
 80119ba:	2301      	movs	r3, #1
 80119bc:	4652      	mov	r2, sl
 80119be:	4649      	mov	r1, r9
 80119c0:	4638      	mov	r0, r7
 80119c2:	47c0      	blx	r8
 80119c4:	3001      	adds	r0, #1
 80119c6:	d103      	bne.n	80119d0 <_printf_common+0xac>
 80119c8:	f04f 30ff 	mov.w	r0, #4294967295
 80119cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119d0:	3501      	adds	r5, #1
 80119d2:	e7c6      	b.n	8011962 <_printf_common+0x3e>
 80119d4:	18e1      	adds	r1, r4, r3
 80119d6:	1c5a      	adds	r2, r3, #1
 80119d8:	2030      	movs	r0, #48	; 0x30
 80119da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80119de:	4422      	add	r2, r4
 80119e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80119e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80119e8:	3302      	adds	r3, #2
 80119ea:	e7c7      	b.n	801197c <_printf_common+0x58>
 80119ec:	2301      	movs	r3, #1
 80119ee:	4622      	mov	r2, r4
 80119f0:	4649      	mov	r1, r9
 80119f2:	4638      	mov	r0, r7
 80119f4:	47c0      	blx	r8
 80119f6:	3001      	adds	r0, #1
 80119f8:	d0e6      	beq.n	80119c8 <_printf_common+0xa4>
 80119fa:	3601      	adds	r6, #1
 80119fc:	e7d9      	b.n	80119b2 <_printf_common+0x8e>
	...

08011a00 <_printf_i>:
 8011a00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011a04:	7e0f      	ldrb	r7, [r1, #24]
 8011a06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011a08:	2f78      	cmp	r7, #120	; 0x78
 8011a0a:	4691      	mov	r9, r2
 8011a0c:	4680      	mov	r8, r0
 8011a0e:	460c      	mov	r4, r1
 8011a10:	469a      	mov	sl, r3
 8011a12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011a16:	d807      	bhi.n	8011a28 <_printf_i+0x28>
 8011a18:	2f62      	cmp	r7, #98	; 0x62
 8011a1a:	d80a      	bhi.n	8011a32 <_printf_i+0x32>
 8011a1c:	2f00      	cmp	r7, #0
 8011a1e:	f000 80d8 	beq.w	8011bd2 <_printf_i+0x1d2>
 8011a22:	2f58      	cmp	r7, #88	; 0x58
 8011a24:	f000 80a3 	beq.w	8011b6e <_printf_i+0x16e>
 8011a28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011a2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011a30:	e03a      	b.n	8011aa8 <_printf_i+0xa8>
 8011a32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011a36:	2b15      	cmp	r3, #21
 8011a38:	d8f6      	bhi.n	8011a28 <_printf_i+0x28>
 8011a3a:	a101      	add	r1, pc, #4	; (adr r1, 8011a40 <_printf_i+0x40>)
 8011a3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011a40:	08011a99 	.word	0x08011a99
 8011a44:	08011aad 	.word	0x08011aad
 8011a48:	08011a29 	.word	0x08011a29
 8011a4c:	08011a29 	.word	0x08011a29
 8011a50:	08011a29 	.word	0x08011a29
 8011a54:	08011a29 	.word	0x08011a29
 8011a58:	08011aad 	.word	0x08011aad
 8011a5c:	08011a29 	.word	0x08011a29
 8011a60:	08011a29 	.word	0x08011a29
 8011a64:	08011a29 	.word	0x08011a29
 8011a68:	08011a29 	.word	0x08011a29
 8011a6c:	08011bb9 	.word	0x08011bb9
 8011a70:	08011add 	.word	0x08011add
 8011a74:	08011b9b 	.word	0x08011b9b
 8011a78:	08011a29 	.word	0x08011a29
 8011a7c:	08011a29 	.word	0x08011a29
 8011a80:	08011bdb 	.word	0x08011bdb
 8011a84:	08011a29 	.word	0x08011a29
 8011a88:	08011add 	.word	0x08011add
 8011a8c:	08011a29 	.word	0x08011a29
 8011a90:	08011a29 	.word	0x08011a29
 8011a94:	08011ba3 	.word	0x08011ba3
 8011a98:	682b      	ldr	r3, [r5, #0]
 8011a9a:	1d1a      	adds	r2, r3, #4
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	602a      	str	r2, [r5, #0]
 8011aa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011aa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011aa8:	2301      	movs	r3, #1
 8011aaa:	e0a3      	b.n	8011bf4 <_printf_i+0x1f4>
 8011aac:	6820      	ldr	r0, [r4, #0]
 8011aae:	6829      	ldr	r1, [r5, #0]
 8011ab0:	0606      	lsls	r6, r0, #24
 8011ab2:	f101 0304 	add.w	r3, r1, #4
 8011ab6:	d50a      	bpl.n	8011ace <_printf_i+0xce>
 8011ab8:	680e      	ldr	r6, [r1, #0]
 8011aba:	602b      	str	r3, [r5, #0]
 8011abc:	2e00      	cmp	r6, #0
 8011abe:	da03      	bge.n	8011ac8 <_printf_i+0xc8>
 8011ac0:	232d      	movs	r3, #45	; 0x2d
 8011ac2:	4276      	negs	r6, r6
 8011ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ac8:	485e      	ldr	r0, [pc, #376]	; (8011c44 <_printf_i+0x244>)
 8011aca:	230a      	movs	r3, #10
 8011acc:	e019      	b.n	8011b02 <_printf_i+0x102>
 8011ace:	680e      	ldr	r6, [r1, #0]
 8011ad0:	602b      	str	r3, [r5, #0]
 8011ad2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011ad6:	bf18      	it	ne
 8011ad8:	b236      	sxthne	r6, r6
 8011ada:	e7ef      	b.n	8011abc <_printf_i+0xbc>
 8011adc:	682b      	ldr	r3, [r5, #0]
 8011ade:	6820      	ldr	r0, [r4, #0]
 8011ae0:	1d19      	adds	r1, r3, #4
 8011ae2:	6029      	str	r1, [r5, #0]
 8011ae4:	0601      	lsls	r1, r0, #24
 8011ae6:	d501      	bpl.n	8011aec <_printf_i+0xec>
 8011ae8:	681e      	ldr	r6, [r3, #0]
 8011aea:	e002      	b.n	8011af2 <_printf_i+0xf2>
 8011aec:	0646      	lsls	r6, r0, #25
 8011aee:	d5fb      	bpl.n	8011ae8 <_printf_i+0xe8>
 8011af0:	881e      	ldrh	r6, [r3, #0]
 8011af2:	4854      	ldr	r0, [pc, #336]	; (8011c44 <_printf_i+0x244>)
 8011af4:	2f6f      	cmp	r7, #111	; 0x6f
 8011af6:	bf0c      	ite	eq
 8011af8:	2308      	moveq	r3, #8
 8011afa:	230a      	movne	r3, #10
 8011afc:	2100      	movs	r1, #0
 8011afe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011b02:	6865      	ldr	r5, [r4, #4]
 8011b04:	60a5      	str	r5, [r4, #8]
 8011b06:	2d00      	cmp	r5, #0
 8011b08:	bfa2      	ittt	ge
 8011b0a:	6821      	ldrge	r1, [r4, #0]
 8011b0c:	f021 0104 	bicge.w	r1, r1, #4
 8011b10:	6021      	strge	r1, [r4, #0]
 8011b12:	b90e      	cbnz	r6, 8011b18 <_printf_i+0x118>
 8011b14:	2d00      	cmp	r5, #0
 8011b16:	d04d      	beq.n	8011bb4 <_printf_i+0x1b4>
 8011b18:	4615      	mov	r5, r2
 8011b1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8011b1e:	fb03 6711 	mls	r7, r3, r1, r6
 8011b22:	5dc7      	ldrb	r7, [r0, r7]
 8011b24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011b28:	4637      	mov	r7, r6
 8011b2a:	42bb      	cmp	r3, r7
 8011b2c:	460e      	mov	r6, r1
 8011b2e:	d9f4      	bls.n	8011b1a <_printf_i+0x11a>
 8011b30:	2b08      	cmp	r3, #8
 8011b32:	d10b      	bne.n	8011b4c <_printf_i+0x14c>
 8011b34:	6823      	ldr	r3, [r4, #0]
 8011b36:	07de      	lsls	r6, r3, #31
 8011b38:	d508      	bpl.n	8011b4c <_printf_i+0x14c>
 8011b3a:	6923      	ldr	r3, [r4, #16]
 8011b3c:	6861      	ldr	r1, [r4, #4]
 8011b3e:	4299      	cmp	r1, r3
 8011b40:	bfde      	ittt	le
 8011b42:	2330      	movle	r3, #48	; 0x30
 8011b44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011b48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011b4c:	1b52      	subs	r2, r2, r5
 8011b4e:	6122      	str	r2, [r4, #16]
 8011b50:	f8cd a000 	str.w	sl, [sp]
 8011b54:	464b      	mov	r3, r9
 8011b56:	aa03      	add	r2, sp, #12
 8011b58:	4621      	mov	r1, r4
 8011b5a:	4640      	mov	r0, r8
 8011b5c:	f7ff fee2 	bl	8011924 <_printf_common>
 8011b60:	3001      	adds	r0, #1
 8011b62:	d14c      	bne.n	8011bfe <_printf_i+0x1fe>
 8011b64:	f04f 30ff 	mov.w	r0, #4294967295
 8011b68:	b004      	add	sp, #16
 8011b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b6e:	4835      	ldr	r0, [pc, #212]	; (8011c44 <_printf_i+0x244>)
 8011b70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011b74:	6829      	ldr	r1, [r5, #0]
 8011b76:	6823      	ldr	r3, [r4, #0]
 8011b78:	f851 6b04 	ldr.w	r6, [r1], #4
 8011b7c:	6029      	str	r1, [r5, #0]
 8011b7e:	061d      	lsls	r5, r3, #24
 8011b80:	d514      	bpl.n	8011bac <_printf_i+0x1ac>
 8011b82:	07df      	lsls	r7, r3, #31
 8011b84:	bf44      	itt	mi
 8011b86:	f043 0320 	orrmi.w	r3, r3, #32
 8011b8a:	6023      	strmi	r3, [r4, #0]
 8011b8c:	b91e      	cbnz	r6, 8011b96 <_printf_i+0x196>
 8011b8e:	6823      	ldr	r3, [r4, #0]
 8011b90:	f023 0320 	bic.w	r3, r3, #32
 8011b94:	6023      	str	r3, [r4, #0]
 8011b96:	2310      	movs	r3, #16
 8011b98:	e7b0      	b.n	8011afc <_printf_i+0xfc>
 8011b9a:	6823      	ldr	r3, [r4, #0]
 8011b9c:	f043 0320 	orr.w	r3, r3, #32
 8011ba0:	6023      	str	r3, [r4, #0]
 8011ba2:	2378      	movs	r3, #120	; 0x78
 8011ba4:	4828      	ldr	r0, [pc, #160]	; (8011c48 <_printf_i+0x248>)
 8011ba6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011baa:	e7e3      	b.n	8011b74 <_printf_i+0x174>
 8011bac:	0659      	lsls	r1, r3, #25
 8011bae:	bf48      	it	mi
 8011bb0:	b2b6      	uxthmi	r6, r6
 8011bb2:	e7e6      	b.n	8011b82 <_printf_i+0x182>
 8011bb4:	4615      	mov	r5, r2
 8011bb6:	e7bb      	b.n	8011b30 <_printf_i+0x130>
 8011bb8:	682b      	ldr	r3, [r5, #0]
 8011bba:	6826      	ldr	r6, [r4, #0]
 8011bbc:	6961      	ldr	r1, [r4, #20]
 8011bbe:	1d18      	adds	r0, r3, #4
 8011bc0:	6028      	str	r0, [r5, #0]
 8011bc2:	0635      	lsls	r5, r6, #24
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	d501      	bpl.n	8011bcc <_printf_i+0x1cc>
 8011bc8:	6019      	str	r1, [r3, #0]
 8011bca:	e002      	b.n	8011bd2 <_printf_i+0x1d2>
 8011bcc:	0670      	lsls	r0, r6, #25
 8011bce:	d5fb      	bpl.n	8011bc8 <_printf_i+0x1c8>
 8011bd0:	8019      	strh	r1, [r3, #0]
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	6123      	str	r3, [r4, #16]
 8011bd6:	4615      	mov	r5, r2
 8011bd8:	e7ba      	b.n	8011b50 <_printf_i+0x150>
 8011bda:	682b      	ldr	r3, [r5, #0]
 8011bdc:	1d1a      	adds	r2, r3, #4
 8011bde:	602a      	str	r2, [r5, #0]
 8011be0:	681d      	ldr	r5, [r3, #0]
 8011be2:	6862      	ldr	r2, [r4, #4]
 8011be4:	2100      	movs	r1, #0
 8011be6:	4628      	mov	r0, r5
 8011be8:	f7ee fb02 	bl	80001f0 <memchr>
 8011bec:	b108      	cbz	r0, 8011bf2 <_printf_i+0x1f2>
 8011bee:	1b40      	subs	r0, r0, r5
 8011bf0:	6060      	str	r0, [r4, #4]
 8011bf2:	6863      	ldr	r3, [r4, #4]
 8011bf4:	6123      	str	r3, [r4, #16]
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011bfc:	e7a8      	b.n	8011b50 <_printf_i+0x150>
 8011bfe:	6923      	ldr	r3, [r4, #16]
 8011c00:	462a      	mov	r2, r5
 8011c02:	4649      	mov	r1, r9
 8011c04:	4640      	mov	r0, r8
 8011c06:	47d0      	blx	sl
 8011c08:	3001      	adds	r0, #1
 8011c0a:	d0ab      	beq.n	8011b64 <_printf_i+0x164>
 8011c0c:	6823      	ldr	r3, [r4, #0]
 8011c0e:	079b      	lsls	r3, r3, #30
 8011c10:	d413      	bmi.n	8011c3a <_printf_i+0x23a>
 8011c12:	68e0      	ldr	r0, [r4, #12]
 8011c14:	9b03      	ldr	r3, [sp, #12]
 8011c16:	4298      	cmp	r0, r3
 8011c18:	bfb8      	it	lt
 8011c1a:	4618      	movlt	r0, r3
 8011c1c:	e7a4      	b.n	8011b68 <_printf_i+0x168>
 8011c1e:	2301      	movs	r3, #1
 8011c20:	4632      	mov	r2, r6
 8011c22:	4649      	mov	r1, r9
 8011c24:	4640      	mov	r0, r8
 8011c26:	47d0      	blx	sl
 8011c28:	3001      	adds	r0, #1
 8011c2a:	d09b      	beq.n	8011b64 <_printf_i+0x164>
 8011c2c:	3501      	adds	r5, #1
 8011c2e:	68e3      	ldr	r3, [r4, #12]
 8011c30:	9903      	ldr	r1, [sp, #12]
 8011c32:	1a5b      	subs	r3, r3, r1
 8011c34:	42ab      	cmp	r3, r5
 8011c36:	dcf2      	bgt.n	8011c1e <_printf_i+0x21e>
 8011c38:	e7eb      	b.n	8011c12 <_printf_i+0x212>
 8011c3a:	2500      	movs	r5, #0
 8011c3c:	f104 0619 	add.w	r6, r4, #25
 8011c40:	e7f5      	b.n	8011c2e <_printf_i+0x22e>
 8011c42:	bf00      	nop
 8011c44:	08012967 	.word	0x08012967
 8011c48:	08012978 	.word	0x08012978

08011c4c <_read_r>:
 8011c4c:	b538      	push	{r3, r4, r5, lr}
 8011c4e:	4d07      	ldr	r5, [pc, #28]	; (8011c6c <_read_r+0x20>)
 8011c50:	4604      	mov	r4, r0
 8011c52:	4608      	mov	r0, r1
 8011c54:	4611      	mov	r1, r2
 8011c56:	2200      	movs	r2, #0
 8011c58:	602a      	str	r2, [r5, #0]
 8011c5a:	461a      	mov	r2, r3
 8011c5c:	f7f0 fa44 	bl	80020e8 <_read>
 8011c60:	1c43      	adds	r3, r0, #1
 8011c62:	d102      	bne.n	8011c6a <_read_r+0x1e>
 8011c64:	682b      	ldr	r3, [r5, #0]
 8011c66:	b103      	cbz	r3, 8011c6a <_read_r+0x1e>
 8011c68:	6023      	str	r3, [r4, #0]
 8011c6a:	bd38      	pop	{r3, r4, r5, pc}
 8011c6c:	2000bd58 	.word	0x2000bd58

08011c70 <__swbuf_r>:
 8011c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c72:	460e      	mov	r6, r1
 8011c74:	4614      	mov	r4, r2
 8011c76:	4605      	mov	r5, r0
 8011c78:	b118      	cbz	r0, 8011c82 <__swbuf_r+0x12>
 8011c7a:	6983      	ldr	r3, [r0, #24]
 8011c7c:	b90b      	cbnz	r3, 8011c82 <__swbuf_r+0x12>
 8011c7e:	f7fe ff5b 	bl	8010b38 <__sinit>
 8011c82:	4b21      	ldr	r3, [pc, #132]	; (8011d08 <__swbuf_r+0x98>)
 8011c84:	429c      	cmp	r4, r3
 8011c86:	d12b      	bne.n	8011ce0 <__swbuf_r+0x70>
 8011c88:	686c      	ldr	r4, [r5, #4]
 8011c8a:	69a3      	ldr	r3, [r4, #24]
 8011c8c:	60a3      	str	r3, [r4, #8]
 8011c8e:	89a3      	ldrh	r3, [r4, #12]
 8011c90:	071a      	lsls	r2, r3, #28
 8011c92:	d52f      	bpl.n	8011cf4 <__swbuf_r+0x84>
 8011c94:	6923      	ldr	r3, [r4, #16]
 8011c96:	b36b      	cbz	r3, 8011cf4 <__swbuf_r+0x84>
 8011c98:	6923      	ldr	r3, [r4, #16]
 8011c9a:	6820      	ldr	r0, [r4, #0]
 8011c9c:	1ac0      	subs	r0, r0, r3
 8011c9e:	6963      	ldr	r3, [r4, #20]
 8011ca0:	b2f6      	uxtb	r6, r6
 8011ca2:	4283      	cmp	r3, r0
 8011ca4:	4637      	mov	r7, r6
 8011ca6:	dc04      	bgt.n	8011cb2 <__swbuf_r+0x42>
 8011ca8:	4621      	mov	r1, r4
 8011caa:	4628      	mov	r0, r5
 8011cac:	f7ff fac4 	bl	8011238 <_fflush_r>
 8011cb0:	bb30      	cbnz	r0, 8011d00 <__swbuf_r+0x90>
 8011cb2:	68a3      	ldr	r3, [r4, #8]
 8011cb4:	3b01      	subs	r3, #1
 8011cb6:	60a3      	str	r3, [r4, #8]
 8011cb8:	6823      	ldr	r3, [r4, #0]
 8011cba:	1c5a      	adds	r2, r3, #1
 8011cbc:	6022      	str	r2, [r4, #0]
 8011cbe:	701e      	strb	r6, [r3, #0]
 8011cc0:	6963      	ldr	r3, [r4, #20]
 8011cc2:	3001      	adds	r0, #1
 8011cc4:	4283      	cmp	r3, r0
 8011cc6:	d004      	beq.n	8011cd2 <__swbuf_r+0x62>
 8011cc8:	89a3      	ldrh	r3, [r4, #12]
 8011cca:	07db      	lsls	r3, r3, #31
 8011ccc:	d506      	bpl.n	8011cdc <__swbuf_r+0x6c>
 8011cce:	2e0a      	cmp	r6, #10
 8011cd0:	d104      	bne.n	8011cdc <__swbuf_r+0x6c>
 8011cd2:	4621      	mov	r1, r4
 8011cd4:	4628      	mov	r0, r5
 8011cd6:	f7ff faaf 	bl	8011238 <_fflush_r>
 8011cda:	b988      	cbnz	r0, 8011d00 <__swbuf_r+0x90>
 8011cdc:	4638      	mov	r0, r7
 8011cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ce0:	4b0a      	ldr	r3, [pc, #40]	; (8011d0c <__swbuf_r+0x9c>)
 8011ce2:	429c      	cmp	r4, r3
 8011ce4:	d101      	bne.n	8011cea <__swbuf_r+0x7a>
 8011ce6:	68ac      	ldr	r4, [r5, #8]
 8011ce8:	e7cf      	b.n	8011c8a <__swbuf_r+0x1a>
 8011cea:	4b09      	ldr	r3, [pc, #36]	; (8011d10 <__swbuf_r+0xa0>)
 8011cec:	429c      	cmp	r4, r3
 8011cee:	bf08      	it	eq
 8011cf0:	68ec      	ldreq	r4, [r5, #12]
 8011cf2:	e7ca      	b.n	8011c8a <__swbuf_r+0x1a>
 8011cf4:	4621      	mov	r1, r4
 8011cf6:	4628      	mov	r0, r5
 8011cf8:	f000 f80c 	bl	8011d14 <__swsetup_r>
 8011cfc:	2800      	cmp	r0, #0
 8011cfe:	d0cb      	beq.n	8011c98 <__swbuf_r+0x28>
 8011d00:	f04f 37ff 	mov.w	r7, #4294967295
 8011d04:	e7ea      	b.n	8011cdc <__swbuf_r+0x6c>
 8011d06:	bf00      	nop
 8011d08:	08012864 	.word	0x08012864
 8011d0c:	08012884 	.word	0x08012884
 8011d10:	08012844 	.word	0x08012844

08011d14 <__swsetup_r>:
 8011d14:	4b32      	ldr	r3, [pc, #200]	; (8011de0 <__swsetup_r+0xcc>)
 8011d16:	b570      	push	{r4, r5, r6, lr}
 8011d18:	681d      	ldr	r5, [r3, #0]
 8011d1a:	4606      	mov	r6, r0
 8011d1c:	460c      	mov	r4, r1
 8011d1e:	b125      	cbz	r5, 8011d2a <__swsetup_r+0x16>
 8011d20:	69ab      	ldr	r3, [r5, #24]
 8011d22:	b913      	cbnz	r3, 8011d2a <__swsetup_r+0x16>
 8011d24:	4628      	mov	r0, r5
 8011d26:	f7fe ff07 	bl	8010b38 <__sinit>
 8011d2a:	4b2e      	ldr	r3, [pc, #184]	; (8011de4 <__swsetup_r+0xd0>)
 8011d2c:	429c      	cmp	r4, r3
 8011d2e:	d10f      	bne.n	8011d50 <__swsetup_r+0x3c>
 8011d30:	686c      	ldr	r4, [r5, #4]
 8011d32:	89a3      	ldrh	r3, [r4, #12]
 8011d34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011d38:	0719      	lsls	r1, r3, #28
 8011d3a:	d42c      	bmi.n	8011d96 <__swsetup_r+0x82>
 8011d3c:	06dd      	lsls	r5, r3, #27
 8011d3e:	d411      	bmi.n	8011d64 <__swsetup_r+0x50>
 8011d40:	2309      	movs	r3, #9
 8011d42:	6033      	str	r3, [r6, #0]
 8011d44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011d48:	81a3      	strh	r3, [r4, #12]
 8011d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8011d4e:	e03e      	b.n	8011dce <__swsetup_r+0xba>
 8011d50:	4b25      	ldr	r3, [pc, #148]	; (8011de8 <__swsetup_r+0xd4>)
 8011d52:	429c      	cmp	r4, r3
 8011d54:	d101      	bne.n	8011d5a <__swsetup_r+0x46>
 8011d56:	68ac      	ldr	r4, [r5, #8]
 8011d58:	e7eb      	b.n	8011d32 <__swsetup_r+0x1e>
 8011d5a:	4b24      	ldr	r3, [pc, #144]	; (8011dec <__swsetup_r+0xd8>)
 8011d5c:	429c      	cmp	r4, r3
 8011d5e:	bf08      	it	eq
 8011d60:	68ec      	ldreq	r4, [r5, #12]
 8011d62:	e7e6      	b.n	8011d32 <__swsetup_r+0x1e>
 8011d64:	0758      	lsls	r0, r3, #29
 8011d66:	d512      	bpl.n	8011d8e <__swsetup_r+0x7a>
 8011d68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d6a:	b141      	cbz	r1, 8011d7e <__swsetup_r+0x6a>
 8011d6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011d70:	4299      	cmp	r1, r3
 8011d72:	d002      	beq.n	8011d7a <__swsetup_r+0x66>
 8011d74:	4630      	mov	r0, r6
 8011d76:	f7ff fad3 	bl	8011320 <_free_r>
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	6363      	str	r3, [r4, #52]	; 0x34
 8011d7e:	89a3      	ldrh	r3, [r4, #12]
 8011d80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011d84:	81a3      	strh	r3, [r4, #12]
 8011d86:	2300      	movs	r3, #0
 8011d88:	6063      	str	r3, [r4, #4]
 8011d8a:	6923      	ldr	r3, [r4, #16]
 8011d8c:	6023      	str	r3, [r4, #0]
 8011d8e:	89a3      	ldrh	r3, [r4, #12]
 8011d90:	f043 0308 	orr.w	r3, r3, #8
 8011d94:	81a3      	strh	r3, [r4, #12]
 8011d96:	6923      	ldr	r3, [r4, #16]
 8011d98:	b94b      	cbnz	r3, 8011dae <__swsetup_r+0x9a>
 8011d9a:	89a3      	ldrh	r3, [r4, #12]
 8011d9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011da4:	d003      	beq.n	8011dae <__swsetup_r+0x9a>
 8011da6:	4621      	mov	r1, r4
 8011da8:	4630      	mov	r0, r6
 8011daa:	f000 f84d 	bl	8011e48 <__smakebuf_r>
 8011dae:	89a0      	ldrh	r0, [r4, #12]
 8011db0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011db4:	f010 0301 	ands.w	r3, r0, #1
 8011db8:	d00a      	beq.n	8011dd0 <__swsetup_r+0xbc>
 8011dba:	2300      	movs	r3, #0
 8011dbc:	60a3      	str	r3, [r4, #8]
 8011dbe:	6963      	ldr	r3, [r4, #20]
 8011dc0:	425b      	negs	r3, r3
 8011dc2:	61a3      	str	r3, [r4, #24]
 8011dc4:	6923      	ldr	r3, [r4, #16]
 8011dc6:	b943      	cbnz	r3, 8011dda <__swsetup_r+0xc6>
 8011dc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011dcc:	d1ba      	bne.n	8011d44 <__swsetup_r+0x30>
 8011dce:	bd70      	pop	{r4, r5, r6, pc}
 8011dd0:	0781      	lsls	r1, r0, #30
 8011dd2:	bf58      	it	pl
 8011dd4:	6963      	ldrpl	r3, [r4, #20]
 8011dd6:	60a3      	str	r3, [r4, #8]
 8011dd8:	e7f4      	b.n	8011dc4 <__swsetup_r+0xb0>
 8011dda:	2000      	movs	r0, #0
 8011ddc:	e7f7      	b.n	8011dce <__swsetup_r+0xba>
 8011dde:	bf00      	nop
 8011de0:	20000118 	.word	0x20000118
 8011de4:	08012864 	.word	0x08012864
 8011de8:	08012884 	.word	0x08012884
 8011dec:	08012844 	.word	0x08012844

08011df0 <abort>:
 8011df0:	b508      	push	{r3, lr}
 8011df2:	2006      	movs	r0, #6
 8011df4:	f000 f8da 	bl	8011fac <raise>
 8011df8:	2001      	movs	r0, #1
 8011dfa:	f7f0 f96b 	bl	80020d4 <_exit>

08011dfe <__swhatbuf_r>:
 8011dfe:	b570      	push	{r4, r5, r6, lr}
 8011e00:	460e      	mov	r6, r1
 8011e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e06:	2900      	cmp	r1, #0
 8011e08:	b096      	sub	sp, #88	; 0x58
 8011e0a:	4614      	mov	r4, r2
 8011e0c:	461d      	mov	r5, r3
 8011e0e:	da08      	bge.n	8011e22 <__swhatbuf_r+0x24>
 8011e10:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011e14:	2200      	movs	r2, #0
 8011e16:	602a      	str	r2, [r5, #0]
 8011e18:	061a      	lsls	r2, r3, #24
 8011e1a:	d410      	bmi.n	8011e3e <__swhatbuf_r+0x40>
 8011e1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011e20:	e00e      	b.n	8011e40 <__swhatbuf_r+0x42>
 8011e22:	466a      	mov	r2, sp
 8011e24:	f000 f8de 	bl	8011fe4 <_fstat_r>
 8011e28:	2800      	cmp	r0, #0
 8011e2a:	dbf1      	blt.n	8011e10 <__swhatbuf_r+0x12>
 8011e2c:	9a01      	ldr	r2, [sp, #4]
 8011e2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011e32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011e36:	425a      	negs	r2, r3
 8011e38:	415a      	adcs	r2, r3
 8011e3a:	602a      	str	r2, [r5, #0]
 8011e3c:	e7ee      	b.n	8011e1c <__swhatbuf_r+0x1e>
 8011e3e:	2340      	movs	r3, #64	; 0x40
 8011e40:	2000      	movs	r0, #0
 8011e42:	6023      	str	r3, [r4, #0]
 8011e44:	b016      	add	sp, #88	; 0x58
 8011e46:	bd70      	pop	{r4, r5, r6, pc}

08011e48 <__smakebuf_r>:
 8011e48:	898b      	ldrh	r3, [r1, #12]
 8011e4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011e4c:	079d      	lsls	r5, r3, #30
 8011e4e:	4606      	mov	r6, r0
 8011e50:	460c      	mov	r4, r1
 8011e52:	d507      	bpl.n	8011e64 <__smakebuf_r+0x1c>
 8011e54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011e58:	6023      	str	r3, [r4, #0]
 8011e5a:	6123      	str	r3, [r4, #16]
 8011e5c:	2301      	movs	r3, #1
 8011e5e:	6163      	str	r3, [r4, #20]
 8011e60:	b002      	add	sp, #8
 8011e62:	bd70      	pop	{r4, r5, r6, pc}
 8011e64:	ab01      	add	r3, sp, #4
 8011e66:	466a      	mov	r2, sp
 8011e68:	f7ff ffc9 	bl	8011dfe <__swhatbuf_r>
 8011e6c:	9900      	ldr	r1, [sp, #0]
 8011e6e:	4605      	mov	r5, r0
 8011e70:	4630      	mov	r0, r6
 8011e72:	f7fe ff5d 	bl	8010d30 <_malloc_r>
 8011e76:	b948      	cbnz	r0, 8011e8c <__smakebuf_r+0x44>
 8011e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e7c:	059a      	lsls	r2, r3, #22
 8011e7e:	d4ef      	bmi.n	8011e60 <__smakebuf_r+0x18>
 8011e80:	f023 0303 	bic.w	r3, r3, #3
 8011e84:	f043 0302 	orr.w	r3, r3, #2
 8011e88:	81a3      	strh	r3, [r4, #12]
 8011e8a:	e7e3      	b.n	8011e54 <__smakebuf_r+0xc>
 8011e8c:	4b0d      	ldr	r3, [pc, #52]	; (8011ec4 <__smakebuf_r+0x7c>)
 8011e8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011e90:	89a3      	ldrh	r3, [r4, #12]
 8011e92:	6020      	str	r0, [r4, #0]
 8011e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e98:	81a3      	strh	r3, [r4, #12]
 8011e9a:	9b00      	ldr	r3, [sp, #0]
 8011e9c:	6163      	str	r3, [r4, #20]
 8011e9e:	9b01      	ldr	r3, [sp, #4]
 8011ea0:	6120      	str	r0, [r4, #16]
 8011ea2:	b15b      	cbz	r3, 8011ebc <__smakebuf_r+0x74>
 8011ea4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ea8:	4630      	mov	r0, r6
 8011eaa:	f000 f8ad 	bl	8012008 <_isatty_r>
 8011eae:	b128      	cbz	r0, 8011ebc <__smakebuf_r+0x74>
 8011eb0:	89a3      	ldrh	r3, [r4, #12]
 8011eb2:	f023 0303 	bic.w	r3, r3, #3
 8011eb6:	f043 0301 	orr.w	r3, r3, #1
 8011eba:	81a3      	strh	r3, [r4, #12]
 8011ebc:	89a0      	ldrh	r0, [r4, #12]
 8011ebe:	4305      	orrs	r5, r0
 8011ec0:	81a5      	strh	r5, [r4, #12]
 8011ec2:	e7cd      	b.n	8011e60 <__smakebuf_r+0x18>
 8011ec4:	08010ad1 	.word	0x08010ad1

08011ec8 <memmove>:
 8011ec8:	4288      	cmp	r0, r1
 8011eca:	b510      	push	{r4, lr}
 8011ecc:	eb01 0402 	add.w	r4, r1, r2
 8011ed0:	d902      	bls.n	8011ed8 <memmove+0x10>
 8011ed2:	4284      	cmp	r4, r0
 8011ed4:	4623      	mov	r3, r4
 8011ed6:	d807      	bhi.n	8011ee8 <memmove+0x20>
 8011ed8:	1e43      	subs	r3, r0, #1
 8011eda:	42a1      	cmp	r1, r4
 8011edc:	d008      	beq.n	8011ef0 <memmove+0x28>
 8011ede:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011ee2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011ee6:	e7f8      	b.n	8011eda <memmove+0x12>
 8011ee8:	4402      	add	r2, r0
 8011eea:	4601      	mov	r1, r0
 8011eec:	428a      	cmp	r2, r1
 8011eee:	d100      	bne.n	8011ef2 <memmove+0x2a>
 8011ef0:	bd10      	pop	{r4, pc}
 8011ef2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011ef6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011efa:	e7f7      	b.n	8011eec <memmove+0x24>

08011efc <_realloc_r>:
 8011efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f00:	4680      	mov	r8, r0
 8011f02:	4614      	mov	r4, r2
 8011f04:	460e      	mov	r6, r1
 8011f06:	b921      	cbnz	r1, 8011f12 <_realloc_r+0x16>
 8011f08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f0c:	4611      	mov	r1, r2
 8011f0e:	f7fe bf0f 	b.w	8010d30 <_malloc_r>
 8011f12:	b92a      	cbnz	r2, 8011f20 <_realloc_r+0x24>
 8011f14:	f7ff fa04 	bl	8011320 <_free_r>
 8011f18:	4625      	mov	r5, r4
 8011f1a:	4628      	mov	r0, r5
 8011f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f20:	f000 f882 	bl	8012028 <_malloc_usable_size_r>
 8011f24:	4284      	cmp	r4, r0
 8011f26:	4607      	mov	r7, r0
 8011f28:	d802      	bhi.n	8011f30 <_realloc_r+0x34>
 8011f2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011f2e:	d812      	bhi.n	8011f56 <_realloc_r+0x5a>
 8011f30:	4621      	mov	r1, r4
 8011f32:	4640      	mov	r0, r8
 8011f34:	f7fe fefc 	bl	8010d30 <_malloc_r>
 8011f38:	4605      	mov	r5, r0
 8011f3a:	2800      	cmp	r0, #0
 8011f3c:	d0ed      	beq.n	8011f1a <_realloc_r+0x1e>
 8011f3e:	42bc      	cmp	r4, r7
 8011f40:	4622      	mov	r2, r4
 8011f42:	4631      	mov	r1, r6
 8011f44:	bf28      	it	cs
 8011f46:	463a      	movcs	r2, r7
 8011f48:	f7fe febb 	bl	8010cc2 <memcpy>
 8011f4c:	4631      	mov	r1, r6
 8011f4e:	4640      	mov	r0, r8
 8011f50:	f7ff f9e6 	bl	8011320 <_free_r>
 8011f54:	e7e1      	b.n	8011f1a <_realloc_r+0x1e>
 8011f56:	4635      	mov	r5, r6
 8011f58:	e7df      	b.n	8011f1a <_realloc_r+0x1e>

08011f5a <_raise_r>:
 8011f5a:	291f      	cmp	r1, #31
 8011f5c:	b538      	push	{r3, r4, r5, lr}
 8011f5e:	4604      	mov	r4, r0
 8011f60:	460d      	mov	r5, r1
 8011f62:	d904      	bls.n	8011f6e <_raise_r+0x14>
 8011f64:	2316      	movs	r3, #22
 8011f66:	6003      	str	r3, [r0, #0]
 8011f68:	f04f 30ff 	mov.w	r0, #4294967295
 8011f6c:	bd38      	pop	{r3, r4, r5, pc}
 8011f6e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011f70:	b112      	cbz	r2, 8011f78 <_raise_r+0x1e>
 8011f72:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011f76:	b94b      	cbnz	r3, 8011f8c <_raise_r+0x32>
 8011f78:	4620      	mov	r0, r4
 8011f7a:	f000 f831 	bl	8011fe0 <_getpid_r>
 8011f7e:	462a      	mov	r2, r5
 8011f80:	4601      	mov	r1, r0
 8011f82:	4620      	mov	r0, r4
 8011f84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f88:	f000 b818 	b.w	8011fbc <_kill_r>
 8011f8c:	2b01      	cmp	r3, #1
 8011f8e:	d00a      	beq.n	8011fa6 <_raise_r+0x4c>
 8011f90:	1c59      	adds	r1, r3, #1
 8011f92:	d103      	bne.n	8011f9c <_raise_r+0x42>
 8011f94:	2316      	movs	r3, #22
 8011f96:	6003      	str	r3, [r0, #0]
 8011f98:	2001      	movs	r0, #1
 8011f9a:	e7e7      	b.n	8011f6c <_raise_r+0x12>
 8011f9c:	2400      	movs	r4, #0
 8011f9e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011fa2:	4628      	mov	r0, r5
 8011fa4:	4798      	blx	r3
 8011fa6:	2000      	movs	r0, #0
 8011fa8:	e7e0      	b.n	8011f6c <_raise_r+0x12>
	...

08011fac <raise>:
 8011fac:	4b02      	ldr	r3, [pc, #8]	; (8011fb8 <raise+0xc>)
 8011fae:	4601      	mov	r1, r0
 8011fb0:	6818      	ldr	r0, [r3, #0]
 8011fb2:	f7ff bfd2 	b.w	8011f5a <_raise_r>
 8011fb6:	bf00      	nop
 8011fb8:	20000118 	.word	0x20000118

08011fbc <_kill_r>:
 8011fbc:	b538      	push	{r3, r4, r5, lr}
 8011fbe:	4d07      	ldr	r5, [pc, #28]	; (8011fdc <_kill_r+0x20>)
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	4604      	mov	r4, r0
 8011fc4:	4608      	mov	r0, r1
 8011fc6:	4611      	mov	r1, r2
 8011fc8:	602b      	str	r3, [r5, #0]
 8011fca:	f7f0 f873 	bl	80020b4 <_kill>
 8011fce:	1c43      	adds	r3, r0, #1
 8011fd0:	d102      	bne.n	8011fd8 <_kill_r+0x1c>
 8011fd2:	682b      	ldr	r3, [r5, #0]
 8011fd4:	b103      	cbz	r3, 8011fd8 <_kill_r+0x1c>
 8011fd6:	6023      	str	r3, [r4, #0]
 8011fd8:	bd38      	pop	{r3, r4, r5, pc}
 8011fda:	bf00      	nop
 8011fdc:	2000bd58 	.word	0x2000bd58

08011fe0 <_getpid_r>:
 8011fe0:	f7f0 b860 	b.w	80020a4 <_getpid>

08011fe4 <_fstat_r>:
 8011fe4:	b538      	push	{r3, r4, r5, lr}
 8011fe6:	4d07      	ldr	r5, [pc, #28]	; (8012004 <_fstat_r+0x20>)
 8011fe8:	2300      	movs	r3, #0
 8011fea:	4604      	mov	r4, r0
 8011fec:	4608      	mov	r0, r1
 8011fee:	4611      	mov	r1, r2
 8011ff0:	602b      	str	r3, [r5, #0]
 8011ff2:	f7f0 f8be 	bl	8002172 <_fstat>
 8011ff6:	1c43      	adds	r3, r0, #1
 8011ff8:	d102      	bne.n	8012000 <_fstat_r+0x1c>
 8011ffa:	682b      	ldr	r3, [r5, #0]
 8011ffc:	b103      	cbz	r3, 8012000 <_fstat_r+0x1c>
 8011ffe:	6023      	str	r3, [r4, #0]
 8012000:	bd38      	pop	{r3, r4, r5, pc}
 8012002:	bf00      	nop
 8012004:	2000bd58 	.word	0x2000bd58

08012008 <_isatty_r>:
 8012008:	b538      	push	{r3, r4, r5, lr}
 801200a:	4d06      	ldr	r5, [pc, #24]	; (8012024 <_isatty_r+0x1c>)
 801200c:	2300      	movs	r3, #0
 801200e:	4604      	mov	r4, r0
 8012010:	4608      	mov	r0, r1
 8012012:	602b      	str	r3, [r5, #0]
 8012014:	f7f0 f8bd 	bl	8002192 <_isatty>
 8012018:	1c43      	adds	r3, r0, #1
 801201a:	d102      	bne.n	8012022 <_isatty_r+0x1a>
 801201c:	682b      	ldr	r3, [r5, #0]
 801201e:	b103      	cbz	r3, 8012022 <_isatty_r+0x1a>
 8012020:	6023      	str	r3, [r4, #0]
 8012022:	bd38      	pop	{r3, r4, r5, pc}
 8012024:	2000bd58 	.word	0x2000bd58

08012028 <_malloc_usable_size_r>:
 8012028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801202c:	1f18      	subs	r0, r3, #4
 801202e:	2b00      	cmp	r3, #0
 8012030:	bfbc      	itt	lt
 8012032:	580b      	ldrlt	r3, [r1, r0]
 8012034:	18c0      	addlt	r0, r0, r3
 8012036:	4770      	bx	lr

08012038 <_init>:
 8012038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801203a:	bf00      	nop
 801203c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801203e:	bc08      	pop	{r3}
 8012040:	469e      	mov	lr, r3
 8012042:	4770      	bx	lr

08012044 <_fini>:
 8012044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012046:	bf00      	nop
 8012048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801204a:	bc08      	pop	{r3}
 801204c:	469e      	mov	lr, r3
 801204e:	4770      	bx	lr
